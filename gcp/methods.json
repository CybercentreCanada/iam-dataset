{
  "abusiveexperiencereport": {
    "description": "Views Abusive Experience Report data, and gets a list of sites that have a significant number of abusive experiences.",
    "methods": {
      "abusiveexperiencereport.sites.get": {
        "description": "Gets a site's Abusive Experience Report summary.",
        "flatPath": "v1/sites/{sitesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "abusiveexperiencereport.violatingSites.list": {
        "description": "Lists sites that are failing in the Abusive Experience Report.",
        "flatPath": "v1/violatingSites",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "violatingSites",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Abusive Experience Report API"
  },
  "acceleratedmobilepageurl": {
    "description": "Retrieves the list of AMP URLs (and equivalent AMP Cache URLs) for a given list of public URL(s).",
    "methods": {
      "acceleratedmobilepageurl.ampUrls.batchGet": {
        "description": "Returns AMP URL(s) and equivalent [AMP Cache URL(s)](/amp/cache/overview#amp-cache-url-format).",
        "flatPath": "v1/ampUrls:batchGet",
        "httpMethod": "POST",
        "method": "batchGet",
        "resourceType": "ampUrls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Accelerated Mobile Pages (AMP) URL API"
  },
  "accessapproval": {
    "description": "An API for controlling access to data by Google personnel.",
    "methods": {
      "accessapproval.folders.approvalRequests.approve": {
        "description": "Approves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.",
        "flatPath": "v1/folders/{foldersId}/approvalRequests/{approvalRequestsId}:approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.folders.approvalRequests.dismiss": {
        "description": "Dismisses a request. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It is equivalent in effect to ignoring the request altogether. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.",
        "flatPath": "v1/folders/{foldersId}/approvalRequests/{approvalRequestsId}:dismiss",
        "httpMethod": "POST",
        "method": "dismiss",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.folders.approvalRequests.get": {
        "description": "Gets an approval request. Returns NOT_FOUND if the request does not exist.",
        "flatPath": "v1/folders/{foldersId}/approvalRequests/{approvalRequestsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.folders.approvalRequests.list": {
        "description": "Lists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological.",
        "flatPath": "v1/folders/{foldersId}/approvalRequests",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.folders.deleteAccessApprovalSettings": {
        "description": "Deletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the project, folder, or organization, but only if all ancestors also have Access Approval disabled. If Access Approval is enabled at a higher level of the hierarchy, then Access Approval will still be enabled at this level as the settings are inherited.",
        "flatPath": "v1/folders/{foldersId}/accessApprovalSettings",
        "httpMethod": "DELETE",
        "method": "deleteAccessApprovalSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.folders.getAccessApprovalSettings": {
        "description": "Gets the settings associated with a project, folder, or organization.",
        "flatPath": "v1/folders/{foldersId}/accessApprovalSettings",
        "httpMethod": "GET",
        "method": "getAccessApprovalSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.folders.updateAccessApprovalSettings": {
        "description": "Updates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask.",
        "flatPath": "v1/folders/{foldersId}/accessApprovalSettings",
        "httpMethod": "PATCH",
        "method": "updateAccessApprovalSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.organizations.approvalRequests.approve": {
        "description": "Approves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.",
        "flatPath": "v1/organizations/{organizationsId}/approvalRequests/{approvalRequestsId}:approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.organizations.approvalRequests.dismiss": {
        "description": "Dismisses a request. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It is equivalent in effect to ignoring the request altogether. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.",
        "flatPath": "v1/organizations/{organizationsId}/approvalRequests/{approvalRequestsId}:dismiss",
        "httpMethod": "POST",
        "method": "dismiss",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.organizations.approvalRequests.get": {
        "description": "Gets an approval request. Returns NOT_FOUND if the request does not exist.",
        "flatPath": "v1/organizations/{organizationsId}/approvalRequests/{approvalRequestsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.organizations.approvalRequests.list": {
        "description": "Lists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological.",
        "flatPath": "v1/organizations/{organizationsId}/approvalRequests",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.organizations.deleteAccessApprovalSettings": {
        "description": "Deletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the project, folder, or organization, but only if all ancestors also have Access Approval disabled. If Access Approval is enabled at a higher level of the hierarchy, then Access Approval will still be enabled at this level as the settings are inherited.",
        "flatPath": "v1/organizations/{organizationsId}/accessApprovalSettings",
        "httpMethod": "DELETE",
        "method": "deleteAccessApprovalSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.organizations.getAccessApprovalSettings": {
        "description": "Gets the settings associated with a project, folder, or organization.",
        "flatPath": "v1/organizations/{organizationsId}/accessApprovalSettings",
        "httpMethod": "GET",
        "method": "getAccessApprovalSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.organizations.updateAccessApprovalSettings": {
        "description": "Updates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask.",
        "flatPath": "v1/organizations/{organizationsId}/accessApprovalSettings",
        "httpMethod": "PATCH",
        "method": "updateAccessApprovalSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.projects.approvalRequests.approve": {
        "description": "Approves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.",
        "flatPath": "v1/projects/{projectsId}/approvalRequests/{approvalRequestsId}:approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.projects.approvalRequests.dismiss": {
        "description": "Dismisses a request. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It is equivalent in effect to ignoring the request altogether. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.",
        "flatPath": "v1/projects/{projectsId}/approvalRequests/{approvalRequestsId}:dismiss",
        "httpMethod": "POST",
        "method": "dismiss",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.projects.approvalRequests.get": {
        "description": "Gets an approval request. Returns NOT_FOUND if the request does not exist.",
        "flatPath": "v1/projects/{projectsId}/approvalRequests/{approvalRequestsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.projects.approvalRequests.list": {
        "description": "Lists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological.",
        "flatPath": "v1/projects/{projectsId}/approvalRequests",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "approvalRequests",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.projects.deleteAccessApprovalSettings": {
        "description": "Deletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the project, folder, or organization, but only if all ancestors also have Access Approval disabled. If Access Approval is enabled at a higher level of the hierarchy, then Access Approval will still be enabled at this level as the settings are inherited.",
        "flatPath": "v1/projects/{projectsId}/accessApprovalSettings",
        "httpMethod": "DELETE",
        "method": "deleteAccessApprovalSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.projects.getAccessApprovalSettings": {
        "description": "Gets the settings associated with a project, folder, or organization.",
        "flatPath": "v1/projects/{projectsId}/accessApprovalSettings",
        "httpMethod": "GET",
        "method": "getAccessApprovalSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accessapproval.projects.updateAccessApprovalSettings": {
        "description": "Updates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask.",
        "flatPath": "v1/projects/{projectsId}/accessApprovalSettings",
        "httpMethod": "PATCH",
        "method": "updateAccessApprovalSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Access Approval API"
  },
  "accesscontextmanager": {
    "description": "An API for setting attribute based access control to requests to GCP services.",
    "methods": {
      "accesscontextmanager.accessPolicies.accessLevels.create": {
        "description": "Create an Access Level. The longrunning operation from this RPC will have a successful status once the Access Level has propagated to long-lasting storage. Access Levels containing errors will result in an error response for the first error encountered.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/accessLevels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "accessLevels",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.accessLevels.delete": {
        "description": "Delete an Access Level by resource name. The longrunning operation from this RPC will have a successful status once the Access Level has been removed from long-lasting storage.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/accessLevels/{accessLevelsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "accessLevels",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.accessLevels.get": {
        "description": "Get an Access Level by resource name.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/accessLevels/{accessLevelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accessLevels",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.accessLevels.list": {
        "description": "List all Access Levels for an access policy.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/accessLevels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accessLevels",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.accessLevels.patch": {
        "description": "Update an Access Level. The longrunning operation from this RPC will have a successful status once the changes to the Access Level have propagated to long-lasting storage. Access Levels containing errors will result in an error response for the first error encountered.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/accessLevels/{accessLevelsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "accessLevels",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.accessLevels.replaceAll": {
        "description": "Replace all existing Access Levels in an Access Policy with the Access Levels provided. This is done atomically. The longrunning operation from this RPC will have a successful status once all replacements have propagated to long-lasting storage. Replacements containing errors will result in an error response for the first error encountered. Replacement will be cancelled on error, existing Access Levels will not be affected. Operation.response field will contain ReplaceAccessLevelsResponse. Removing Access Levels contained in existing Service Perimeters will result in error.",
        "flatPath": "v1/accessPolicies/{accessPoliciesId}/accessLevels:replaceAll",
        "httpMethod": "POST",
        "method": "replaceAll",
        "resourceType": "accessLevels",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.create": {
        "description": "Create an `AccessPolicy`. Fails if this organization already has a `AccessPolicy`. The longrunning Operation will have a successful status once the `AccessPolicy` has propagated to long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto.",
        "flatPath": "v1beta/accessPolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "accessPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.delete": {
        "description": "Delete an AccessPolicy by resource name. The longrunning Operation will have a successful status once the AccessPolicy has been removed from long-lasting storage.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "accessPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.get": {
        "description": "Get an AccessPolicy by name.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accessPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.list": {
        "description": "List all AccessPolicies under a container.",
        "flatPath": "v1beta/accessPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accessPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.patch": {
        "description": "Update an AccessPolicy. The longrunning Operation from this RPC will have a successful status once the changes to the AccessPolicy have propagated to long-lasting storage. Syntactic and basic semantic errors will be returned in `metadata` as a BadRequest proto.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "accessPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.servicePerimeters.commit": {
        "description": "Commit the dry-run spec for all the Service Perimeters in an Access Policy. A commit operation on a Service Perimeter involves copying its `spec` field to that Service Perimeter's `status` field. Only Service Perimeters with `use_explicit_dry_run_spec` field set to true are affected by a commit operation. The longrunning operation from this RPC will have a successful status once the dry-run specs for all the Service Perimeters have been committed. If a commit fails, it will cause the longrunning operation to return an error response and the entire commit operation will be cancelled. When successful, Operation.response field will contain CommitServicePerimetersResponse. The `dry_run` and the `spec` fields will be cleared after a successful commit operation.",
        "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters:commit",
        "httpMethod": "POST",
        "method": "commit",
        "resourceType": "servicePerimeters",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.servicePerimeters.create": {
        "description": "Create a Service Perimeter. The longrunning operation from this RPC will have a successful status once the Service Perimeter has propagated to long-lasting storage. Service Perimeters containing errors will result in an error response for the first error encountered.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/servicePerimeters",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "servicePerimeters",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.servicePerimeters.delete": {
        "description": "Delete a Service Perimeter by resource name. The longrunning operation from this RPC will have a successful status once the Service Perimeter has been removed from long-lasting storage.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/servicePerimeters/{servicePerimetersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "servicePerimeters",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.servicePerimeters.get": {
        "description": "Get a Service Perimeter by resource name.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/servicePerimeters/{servicePerimetersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "servicePerimeters",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.servicePerimeters.list": {
        "description": "List all Service Perimeters for an access policy.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/servicePerimeters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "servicePerimeters",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.servicePerimeters.patch": {
        "description": "Update a Service Perimeter. The longrunning operation from this RPC will have a successful status once the changes to the Service Perimeter have propagated to long-lasting storage. Service Perimeter containing errors will result in an error response for the first error encountered.",
        "flatPath": "v1beta/accessPolicies/{accessPoliciesId}/servicePerimeters/{servicePerimetersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "servicePerimeters",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.accessPolicies.servicePerimeters.replaceAll": {
        "description": "Replace all existing Service Perimeters in an Access Policy with the Service Perimeters provided. This is done atomically. The longrunning operation from this RPC will have a successful status once all replacements have propagated to long-lasting storage. Replacements containing errors will result in an error response for the first error encountered. Replacement will be cancelled on error, existing Service Perimeters will not be affected. Operation.response field will contain ReplaceServicePerimetersResponse.",
        "flatPath": "v1/accessPolicies/{accessPoliciesId}/servicePerimeters:replaceAll",
        "httpMethod": "POST",
        "method": "replaceAll",
        "resourceType": "servicePerimeters",
        "resourceTypePath": "//accessPolicies",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "accesscontextmanager.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.organizations.gcpUserAccessBindings.create": {
        "description": "Creates a GcpUserAccessBinding. If the client specifies a name, the server will ignore it. Fails if a resource already exists with the same group_key. Completion of this long-running operation does not necessarily signify that the new binding is deployed onto all affected users, which may take more time.",
        "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "gcpUserAccessBindings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.organizations.gcpUserAccessBindings.delete": {
        "description": "Deletes a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the binding deletion is deployed onto all affected users, which may take more time.",
        "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings/{gcpUserAccessBindingsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "gcpUserAccessBindings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.organizations.gcpUserAccessBindings.get": {
        "description": "Gets the GcpUserAccessBinding with the given name.",
        "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings/{gcpUserAccessBindingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "gcpUserAccessBindings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.organizations.gcpUserAccessBindings.list": {
        "description": "Lists all GcpUserAccessBindings for a Google Cloud organization.",
        "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "gcpUserAccessBindings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "accesscontextmanager.organizations.gcpUserAccessBindings.patch": {
        "description": "Updates a GcpUserAccessBinding. Completion of this long-running operation does not necessarily signify that the changed binding is deployed onto all affected users, which may take more time.",
        "flatPath": "v1/organizations/{organizationsId}/gcpUserAccessBindings/{gcpUserAccessBindingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "gcpUserAccessBindings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Access Context Manager API"
  },
  "adexchangebuyer2": {
    "description": "Accesses the latest features for managing Authorized Buyers accounts, Real-Time Bidding configurations and auction metrics, and Marketplace programmatic deals.",
    "methods": {
      "adexchangebuyer2.accounts.clients.create": {
        "description": "Creates a new client buyer.",
        "flatPath": "v2beta1/accounts/{accountId}/clients",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clients",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.clients.get": {
        "description": "Gets a client buyer with a given client account ID.",
        "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clients",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.clients.invitations.create": {
        "description": "Creates and sends out an email invitation to access an Ad Exchange client buyer account.",
        "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "invitations",
        "resourceTypePath": "//accounts/clients",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.clients.invitations.get": {
        "description": "Retrieves an existing client user invitation.",
        "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations/{invitationId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "invitations",
        "resourceTypePath": "//accounts/clients",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.clients.invitations.list": {
        "description": "Lists all the client users invitations for a client with a given account ID.",
        "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/invitations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "invitations",
        "resourceTypePath": "//accounts/clients",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.clients.list": {
        "description": "Lists all the clients for the current sponsor buyer.",
        "flatPath": "v2beta1/accounts/{accountId}/clients",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clients",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.clients.update": {
        "description": "Updates an existing client buyer.",
        "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "clients",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.clients.users.get": {
        "description": "Retrieves an existing client user.",
        "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "users",
        "resourceTypePath": "//accounts/clients",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.clients.users.list": {
        "description": "Lists all the known client users for a specified sponsor buyer account ID.",
        "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/users",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "users",
        "resourceTypePath": "//accounts/clients",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.clients.users.update": {
        "description": "Updates an existing client user. Only the user status can be changed on update.",
        "flatPath": "v2beta1/accounts/{accountId}/clients/{clientAccountId}/users/{userId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "users",
        "resourceTypePath": "//accounts/clients",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.creatives.create": {
        "description": "Creates a creative.",
        "flatPath": "v2beta1/accounts/{accountId}/creatives",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "creatives",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.creatives.dealAssociations.add": {
        "description": "Associate an existing deal with a creative.",
        "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:add",
        "httpMethod": "POST",
        "method": "add",
        "resourceType": "dealAssociations",
        "resourceTypePath": "//accounts/creatives",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.creatives.dealAssociations.list": {
        "description": "List all creative-deal associations.",
        "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dealAssociations",
        "resourceTypePath": "//accounts/creatives",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.creatives.dealAssociations.remove": {
        "description": "Remove the association between a deal and a creative.",
        "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}/dealAssociations:remove",
        "httpMethod": "POST",
        "method": "remove",
        "resourceType": "dealAssociations",
        "resourceTypePath": "//accounts/creatives",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.creatives.get": {
        "description": "Gets a creative.",
        "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "creatives",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.creatives.list": {
        "description": "Lists creatives.",
        "flatPath": "v2beta1/accounts/{accountId}/creatives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creatives",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.creatives.stopWatching": {
        "description": "Stops watching a creative. Will stop push notifications being sent to the topics when the creative changes status.",
        "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}:stopWatching",
        "httpMethod": "POST",
        "method": "stopWatching",
        "resourceType": "creatives",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.creatives.update": {
        "description": "Updates a creative.",
        "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "creatives",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.creatives.watch": {
        "description": "Watches a creative. Will result in push notifications being sent to the topic when the creative changes status.",
        "flatPath": "v2beta1/accounts/{accountId}/creatives/{creativeId}:watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "creatives",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.finalizedProposals.list": {
        "description": "List finalized proposals, regardless if a proposal is being renegotiated. A filter expression (PQL query) may be specified to filter the results. The notes will not be returned.",
        "flatPath": "v2beta1/accounts/{accountId}/finalizedProposals",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "finalizedProposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.finalizedProposals.pause": {
        "description": "Update given deals to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, please call accounts.proposals.pause endpoint. It is a no-op to pause already-paused deals. It is an error to call PauseProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.",
        "flatPath": "v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:pause",
        "httpMethod": "POST",
        "method": "pause",
        "resourceType": "finalizedProposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.finalizedProposals.resume": {
        "description": "Update given deals to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all listed deals in the request. Currently, this method only applies to PG and PD deals. For PA deals, please call accounts.proposals.resume endpoint. It is a no-op to resume running deals or deals paused by the other party. It is an error to call ResumeProposalDeals for deals which are not part of the proposal of proposal_id or which are not finalized or renegotiating.",
        "flatPath": "v2beta1/accounts/{accountId}/finalizedProposals/{proposalId}:resume",
        "httpMethod": "POST",
        "method": "resume",
        "resourceType": "finalizedProposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.products.get": {
        "description": "Gets the requested product by ID.",
        "flatPath": "v2beta1/accounts/{accountId}/products/{productId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "products",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.products.list": {
        "description": "List all products visible to the buyer (optionally filtered by the specified PQL query).",
        "flatPath": "v2beta1/accounts/{accountId}/products",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "products",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.accept": {
        "description": "Mark the proposal as accepted at the given revision number. If the number does not match the server's revision number an `ABORTED` error message will be returned. This call updates the proposal_state from `PROPOSED` to `BUYER_ACCEPTED`, or from `SELLER_ACCEPTED` to `FINALIZED`. Upon calling this endpoint, the buyer implicitly agrees to the terms and conditions optionally set within the proposal by the publisher.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:accept",
        "httpMethod": "POST",
        "method": "accept",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.addNote": {
        "description": "Create a new note and attach it to the proposal. The note is assigned a unique ID by the server. The proposal revision number will not increase when associated with a new note.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:addNote",
        "httpMethod": "POST",
        "method": "addNote",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.cancelNegotiation": {
        "description": "Cancel an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized, but only cancels a negotiation unilaterally.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:cancelNegotiation",
        "httpMethod": "POST",
        "method": "cancelNegotiation",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.completeSetup": {
        "description": "Update the given proposal to indicate that setup has been completed. This method is called by the buyer when the line items have been created on their end for a finalized proposal and all the required creatives have been uploaded using the creatives API. This call updates the `is_setup_completed` bit on the proposal and also notifies the seller. The server will advance the revision number of the most recent proposal.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:completeSetup",
        "httpMethod": "POST",
        "method": "completeSetup",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.create": {
        "description": "Create the given proposal. Each created proposal and any deals it contains are assigned a unique ID by the server.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.get": {
        "description": "Gets a proposal given its ID. The proposal is returned at its head revision.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.list": {
        "description": "List proposals. A filter expression (PQL query) may be specified to filter the results. To retrieve all finalized proposals, regardless if a proposal is being renegotiated, see the FinalizedProposals resource. Note that Bidder/ChildSeat relationships differ from the usual behavior. A Bidder account can only see its child seats' proposals by specifying the ChildSeat's accountId in the request path.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.pause": {
        "description": "Update the given proposal to pause serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to true for all deals in the proposal. It is a no-op to pause an already-paused proposal. It is an error to call PauseProposal for a proposal that is not finalized or renegotiating.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:pause",
        "httpMethod": "POST",
        "method": "pause",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.resume": {
        "description": "Update the given proposal to resume serving. This method will set the `DealServingMetadata.DealPauseStatus.has_buyer_paused` bit to false for all deals in the proposal. Note that if the `has_seller_paused` bit is also set, serving will not resume until the seller also resumes. It is a no-op to resume an already-running proposal. It is an error to call ResumeProposal for a proposal that is not finalized or renegotiating.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}:resume",
        "httpMethod": "POST",
        "method": "resume",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.proposals.update": {
        "description": "Update the given proposal at the client known revision number. If the server revision has advanced since the passed-in `proposal.proposal_revision`, an `ABORTED` error message will be returned. Only the buyer-modifiable fields of the proposal will be updated. Note that the deals in the proposal will be updated to match the passed-in copy. If a passed-in deal does not have a `deal_id`, the server will assign a new unique ID and create the deal. If passed-in deal has a `deal_id`, it will be updated to match the passed-in copy. Any existing deals not present in the passed-in proposal will be deleted. It is an error to pass in a deal with a `deal_id` not present at head.",
        "flatPath": "v2beta1/accounts/{accountId}/proposals/{proposalId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "proposals",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.publisherProfiles.get": {
        "description": "Gets the requested publisher profile by id.",
        "flatPath": "v2beta1/accounts/{accountId}/publisherProfiles/{publisherProfileId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "publisherProfiles",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.accounts.publisherProfiles.list": {
        "description": "List all publisher profiles visible to the buyer",
        "flatPath": "v2beta1/accounts/{accountId}/publisherProfiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "publisherProfiles",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.bidMetrics.list": {
        "description": "Lists all metrics that are measured in terms of number of bids.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/bidMetrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bidMetrics",
        "resourceTypePath": "//bidders/accounts/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.bidResponseErrors.list": {
        "description": "List all errors that occurred in bid responses, with the number of bid responses affected for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/bidResponseErrors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bidResponseErrors",
        "resourceTypePath": "//bidders/accounts/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.bidResponsesWithoutBids.list": {
        "description": "List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/bidResponsesWithoutBids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bidResponsesWithoutBids",
        "resourceTypePath": "//bidders/accounts/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.create": {
        "description": "Creates the specified filter set for the account with the given account ID.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "filterSets",
        "resourceTypePath": "//bidders/accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.delete": {
        "description": "Deletes the requested filter set from the account with the given account ID.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "filterSets",
        "resourceTypePath": "//bidders/accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.filteredBidRequests.list": {
        "description": "List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/filteredBidRequests",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "filteredBidRequests",
        "resourceTypePath": "//bidders/accounts/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.filteredBids.creatives.list": {
        "description": "List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/filteredBids/{creativeStatusId}/creatives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creatives",
        "resourceTypePath": "//bidders/accounts/filterSets/filteredBids",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.filteredBids.details.list": {
        "description": "List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/filteredBids/{creativeStatusId}/details",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "details",
        "resourceTypePath": "//bidders/accounts/filterSets/filteredBids",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.filteredBids.list": {
        "description": "List all reasons for which bids were filtered, with the number of bids filtered for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/filteredBids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "filteredBids",
        "resourceTypePath": "//bidders/accounts/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.get": {
        "description": "Retrieves the requested filter set for the account with the given account ID.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "filterSets",
        "resourceTypePath": "//bidders/accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.impressionMetrics.list": {
        "description": "Lists all metrics that are measured in terms of number of impressions.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/impressionMetrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "impressionMetrics",
        "resourceTypePath": "//bidders/accounts/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.list": {
        "description": "Lists all filter sets for the account with the given account ID.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "filterSets",
        "resourceTypePath": "//bidders/accounts",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.losingBids.list": {
        "description": "List all reasons for which bids lost in the auction, with the number of bids that lost for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/losingBids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "losingBids",
        "resourceTypePath": "//bidders/accounts/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.accounts.filterSets.nonBillableWinningBids.list": {
        "description": "List all reasons for which winning bids were not billable, with the number of bids not billed for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/accounts/{accountsId}/filterSets/{filterSetsId}/nonBillableWinningBids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nonBillableWinningBids",
        "resourceTypePath": "//bidders/accounts/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.bidMetrics.list": {
        "description": "Lists all metrics that are measured in terms of number of bids.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/bidMetrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bidMetrics",
        "resourceTypePath": "//bidders/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.bidResponseErrors.list": {
        "description": "List all errors that occurred in bid responses, with the number of bid responses affected for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/bidResponseErrors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bidResponseErrors",
        "resourceTypePath": "//bidders/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.bidResponsesWithoutBids.list": {
        "description": "List all reasons for which bid responses were considered to have no applicable bids, with the number of bid responses affected for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/bidResponsesWithoutBids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bidResponsesWithoutBids",
        "resourceTypePath": "//bidders/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.create": {
        "description": "Creates the specified filter set for the account with the given account ID.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "filterSets",
        "resourceTypePath": "//bidders",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.delete": {
        "description": "Deletes the requested filter set from the account with the given account ID.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "filterSets",
        "resourceTypePath": "//bidders",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.filteredBidRequests.list": {
        "description": "List all reasons that caused a bid request not to be sent for an impression, with the number of bid requests not sent for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/filteredBidRequests",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "filteredBidRequests",
        "resourceTypePath": "//bidders/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.filteredBids.creatives.list": {
        "description": "List all creatives associated with a specific reason for which bids were filtered, with the number of bids filtered for each creative.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/filteredBids/{creativeStatusId}/creatives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creatives",
        "resourceTypePath": "//bidders/filterSets/filteredBids",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.filteredBids.details.list": {
        "description": "List all details associated with a specific reason for which bids were filtered, with the number of bids filtered for each detail.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/filteredBids/{creativeStatusId}/details",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "details",
        "resourceTypePath": "//bidders/filterSets/filteredBids",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.filteredBids.list": {
        "description": "List all reasons for which bids were filtered, with the number of bids filtered for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/filteredBids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "filteredBids",
        "resourceTypePath": "//bidders/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.get": {
        "description": "Retrieves the requested filter set for the account with the given account ID.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "filterSets",
        "resourceTypePath": "//bidders",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.impressionMetrics.list": {
        "description": "Lists all metrics that are measured in terms of number of impressions.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/impressionMetrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "impressionMetrics",
        "resourceTypePath": "//bidders/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.list": {
        "description": "Lists all filter sets for the account with the given account ID.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "filterSets",
        "resourceTypePath": "//bidders",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.losingBids.list": {
        "description": "List all reasons for which bids lost in the auction, with the number of bids that lost for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/losingBids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "losingBids",
        "resourceTypePath": "//bidders/filterSets",
        "versions": [
          "v2beta1"
        ]
      },
      "adexchangebuyer2.bidders.filterSets.nonBillableWinningBids.list": {
        "description": "List all reasons for which winning bids were not billable, with the number of bids not billed for each reason.",
        "flatPath": "v2beta1/bidders/{biddersId}/filterSets/{filterSetsId}/nonBillableWinningBids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nonBillableWinningBids",
        "resourceTypePath": "//bidders/filterSets",
        "versions": [
          "v2beta1"
        ]
      }
    },
    "preferredVersion": "v2beta1",
    "title": "Ad Exchange Buyer API II"
  },
  "adexperiencereport": {
    "description": "Views Ad Experience Report data, and gets a list of sites that have a significant number of annoying ads.",
    "methods": {
      "adexperiencereport.sites.get": {
        "description": "Gets a site's Ad Experience Report summary.",
        "flatPath": "v1/sites/{sitesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "adexperiencereport.violatingSites.list": {
        "description": "Lists sites that are failing in the Ad Experience Report on at least one platform.",
        "flatPath": "v1/violatingSites",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "violatingSites",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Ad Experience Report API"
  },
  "admin": {
    "description": "Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.",
    "methods": {
      "admin.channels.stop": {
        "description": "Stops watching resources through this channel.",
        "flatPath": "admin/directory_v1/channels/stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "channels",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1",
          "reports_v1"
        ]
      },
      "admin.customer.devices.chromeos.commands.get": {
        "description": "Gets command data a specific command issued to the device.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}/commands/{commandId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "commands",
        "resourceTypePath": "//customer/devices/chromeos",
        "versions": [
          "directory_v1"
        ]
      },
      "admin.customer.devices.chromeos.issueCommand": {
        "description": "Issues a command for the device to execute.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}:issueCommand",
        "httpMethod": "POST",
        "method": "issueCommand",
        "resourceType": "chromeos",
        "resourceTypePath": "//customer/devices",
        "versions": [
          "directory_v1"
        ]
      },
      "admin.customers.chrome.printers.batchCreatePrinters": {
        "description": "Creates printers under given Organization Unit.",
        "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:batchCreatePrinters",
        "httpMethod": "POST",
        "method": "batchCreatePrinters",
        "resourceType": "printers",
        "resourceTypePath": "//customers/chrome",
        "versions": [
          "directory_v1"
        ]
      },
      "admin.customers.chrome.printers.batchDeletePrinters": {
        "description": "Deletes printers in batch.",
        "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:batchDeletePrinters",
        "httpMethod": "POST",
        "method": "batchDeletePrinters",
        "resourceType": "printers",
        "resourceTypePath": "//customers/chrome",
        "versions": [
          "directory_v1"
        ]
      },
      "admin.customers.chrome.printers.create": {
        "description": "Creates a printer under given Organization Unit.",
        "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "printers",
        "resourceTypePath": "//customers/chrome",
        "versions": [
          "directory_v1"
        ]
      },
      "admin.customers.chrome.printers.delete": {
        "description": "Deletes a `Printer`.",
        "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "printers",
        "resourceTypePath": "//customers/chrome",
        "versions": [
          "directory_v1"
        ]
      },
      "admin.customers.chrome.printers.get": {
        "description": "Returns a `Printer` resource (printer's config).",
        "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "printers",
        "resourceTypePath": "//customers/chrome",
        "versions": [
          "directory_v1"
        ]
      },
      "admin.customers.chrome.printers.list": {
        "description": "List printers configs.",
        "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "printers",
        "resourceTypePath": "//customers/chrome",
        "versions": [
          "directory_v1"
        ]
      },
      "admin.customers.chrome.printers.listPrinterModels": {
        "description": "Lists the supported printer models.",
        "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers:listPrinterModels",
        "httpMethod": "GET",
        "method": "listPrinterModels",
        "resourceType": "printers",
        "resourceTypePath": "//customers/chrome",
        "versions": [
          "directory_v1"
        ]
      },
      "admin.customers.chrome.printers.patch": {
        "description": "Updates a `Printer` resource.",
        "flatPath": "admin/directory/v1/customers/{customersId}/chrome/printers/{printersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "printers",
        "resourceTypePath": "//customers/chrome",
        "versions": [
          "directory_v1"
        ]
      },
      "datatransfer.applications.get": {
        "description": "Retrieves information about an application for the given application ID.",
        "flatPath": "admin/datatransfer/v1/applications/{applicationId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "applications",
        "resourceTypePath": "/",
        "versions": [
          "datatransfer_v1"
        ]
      },
      "datatransfer.applications.list": {
        "description": "Lists the applications available for data transfer for a customer.",
        "flatPath": "admin/datatransfer/v1/applications",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "applications",
        "resourceTypePath": "/",
        "versions": [
          "datatransfer_v1"
        ]
      },
      "datatransfer.transfers.get": {
        "description": "Retrieves a data transfer request by its resource ID.",
        "flatPath": "admin/datatransfer/v1/transfers/{dataTransferId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "transfers",
        "resourceTypePath": "/",
        "versions": [
          "datatransfer_v1"
        ]
      },
      "datatransfer.transfers.insert": {
        "description": "Inserts a data transfer request.",
        "flatPath": "admin/datatransfer/v1/transfers",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "transfers",
        "resourceTypePath": "/",
        "versions": [
          "datatransfer_v1"
        ]
      },
      "datatransfer.transfers.list": {
        "description": "Lists the transfers for a customer by source user, destination user, or status.",
        "flatPath": "admin/datatransfer/v1/transfers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "transfers",
        "resourceTypePath": "/",
        "versions": [
          "datatransfer_v1"
        ]
      },
      "directory.asps.delete": {
        "description": "Deletes an ASP issued by a user.",
        "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "asps",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.asps.get": {
        "description": "Gets information about an ASP issued by a user.",
        "flatPath": "admin/directory/v1/users/{userKey}/asps/{codeId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "asps",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.asps.list": {
        "description": "Lists the ASPs issued by a user.",
        "flatPath": "admin/directory/v1/users/{userKey}/asps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "asps",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.chromeosdevices.action": {
        "description": "Takes an action that affects a Chrome OS Device. This includes deprovisioning, disabling, and re-enabling devices. *Warning:* * Deprovisioning a device will stop device policy syncing and remove device-level printers. After a device is deprovisioned, it must be wiped before it can be re-enrolled. * Lost or stolen devices should use the disable action. * Re-enabling a disabled device will consume a device license. If you do not have sufficient licenses available when completing the re-enable action, you will receive an error. For more information about deprovisioning and disabling devices, visit the [help center](https://support.google.com/chrome/a/answer/3523633).",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{resourceId}/action",
        "httpMethod": "POST",
        "method": "action",
        "resourceType": "chromeosdevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.chromeosdevices.get": {
        "description": "Retrieves a Chrome OS device's properties.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "chromeosdevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.chromeosdevices.list": {
        "description": "Retrieves a paginated list of Chrome OS devices within an account.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "chromeosdevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.chromeosdevices.moveDevicesToOu": {
        "description": "Moves or inserts multiple Chrome OS devices to an organizational unit. You can move up to 50 devices at once.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/moveDevicesToOu",
        "httpMethod": "POST",
        "method": "moveDevicesToOu",
        "resourceType": "chromeosdevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.chromeosdevices.patch": {
        "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "chromeosdevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.chromeosdevices.update": {
        "description": "Updates a device's updatable properties, such as `annotatedUser`, `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/chromeos/{deviceId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "chromeosdevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.customers.get": {
        "description": "Retrieves a customer.",
        "flatPath": "admin/directory/v1/customers/{customerKey}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.customers.patch": {
        "description": "Patches a customer.",
        "flatPath": "admin/directory/v1/customers/{customerKey}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.customers.update": {
        "description": "Updates a customer.",
        "flatPath": "admin/directory/v1/customers/{customerKey}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.domainAliases.delete": {
        "description": "Deletes a domain Alias of the customer.",
        "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "domainAliases",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.domainAliases.get": {
        "description": "Retrieves a domain alias of the customer.",
        "flatPath": "admin/directory/v1/customer/{customer}/domainaliases/{domainAliasName}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domainAliases",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.domainAliases.insert": {
        "description": "Inserts a domain alias of the customer.",
        "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "domainAliases",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.domainAliases.list": {
        "description": "Lists the domain aliases of the customer.",
        "flatPath": "admin/directory/v1/customer/{customer}/domainaliases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "domainAliases",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.domains.delete": {
        "description": "Deletes a domain of the customer.",
        "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "domains",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.domains.get": {
        "description": "Retrieves a domain of the customer.",
        "flatPath": "admin/directory/v1/customer/{customer}/domains/{domainName}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domains",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.domains.insert": {
        "description": "Inserts a domain of the customer.",
        "flatPath": "admin/directory/v1/customer/{customer}/domains",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "domains",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.domains.list": {
        "description": "Lists the domains of the customer.",
        "flatPath": "admin/directory/v1/customer/{customer}/domains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "domains",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.groups.aliases.delete": {
        "description": "Removes an alias.",
        "flatPath": "admin/directory/v1/groups/{groupKey}/aliases/{alias}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "aliases",
        "resourceTypePath": "//groups",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.groups.aliases.insert": {
        "description": "Adds an alias for the group.",
        "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "aliases",
        "resourceTypePath": "//groups",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.groups.aliases.list": {
        "description": "Lists all aliases for a group.",
        "flatPath": "admin/directory/v1/groups/{groupKey}/aliases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "aliases",
        "resourceTypePath": "//groups",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.groups.delete": {
        "description": "Deletes a group.",
        "flatPath": "admin/directory/v1/groups/{groupKey}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.groups.get": {
        "description": "Retrieves a group's properties.",
        "flatPath": "admin/directory/v1/groups/{groupKey}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.groups.insert": {
        "description": "Creates a group.",
        "flatPath": "admin/directory/v1/groups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.groups.list": {
        "description": "Retrieves all groups of a domain or of a user given a userKey (paginated).",
        "flatPath": "admin/directory/v1/groups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.groups.patch": {
        "description": "Updates a group's properties. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
        "flatPath": "admin/directory/v1/groups/{groupKey}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.groups.update": {
        "description": "Updates a group's properties.",
        "flatPath": "admin/directory/v1/groups/{groupKey}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.members.delete": {
        "description": "Removes a member from a group.",
        "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "members",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.members.get": {
        "description": "Retrieves a group member's properties.",
        "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "members",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.members.hasMember": {
        "description": "Checks whether the given user is a member of the group. Membership can be direct or nested.",
        "flatPath": "admin/directory/v1/groups/{groupKey}/hasMember/{memberKey}",
        "httpMethod": "GET",
        "method": "hasMember",
        "resourceType": "members",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.members.insert": {
        "description": "Adds a user to the specified group.",
        "flatPath": "admin/directory/v1/groups/{groupKey}/members",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "members",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.members.list": {
        "description": "Retrieves a paginated list of all members in a group.",
        "flatPath": "admin/directory/v1/groups/{groupKey}/members",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "members",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.members.patch": {
        "description": "Updates the membership properties of a user in the specified group. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
        "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "members",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.members.update": {
        "description": "Updates the membership of a user in the specified group.",
        "flatPath": "admin/directory/v1/groups/{groupKey}/members/{memberKey}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "members",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.mobiledevices.action": {
        "description": "Takes an action that affects a mobile device. For example, remotely wiping a device.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}/action",
        "httpMethod": "POST",
        "method": "action",
        "resourceType": "mobiledevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.mobiledevices.delete": {
        "description": "Removes a mobile device.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "mobiledevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.mobiledevices.get": {
        "description": "Retrieves a mobile device's properties.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile/{resourceId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "mobiledevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.mobiledevices.list": {
        "description": "Retrieves a paginated list of all mobile devices for an account.",
        "flatPath": "admin/directory/v1/customer/{customerId}/devices/mobile",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "mobiledevices",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.orgunits.delete": {
        "description": "Removes an organizational unit.",
        "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "orgunits",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.orgunits.get": {
        "description": "Retrieves an organizational unit.",
        "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "orgunits",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.orgunits.insert": {
        "description": "Adds an organizational unit.",
        "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "orgunits",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.orgunits.list": {
        "description": "Retrieves a list of all organizational units for an account.",
        "flatPath": "admin/directory/v1/customer/{customerId}/orgunits",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "orgunits",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.orgunits.patch": {
        "description": "Updates an organizational unit. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch)",
        "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "orgunits",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.orgunits.update": {
        "description": "Updates an organizational unit.",
        "flatPath": "admin/directory/v1/customer/{customerId}/orgunits/{orgunitsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "orgunits",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.privileges.list": {
        "description": "Retrieves a paginated list of all privileges for a customer.",
        "flatPath": "admin/directory/v1/customer/{customer}/roles/ALL/privileges",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "privileges",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.buildings.delete": {
        "description": "Deletes a building.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "buildings",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.buildings.get": {
        "description": "Retrieves a building.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buildings",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.buildings.insert": {
        "description": "Inserts a building.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "buildings",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.buildings.list": {
        "description": "Retrieves a list of buildings for an account.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "buildings",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.buildings.patch": {
        "description": "Patches a building.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "buildings",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.buildings.update": {
        "description": "Updates a building.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/buildings/{buildingId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "buildings",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.calendars.delete": {
        "description": "Deletes a calendar resource.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "calendars",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.calendars.get": {
        "description": "Retrieves a calendar resource.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "calendars",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.calendars.insert": {
        "description": "Inserts a calendar resource.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "calendars",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.calendars.list": {
        "description": "Retrieves a list of calendar resources for an account.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "calendars",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.calendars.patch": {
        "description": "Patches a calendar resource.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "calendars",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.calendars.update": {
        "description": "Updates a calendar resource. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/calendars/{calendarResourceId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "calendars",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.features.delete": {
        "description": "Deletes a feature.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "features",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.features.get": {
        "description": "Retrieves a feature.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "features",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.features.insert": {
        "description": "Inserts a feature.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "features",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.features.list": {
        "description": "Retrieves a list of features for an account.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/features",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "features",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.features.patch": {
        "description": "Patches a feature.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "features",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.features.rename": {
        "description": "Renames a feature.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{oldName}/rename",
        "httpMethod": "POST",
        "method": "rename",
        "resourceType": "features",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.resources.features.update": {
        "description": "Updates a feature.",
        "flatPath": "admin/directory/v1/customer/{customer}/resources/features/{featureKey}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "features",
        "resourceTypePath": "//resources",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roleAssignments.delete": {
        "description": "Deletes a role assignment.",
        "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "roleAssignments",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roleAssignments.get": {
        "description": "Retrieves a role assignment.",
        "flatPath": "admin/directory/v1/customer/{customer}/roleassignments/{roleAssignmentId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "roleAssignments",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roleAssignments.insert": {
        "description": "Creates a role assignment.",
        "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "roleAssignments",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roleAssignments.list": {
        "description": "Retrieves a paginated list of all roleAssignments.",
        "flatPath": "admin/directory/v1/customer/{customer}/roleassignments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "roleAssignments",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roles.delete": {
        "description": "Deletes a role.",
        "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "roles",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roles.get": {
        "description": "Retrieves a role.",
        "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "roles",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roles.insert": {
        "description": "Creates a role.",
        "flatPath": "admin/directory/v1/customer/{customer}/roles",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "roles",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roles.list": {
        "description": "Retrieves a paginated list of all the roles in a domain.",
        "flatPath": "admin/directory/v1/customer/{customer}/roles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "roles",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roles.patch": {
        "description": "Patches a role.",
        "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "roles",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.roles.update": {
        "description": "Updates a role.",
        "flatPath": "admin/directory/v1/customer/{customer}/roles/{roleId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "roles",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.schemas.delete": {
        "description": "Deletes a schema.",
        "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "schemas",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.schemas.get": {
        "description": "Retrieves a schema.",
        "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "schemas",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.schemas.insert": {
        "description": "Creates a schema.",
        "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "schemas",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.schemas.list": {
        "description": "Retrieves all schemas for a customer.",
        "flatPath": "admin/directory/v1/customer/{customerId}/schemas",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "schemas",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.schemas.patch": {
        "description": "Patches a schema.",
        "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "schemas",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.schemas.update": {
        "description": "Updates a schema.",
        "flatPath": "admin/directory/v1/customer/{customerId}/schemas/{schemaKey}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "schemas",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.tokens.delete": {
        "description": "Deletes all access tokens issued by a user for an application.",
        "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tokens",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.tokens.get": {
        "description": "Gets information about an access token issued by a user.",
        "flatPath": "admin/directory/v1/users/{userKey}/tokens/{clientId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tokens",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.tokens.list": {
        "description": "Returns the set of tokens specified user has issued to 3rd party applications.",
        "flatPath": "admin/directory/v1/users/{userKey}/tokens",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tokens",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.twoStepVerification.turnOff": {
        "description": "Turns off 2-Step Verification for user.",
        "flatPath": "admin/directory/v1/users/{userKey}/twoStepVerification/turnOff",
        "httpMethod": "POST",
        "method": "turnOff",
        "resourceType": "twoStepVerification",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.aliases.delete": {
        "description": "Removes an alias.",
        "flatPath": "admin/directory/v1/users/{userKey}/aliases/{alias}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "aliases",
        "resourceTypePath": "//users",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.aliases.insert": {
        "description": "Adds an alias.",
        "flatPath": "admin/directory/v1/users/{userKey}/aliases",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "aliases",
        "resourceTypePath": "//users",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.aliases.list": {
        "description": "Lists all aliases for a user.",
        "flatPath": "admin/directory/v1/users/{userKey}/aliases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "aliases",
        "resourceTypePath": "//users",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.aliases.watch": {
        "description": "Watches for changes in users list.",
        "flatPath": "admin/directory/v1/users/{userKey}/aliases/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "aliases",
        "resourceTypePath": "//users",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.delete": {
        "description": "Deletes a user.",
        "flatPath": "admin/directory/v1/users/{userKey}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.get": {
        "description": "Retrieves a user.",
        "flatPath": "admin/directory/v1/users/{userKey}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.insert": {
        "description": "Creates a user.",
        "flatPath": "admin/directory/v1/users",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.list": {
        "description": "Retrieves a paginated list of either deleted users or all users in a domain.",
        "flatPath": "admin/directory/v1/users",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.makeAdmin": {
        "description": "Makes a user a super administrator.",
        "flatPath": "admin/directory/v1/users/{userKey}/makeAdmin",
        "httpMethod": "POST",
        "method": "makeAdmin",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.patch": {
        "description": "Updates a user using patch semantics. The update method should be used instead, since it also supports patch semantics and has better performance. This method is unable to clear fields that contain repeated objects (`addresses`, `phones`, etc). Use the update method instead.",
        "flatPath": "admin/directory/v1/users/{userKey}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.photos.delete": {
        "description": "Removes the user's photo.",
        "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "photos",
        "resourceTypePath": "//users",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.photos.get": {
        "description": "Retrieves the user's photo.",
        "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "photos",
        "resourceTypePath": "//users",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.photos.patch": {
        "description": "Adds a photo for the user. This method supports [patch semantics](/admin-sdk/directory/v1/guides/performance#patch).",
        "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "photos",
        "resourceTypePath": "//users",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.photos.update": {
        "description": "Adds a photo for the user.",
        "flatPath": "admin/directory/v1/users/{userKey}/photos/thumbnail",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "photos",
        "resourceTypePath": "//users",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.signOut": {
        "description": "Signs a user out of all web and device sessions and reset their sign-in cookies. User will have to sign in by authenticating again.",
        "flatPath": "admin/directory/v1/users/{userKey}/signOut",
        "httpMethod": "POST",
        "method": "signOut",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.undelete": {
        "description": "Undeletes a deleted user.",
        "flatPath": "admin/directory/v1/users/{userKey}/undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.update": {
        "description": "Updates a user. This method supports patch semantics, meaning you only need to include the fields you wish to update. Fields that are not present in the request will be preserved, and fields set to `null` will be cleared.",
        "flatPath": "admin/directory/v1/users/{userKey}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.users.watch": {
        "description": "Watches for changes in users list.",
        "flatPath": "admin/directory/v1/users/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.verificationCodes.generate": {
        "description": "Generates new backup verification codes for the user.",
        "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/generate",
        "httpMethod": "POST",
        "method": "generate",
        "resourceType": "verificationCodes",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.verificationCodes.invalidate": {
        "description": "Invalidates the current backup verification codes for the user.",
        "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes/invalidate",
        "httpMethod": "POST",
        "method": "invalidate",
        "resourceType": "verificationCodes",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "directory.verificationCodes.list": {
        "description": "Returns the current set of valid backup verification codes for the specified user.",
        "flatPath": "admin/directory/v1/users/{userKey}/verificationCodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "verificationCodes",
        "resourceTypePath": "/",
        "versions": [
          "directory_v1"
        ]
      },
      "reports.activities.list": {
        "description": "Retrieves a list of activities for a specific customer's account and application such as the Admin console application or the Google Drive application. For more information, see the guides for administrator and Google Drive activity reports. For more information about the activity report's parameters, see the activity parameters reference guides. ",
        "flatPath": "admin/reports/v1/activity/users/{userKey}/applications/{applicationName}",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "activities",
        "resourceTypePath": "/",
        "versions": [
          "reports_v1"
        ]
      },
      "reports.activities.watch": {
        "description": "Start receiving notifications for account activities. For more information, see Receiving Push Notifications.",
        "flatPath": "admin/reports/v1/activity/users/{userKey}/applications/{applicationName}/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "activities",
        "resourceTypePath": "/",
        "versions": [
          "reports_v1"
        ]
      },
      "reports.customerUsageReports.get": {
        "description": "Retrieves a report which is a collection of properties and statistics for a specific customer's account. For more information, see the Customers Usage Report guide. For more information about the customer report's parameters, see the Customers Usage parameters reference guides. ",
        "flatPath": "admin/reports/v1/usage/dates/{date}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customerUsageReports",
        "resourceTypePath": "/",
        "versions": [
          "reports_v1"
        ]
      },
      "reports.entityUsageReports.get": {
        "description": "Retrieves a report which is a collection of properties and statistics for entities used by users within the account. For more information, see the Entities Usage Report guide. For more information about the entities report's parameters, see the Entities Usage parameters reference guides.",
        "flatPath": "admin/reports/v1/usage/{entityType}/{entityKey}/dates/{date}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityUsageReports",
        "resourceTypePath": "/",
        "versions": [
          "reports_v1"
        ]
      },
      "reports.userUsageReport.get": {
        "description": "Retrieves a report which is a collection of properties and statistics for a set of users with the account. For more information, see the User Usage Report guide. For more information about the user report's parameters, see the Users Usage parameters reference guides.",
        "flatPath": "admin/reports/v1/usage/users/{userKey}/dates/{date}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userUsageReport",
        "resourceTypePath": "/",
        "versions": [
          "reports_v1"
        ]
      }
    },
    "preferredVersion": "reports_v1",
    "title": "Admin SDK API"
  },
  "admob": {
    "description": "The AdMob API allows publishers to programmatically get information about their AdMob account.",
    "methods": {
      "admob.accounts.adUnits.list": {
        "description": "List the ad units under the specified AdMob account.",
        "flatPath": "v1beta/accounts/{accountsId}/adUnits",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adUnits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "admob.accounts.apps.list": {
        "description": "List the apps under the specified AdMob account.",
        "flatPath": "v1beta/accounts/{accountsId}/apps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apps",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "admob.accounts.get": {
        "description": "Gets information about the specified AdMob publisher account.",
        "flatPath": "v1beta/accounts/{accountsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "admob.accounts.list": {
        "description": "Lists the AdMob publisher account that was most recently signed in to from the AdMob UI. For more information, see https://support.google.com/admob/answer/10243672.",
        "flatPath": "v1beta/accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "admob.accounts.mediationReport.generate": {
        "description": "Generates an AdMob Mediation report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.",
        "flatPath": "v1beta/accounts/{accountsId}/mediationReport:generate",
        "httpMethod": "POST",
        "method": "generate",
        "resourceType": "mediationReport",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "admob.accounts.networkReport.generate": {
        "description": "Generates an AdMob Network report based on the provided report specification. Returns result of a server-side streaming RPC. The result is returned in a sequence of responses.",
        "flatPath": "v1beta/accounts/{accountsId}/networkReport:generate",
        "httpMethod": "POST",
        "method": "generate",
        "resourceType": "networkReport",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "AdMob API"
  },
  "adsense": {
    "description": "The AdSense Management API allows publishers to access their inventory and run earnings and performance reports.",
    "methods": {
      "adsense.accounts.adclients.adunits.get": {
        "description": "Gets an ad unit from a specified account and ad client.",
        "flatPath": "v2/accounts/{accountsId}/adclients/{adclientsId}/adunits/{adunitsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts/adclients",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.adclients.adunits.getAdcode": {
        "description": "Gets the AdSense code for a given ad unit.",
        "flatPath": "v2/accounts/{accountsId}/adclients/{adclientsId}/adunits/{adunitsId}/adcode",
        "httpMethod": "GET",
        "method": "getAdcode",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts/adclients",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.adclients.adunits.list": {
        "description": "Lists all ad units under a specified account and ad client.",
        "flatPath": "v2/accounts/{accountsId}/adclients/{adclientsId}/adunits",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts/adclients",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.adclients.adunits.listLinkedCustomChannels": {
        "description": "Lists all the custom channels available for an ad unit.",
        "flatPath": "v2/accounts/{accountsId}/adclients/{adclientsId}/adunits/{adunitsId}:listLinkedCustomChannels",
        "httpMethod": "GET",
        "method": "listLinkedCustomChannels",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts/adclients",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.adclients.customchannels.get": {
        "description": "Gets information about the selected custom channel.",
        "flatPath": "v2/accounts/{accountsId}/adclients/{adclientsId}/customchannels/{customchannelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customchannels",
        "resourceTypePath": "//accounts/adclients",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.adclients.customchannels.list": {
        "description": "Lists all the custom channels available in an ad client.",
        "flatPath": "v2/accounts/{accountsId}/adclients/{adclientsId}/customchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customchannels",
        "resourceTypePath": "//accounts/adclients",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.adclients.customchannels.listLinkedAdUnits": {
        "description": "Lists all the ad units available for a custom channel.",
        "flatPath": "v2/accounts/{accountsId}/adclients/{adclientsId}/customchannels/{customchannelsId}:listLinkedAdUnits",
        "httpMethod": "GET",
        "method": "listLinkedAdUnits",
        "resourceType": "customchannels",
        "resourceTypePath": "//accounts/adclients",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.adclients.getAdCode": {
        "description": "Get Auto ad code for a given ad client.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adcode",
        "httpMethod": "GET",
        "method": "getAdCode",
        "resourceType": "adclients",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.adclients.getAdcode": {
        "description": "Gets the AdSense code for a given ad client. This returns what was previously known as the 'auto ad code'. This is only supported for ad clients with a product_code of AFC. For more information, see [About the AdSense code](https://support.google.com/adsense/answer/9274634).",
        "flatPath": "v2/accounts/{accountsId}/adclients/{adclientsId}/adcode",
        "httpMethod": "GET",
        "method": "getAdcode",
        "resourceType": "adclients",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.adclients.list": {
        "description": "List all ad clients in the specified account.",
        "flatPath": "accounts/{accountId}/adclients",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adclients",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4",
          "v2"
        ]
      },
      "adsense.accounts.adclients.urlchannels.list": {
        "description": "Lists active url channels.",
        "flatPath": "v2/accounts/{accountsId}/adclients/{adclientsId}/urlchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "urlchannels",
        "resourceTypePath": "//accounts/adclients",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.adunits.customchannels.list": {
        "description": "List all custom channels which the specified ad unit belongs to.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customchannels",
        "resourceTypePath": "//accounts/adunits",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.adunits.get": {
        "description": "Gets the specified ad unit in the specified ad client for the specified account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.adunits.getAdCode": {
        "description": "Get ad code for the specified ad unit.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode",
        "httpMethod": "GET",
        "method": "getAdCode",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.adunits.list": {
        "description": "List all ad units in the specified ad client for the specified account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.alerts.delete": {
        "description": "Dismiss (delete) the specified alert from the specified publisher AdSense account.",
        "flatPath": "accounts/{accountId}/alerts/{alertId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "alerts",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.alerts.list": {
        "description": "List the alerts for the specified AdSense account.",
        "flatPath": "accounts/{accountId}/alerts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "alerts",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4",
          "v2"
        ]
      },
      "adsense.accounts.customchannels.adunits.list": {
        "description": "List all ad units in the specified custom channel.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts/customchannels",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.customchannels.get": {
        "description": "Get the specified custom channel from the specified ad client for the specified account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customchannels",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.customchannels.list": {
        "description": "List all custom channels in the specified ad client for the specified account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/customchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customchannels",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.get": {
        "description": "Get information about the selected AdSense account.",
        "flatPath": "accounts/{accountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1.4",
          "v2"
        ]
      },
      "adsense.accounts.list": {
        "description": "List all accounts available to this AdSense account.",
        "flatPath": "accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1.4",
          "v2"
        ]
      },
      "adsense.accounts.listChildAccounts": {
        "description": "Lists all accounts directly managed by the given AdSense account.",
        "flatPath": "v2/accounts/{accountsId}:listChildAccounts",
        "httpMethod": "GET",
        "method": "listChildAccounts",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.payments.list": {
        "description": "List the payments for the specified AdSense account.",
        "flatPath": "accounts/{accountId}/payments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "payments",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4",
          "v2"
        ]
      },
      "adsense.accounts.reports.generate": {
        "description": "Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.",
        "flatPath": "accounts/{accountId}/reports",
        "httpMethod": "GET",
        "method": "generate",
        "resourceType": "reports",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4",
          "v2"
        ]
      },
      "adsense.accounts.reports.generateCsv": {
        "description": "Generates a csv formatted ad hoc report.",
        "flatPath": "v2/accounts/{accountsId}/reports:generateCsv",
        "httpMethod": "GET",
        "method": "generateCsv",
        "resourceType": "reports",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.reports.saved.generate": {
        "description": "Generate an AdSense report based on the saved report ID sent in the query parameters.",
        "flatPath": "accounts/{accountId}/reports/{savedReportId}",
        "httpMethod": "GET",
        "method": "generate",
        "resourceType": "saved",
        "resourceTypePath": "//accounts/reports",
        "versions": [
          "v1.4",
          "v2"
        ]
      },
      "adsense.accounts.reports.saved.generateCsv": {
        "description": "Generates a csv formatted saved report.",
        "flatPath": "v2/accounts/{accountsId}/reports/{reportsId}/saved:generateCsv",
        "httpMethod": "GET",
        "method": "generateCsv",
        "resourceType": "saved",
        "resourceTypePath": "//accounts/reports",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.reports.saved.list": {
        "description": "List all saved reports in the specified AdSense account.",
        "flatPath": "accounts/{accountId}/reports/saved",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "saved",
        "resourceTypePath": "//accounts/reports",
        "versions": [
          "v1.4",
          "v2"
        ]
      },
      "adsense.accounts.savedadstyles.get": {
        "description": "List a specific saved ad style for the specified account.",
        "flatPath": "accounts/{accountId}/savedadstyles/{savedAdStyleId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "savedadstyles",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.savedadstyles.list": {
        "description": "List all saved ad styles in the specified account.",
        "flatPath": "accounts/{accountId}/savedadstyles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "savedadstyles",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.accounts.sites.get": {
        "description": "Gets information about the selected site.",
        "flatPath": "v2/accounts/{accountsId}/sites/{sitesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sites",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.sites.list": {
        "description": "Lists all the sites available in an account.",
        "flatPath": "v2/accounts/{accountsId}/sites",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sites",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2"
        ]
      },
      "adsense.accounts.urlchannels.list": {
        "description": "List all URL channels in the specified ad client for the specified account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/urlchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "urlchannels",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.adclients.list": {
        "description": "List all ad clients in this AdSense account.",
        "flatPath": "adclients",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adclients",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.adunits.customchannels.list": {
        "description": "List all custom channels which the specified ad unit belongs to.",
        "flatPath": "adclients/{adClientId}/adunits/{adUnitId}/customchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customchannels",
        "resourceTypePath": "//adunits",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.adunits.get": {
        "description": "Gets the specified ad unit in the specified ad client.",
        "flatPath": "adclients/{adClientId}/adunits/{adUnitId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "adunits",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.adunits.getAdCode": {
        "description": "Get ad code for the specified ad unit.",
        "flatPath": "adclients/{adClientId}/adunits/{adUnitId}/adcode",
        "httpMethod": "GET",
        "method": "getAdCode",
        "resourceType": "adunits",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.adunits.list": {
        "description": "List all ad units in the specified ad client for this AdSense account.",
        "flatPath": "adclients/{adClientId}/adunits",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adunits",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.alerts.delete": {
        "description": "Dismiss (delete) the specified alert from the publisher's AdSense account.",
        "flatPath": "alerts/{alertId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "alerts",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.alerts.list": {
        "description": "List the alerts for this AdSense account.",
        "flatPath": "alerts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "alerts",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.customchannels.adunits.list": {
        "description": "List all ad units in the specified custom channel.",
        "flatPath": "adclients/{adClientId}/customchannels/{customChannelId}/adunits",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adunits",
        "resourceTypePath": "//customchannels",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.customchannels.get": {
        "description": "Get the specified custom channel from the specified ad client.",
        "flatPath": "adclients/{adClientId}/customchannels/{customChannelId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customchannels",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.customchannels.list": {
        "description": "List all custom channels in the specified ad client for this AdSense account.",
        "flatPath": "adclients/{adClientId}/customchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customchannels",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.metadata.dimensions.list": {
        "description": "List the metadata for the dimensions available to this AdSense account.",
        "flatPath": "metadata/dimensions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dimensions",
        "resourceTypePath": "//metadata",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.metadata.metrics.list": {
        "description": "List the metadata for the metrics available to this AdSense account.",
        "flatPath": "metadata/metrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "metrics",
        "resourceTypePath": "//metadata",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.payments.list": {
        "description": "List the payments for this AdSense account.",
        "flatPath": "payments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "payments",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.reports.generate": {
        "description": "Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.",
        "flatPath": "reports",
        "httpMethod": "GET",
        "method": "generate",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.reports.saved.generate": {
        "description": "Generate an AdSense report based on the saved report ID sent in the query parameters.",
        "flatPath": "reports/{savedReportId}",
        "httpMethod": "GET",
        "method": "generate",
        "resourceType": "saved",
        "resourceTypePath": "//reports",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.reports.saved.list": {
        "description": "List all saved reports in this AdSense account.",
        "flatPath": "reports/saved",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "saved",
        "resourceTypePath": "//reports",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.savedadstyles.get": {
        "description": "Get a specific saved ad style from the user's account.",
        "flatPath": "savedadstyles/{savedAdStyleId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "savedadstyles",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.savedadstyles.list": {
        "description": "List all saved ad styles in the user's account.",
        "flatPath": "savedadstyles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "savedadstyles",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      },
      "adsense.urlchannels.list": {
        "description": "List all URL channels in the specified ad client for this AdSense account.",
        "flatPath": "adclients/{adClientId}/urlchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "urlchannels",
        "resourceTypePath": "/",
        "versions": [
          "v1.4"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "AdSense Management API"
  },
  "adsensehost": {
    "description": "The AdSense Host API gives AdSense Hosts access to report generation, ad code generation, and publisher management capabilities.",
    "methods": {
      "adsensehost.accounts.adclients.get": {
        "description": "Get information about one of the ad clients in the specified publisher's AdSense account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "adclients",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.adclients.list": {
        "description": "List all hosted ad clients in the specified hosted account.",
        "flatPath": "accounts/{accountId}/adclients",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adclients",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.adunits.delete": {
        "description": "Delete the specified ad unit from the specified publisher AdSense account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.adunits.get": {
        "description": "Get the specified host ad unit in this AdSense account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.adunits.getAdCode": {
        "description": "Get ad code for the specified ad unit, attaching the specified host custom channels.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode",
        "httpMethod": "GET",
        "method": "getAdCode",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.adunits.insert": {
        "description": "Insert the supplied ad unit into the specified publisher AdSense account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.adunits.list": {
        "description": "List all ad units in the specified publisher's AdSense account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.adunits.patch": {
        "description": "Update the supplied ad unit in the specified publisher AdSense account. This method supports patch semantics.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.adunits.update": {
        "description": "Update the supplied ad unit in the specified publisher AdSense account.",
        "flatPath": "accounts/{accountId}/adclients/{adClientId}/adunits",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "adunits",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.get": {
        "description": "Get information about the selected associated AdSense account.",
        "flatPath": "accounts/{accountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.list": {
        "description": "List hosted accounts associated with this AdSense account by ad client id.",
        "flatPath": "accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.accounts.reports.generate": {
        "description": "Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.",
        "flatPath": "accounts/{accountId}/reports",
        "httpMethod": "GET",
        "method": "generate",
        "resourceType": "reports",
        "resourceTypePath": "//accounts",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.adclients.get": {
        "description": "Get information about one of the ad clients in the Host AdSense account.",
        "flatPath": "adclients/{adClientId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "adclients",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.adclients.list": {
        "description": "List all host ad clients in this AdSense account.",
        "flatPath": "adclients",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adclients",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.associationsessions.start": {
        "description": "Create an association session for initiating an association with an AdSense user.",
        "flatPath": "associationsessions/start",
        "httpMethod": "GET",
        "method": "start",
        "resourceType": "associationsessions",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.associationsessions.verify": {
        "description": "Verify an association session after the association callback returns from AdSense signup.",
        "flatPath": "associationsessions/verify",
        "httpMethod": "GET",
        "method": "verify",
        "resourceType": "associationsessions",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.customchannels.delete": {
        "description": "Delete a specific custom channel from the host AdSense account.",
        "flatPath": "adclients/{adClientId}/customchannels/{customChannelId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "customchannels",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.customchannels.get": {
        "description": "Get a specific custom channel from the host AdSense account.",
        "flatPath": "adclients/{adClientId}/customchannels/{customChannelId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customchannels",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.customchannels.insert": {
        "description": "Add a new custom channel to the host AdSense account.",
        "flatPath": "adclients/{adClientId}/customchannels",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "customchannels",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.customchannels.list": {
        "description": "List all host custom channels in this AdSense account.",
        "flatPath": "adclients/{adClientId}/customchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customchannels",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.customchannels.patch": {
        "description": "Update a custom channel in the host AdSense account. This method supports patch semantics.",
        "flatPath": "adclients/{adClientId}/customchannels",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customchannels",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.customchannels.update": {
        "description": "Update a custom channel in the host AdSense account.",
        "flatPath": "adclients/{adClientId}/customchannels",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "customchannels",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.reports.generate": {
        "description": "Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify \"alt=csv\" as a query parameter.",
        "flatPath": "reports",
        "httpMethod": "GET",
        "method": "generate",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.urlchannels.delete": {
        "description": "Delete a URL channel from the host AdSense account.",
        "flatPath": "adclients/{adClientId}/urlchannels/{urlChannelId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "urlchannels",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.urlchannels.insert": {
        "description": "Add a new URL channel to the host AdSense account.",
        "flatPath": "adclients/{adClientId}/urlchannels",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "urlchannels",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      },
      "adsensehost.urlchannels.list": {
        "description": "List all host URL channels in the host AdSense account.",
        "flatPath": "adclients/{adClientId}/urlchannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "urlchannels",
        "resourceTypePath": "/",
        "versions": [
          "v4.1"
        ]
      }
    },
    "preferredVersion": "v4.1",
    "title": "AdSense Host API"
  },
  "alertcenter": {
    "description": "Manages alerts on issues affecting your domain.",
    "methods": {
      "alertcenter.alerts.batchDelete": {
        "description": "Performs batch delete operation on alerts.",
        "flatPath": "v1beta1/alerts:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "alerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.alerts.batchUndelete": {
        "description": "Performs batch undelete operation on alerts.",
        "flatPath": "v1beta1/alerts:batchUndelete",
        "httpMethod": "POST",
        "method": "batchUndelete",
        "resourceType": "alerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.alerts.delete": {
        "description": "Marks the specified alert for deletion. An alert that has been marked for deletion is removed from Alert Center after 30 days. Marking an alert for deletion has no effect on an alert which has already been marked for deletion. Attempting to mark a nonexistent alert for deletion results in a `NOT_FOUND` error.",
        "flatPath": "v1beta1/alerts/{alertId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "alerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.alerts.feedback.create": {
        "description": "Creates new feedback for an alert. Attempting to create a feedback for a non-existent alert returns `NOT_FOUND` error. Attempting to create a feedback for an alert that is marked for deletion returns `FAILED_PRECONDITION' error.",
        "flatPath": "v1beta1/alerts/{alertId}/feedback",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "feedback",
        "resourceTypePath": "//alerts",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.alerts.feedback.list": {
        "description": "Lists all the feedback for an alert. Attempting to list feedbacks for a non-existent alert returns `NOT_FOUND` error.",
        "flatPath": "v1beta1/alerts/{alertId}/feedback",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "feedback",
        "resourceTypePath": "//alerts",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.alerts.get": {
        "description": "Gets the specified alert. Attempting to get a nonexistent alert returns `NOT_FOUND` error.",
        "flatPath": "v1beta1/alerts/{alertId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "alerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.alerts.getMetadata": {
        "description": "Returns the metadata of an alert. Attempting to get metadata for a non-existent alert returns `NOT_FOUND` error.",
        "flatPath": "v1beta1/alerts/{alertId}/metadata",
        "httpMethod": "GET",
        "method": "getMetadata",
        "resourceType": "alerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.alerts.list": {
        "description": "Lists the alerts.",
        "flatPath": "v1beta1/alerts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "alerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.alerts.undelete": {
        "description": "Restores, or \"undeletes\", an alert that was marked for deletion within the past 30 days. Attempting to undelete an alert which was marked for deletion over 30 days ago (which has been removed from the Alert Center database) or a nonexistent alert returns a `NOT_FOUND` error. Attempting to undelete an alert which has not been marked for deletion has no effect.",
        "flatPath": "v1beta1/alerts/{alertId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "alerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.getSettings": {
        "description": "Returns customer-level settings.",
        "flatPath": "v1beta1/settings",
        "httpMethod": "GET",
        "method": "getSettings",
        "resourceType": "v1beta1",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "alertcenter.updateSettings": {
        "description": "Updates the customer-level settings.",
        "flatPath": "v1beta1/settings",
        "httpMethod": "PATCH",
        "method": "updateSettings",
        "resourceType": "v1beta1",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1beta1",
    "title": "Google Workspace Alert Center API"
  },
  "analytics": {
    "description": "The Analytics API provides access to Analytics configuration and report data.",
    "methods": {
      "analytics.data.ga.get": {
        "description": "Returns Analytics data for a view (profile).",
        "flatPath": "data/ga",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "ga",
        "resourceTypePath": "//data",
        "versions": [
          "v3"
        ]
      },
      "analytics.data.mcf.get": {
        "description": "Returns Analytics Multi-Channel Funnels data for a view (profile).",
        "flatPath": "data/mcf",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "mcf",
        "resourceTypePath": "//data",
        "versions": [
          "v3"
        ]
      },
      "analytics.data.realtime.get": {
        "description": "Returns real time data for a view (profile).",
        "flatPath": "data/realtime",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "realtime",
        "resourceTypePath": "//data",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.accountSummaries.list": {
        "description": "Lists account summaries (lightweight tree comprised of accounts/properties/profiles) to which the user has access.",
        "flatPath": "management/accountSummaries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accountSummaries",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.accountUserLinks.delete": {
        "description": "Removes a user from the given account.",
        "flatPath": "management/accounts/{accountId}/entityUserLinks/{linkId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "accountUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.accountUserLinks.insert": {
        "description": "Adds a new user to the given account.",
        "flatPath": "management/accounts/{accountId}/entityUserLinks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "accountUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.accountUserLinks.list": {
        "description": "Lists account-user links for a given account.",
        "flatPath": "management/accounts/{accountId}/entityUserLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accountUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.accountUserLinks.update": {
        "description": "Updates permissions for an existing user on the given account.",
        "flatPath": "management/accounts/{accountId}/entityUserLinks/{linkId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "accountUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.accounts.list": {
        "description": "Lists all accounts to which the user has access.",
        "flatPath": "management/accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.clientId.hashClientId": {
        "description": "Hashes the given Client ID.",
        "flatPath": "management/clientId:hashClientId",
        "httpMethod": "POST",
        "method": "hashClientId",
        "resourceType": "clientId",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customDataSources.list": {
        "description": "List custom data sources to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customDataSources",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customDimensions.get": {
        "description": "Get a custom dimension to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customDimensions",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customDimensions.insert": {
        "description": "Create a new custom dimension.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "customDimensions",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customDimensions.list": {
        "description": "Lists custom dimensions to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customDimensions",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customDimensions.patch": {
        "description": "Updates an existing custom dimension. This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customDimensions",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customDimensions.update": {
        "description": "Updates an existing custom dimension.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDimensions/{customDimensionId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "customDimensions",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customMetrics.get": {
        "description": "Get a custom metric to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customMetrics",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customMetrics.insert": {
        "description": "Create a new custom metric.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "customMetrics",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customMetrics.list": {
        "description": "Lists custom metrics to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customMetrics",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customMetrics.patch": {
        "description": "Updates an existing custom metric. This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customMetrics",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.customMetrics.update": {
        "description": "Updates an existing custom metric.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customMetrics/{customMetricId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "customMetrics",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.experiments.delete": {
        "description": "Delete an experiment.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "experiments",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.experiments.get": {
        "description": "Returns an experiment to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "experiments",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.experiments.insert": {
        "description": "Create a new experiment.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "experiments",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.experiments.list": {
        "description": "Lists experiments to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "experiments",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.experiments.patch": {
        "description": "Update an existing experiment. This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "experiments",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.experiments.update": {
        "description": "Update an existing experiment.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/experiments/{experimentId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "experiments",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.filters.delete": {
        "description": "Delete a filter.",
        "flatPath": "management/accounts/{accountId}/filters/{filterId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "filters",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.filters.get": {
        "description": "Returns filters to which the user has access.",
        "flatPath": "management/accounts/{accountId}/filters/{filterId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "filters",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.filters.insert": {
        "description": "Create a new filter.",
        "flatPath": "management/accounts/{accountId}/filters",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "filters",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.filters.list": {
        "description": "Lists all filters for an account",
        "flatPath": "management/accounts/{accountId}/filters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "filters",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.filters.patch": {
        "description": "Updates an existing filter. This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/filters/{filterId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "filters",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.filters.update": {
        "description": "Updates an existing filter.",
        "flatPath": "management/accounts/{accountId}/filters/{filterId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "filters",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.goals.get": {
        "description": "Gets a goal to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "goals",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.goals.insert": {
        "description": "Create a new goal.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "goals",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.goals.list": {
        "description": "Lists goals to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "goals",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.goals.patch": {
        "description": "Updates an existing goal. This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "goals",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.goals.update": {
        "description": "Updates an existing goal.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/goals/{goalId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "goals",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileFilterLinks.delete": {
        "description": "Delete a profile filter link.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "profileFilterLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileFilterLinks.get": {
        "description": "Returns a single profile filter link.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "profileFilterLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileFilterLinks.insert": {
        "description": "Create a new profile filter link.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "profileFilterLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileFilterLinks.list": {
        "description": "Lists all profile filter links for a profile.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "profileFilterLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileFilterLinks.patch": {
        "description": "Update an existing profile filter link. This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "profileFilterLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileFilterLinks.update": {
        "description": "Update an existing profile filter link.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/profileFilterLinks/{linkId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "profileFilterLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileUserLinks.delete": {
        "description": "Removes a user from the given view (profile).",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "profileUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileUserLinks.insert": {
        "description": "Adds a new user to the given view (profile).",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "profileUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileUserLinks.list": {
        "description": "Lists profile-user links for a given view (profile).",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "profileUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profileUserLinks.update": {
        "description": "Updates permissions for an existing user on the given view (profile).",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/entityUserLinks/{linkId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "profileUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profiles.delete": {
        "description": "Deletes a view (profile).",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "profiles",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profiles.get": {
        "description": "Gets a view (profile) to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "profiles",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profiles.insert": {
        "description": "Create a new view (profile).",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "profiles",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profiles.list": {
        "description": "Lists views (profiles) to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "profiles",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profiles.patch": {
        "description": "Updates an existing view (profile). This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "profiles",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.profiles.update": {
        "description": "Updates an existing view (profile).",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "profiles",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.remarketingAudience.delete": {
        "description": "Delete a remarketing audience.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "remarketingAudience",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.remarketingAudience.get": {
        "description": "Gets a remarketing audience to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "remarketingAudience",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.remarketingAudience.insert": {
        "description": "Creates a new remarketing audience.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "remarketingAudience",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.remarketingAudience.list": {
        "description": "Lists remarketing audiences to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "remarketingAudience",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.remarketingAudience.patch": {
        "description": "Updates an existing remarketing audience. This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "remarketingAudience",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.remarketingAudience.update": {
        "description": "Updates an existing remarketing audience.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/remarketingAudiences/{remarketingAudienceId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "remarketingAudience",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.segments.list": {
        "description": "Lists segments to which the user has access.",
        "flatPath": "management/segments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "segments",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.unsampledReports.delete": {
        "description": "Deletes an unsampled report.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "unsampledReports",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.unsampledReports.get": {
        "description": "Returns a single unsampled report.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports/{unsampledReportId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "unsampledReports",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.unsampledReports.insert": {
        "description": "Create a new unsampled report.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "unsampledReports",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.unsampledReports.list": {
        "description": "Lists unsampled reports to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/profiles/{profileId}/unsampledReports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "unsampledReports",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.uploads.deleteUploadData": {
        "description": "Delete data associated with a previous upload.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/deleteUploadData",
        "httpMethod": "POST",
        "method": "deleteUploadData",
        "resourceType": "uploads",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.uploads.get": {
        "description": "List uploads to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads/{uploadId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "uploads",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.uploads.list": {
        "description": "List uploads to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "uploads",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.uploads.uploadData": {
        "description": "Upload data for a custom data source.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/customDataSources/{customDataSourceId}/uploads",
        "httpMethod": "POST",
        "method": "uploadData",
        "resourceType": "uploads",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webPropertyAdWordsLinks.delete": {
        "description": "Deletes a web property-Google Ads link.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "webPropertyAdWordsLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webPropertyAdWordsLinks.get": {
        "description": "Returns a web property-Google Ads link to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "webPropertyAdWordsLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webPropertyAdWordsLinks.insert": {
        "description": "Creates a webProperty-Google Ads link.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "webPropertyAdWordsLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webPropertyAdWordsLinks.list": {
        "description": "Lists webProperty-Google Ads links for a given web property.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webPropertyAdWordsLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webPropertyAdWordsLinks.patch": {
        "description": "Updates an existing webProperty-Google Ads link. This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "webPropertyAdWordsLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webPropertyAdWordsLinks.update": {
        "description": "Updates an existing webProperty-Google Ads link.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityAdWordsLinks/{webPropertyAdWordsLinkId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "webPropertyAdWordsLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webproperties.get": {
        "description": "Gets a web property to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "webproperties",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webproperties.insert": {
        "description": "Create a new property if the account has fewer than 20 properties. Web properties are visible in the Google Analytics interface only if they have at least one profile.",
        "flatPath": "management/accounts/{accountId}/webproperties",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "webproperties",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webproperties.list": {
        "description": "Lists web properties to which the user has access.",
        "flatPath": "management/accounts/{accountId}/webproperties",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webproperties",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webproperties.patch": {
        "description": "Updates an existing web property. This method supports patch semantics.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "webproperties",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webproperties.update": {
        "description": "Updates an existing web property.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "webproperties",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webpropertyUserLinks.delete": {
        "description": "Removes a user from the given web property.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "webpropertyUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webpropertyUserLinks.insert": {
        "description": "Adds a new user to the given web property.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "webpropertyUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webpropertyUserLinks.list": {
        "description": "Lists webProperty-user links for a given web property.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webpropertyUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.management.webpropertyUserLinks.update": {
        "description": "Updates permissions for an existing user on the given web property.",
        "flatPath": "management/accounts/{accountId}/webproperties/{webPropertyId}/entityUserLinks/{linkId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "webpropertyUserLinks",
        "resourceTypePath": "//management",
        "versions": [
          "v3"
        ]
      },
      "analytics.metadata.columns.list": {
        "description": "Lists all columns for a report type",
        "flatPath": "metadata/{reportType}/columns",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "columns",
        "resourceTypePath": "//metadata",
        "versions": [
          "v3"
        ]
      },
      "analytics.provisioning.createAccountTicket": {
        "description": "Creates an account ticket.",
        "flatPath": "provisioning/createAccountTicket",
        "httpMethod": "POST",
        "method": "createAccountTicket",
        "resourceType": "provisioning",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "analytics.provisioning.createAccountTree": {
        "description": "Provision account.",
        "flatPath": "provisioning/createAccountTree",
        "httpMethod": "POST",
        "method": "createAccountTree",
        "resourceType": "provisioning",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "analytics.userDeletion.userDeletionRequest.upsert": {
        "description": "Insert or update a user deletion requests.",
        "flatPath": "userDeletion/userDeletionRequests:upsert",
        "httpMethod": "POST",
        "method": "upsert",
        "resourceType": "userDeletionRequest",
        "resourceTypePath": "//userDeletion",
        "versions": [
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Google Analytics API"
  },
  "analyticsadmin": {
    "description": "",
    "methods": {
      "analyticsadmin.accountSummaries.list": {
        "description": "Returns summaries of all accounts accessible by the caller.",
        "flatPath": "v1alpha/accountSummaries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accountSummaries",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.delete": {
        "description": "Marks target Account as soft-deleted (ie: \"trashed\") and returns it. This API does not have a method to restore soft-deleted accounts. However, they can be restored using the Trash Can UI. If the accounts are not restored before the expiration time, the account and all child resources (eg: Properties, GoogleAdsLinks, Streams, UserLinks) will be permanently purged. https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found.",
        "flatPath": "v1alpha/accounts/{accountsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.get": {
        "description": "Lookup for a single Account.",
        "flatPath": "v1alpha/accounts/{accountsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.getDataSharingSettings": {
        "description": "Get data sharing settings on an account. Data sharing settings are singletons.",
        "flatPath": "v1alpha/accounts/{accountsId}/dataSharingSettings",
        "httpMethod": "GET",
        "method": "getDataSharingSettings",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.list": {
        "description": "Returns all accounts accessible by the caller. Note that these accounts might not currently have GA4 properties. Soft-deleted (ie: \"trashed\") accounts are excluded by default. Returns an empty list if no relevant accounts are found.",
        "flatPath": "v1alpha/accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.patch": {
        "description": "Updates an account.",
        "flatPath": "v1alpha/accounts/{accountsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.provisionAccountTicket": {
        "description": "Requests a ticket for creating an account.",
        "flatPath": "v1alpha/accounts:provisionAccountTicket",
        "httpMethod": "POST",
        "method": "provisionAccountTicket",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.searchChangeHistoryEvents": {
        "description": "Searches through all changes to an account or its children given the specified set of filters.",
        "flatPath": "v1alpha/accounts/{accountsId}:searchChangeHistoryEvents",
        "httpMethod": "POST",
        "method": "searchChangeHistoryEvents",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.audit": {
        "description": "Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them permissions, which is currently only usable/discoverable in the GA or GMP UIs.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks:audit",
        "httpMethod": "POST",
        "method": "audit",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.batchCreate": {
        "description": "Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.batchDelete": {
        "description": "Deletes information about multiple users' links to an account or property.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.batchGet": {
        "description": "Gets information about multiple users' links to an account or property.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.batchUpdate": {
        "description": "Updates information about multiple users' links to an account or property.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.create": {
        "description": "Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be unioned with the permissions specified in the new UserLink.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.delete": {
        "description": "Deletes a user link on an account or property.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks/{userLinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.get": {
        "description": "Gets information about a user's link to an account or property.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks/{userLinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.list": {
        "description": "Lists all user links on an account or property.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.accounts.userLinks.patch": {
        "description": "Updates a user link on an account or property.",
        "flatPath": "v1alpha/accounts/{accountsId}/userLinks/{userLinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "userLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.acknowledgeUserDataCollection": {
        "description": "Acknowledges the terms of user data collection for the specified property. This acknowledgement must be completed (either in the Google Analytics UI or via this API) before MeasurementProtocolSecret resources may be created.",
        "flatPath": "v1alpha/properties/{propertiesId}:acknowledgeUserDataCollection",
        "httpMethod": "POST",
        "method": "acknowledgeUserDataCollection",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.androidAppDataStreams.delete": {
        "description": "Deletes an android app stream on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/androidAppDataStreams/{androidAppDataStreamsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "androidAppDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.androidAppDataStreams.get": {
        "description": "Lookup for a single AndroidAppDataStream",
        "flatPath": "v1alpha/properties/{propertiesId}/androidAppDataStreams/{androidAppDataStreamsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "androidAppDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.androidAppDataStreams.list": {
        "description": "Returns child android app streams under the specified parent property. Android app streams will be excluded if the caller does not have access. Returns an empty list if no relevant android app streams are found.",
        "flatPath": "v1alpha/properties/{propertiesId}/androidAppDataStreams",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "androidAppDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.androidAppDataStreams.measurementProtocolSecrets.create": {
        "description": "Creates a measurement protocol secret.",
        "flatPath": "v1alpha/properties/{propertiesId}/androidAppDataStreams/{androidAppDataStreamsId}/measurementProtocolSecrets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/androidAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.androidAppDataStreams.measurementProtocolSecrets.delete": {
        "description": "Deletes target MeasurementProtocolSecret.",
        "flatPath": "v1alpha/properties/{propertiesId}/androidAppDataStreams/{androidAppDataStreamsId}/measurementProtocolSecrets/{measurementProtocolSecretsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/androidAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.androidAppDataStreams.measurementProtocolSecrets.get": {
        "description": "Lookup for a single \"GA4\" MeasurementProtocolSecret.",
        "flatPath": "v1alpha/properties/{propertiesId}/androidAppDataStreams/{androidAppDataStreamsId}/measurementProtocolSecrets/{measurementProtocolSecretsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/androidAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.androidAppDataStreams.measurementProtocolSecrets.list": {
        "description": "Returns child MeasurementProtocolSecrets under the specified parent Property.",
        "flatPath": "v1alpha/properties/{propertiesId}/androidAppDataStreams/{androidAppDataStreamsId}/measurementProtocolSecrets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/androidAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.androidAppDataStreams.measurementProtocolSecrets.patch": {
        "description": "Updates a measurement protocol secret.",
        "flatPath": "v1alpha/properties/{propertiesId}/androidAppDataStreams/{androidAppDataStreamsId}/measurementProtocolSecrets/{measurementProtocolSecretsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/androidAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.androidAppDataStreams.patch": {
        "description": "Updates an android app stream on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/androidAppDataStreams/{androidAppDataStreamsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "androidAppDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.conversionEvents.create": {
        "description": "Creates a conversion event with the specified attributes.",
        "flatPath": "v1alpha/properties/{propertiesId}/conversionEvents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "conversionEvents",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.conversionEvents.delete": {
        "description": "Deletes a conversion event in a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/conversionEvents/{conversionEventsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "conversionEvents",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.conversionEvents.get": {
        "description": "Retrieve a single conversion event.",
        "flatPath": "v1alpha/properties/{propertiesId}/conversionEvents/{conversionEventsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "conversionEvents",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.conversionEvents.list": {
        "description": "Returns a list of conversion events in the specified parent property. Returns an empty list if no conversion events are found.",
        "flatPath": "v1alpha/properties/{propertiesId}/conversionEvents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "conversionEvents",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.create": {
        "description": "Creates an \"GA4\" property with the specified location and attributes.",
        "flatPath": "v1alpha/properties",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customDimensions.archive": {
        "description": "Archives a CustomDimension on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/customDimensions/{customDimensionsId}:archive",
        "httpMethod": "POST",
        "method": "archive",
        "resourceType": "customDimensions",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customDimensions.create": {
        "description": "Creates a CustomDimension.",
        "flatPath": "v1alpha/properties/{propertiesId}/customDimensions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "customDimensions",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customDimensions.get": {
        "description": "Lookup for a single CustomDimension.",
        "flatPath": "v1alpha/properties/{propertiesId}/customDimensions/{customDimensionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customDimensions",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customDimensions.list": {
        "description": "Lists CustomDimensions on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/customDimensions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customDimensions",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customDimensions.patch": {
        "description": "Updates a CustomDimension on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/customDimensions/{customDimensionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customDimensions",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customMetrics.archive": {
        "description": "Archives a CustomMetric on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/customMetrics/{customMetricsId}:archive",
        "httpMethod": "POST",
        "method": "archive",
        "resourceType": "customMetrics",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customMetrics.create": {
        "description": "Creates a CustomMetric.",
        "flatPath": "v1alpha/properties/{propertiesId}/customMetrics",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "customMetrics",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customMetrics.get": {
        "description": "Lookup for a single CustomMetric.",
        "flatPath": "v1alpha/properties/{propertiesId}/customMetrics/{customMetricsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customMetrics",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customMetrics.list": {
        "description": "Lists CustomMetrics on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/customMetrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customMetrics",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.customMetrics.patch": {
        "description": "Updates a CustomMetric on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/customMetrics/{customMetricsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customMetrics",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.delete": {
        "description": "Marks target Property as soft-deleted (ie: \"trashed\") and returns it. This API does not have a method to restore soft-deleted properties. However, they can be restored using the Trash Can UI. If the properties are not restored before the expiration time, the Property and all child resources (eg: GoogleAdsLinks, Streams, UserLinks) will be permanently purged. https://support.google.com/analytics/answer/6154772 Returns an error if the target is not found, or is not an GA4 Property.",
        "flatPath": "v1alpha/properties/{propertiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.approve": {
        "description": "Approves a DisplayVideo360AdvertiserLinkProposal. The DisplayVideo360AdvertiserLinkProposal will be deleted and a new DisplayVideo360AdvertiserLink will be created.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinkProposals/{displayVideo360AdvertiserLinkProposalsId}:approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "displayVideo360AdvertiserLinkProposals",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.cancel": {
        "description": "Cancels a DisplayVideo360AdvertiserLinkProposal. Cancelling can mean either: - Declining a proposal initiated from Display & Video 360 - Withdrawing a proposal initiated from Google Analytics After being cancelled, a proposal will eventually be deleted automatically.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinkProposals/{displayVideo360AdvertiserLinkProposalsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "displayVideo360AdvertiserLinkProposals",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.create": {
        "description": "Creates a DisplayVideo360AdvertiserLinkProposal.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinkProposals",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "displayVideo360AdvertiserLinkProposals",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.delete": {
        "description": "Deletes a DisplayVideo360AdvertiserLinkProposal on a property. This can only be used on cancelled proposals.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinkProposals/{displayVideo360AdvertiserLinkProposalsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "displayVideo360AdvertiserLinkProposals",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.get": {
        "description": "Lookup for a single DisplayVideo360AdvertiserLinkProposal.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinkProposals/{displayVideo360AdvertiserLinkProposalsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "displayVideo360AdvertiserLinkProposals",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinkProposals.list": {
        "description": "Lists DisplayVideo360AdvertiserLinkProposals on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinkProposals",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "displayVideo360AdvertiserLinkProposals",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinks.create": {
        "description": "Creates a DisplayVideo360AdvertiserLink. This can only be utilized by users who have proper authorization both on the Google Analytics property and on the Display & Video 360 advertiser. Users who do not have access to the Display & Video 360 advertiser should instead seek to create a DisplayVideo360LinkProposal.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "displayVideo360AdvertiserLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinks.delete": {
        "description": "Deletes a DisplayVideo360AdvertiserLink on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinks/{displayVideo360AdvertiserLinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "displayVideo360AdvertiserLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinks.get": {
        "description": "Look up a single DisplayVideo360AdvertiserLink",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinks/{displayVideo360AdvertiserLinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "displayVideo360AdvertiserLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinks.list": {
        "description": "Lists all DisplayVideo360AdvertiserLinks on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "displayVideo360AdvertiserLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.displayVideo360AdvertiserLinks.patch": {
        "description": "Updates a DisplayVideo360AdvertiserLink on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/displayVideo360AdvertiserLinks/{displayVideo360AdvertiserLinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "displayVideo360AdvertiserLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.firebaseLinks.create": {
        "description": "Creates a FirebaseLink. Properties can have at most one FirebaseLink.",
        "flatPath": "v1alpha/properties/{propertiesId}/firebaseLinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "firebaseLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.firebaseLinks.delete": {
        "description": "Deletes a FirebaseLink on a property",
        "flatPath": "v1alpha/properties/{propertiesId}/firebaseLinks/{firebaseLinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "firebaseLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.firebaseLinks.list": {
        "description": "Lists FirebaseLinks on a property. Properties can have at most one FirebaseLink.",
        "flatPath": "v1alpha/properties/{propertiesId}/firebaseLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "firebaseLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.get": {
        "description": "Lookup for a single \"GA4\" Property.",
        "flatPath": "v1alpha/properties/{propertiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.getDataRetentionSettings": {
        "description": "Returns the singleton data retention settings for this property.",
        "flatPath": "v1alpha/properties/{propertiesId}/dataRetentionSettings",
        "httpMethod": "GET",
        "method": "getDataRetentionSettings",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.getGoogleSignalsSettings": {
        "description": "Lookup for Google Signals settings for a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/googleSignalsSettings",
        "httpMethod": "GET",
        "method": "getGoogleSignalsSettings",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.googleAdsLinks.create": {
        "description": "Creates a GoogleAdsLink.",
        "flatPath": "v1alpha/properties/{propertiesId}/googleAdsLinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "googleAdsLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.googleAdsLinks.delete": {
        "description": "Deletes a GoogleAdsLink on a property",
        "flatPath": "v1alpha/properties/{propertiesId}/googleAdsLinks/{googleAdsLinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "googleAdsLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.googleAdsLinks.list": {
        "description": "Lists GoogleAdsLinks on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/googleAdsLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "googleAdsLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.googleAdsLinks.patch": {
        "description": "Updates a GoogleAdsLink on a property",
        "flatPath": "v1alpha/properties/{propertiesId}/googleAdsLinks/{googleAdsLinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "googleAdsLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.iosAppDataStreams.delete": {
        "description": "Deletes an iOS app stream on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/iosAppDataStreams/{iosAppDataStreamsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "iosAppDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.iosAppDataStreams.get": {
        "description": "Lookup for a single IosAppDataStream",
        "flatPath": "v1alpha/properties/{propertiesId}/iosAppDataStreams/{iosAppDataStreamsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "iosAppDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.iosAppDataStreams.list": {
        "description": "Returns child iOS app data streams under the specified parent property. iOS app data streams will be excluded if the caller does not have access. Returns an empty list if no relevant iOS app data streams are found.",
        "flatPath": "v1alpha/properties/{propertiesId}/iosAppDataStreams",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "iosAppDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.iosAppDataStreams.measurementProtocolSecrets.create": {
        "description": "Creates a measurement protocol secret.",
        "flatPath": "v1alpha/properties/{propertiesId}/iosAppDataStreams/{iosAppDataStreamsId}/measurementProtocolSecrets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/iosAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.iosAppDataStreams.measurementProtocolSecrets.delete": {
        "description": "Deletes target MeasurementProtocolSecret.",
        "flatPath": "v1alpha/properties/{propertiesId}/iosAppDataStreams/{iosAppDataStreamsId}/measurementProtocolSecrets/{measurementProtocolSecretsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/iosAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.iosAppDataStreams.measurementProtocolSecrets.get": {
        "description": "Lookup for a single \"GA4\" MeasurementProtocolSecret.",
        "flatPath": "v1alpha/properties/{propertiesId}/iosAppDataStreams/{iosAppDataStreamsId}/measurementProtocolSecrets/{measurementProtocolSecretsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/iosAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.iosAppDataStreams.measurementProtocolSecrets.list": {
        "description": "Returns child MeasurementProtocolSecrets under the specified parent Property.",
        "flatPath": "v1alpha/properties/{propertiesId}/iosAppDataStreams/{iosAppDataStreamsId}/measurementProtocolSecrets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/iosAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.iosAppDataStreams.measurementProtocolSecrets.patch": {
        "description": "Updates a measurement protocol secret.",
        "flatPath": "v1alpha/properties/{propertiesId}/iosAppDataStreams/{iosAppDataStreamsId}/measurementProtocolSecrets/{measurementProtocolSecretsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/iosAppDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.iosAppDataStreams.patch": {
        "description": "Updates an iOS app stream on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/iosAppDataStreams/{iosAppDataStreamsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "iosAppDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.list": {
        "description": "Returns child Properties under the specified parent Account. Only \"GA4\" properties will be returned. Properties will be excluded if the caller does not have access. Soft-deleted (ie: \"trashed\") properties are excluded by default. Returns an empty list if no relevant properties are found.",
        "flatPath": "v1alpha/properties",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.patch": {
        "description": "Updates a property.",
        "flatPath": "v1alpha/properties/{propertiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.updateDataRetentionSettings": {
        "description": "Updates the singleton data retention settings for this property.",
        "flatPath": "v1alpha/properties/{propertiesId}/dataRetentionSettings",
        "httpMethod": "PATCH",
        "method": "updateDataRetentionSettings",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.updateGoogleSignalsSettings": {
        "description": "Updates Google Signals settings for a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/googleSignalsSettings",
        "httpMethod": "PATCH",
        "method": "updateGoogleSignalsSettings",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.audit": {
        "description": "Lists all user links on an account or property, including implicit ones that come from effective permissions granted by groups or organization admin roles. If a returned user link does not have direct permissions, they cannot be removed from the account or property directly with the DeleteUserLink command. They have to be removed from the group/etc that gives them permissions, which is currently only usable/discoverable in the GA or GMP UIs.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks:audit",
        "httpMethod": "POST",
        "method": "audit",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.batchCreate": {
        "description": "Creates information about multiple users' links to an account or property. This method is transactional. If any UserLink cannot be created, none of the UserLinks will be created.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.batchDelete": {
        "description": "Deletes information about multiple users' links to an account or property.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.batchGet": {
        "description": "Gets information about multiple users' links to an account or property.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.batchUpdate": {
        "description": "Updates information about multiple users' links to an account or property.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.create": {
        "description": "Creates a user link on an account or property. If the user with the specified email already has permissions on the account or property, then the user's existing permissions will be unioned with the permissions specified in the new UserLink.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.delete": {
        "description": "Deletes a user link on an account or property.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks/{userLinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.get": {
        "description": "Gets information about a user's link to an account or property.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks/{userLinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.list": {
        "description": "Lists all user links on an account or property.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.userLinks.patch": {
        "description": "Updates a user link on an account or property.",
        "flatPath": "v1alpha/properties/{propertiesId}/userLinks/{userLinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "userLinks",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.create": {
        "description": "Creates a web stream with the specified location and attributes.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "webDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.delete": {
        "description": "Deletes a web stream on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams/{webDataStreamsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "webDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.get": {
        "description": "Lookup for a single WebDataStream",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams/{webDataStreamsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "webDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.getGlobalSiteTag": {
        "description": "Returns the Site Tag for the specified web stream. Site Tags are immutable singletons.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams/{webDataStreamsId}/globalSiteTag",
        "httpMethod": "GET",
        "method": "getGlobalSiteTag",
        "resourceType": "webDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.list": {
        "description": "Returns child web data streams under the specified parent property. Web data streams will be excluded if the caller does not have access. Returns an empty list if no relevant web data streams are found.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.measurementProtocolSecrets.create": {
        "description": "Creates a measurement protocol secret.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams/{webDataStreamsId}/measurementProtocolSecrets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/webDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.measurementProtocolSecrets.delete": {
        "description": "Deletes target MeasurementProtocolSecret.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams/{webDataStreamsId}/measurementProtocolSecrets/{measurementProtocolSecretsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/webDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.measurementProtocolSecrets.get": {
        "description": "Lookup for a single \"GA4\" MeasurementProtocolSecret.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams/{webDataStreamsId}/measurementProtocolSecrets/{measurementProtocolSecretsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/webDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.measurementProtocolSecrets.list": {
        "description": "Returns child MeasurementProtocolSecrets under the specified parent Property.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams/{webDataStreamsId}/measurementProtocolSecrets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/webDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.measurementProtocolSecrets.patch": {
        "description": "Updates a measurement protocol secret.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams/{webDataStreamsId}/measurementProtocolSecrets/{measurementProtocolSecretsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "measurementProtocolSecrets",
        "resourceTypePath": "//properties/webDataStreams",
        "versions": [
          "v1alpha"
        ]
      },
      "analyticsadmin.properties.webDataStreams.patch": {
        "description": "Updates a web stream on a property.",
        "flatPath": "v1alpha/properties/{propertiesId}/webDataStreams/{webDataStreamsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "webDataStreams",
        "resourceTypePath": "//properties",
        "versions": [
          "v1alpha"
        ]
      }
    },
    "preferredVersion": "v1alpha",
    "title": "Google Analytics Admin API"
  },
  "analyticsdata": {
    "description": "Accesses report data in Google Analytics.",
    "methods": {
      "analyticsdata.properties.batchRunPivotReports": {
        "description": "Returns multiple pivot reports in a batch. All reports must be for the same GA4 Property.",
        "flatPath": "v1beta/properties/{propertiesId}:batchRunPivotReports",
        "httpMethod": "POST",
        "method": "batchRunPivotReports",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1beta"
        ]
      },
      "analyticsdata.properties.batchRunReports": {
        "description": "Returns multiple reports in a batch. All reports must be for the same GA4 Property.",
        "flatPath": "v1beta/properties/{propertiesId}:batchRunReports",
        "httpMethod": "POST",
        "method": "batchRunReports",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1beta"
        ]
      },
      "analyticsdata.properties.checkCompatibility": {
        "description": "This compatibility method lists dimensions and metrics that can be added to a report request and maintain compatibility. This method fails if the request's dimensions and metrics are incompatible. In Google Analytics, reports fail if they request incompatible dimensions and/or metrics; in that case, you will need to remove dimensions and/or metrics from the incompatible report until the report is compatible. The Realtime and Core reports have different compatibility rules. This method checks compatibility for Core reports.",
        "flatPath": "v1beta/properties/{propertiesId}:checkCompatibility",
        "httpMethod": "POST",
        "method": "checkCompatibility",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1beta"
        ]
      },
      "analyticsdata.properties.getMetadata": {
        "description": "Returns metadata for dimensions and metrics available in reporting methods. Used to explore the dimensions and metrics. In this method, a Google Analytics GA4 Property Identifier is specified in the request, and the metadata response includes Custom dimensions and metrics as well as Universal metadata. For example if a custom metric with parameter name `levels_unlocked` is registered to a property, the Metadata response will contain `customEvent:levels_unlocked`. Universal metadata are dimensions and metrics applicable to any property such as `country` and `totalUsers`.",
        "flatPath": "v1beta/properties/{propertiesId}/metadata",
        "httpMethod": "GET",
        "method": "getMetadata",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1beta"
        ]
      },
      "analyticsdata.properties.runPivotReport": {
        "description": "Returns a customized pivot report of your Google Analytics event data. Pivot reports are more advanced and expressive formats than regular reports. In a pivot report, dimensions are only visible if they are included in a pivot. Multiple pivots can be specified to further dissect your data.",
        "flatPath": "v1beta/properties/{propertiesId}:runPivotReport",
        "httpMethod": "POST",
        "method": "runPivotReport",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1beta"
        ]
      },
      "analyticsdata.properties.runRealtimeReport": {
        "description": "The Google Analytics Realtime API returns a customized report of realtime event data for your property. These reports show events and usage from the last 30 minutes.",
        "flatPath": "v1beta/properties/{propertiesId}:runRealtimeReport",
        "httpMethod": "POST",
        "method": "runRealtimeReport",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1beta"
        ]
      },
      "analyticsdata.properties.runReport": {
        "description": "Returns a customized report of your Google Analytics event data. Reports contain statistics derived from data collected by the Google Analytics tracking code. The data returned from the API is as a table with columns for the requested dimensions and metrics. Metrics are individual measurements of user activity on your property, such as active users or event count. Dimensions break down metrics across some common criteria, such as country or event name.",
        "flatPath": "v1beta/properties/{propertiesId}:runReport",
        "httpMethod": "POST",
        "method": "runReport",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v1beta"
        ]
      }
    },
    "preferredVersion": "v1beta",
    "title": "Google Analytics Data API"
  },
  "analyticsreporting": {
    "description": "Accesses Analytics report data.",
    "methods": {
      "analyticsreporting.reports.batchGet": {
        "description": "Returns the Analytics data.",
        "flatPath": "v4/reports:batchGet",
        "httpMethod": "POST",
        "method": "batchGet",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "analyticsreporting.userActivity.search": {
        "description": "Returns User Activity data.",
        "flatPath": "v4/userActivity:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "userActivity",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      }
    },
    "preferredVersion": "v4",
    "title": "Analytics Reporting API"
  },
  "androiddeviceprovisioning": {
    "description": "Automates Android zero-touch enrollment for device resellers, customers, and EMMs.",
    "methods": {
      "androiddeviceprovisioning.customers.configurations.create": {
        "description": "Creates a new configuration. Once created, a customer can apply the configuration to devices.",
        "flatPath": "v1/customers/{customersId}/configurations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "configurations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.configurations.delete": {
        "description": "Deletes an unused configuration. The API call fails if the customer has devices with the configuration applied.",
        "flatPath": "v1/customers/{customersId}/configurations/{configurationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "configurations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.configurations.get": {
        "description": "Gets the details of a configuration.",
        "flatPath": "v1/customers/{customersId}/configurations/{configurationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "configurations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.configurations.list": {
        "description": "Lists a customer's configurations.",
        "flatPath": "v1/customers/{customersId}/configurations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "configurations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.configurations.patch": {
        "description": "Updates a configuration's field values.",
        "flatPath": "v1/customers/{customersId}/configurations/{configurationsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "configurations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.devices.applyConfiguration": {
        "description": "Applies a Configuration to the device to register the device for zero-touch enrollment. After applying a configuration to a device, the device automatically provisions itself on first boot, or next factory reset.",
        "flatPath": "v1/customers/{customersId}/devices:applyConfiguration",
        "httpMethod": "POST",
        "method": "applyConfiguration",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.devices.get": {
        "description": "Gets the details of a device.",
        "flatPath": "v1/customers/{customersId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.devices.list": {
        "description": "Lists a customer's devices.",
        "flatPath": "v1/customers/{customersId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.devices.removeConfiguration": {
        "description": "Removes a configuration from device.",
        "flatPath": "v1/customers/{customersId}/devices:removeConfiguration",
        "httpMethod": "POST",
        "method": "removeConfiguration",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.devices.unclaim": {
        "description": "Unclaims a device from a customer and removes it from zero-touch enrollment. After removing a device, a customer must contact their reseller to register the device into zero-touch enrollment again.",
        "flatPath": "v1/customers/{customersId}/devices:unclaim",
        "httpMethod": "POST",
        "method": "unclaim",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.dpcs.list": {
        "description": "Lists the DPCs (device policy controllers) that support zero-touch enrollment.",
        "flatPath": "v1/customers/{customersId}/dpcs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dpcs",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.customers.list": {
        "description": "Lists the user's customer accounts.",
        "flatPath": "v1/customers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.customers.create": {
        "description": "Creates a customer for zero-touch enrollment. After the method returns successfully, admin and owner roles can manage devices and EMM configs by calling API methods or using their zero-touch enrollment portal. The customer receives an email that welcomes them to zero-touch enrollment and explains how to sign into the portal.",
        "flatPath": "v1/partners/{partnersId}/customers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "customers",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.customers.list": {
        "description": "Lists the customers that are enrolled to the reseller identified by the `partnerId` argument. This list includes customers that the reseller created and customers that enrolled themselves using the portal.",
        "flatPath": "v1/partners/{partnersId}/customers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customers",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.devices.claim": {
        "description": "Claims a device for a customer and adds it to zero-touch enrollment. If the device is already claimed by another customer, the call returns an error.",
        "flatPath": "v1/partners/{partnersId}/devices:claim",
        "httpMethod": "POST",
        "method": "claim",
        "resourceType": "devices",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.devices.claimAsync": {
        "description": "Claims a batch of devices for a customer asynchronously. Adds the devices to zero-touch enrollment. To learn more, read [Long\u2011running batch operations](/zero-touch/guides/how-it-works#operations).",
        "flatPath": "v1/partners/{partnersId}/devices:claimAsync",
        "httpMethod": "POST",
        "method": "claimAsync",
        "resourceType": "devices",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.devices.findByIdentifier": {
        "description": "Finds devices by hardware identifiers, such as IMEI.",
        "flatPath": "v1/partners/{partnersId}/devices:findByIdentifier",
        "httpMethod": "POST",
        "method": "findByIdentifier",
        "resourceType": "devices",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.devices.findByOwner": {
        "description": "Finds devices claimed for customers. The results only contain devices registered to the reseller that's identified by the `partnerId` argument. The customer's devices purchased from other resellers don't appear in the results.",
        "flatPath": "v1/partners/{partnersId}/devices:findByOwner",
        "httpMethod": "POST",
        "method": "findByOwner",
        "resourceType": "devices",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.devices.get": {
        "description": "Gets a device.",
        "flatPath": "v1/partners/{partnersId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.devices.metadata": {
        "description": "Updates reseller metadata associated with the device.",
        "flatPath": "v1/partners/{partnersId}/devices/{devicesId}/metadata",
        "httpMethod": "POST",
        "method": "metadata",
        "resourceType": "devices",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.devices.unclaim": {
        "description": "Unclaims a device from a customer and removes it from zero-touch enrollment.",
        "flatPath": "v1/partners/{partnersId}/devices:unclaim",
        "httpMethod": "POST",
        "method": "unclaim",
        "resourceType": "devices",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.devices.unclaimAsync": {
        "description": "Unclaims a batch of devices for a customer asynchronously. Removes the devices from zero-touch enrollment. To learn more, read [Long\u2011running batch operations](/zero-touch/guides/how-it-works#operations).",
        "flatPath": "v1/partners/{partnersId}/devices:unclaimAsync",
        "httpMethod": "POST",
        "method": "unclaimAsync",
        "resourceType": "devices",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.devices.updateMetadataAsync": {
        "description": "Updates the reseller metadata attached to a batch of devices. This method updates devices asynchronously and returns an `Operation` that can be used to track progress. Read [Long\u2011running batch operations](/zero-touch/guides/how-it-works#operations).",
        "flatPath": "v1/partners/{partnersId}/devices:updateMetadataAsync",
        "httpMethod": "POST",
        "method": "updateMetadataAsync",
        "resourceType": "devices",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.vendors.customers.list": {
        "description": "Lists the customers of the vendor.",
        "flatPath": "v1/partners/{partnersId}/vendors/{vendorsId}/customers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customers",
        "resourceTypePath": "//partners/vendors",
        "versions": [
          "v1"
        ]
      },
      "androiddeviceprovisioning.partners.vendors.list": {
        "description": "Lists the vendors of the partner.",
        "flatPath": "v1/partners/{partnersId}/vendors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "vendors",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Android Device Provisioning Partner API"
  },
  "androidenterprise": {
    "description": "Manages the deployment of apps to Android Enterprise devices.",
    "methods": {
      "androidenterprise.devices.forceReportUpload": {
        "description": "Uploads a report containing any changes in app states on the device since the last report was generated. You can call this method up to 3 times every 24 hours for a given device. If you exceed the quota, then the Google Play EMM API returns HTTP 429 Too Many Requests.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/forceReportUpload",
        "httpMethod": "POST",
        "method": "forceReportUpload",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.devices.get": {
        "description": "Retrieves the details of a device.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.devices.getState": {
        "description": "Retrieves whether a device's access to Google services is enabled or disabled. The device state takes effect only if enforcing EMM policies on Android devices is enabled in the Google Admin Console. Otherwise, the device state is ignored and all devices are allowed access to Google services. This is only supported for Google-managed users.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state",
        "httpMethod": "GET",
        "method": "getState",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.devices.list": {
        "description": "Retrieves the IDs of all of a user's devices.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.devices.setState": {
        "description": "Sets whether a device's access to Google services is enabled or disabled. The device state takes effect only if enforcing EMM policies on Android devices is enabled in the Google Admin Console. Otherwise, the device state is ignored and all devices are allowed access to Google services. This is only supported for Google-managed users.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state",
        "httpMethod": "PUT",
        "method": "setState",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.devices.update": {
        "description": "Updates the device policy. To ensure the policy is properly enforced, you need to prevent unmanaged accounts from accessing Google Play by setting the allowed_accounts in the managed configuration for the Google Play package. See restrict accounts in Google Play. When provisioning a new device, you should set the device policy using this method before adding the managed Google Play Account to the device, otherwise the policy will not be applied for a short period of time after adding the account to the device.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.acknowledgeNotificationSet": {
        "description": "Acknowledges notifications that were received from Enterprises.PullNotificationSet to prevent subsequent calls from returning the same notifications.",
        "flatPath": "androidenterprise/v1/enterprises/acknowledgeNotificationSet",
        "httpMethod": "POST",
        "method": "acknowledgeNotificationSet",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.completeSignup": {
        "description": "Completes the signup flow, by specifying the Completion token and Enterprise token. This request must not be called multiple times for a given Enterprise Token.",
        "flatPath": "androidenterprise/v1/enterprises/completeSignup",
        "httpMethod": "POST",
        "method": "completeSignup",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.createWebToken": {
        "description": "Returns a unique token to access an embeddable UI. To generate a web UI, pass the generated token into the managed Google Play javascript API. Each token may only be used to start one UI session. See the javascript API documentation for further information.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/createWebToken",
        "httpMethod": "POST",
        "method": "createWebToken",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.enroll": {
        "description": "Enrolls an enterprise with the calling EMM.",
        "flatPath": "androidenterprise/v1/enterprises/enroll",
        "httpMethod": "POST",
        "method": "enroll",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.generateSignupUrl": {
        "description": "Generates a sign-up URL.",
        "flatPath": "androidenterprise/v1/enterprises/signupUrl",
        "httpMethod": "POST",
        "method": "generateSignupUrl",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.get": {
        "description": "Retrieves the name and domain of an enterprise.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.getServiceAccount": {
        "description": "Returns a service account and credentials. The service account can be bound to the enterprise by calling setAccount. The service account is unique to this enterprise and EMM, and will be deleted if the enterprise is unbound. The credentials contain private key data and are not stored server-side. This method can only be called after calling Enterprises.Enroll or Enterprises.CompleteSignup, and before Enterprises.SetAccount; at other times it will return an error. Subsequent calls after the first will generate a new, unique set of credentials, and invalidate the previously generated credentials. Once the service account is bound to the enterprise, it can be managed using the serviceAccountKeys resource.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount",
        "httpMethod": "GET",
        "method": "getServiceAccount",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.getStoreLayout": {
        "description": "Returns the store layout for the enterprise. If the store layout has not been set, returns \"basic\" as the store layout type and no homepage.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout",
        "httpMethod": "GET",
        "method": "getStoreLayout",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.list": {
        "description": "Looks up an enterprise by domain name. This is only supported for enterprises created via the Google-initiated creation flow. Lookup of the id is not needed for enterprises created via the EMM-initiated flow since the EMM learns the enterprise ID in the callback specified in the Enterprises.generateSignupUrl call.",
        "flatPath": "androidenterprise/v1/enterprises",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.pullNotificationSet": {
        "description": "Pulls and returns a notification set for the enterprises associated with the service account authenticated for the request. The notification set may be empty if no notification are pending. A notification set returned needs to be acknowledged within 20 seconds by calling Enterprises.AcknowledgeNotificationSet, unless the notification set is empty. Notifications that are not acknowledged within the 20 seconds will eventually be included again in the response to another PullNotificationSet request, and those that are never acknowledged will ultimately be deleted according to the Google Cloud Platform Pub/Sub system policy. Multiple requests might be performed concurrently to retrieve notifications, in which case the pending notifications (if any) will be split among each caller, if any are pending. If no notifications are present, an empty notification list is returned. Subsequent requests may return more notifications once they become available.",
        "flatPath": "androidenterprise/v1/enterprises/pullNotificationSet",
        "httpMethod": "POST",
        "method": "pullNotificationSet",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.sendTestPushNotification": {
        "description": "Sends a test notification to validate the EMM integration with the Google Cloud Pub/Sub service for this enterprise.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification",
        "httpMethod": "POST",
        "method": "sendTestPushNotification",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.setAccount": {
        "description": "Sets the account that will be used to authenticate to the API as the enterprise.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/account",
        "httpMethod": "PUT",
        "method": "setAccount",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.setStoreLayout": {
        "description": "Sets the store layout for the enterprise. By default, storeLayoutType is set to \"basic\" and the basic store layout is enabled. The basic layout only contains apps approved by the admin, and that have been added to the available product set for a user (using the setAvailableProductSet call). Apps on the page are sorted in order of their product ID value. If you create a custom store layout (by setting storeLayoutType = \"custom\" and setting a homepage), the basic store layout is disabled.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout",
        "httpMethod": "PUT",
        "method": "setStoreLayout",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.enterprises.unenroll": {
        "description": "Unenrolls an enterprise from the calling EMM.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/unenroll",
        "httpMethod": "POST",
        "method": "unenroll",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.entitlements.delete": {
        "description": "Removes an entitlement to an app for a user.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entitlements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.entitlements.get": {
        "description": "Retrieves details of an entitlement.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entitlements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.entitlements.list": {
        "description": "Lists all entitlements for the specified user. Only the ID is set.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entitlements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.entitlements.update": {
        "description": "Adds or updates an entitlement to an app for a user.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "entitlements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.grouplicenses.get": {
        "description": "Retrieves details of an enterprise's group license for a product.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "grouplicenses",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.grouplicenses.list": {
        "description": "Retrieves IDs of all products for which the enterprise has a group license.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "grouplicenses",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.grouplicenseusers.list": {
        "description": "Retrieves the IDs of the users who have been granted entitlements under the license.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "grouplicenseusers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.installs.delete": {
        "description": "Requests to remove an app from a device. A call to get or list will still show the app as installed on the device until it is actually removed.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "installs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.installs.get": {
        "description": "Retrieves details of an installation of an app on a device.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "installs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.installs.list": {
        "description": "Retrieves the details of all apps installed on the specified device.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "installs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.installs.update": {
        "description": "Requests to install the latest version of an app to a device. If the app is already installed, then it is updated to the latest version if necessary.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "installs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.managedconfigurationsfordevice.delete": {
        "description": "Removes a per-device managed configuration for an app for the specified device.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "managedconfigurationsfordevice",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.managedconfigurationsfordevice.get": {
        "description": "Retrieves details of a per-device managed configuration.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "managedconfigurationsfordevice",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.managedconfigurationsfordevice.list": {
        "description": "Lists all the per-device managed configurations for the specified device. Only the ID is set.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "managedconfigurationsfordevice",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.managedconfigurationsfordevice.update": {
        "description": "Adds or updates a per-device managed configuration for an app for the specified device.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "managedconfigurationsfordevice",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.managedconfigurationsforuser.delete": {
        "description": "Removes a per-user managed configuration for an app for the specified user.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "managedconfigurationsforuser",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.managedconfigurationsforuser.get": {
        "description": "Retrieves details of a per-user managed configuration for an app for the specified user.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "managedconfigurationsforuser",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.managedconfigurationsforuser.list": {
        "description": "Lists all the per-user managed configurations for the specified user. Only the ID is set.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "managedconfigurationsforuser",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.managedconfigurationsforuser.update": {
        "description": "Adds or updates the managed configuration settings for an app for the specified user. If you support the Managed configurations iframe, you can apply managed configurations to a user by specifying an mcmId and its associated configuration variables (if any) in the request. Alternatively, all EMMs can apply managed configurations by passing a list of managed properties.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "managedconfigurationsforuser",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.managedconfigurationssettings.list": {
        "description": "Lists all the managed configurations settings for the specified app.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "managedconfigurationssettings",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.permissions.get": {
        "description": "Retrieves details of an Android app permission for display to an enterprise admin.",
        "flatPath": "androidenterprise/v1/permissions/{permissionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.products.approve": {
        "description": " Approves the specified product and the relevant app permissions, if any. The maximum number of products that you can approve per enterprise customer is 1,000. To learn how to use managed Google Play to design and create a store layout to display approved products to your users, see Store Layout Design. ",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.products.generateApprovalUrl": {
        "description": "Generates a URL that can be rendered in an iframe to display the permissions (if any) of a product. An enterprise admin must view these permissions and accept them on behalf of their organization in order to approve that product. Admins should accept the displayed permissions by interacting with a separate UI element in the EMM console, which in turn should trigger the use of this URL as the approvalUrlInfo.approvalUrl property in a Products.approve call to approve the product. This URL can only be used to display permissions for up to 1 day.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl",
        "httpMethod": "POST",
        "method": "generateApprovalUrl",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.products.get": {
        "description": "Retrieves details of a product for display to an enterprise admin.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.products.getAppRestrictionsSchema": {
        "description": "Retrieves the schema that defines the configurable properties for this product. All products have a schema, but this schema may be empty if no managed configurations have been defined. This schema can be used to populate a UI that allows an admin to configure the product. To apply a managed configuration based on the schema obtained using this API, see Managed Configurations through Play.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema",
        "httpMethod": "GET",
        "method": "getAppRestrictionsSchema",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.products.getPermissions": {
        "description": "Retrieves the Android app permissions required by this app.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions",
        "httpMethod": "GET",
        "method": "getPermissions",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.products.list": {
        "description": "Finds approved products that match a query, or all approved products if there is no query.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/products",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.products.unapprove": {
        "description": "Unapproves the specified product (and the relevant app permissions, if any)",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove",
        "httpMethod": "POST",
        "method": "unapprove",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.serviceaccountkeys.delete": {
        "description": "Removes and invalidates the specified credentials for the service account associated with this enterprise. The calling service account must have been retrieved by calling Enterprises.GetServiceAccount and must have been set as the enterprise service account by calling Enterprises.SetAccount.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "serviceaccountkeys",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.serviceaccountkeys.insert": {
        "description": "Generates new credentials for the service account associated with this enterprise. The calling service account must have been retrieved by calling Enterprises.GetServiceAccount and must have been set as the enterprise service account by calling Enterprises.SetAccount. Only the type of the key should be populated in the resource to be inserted.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "serviceaccountkeys",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.serviceaccountkeys.list": {
        "description": "Lists all active credentials for the service account associated with this enterprise. Only the ID and key type are returned. The calling service account must have been retrieved by calling Enterprises.GetServiceAccount and must have been set as the enterprise service account by calling Enterprises.SetAccount.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "serviceaccountkeys",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutclusters.delete": {
        "description": "Deletes a cluster.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "storelayoutclusters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutclusters.get": {
        "description": "Retrieves details of a cluster.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "storelayoutclusters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutclusters.insert": {
        "description": "Inserts a new cluster in a page.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "storelayoutclusters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutclusters.list": {
        "description": "Retrieves the details of all clusters on the specified page.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "storelayoutclusters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutclusters.update": {
        "description": "Updates a cluster.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "storelayoutclusters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutpages.delete": {
        "description": "Deletes a store page.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "storelayoutpages",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutpages.get": {
        "description": "Retrieves details of a store page.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "storelayoutpages",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutpages.insert": {
        "description": "Inserts a new store page.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "storelayoutpages",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutpages.list": {
        "description": "Retrieves the details of all pages in the store.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "storelayoutpages",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.storelayoutpages.update": {
        "description": "Updates the content of a store page.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "storelayoutpages",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.users.delete": {
        "description": "Deleted an EMM-managed user.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.users.generateAuthenticationToken": {
        "description": "Generates an authentication token which the device policy client can use to provision the given EMM-managed user account on a device. The generated token is single-use and expires after a few minutes. You can provision a maximum of 10 devices per user. This call only works with EMM-managed accounts.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken",
        "httpMethod": "POST",
        "method": "generateAuthenticationToken",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.users.get": {
        "description": "Retrieves a user's details.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.users.getAvailableProductSet": {
        "description": "Retrieves the set of products a user is entitled to access.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet",
        "httpMethod": "GET",
        "method": "getAvailableProductSet",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.users.insert": {
        "description": "Creates a new EMM-managed user. The Users resource passed in the body of the request should include an accountIdentifier and an accountType. If a corresponding user already exists with the same account identifier, the user will be updated with the resource. In this case only the displayName field can be changed.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.users.list": {
        "description": "Looks up a user by primary email address. This is only supported for Google-managed users. Lookup of the id is not needed for EMM-managed users because the id is already returned in the result of the Users.insert call.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.users.revokeDeviceAccess": {
        "description": "Revokes access to all devices currently provisioned to the user. The user will no longer be able to use the managed Play store on any of their managed devices. This call only works with EMM-managed accounts.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess",
        "httpMethod": "DELETE",
        "method": "revokeDeviceAccess",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.users.setAvailableProductSet": {
        "description": "Modifies the set of products that a user is entitled to access (referred to as *whitelisted* products). Only products that are approved or products that were previously approved (products with revoked approval) can be whitelisted.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet",
        "httpMethod": "PUT",
        "method": "setAvailableProductSet",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.users.update": {
        "description": "Updates the details of an EMM-managed user. Can be used with EMM-managed users only (not Google managed users). Pass the new details in the Users resource in the request body. Only the displayName field can be changed. Other fields must either be unset or have the currently active value.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.webapps.delete": {
        "description": "Deletes an existing web app.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "webapps",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.webapps.get": {
        "description": "Gets an existing web app.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "webapps",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.webapps.insert": {
        "description": "Creates a new web app for the enterprise.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/webApps",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "webapps",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.webapps.list": {
        "description": "Retrieves the details of all web apps for a given enterprise.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/webApps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webapps",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidenterprise.webapps.update": {
        "description": "Updates an existing web app.",
        "flatPath": "androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "webapps",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Play EMM API"
  },
  "androidmanagement": {
    "description": "The Android Management API provides remote enterprise management of Android devices and apps.",
    "methods": {
      "androidmanagement.enterprises.applications.get": {
        "description": "Gets info about an application.",
        "flatPath": "v1/enterprises/{enterprisesId}/applications/{applicationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "applications",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.create": {
        "description": "Creates an enterprise. This is the last step in the enterprise signup flow.",
        "flatPath": "v1/enterprises",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.delete": {
        "description": "Deletes an enterprise. Only available for EMM-managed enterprises.",
        "flatPath": "v1/enterprises/{enterprisesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.devices.delete": {
        "description": "Deletes a device. This operation wipes the device.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "devices",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.devices.get": {
        "description": "Gets a device.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.devices.issueCommand": {
        "description": "Issues a command to a device. The Operation resource returned contains a Command in its metadata field. Use the get operation method to get the status of the command.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}:issueCommand",
        "httpMethod": "POST",
        "method": "issueCommand",
        "resourceType": "devices",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.devices.list": {
        "description": "Lists devices for a given enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.devices.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//enterprises/devices",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.devices.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//enterprises/devices",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.devices.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//enterprises/devices",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.devices.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//enterprises/devices",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.devices.patch": {
        "description": "Updates a device.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "devices",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.enrollmentTokens.create": {
        "description": "Creates an enrollment token for a given enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/enrollmentTokens",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "enrollmentTokens",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.enrollmentTokens.delete": {
        "description": "Deletes an enrollment token. This operation invalidates the token, preventing its future use.",
        "flatPath": "v1/enterprises/{enterprisesId}/enrollmentTokens/{enrollmentTokensId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "enrollmentTokens",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.get": {
        "description": "Gets an enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.list": {
        "description": "Lists EMM-managed enterprises. Only BASIC fields are returned.",
        "flatPath": "v1/enterprises",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.patch": {
        "description": "Updates an enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "enterprises",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.policies.delete": {
        "description": "Deletes a policy. This operation is only permitted if no devices are currently referencing the policy.",
        "flatPath": "v1/enterprises/{enterprisesId}/policies/{policiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "policies",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.policies.get": {
        "description": "Gets a policy.",
        "flatPath": "v1/enterprises/{enterprisesId}/policies/{policiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "policies",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.policies.list": {
        "description": "Lists policies for a given enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/policies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "policies",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.policies.patch": {
        "description": "Updates or creates a policy.",
        "flatPath": "v1/enterprises/{enterprisesId}/policies/{policiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "policies",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.webApps.create": {
        "description": "Creates a web app.",
        "flatPath": "v1/enterprises/{enterprisesId}/webApps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "webApps",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.webApps.delete": {
        "description": "Deletes a web app.",
        "flatPath": "v1/enterprises/{enterprisesId}/webApps/{webAppsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "webApps",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.webApps.get": {
        "description": "Gets a web app.",
        "flatPath": "v1/enterprises/{enterprisesId}/webApps/{webAppsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "webApps",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.webApps.list": {
        "description": "Lists web apps for a given enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/webApps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webApps",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.webApps.patch": {
        "description": "Updates a web app.",
        "flatPath": "v1/enterprises/{enterprisesId}/webApps/{webAppsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "webApps",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.enterprises.webTokens.create": {
        "description": "Creates a web token to access an embeddable managed Google Play web UI for a given enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/webTokens",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "webTokens",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "androidmanagement.signupUrls.create": {
        "description": "Creates an enterprise signup URL.",
        "flatPath": "v1/signupUrls",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "signupUrls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Android Management API"
  },
  "androidpublisher": {
    "description": "Lets Android application developers access their Google Play accounts.",
    "methods": {
      "androidpublisher.edits.apks.addexternallyhosted": {
        "description": "Creates a new APK without uploading the APK itself to Google Play, instead hosting the APK at a specified URL. This function is only available to organizations using Managed Play whose application is configured to restrict distribution to the organizations.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted",
        "httpMethod": "POST",
        "method": "addexternallyhosted",
        "resourceType": "apks",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.apks.list": {
        "description": "Lists all current APKs of the app and edit.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/apks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apks",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.apks.upload": {
        "description": "Uploads an APK and adds to the current edit.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/apks",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "apks",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.bundles.list": {
        "description": "Lists all current Android App Bundles of the app and edit.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bundles",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.bundles.upload": {
        "description": "Uploads a new Android App Bundle to this edit. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "bundles",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.commit": {
        "description": "Commits an app edit.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}:commit",
        "httpMethod": "POST",
        "method": "commit",
        "resourceType": "edits",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.delete": {
        "description": "Deletes an app edit.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "edits",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.deobfuscationfiles.upload": {
        "description": "Uploads a new deobfuscation file and attaches to the specified APK.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "deobfuscationfiles",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.details.get": {
        "description": "Gets details of an app.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/details",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "details",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.details.patch": {
        "description": "Patches details of an app.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/details",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "details",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.details.update": {
        "description": "Updates details of an app.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/details",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "details",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.expansionfiles.get": {
        "description": "Fetches the expansion file configuration for the specified APK.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "expansionfiles",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.expansionfiles.patch": {
        "description": "Patches the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "expansionfiles",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.expansionfiles.update": {
        "description": "Updates the APK's expansion file configuration to reference another APK's expansion file. To add a new expansion file use the Upload method.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "expansionfiles",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.expansionfiles.upload": {
        "description": "Uploads a new expansion file and attaches to the specified APK.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "expansionfiles",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.get": {
        "description": "Gets an app edit.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "edits",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.images.delete": {
        "description": "Deletes the image (specified by id) from the edit.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "images",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.images.deleteall": {
        "description": "Deletes all images for the specified language and image type. Returns an empty response if no images are found.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}",
        "httpMethod": "DELETE",
        "method": "deleteall",
        "resourceType": "images",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.images.list": {
        "description": "Lists all images. The response may be empty.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "images",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.images.upload": {
        "description": "Uploads an image of the specified language and image type, and adds to the edit.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "images",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.insert": {
        "description": "Creates a new edit for an app.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "edits",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.listings.delete": {
        "description": "Deletes a localized store listing.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "listings",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.listings.deleteall": {
        "description": "Deletes all store listings.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings",
        "httpMethod": "DELETE",
        "method": "deleteall",
        "resourceType": "listings",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.listings.get": {
        "description": "Gets a localized store listing.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "listings",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.listings.list": {
        "description": "Lists all localized store listings.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "listings",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.listings.patch": {
        "description": "Patches a localized store listing.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "listings",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.listings.update": {
        "description": "Creates or updates a localized store listing.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "listings",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.testers.get": {
        "description": "Gets testers.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "testers",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.testers.patch": {
        "description": "Patches testers.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "testers",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.testers.update": {
        "description": "Updates testers.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "testers",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.tracks.get": {
        "description": "Gets a track.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tracks",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.tracks.list": {
        "description": "Lists all tracks.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tracks",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.tracks.patch": {
        "description": "Patches a track.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tracks",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.tracks.update": {
        "description": "Updates a track.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "tracks",
        "resourceTypePath": "//edits",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.edits.validate": {
        "description": "Validates an app edit.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/edits/{editId}:validate",
        "httpMethod": "POST",
        "method": "validate",
        "resourceType": "edits",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.grants.create": {
        "description": "Grant access for a user to the given package.",
        "flatPath": "androidpublisher/v3/developers/{developersId}/users/{usersId}/grants",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "grants",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.grants.delete": {
        "description": "Removes all access for the user to the given package or developer account.",
        "flatPath": "androidpublisher/v3/developers/{developersId}/users/{usersId}/grants/{grantsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "grants",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.grants.patch": {
        "description": "Updates access for the user to the given package.",
        "flatPath": "androidpublisher/v3/developers/{developersId}/users/{usersId}/grants/{grantsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "grants",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.inappproducts.delete": {
        "description": "Deletes an in-app product (i.e. a managed product or a subscriptions).",
        "flatPath": "androidpublisher/v3/applications/{packageName}/inappproducts/{sku}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "inappproducts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.inappproducts.get": {
        "description": "Gets an in-app product, which can be a managed product or a subscription.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/inappproducts/{sku}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "inappproducts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.inappproducts.insert": {
        "description": "Creates an in-app product (i.e. a managed product or a subscriptions).",
        "flatPath": "androidpublisher/v3/applications/{packageName}/inappproducts",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "inappproducts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.inappproducts.list": {
        "description": "Lists all in-app products - both managed products and subscriptions. If an app has a large number of in-app products, the response may be paginated. In this case the response field `tokenPagination.nextPageToken` will be set and the caller should provide its value as a `token` request parameter to retrieve the next page.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/inappproducts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "inappproducts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.inappproducts.patch": {
        "description": "Patches an in-app product (i.e. a managed product or a subscriptions).",
        "flatPath": "androidpublisher/v3/applications/{packageName}/inappproducts/{sku}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "inappproducts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.inappproducts.update": {
        "description": "Updates an in-app product (i.e. a managed product or a subscriptions).",
        "flatPath": "androidpublisher/v3/applications/{packageName}/inappproducts/{sku}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "inappproducts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.internalappsharingartifacts.uploadapk": {
        "description": "Uploads an APK to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.",
        "flatPath": "androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk",
        "httpMethod": "POST",
        "method": "uploadapk",
        "resourceType": "internalappsharingartifacts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.internalappsharingartifacts.uploadbundle": {
        "description": "Uploads an app bundle to internal app sharing. If you are using the Google API client libraries, please increase the timeout of the http request before calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts and Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors) for an example in java.",
        "flatPath": "androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle",
        "httpMethod": "POST",
        "method": "uploadbundle",
        "resourceType": "internalappsharingartifacts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.monetization.convertRegionPrices": {
        "description": "Calculates the region prices, using today's exchange rate and country-specific pricing patterns, based on the price in the request for a set of regions.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices",
        "httpMethod": "POST",
        "method": "convertRegionPrices",
        "resourceType": "monetization",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.orders.refund": {
        "description": "Refunds a user's subscription or in-app purchase order. Orders older than 1 year cannot be refunded.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/orders/{orderId}:refund",
        "httpMethod": "POST",
        "method": "refund",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.purchases.products.acknowledge": {
        "description": "Acknowledges a purchase of an inapp item.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:acknowledge",
        "httpMethod": "POST",
        "method": "acknowledge",
        "resourceType": "products",
        "resourceTypePath": "//purchases",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.purchases.products.get": {
        "description": "Checks the purchase and consumption status of an inapp item.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "products",
        "resourceTypePath": "//purchases",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.purchases.subscriptions.acknowledge": {
        "description": "Acknowledges a subscription purchase.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:acknowledge",
        "httpMethod": "POST",
        "method": "acknowledge",
        "resourceType": "subscriptions",
        "resourceTypePath": "//purchases",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.purchases.subscriptions.cancel": {
        "description": "Cancels a user's subscription purchase. The subscription remains valid until its expiration time.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "subscriptions",
        "resourceTypePath": "//purchases",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.purchases.subscriptions.defer": {
        "description": "Defers a user's subscription purchase until a specified future expiration time.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer",
        "httpMethod": "POST",
        "method": "defer",
        "resourceType": "subscriptions",
        "resourceTypePath": "//purchases",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.purchases.subscriptions.get": {
        "description": "Checks whether a user's subscription purchase is valid and returns its expiry time.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "subscriptions",
        "resourceTypePath": "//purchases",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.purchases.subscriptions.refund": {
        "description": "Refunds a user's subscription purchase, but the subscription remains valid until its expiration time and it will continue to recur.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund",
        "httpMethod": "POST",
        "method": "refund",
        "resourceType": "subscriptions",
        "resourceTypePath": "//purchases",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.purchases.subscriptions.revoke": {
        "description": "Refunds and immediately revokes a user's subscription purchase. Access to the subscription will be terminated immediately and it will stop recurring.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke",
        "httpMethod": "POST",
        "method": "revoke",
        "resourceType": "subscriptions",
        "resourceTypePath": "//purchases",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.purchases.voidedpurchases.list": {
        "description": "Lists the purchases that were canceled, refunded or charged-back.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/purchases/voidedpurchases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "voidedpurchases",
        "resourceTypePath": "//purchases",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.reviews.get": {
        "description": "Gets a single review.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/reviews/{reviewId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reviews",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.reviews.list": {
        "description": "Lists all reviews.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/reviews",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reviews",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.reviews.reply": {
        "description": "Replies to a single review, or updates an existing reply.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/reviews/{reviewId}:reply",
        "httpMethod": "POST",
        "method": "reply",
        "resourceType": "reviews",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.systemapks.variants.create": {
        "description": "Creates an APK which is suitable for inclusion in a system image from an already uploaded Android App Bundle.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "variants",
        "resourceTypePath": "//systemapks",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.systemapks.variants.download": {
        "description": "Downloads a previously created system APK which is suitable for inclusion in a system image.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}:download",
        "httpMethod": "GET",
        "method": "download",
        "resourceType": "variants",
        "resourceTypePath": "//systemapks",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.systemapks.variants.get": {
        "description": "Returns a previously created system APK variant.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "variants",
        "resourceTypePath": "//systemapks",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.systemapks.variants.list": {
        "description": "Returns the list of previously created system APK variants.",
        "flatPath": "androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "variants",
        "resourceTypePath": "//systemapks",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.users.create": {
        "description": "Grant access for a user to the given developer account.",
        "flatPath": "androidpublisher/v3/developers/{developersId}/users",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.users.delete": {
        "description": "Removes all access for the user to the given developer account.",
        "flatPath": "androidpublisher/v3/developers/{developersId}/users/{usersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.users.list": {
        "description": "Lists all users with access to a developer account.",
        "flatPath": "androidpublisher/v3/developers/{developersId}/users",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "androidpublisher.users.patch": {
        "description": "Updates access for the user to the developer account.",
        "flatPath": "androidpublisher/v3/developers/{developersId}/users/{usersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Google Play Android Developer API"
  },
  "apigateway": {
    "description": "",
    "methods": {
      "apigateway.projects.locations.apis.configs.create": {
        "description": "Creates a new ApiConfig in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/configs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/apis",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.configs.delete": {
        "description": "Deletes a single ApiConfig.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/configs/{configsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/apis",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.configs.get": {
        "description": "Gets details of a single ApiConfig.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/configs/{configsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/apis",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.configs.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/configs/{configsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/apis",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.configs.list": {
        "description": "Lists ApiConfigs in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/configs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/apis",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.configs.patch": {
        "description": "Updates the parameters of a single ApiConfig.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/configs/{configsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/apis",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.configs.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/configs/{configsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/apis",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.configs.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}/configs/{configsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/apis",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.create": {
        "description": "Creates a new Api in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "apis",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.delete": {
        "description": "Deletes a single Api.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "apis",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.get": {
        "description": "Gets details of a single Api.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "apis",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "apis",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.list": {
        "description": "Lists Apis in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apis",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.patch": {
        "description": "Updates the parameters of a single Api.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "apis",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "apis",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.apis.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/apis/{apisId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "apis",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.gateways.create": {
        "description": "Creates a new Gateway in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gateways",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "gateways",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.gateways.delete": {
        "description": "Deletes a single Gateway.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gateways/{gatewaysId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "gateways",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.gateways.get": {
        "description": "Gets details of a single Gateway.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gateways/{gatewaysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "gateways",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.gateways.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gateways/{gatewaysId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "gateways",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.gateways.list": {
        "description": "Lists Gateways in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gateways",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "gateways",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.gateways.patch": {
        "description": "Updates the parameters of a single Gateway.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gateways/{gatewaysId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "gateways",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.gateways.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gateways/{gatewaysId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "gateways",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.gateways.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gateways/{gatewaysId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "gateways",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "apigateway.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "API Gateway API"
  },
  "apigee": {
    "description": "Use the Apigee API to programmatically develop and manage APIs with a set of RESTful operations. Develop and secure API proxies, deploy and undeploy API proxy revisions, monitor APIs, configure environments, manage users, and more. Note: This product is available as a free trial for a time period of 60 days.",
    "methods": {
      "apigee.hybrid.issuers.list": {
        "description": "Lists hybrid services and its trusted issuers service account ids. This api is authenticated and unauthorized(allow all the users) and used by runtime authn-authz service to query control plane's issuer service account ids.",
        "flatPath": "v1/hybrid/issuers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "issuers",
        "resourceTypePath": "//hybrid",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.analytics.datastores.create": {
        "description": "Create a Datastore for an org",
        "flatPath": "v1/organizations/{organizationsId}/analytics/datastores",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "datastores",
        "resourceTypePath": "//organizations/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.analytics.datastores.delete": {
        "description": "Delete a Datastore from an org.",
        "flatPath": "v1/organizations/{organizationsId}/analytics/datastores/{datastoresId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "datastores",
        "resourceTypePath": "//organizations/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.analytics.datastores.get": {
        "description": "Get a Datastore",
        "flatPath": "v1/organizations/{organizationsId}/analytics/datastores/{datastoresId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datastores",
        "resourceTypePath": "//organizations/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.analytics.datastores.list": {
        "description": "List Datastores",
        "flatPath": "v1/organizations/{organizationsId}/analytics/datastores",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "datastores",
        "resourceTypePath": "//organizations/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.analytics.datastores.test": {
        "description": "Test if Datastore configuration is correct. This includes checking if credentials provided by customer have required permissions in target destination storage",
        "flatPath": "v1/organizations/{organizationsId}/analytics/datastores:test",
        "httpMethod": "POST",
        "method": "test",
        "resourceType": "datastores",
        "resourceTypePath": "//organizations/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.analytics.datastores.update": {
        "description": "Update a Datastore",
        "flatPath": "v1/organizations/{organizationsId}/analytics/datastores/{datastoresId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "datastores",
        "resourceTypePath": "//organizations/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.attributes": {
        "description": "Updates or creates API product attributes. This API **replaces** the current list of attributes with the attributes specified in the request body. In this way, you can update existing attributes, add new attributes, or delete existing attributes by omitting them from the request body. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/attributes",
        "httpMethod": "POST",
        "method": "attributes",
        "resourceType": "apiproducts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.attributes.delete": {
        "description": "Deletes an API product attribute.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/attributes/{attributesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/apiproducts",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.attributes.get": {
        "description": "Gets the value of an API product attribute.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/attributes/{attributesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/apiproducts",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.attributes.list": {
        "description": "Lists all API product attributes.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/attributes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/apiproducts",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.attributes.updateApiProductAttribute": {
        "description": "Updates the value of an API product attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with entities also get cached for at least 180 seconds after entity is accessed during runtime. In this case, the `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/attributes/{attributesId}",
        "httpMethod": "POST",
        "method": "updateApiProductAttribute",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/apiproducts",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.create": {
        "description": "Creates an API product in an organization. You create API products after you have proxied backend services using API proxies. An API product is a collection of API resources combined with quota settings and metadata that you can use to deliver customized and productized API bundles to your developer community. This metadata can include: - Scope - Environments - API proxies - Extensible profile API products enable you repackage APIs on the fly, without having to do any additional coding or configuration. Apigee recommends that you start with a simple API product including only required elements. You then provision credentials to apps to enable them to start testing your APIs. After you have authentication and authorization working against a simple API product, you can iterate to create finer-grained API products, defining different sets of API resources for each API product. **WARNING:** - If you don't specify an API proxy in the request body, *any* app associated with the product can make calls to *any* API in your entire organization. - If you don't specify an environment in the request body, the product allows access to all environments. For more information, see What is an API product?",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "apiproducts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.delete": {
        "description": "Deletes an API product from an organization. Deleting an API product causes app requests to the resource URIs defined in the API product to fail. Ensure that you create a new API product to serve existing apps, unless your intention is to disable access to the resources defined in the API product. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "apiproducts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.get": {
        "description": "Gets configuration details for an API product. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via the UI or the API. View the list of API products to verify the internal name.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "apiproducts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.list": {
        "description": "Lists all API product names for an organization. Filter the list by passing an `attributename` and `attibutevalue`. The maximum number of API products returned is 1000. You can paginate the list of API products returned using the `startKey` and `count` query parameters.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apiproducts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.rateplans.create": {
        "description": "Create a rate plan that is associated with an API product in an organization. Using rate plans, API product owners can monetize their API products by configuring one or more of the following: - Billing frequency - Initial setup fees for using an API product - Payment funding model (postpaid only) - Fixed recurring or consumption-based charges for using an API product - Revenue sharing with developer partners An API product can have multiple rate plans associated with it but *only one* rate plan can be active at any point of time. **Note: From the developer's perspective, they purchase API products not rate plans.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/rateplans",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "rateplans",
        "resourceTypePath": "//organizations/apiproducts",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.rateplans.delete": {
        "description": "Deletes a rate plan.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/rateplans/{rateplansId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "rateplans",
        "resourceTypePath": "//organizations/apiproducts",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.rateplans.get": {
        "description": "Gets the details of a rate plan.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/rateplans/{rateplansId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "rateplans",
        "resourceTypePath": "//organizations/apiproducts",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.rateplans.list": {
        "description": "Lists all the rate plans for an API product.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/rateplans",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "rateplans",
        "resourceTypePath": "//organizations/apiproducts",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.rateplans.update": {
        "description": "Updates an existing rate plan.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}/rateplans/{rateplansId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "rateplans",
        "resourceTypePath": "//organizations/apiproducts",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apiproducts.update": {
        "description": "Updates an existing API product. You must include all required values, whether or not you are updating them, as well as any optional values that you are updating. The API product name required in the request URL is the internal name of the product, not the display name. While they may be the same, it depends on whether the API product was created via UI or API. View the list of API products to identify their internal names.",
        "flatPath": "v1/organizations/{organizationsId}/apiproducts/{apiproductsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "apiproducts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.create": {
        "description": "Creates an API proxy. The API proxy created will not be accessible at runtime until it is deployed to an environment. Create a new API proxy by setting the `name` query parameter to the name of the API proxy. Import an API proxy configuration bundle stored in zip format on your local machine to your organization by doing the following: * Set the `name` query parameter to the name of the API proxy. * Set the `action` query parameter to `import`. * Set the `Content-Type` header to `multipart/form-data`. * Pass as a file the name of API proxy configuration bundle stored in zip format on your local machine using the `file` form field. **Note**: To validate the API proxy configuration bundle only without importing it, set the `action` query parameter to `validate`. When importing an API proxy configuration bundle, if the API proxy does not exist, it will be created. If the API proxy exists, then a new revision is created. Invalid API proxy configurations are rejected, and a list of validation errors is returned to the client.",
        "flatPath": "v1/organizations/{organizationsId}/apis",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "apis",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.delete": {
        "description": "Deletes an API proxy and all associated endpoints, policies, resources, and revisions. The API proxy must be undeployed before you can delete it.",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "apis",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.deployments.list": {
        "description": "Lists all deployments of an API proxy.",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.get": {
        "description": "Gets an API proxy including a list of existing revisions.",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "apis",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.keyvaluemaps.create": {
        "description": "Creates a key value map in an api proxy.",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}/keyvaluemaps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "keyvaluemaps",
        "resourceTypePath": "//organizations/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.keyvaluemaps.delete": {
        "description": "Delete a key value map in an api proxy.",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}/keyvaluemaps/{keyvaluemapsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "keyvaluemaps",
        "resourceTypePath": "//organizations/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.list": {
        "description": "Lists the names of all API proxies in an organization. The names returned correspond to the names defined in the configuration files for each API proxy.",
        "flatPath": "v1/organizations/{organizationsId}/apis",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apis",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.patch": {
        "description": "Updates an existing API proxy.",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "apis",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.revisions.delete": {
        "description": "Deletes an API proxy revision and all policies, resources, endpoints, and revisions associated with it. The API proxy revision must be undeployed before you can delete it.",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}/revisions/{revisionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.revisions.deployments.list": {
        "description": "Lists all deployments of an API proxy revision.",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}/revisions/{revisionsId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations/apis/revisions",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.revisions.get": {
        "description": "Gets an API proxy revision. To download the API proxy configuration bundle for the specified revision as a zip file, set the `format` query parameter to `bundle`. If you are using curl, specify `-o filename.zip` to save the output to a file; otherwise, it displays to `stdout`. Then, develop the API proxy configuration locally and upload the updated API proxy configuration revision, as described in [updateApiProxyRevision](updateApiProxyRevision).",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}/revisions/{revisionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apis.revisions.updateApiProxyRevision": {
        "description": "Updates an existing API proxy revision by uploading the API proxy configuration bundle as a zip file from your local machine. You can update only API proxy revisions that have never been deployed. After deployment, an API proxy revision becomes immutable, even if it is undeployed. Set the `Content-Type` header to either `multipart/form-data` or `application/octet-stream`.",
        "flatPath": "v1/organizations/{organizationsId}/apis/{apisId}/revisions/{revisionsId}",
        "httpMethod": "POST",
        "method": "updateApiProxyRevision",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apps.get": {
        "description": "Gets the app profile for the specified app ID.",
        "flatPath": "v1/organizations/{organizationsId}/apps/{appsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "apps",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.apps.list": {
        "description": "Lists IDs of apps within an organization that have the specified app status (approved or revoked) or are of the specified app type (developer or company).",
        "flatPath": "v1/organizations/{organizationsId}/apps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apps",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.create": {
        "description": "Creates an Apigee organization. See [Create an Apigee organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org).",
        "flatPath": "v1/organizations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.datacollectors.create": {
        "description": "Creates a new data collector.",
        "flatPath": "v1/organizations/{organizationsId}/datacollectors",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "datacollectors",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.datacollectors.delete": {
        "description": "Deletes a data collector.",
        "flatPath": "v1/organizations/{organizationsId}/datacollectors/{datacollectorsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "datacollectors",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.datacollectors.get": {
        "description": "Gets a data collector.",
        "flatPath": "v1/organizations/{organizationsId}/datacollectors/{datacollectorsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datacollectors",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.datacollectors.list": {
        "description": "Lists all data collectors.",
        "flatPath": "v1/organizations/{organizationsId}/datacollectors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "datacollectors",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.datacollectors.patch": {
        "description": "Updates a data collector.",
        "flatPath": "v1/organizations/{organizationsId}/datacollectors/{datacollectorsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "datacollectors",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.delete": {
        "description": "Delete an Apigee organization. Only supported for SubscriptionType TRIAL.",
        "flatPath": "v1/organizations/{organizationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.deployments.list": {
        "description": "Lists all deployments of API proxies or shared flows.",
        "flatPath": "v1/organizations/{organizationsId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.attributes": {
        "description": "Updates attributes for a developer app. This API replaces the current attributes with those specified in the request.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/attributes",
        "httpMethod": "POST",
        "method": "attributes",
        "resourceType": "apps",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.attributes.delete": {
        "description": "Deletes a developer app attribute.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/attributes/{attributesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/developers/apps",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.attributes.get": {
        "description": "Returns a developer app attribute.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/attributes/{attributesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/developers/apps",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.attributes.list": {
        "description": "Returns a list of all developer app attributes.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/attributes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/developers/apps",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.attributes.updateDeveloperAppAttribute": {
        "description": "Updates a developer app attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/attributes/{attributesId}",
        "httpMethod": "POST",
        "method": "updateDeveloperAppAttribute",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/developers/apps",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.create": {
        "description": "Creates an app associated with a developer. This API associates the developer app with the specified API product and auto-generates an API key for the app to use in calls to API proxies inside that API product. The `name` is the unique ID of the app that you can use in API calls. The `DisplayName` (set as an attribute) appears in the UI. If you don't set the `DisplayName` attribute, the `name` appears in the UI.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "apps",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.delete": {
        "description": "Deletes a developer app. **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as app keys or access tokens, may take anywhere from a few seconds to a few minutes to be deleted.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "apps",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.generateKeyPairOrUpdateDeveloperAppStatus": {
        "description": "Manages access to a developer app by enabling you to: * Approve or revoke a developer app * Generate a new consumer key and secret for a developer app To approve or revoke a developer app, set the `action` query parameter to `approved` or `revoked`, respectively, and the `Content-Type` header to `application/octet-stream`. If a developer app is revoked, none of its API keys are valid for API calls even though the keys are still `approved`. If successful, the API call returns the following HTTP status code: `204 No Content` To generate a new consumer key and secret for a developer app, pass the new key/secret details. Rather than replace an existing key, this API generates a new key. In this case, multiple key pairs may be associated with a single developer app. Each key pair has an independent status (`approved` or `revoked`) and expiration time. Any approved, non-expired key can be used in an API call. For example, if you're using API key rotation, you can generate new keys with expiration times that overlap keys that are going to expire. You might also generate a new consumer key/secret if the security of the original key/secret is compromised. The `keyExpiresIn` property defines the expiration time for the API key in milliseconds. If you don't set this property or set it to `-1`, the API key never expires. **Notes**: * When generating a new key/secret, this API replaces the existing attributes, notes, and callback URLs with those specified in the request. Include or exclude any existing information that you want to retain or delete, respectively. * To migrate existing consumer keys and secrets to hybrid from another system, see the CreateDeveloperAppKey API.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}",
        "httpMethod": "POST",
        "method": "generateKeyPairOrUpdateDeveloperAppStatus",
        "resourceType": "apps",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.get": {
        "description": "Returns the details for a developer app.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "apps",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.keys.apiproducts.delete": {
        "description": "Removes an API product from an app's consumer key. After the API product is removed, the app cannot access the API resources defined in that API product. **Note**: The consumer key is not removed, only its association with the API product.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/keys/{keysId}/apiproducts/{apiproductsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "apiproducts",
        "resourceTypePath": "//organizations/developers/apps/keys",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.keys.apiproducts.updateDeveloperAppKeyApiProduct": {
        "description": "Approves or revokes the consumer key for an API product. After a consumer key is approved, the app can use it to access APIs. A consumer key that is revoked or pending cannot be used to access an API. Any access tokens associated with a revoked consumer key will remain active. However, Apigee checks the status of the consumer key and if set to `revoked` will not allow access to the API.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/keys/{keysId}/apiproducts/{apiproductsId}",
        "httpMethod": "POST",
        "method": "updateDeveloperAppKeyApiProduct",
        "resourceType": "apiproducts",
        "resourceTypePath": "//organizations/developers/apps/keys",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.keys.create": {
        "description": "Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/keys",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "keys",
        "resourceTypePath": "//organizations/developers/apps",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.keys.create.create": {
        "description": "Creates a custom consumer key and secret for a developer app. This is particularly useful if you want to migrate existing consumer keys and secrets to Apigee from another system. Consumer keys and secrets can contain letters, numbers, underscores, and hyphens. No other special characters are allowed. To avoid service disruptions, a consumer key and secret should not exceed 2 KBs each. **Note**: When creating the consumer key and secret, an association to API products will not be made. Therefore, you should not specify the associated API products in your request. Instead, use the UpdateDeveloperAppKey API to make the association after the consumer key and secret are created. If a consumer key and secret already exist, you can keep them or delete them using the DeleteDeveloperAppKey API.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/keys/create",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "create",
        "resourceTypePath": "//organizations/developers/apps/keys",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.keys.delete": {
        "description": "Deletes an app's consumer key and removes all API products associated with the app. After the consumer key is deleted, it cannot be used to access any APIs. **Note**: After you delete a consumer key, you may want to: 1. Create a new consumer key and secret for the developer app using the CreateDeveloperAppKey API, and subsequently add an API product to the key using the UpdateDeveloperAppKey API. 2. Delete the developer app, if it is no longer required.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/keys/{keysId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "keys",
        "resourceTypePath": "//organizations/developers/apps",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.keys.get": {
        "description": "Gets details for a consumer key for a developer app, including the key and secret value, associated API products, and other information.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/keys/{keysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "keys",
        "resourceTypePath": "//organizations/developers/apps",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.keys.replaceDeveloperAppKey": {
        "description": "Updates the scope of an app. This API replaces the existing scopes with those specified in the request. Include or exclude any existing scopes that you want to retain or delete, respectively. The specified scopes must already be defined for the API products associated with the app. This API sets the `scopes` element under the `apiProducts` element in the attributes of the app.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/keys/{keysId}",
        "httpMethod": "PUT",
        "method": "replaceDeveloperAppKey",
        "resourceType": "keys",
        "resourceTypePath": "//organizations/developers/apps",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.keys.updateDeveloperAppKey": {
        "description": "Adds an API product to a developer app key, enabling the app that holds the key to access the API resources bundled in the API product. In addition, you can add attributes to a developer app key. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively. You can use the same key to access all API products associated with the app.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}/keys/{keysId}",
        "httpMethod": "POST",
        "method": "updateDeveloperAppKey",
        "resourceType": "keys",
        "resourceTypePath": "//organizations/developers/apps",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.list": {
        "description": "Lists all apps created by a developer in an Apigee organization. Optionally, you can request an expanded view of the developer apps. A maximum of 100 developer apps are returned per API call. You can paginate the list of deveoper apps returned using the `startKey` and `count` query parameters.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apps",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.apps.update": {
        "description": "Updates the details for a developer app. In addition, you can add an API product to a developer app and automatically generate an API key for the app to use when calling APIs in the API product. If you want to use an existing API key for the API product, add the API product to the API key using the UpdateDeveloperAppKey API. Using this API, you cannot update the following: * App name as it is the primary key used to identify the app and cannot be changed. * Scopes associated with the app. Instead, use the ReplaceDeveloperAppKey API. This API replaces the existing attributes with those specified in the request. Include or exclude any existing attributes that you want to retain or delete, respectively.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/apps/{appsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "apps",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.attributes": {
        "description": "Updates developer attributes. This API replaces the existing attributes with those specified in the request. Add new attributes, and include or exclude any existing attributes that you want to retain or remove, respectively. The custom attribute limit is 18. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/attributes",
        "httpMethod": "POST",
        "method": "attributes",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.attributes.delete": {
        "description": "Deletes a developer attribute.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/attributes/{attributesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.attributes.get": {
        "description": "Returns the value of the specified developer attribute.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/attributes/{attributesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.attributes.list": {
        "description": "Returns a list of all developer attributes.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/attributes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.attributes.updateDeveloperAttribute": {
        "description": "Updates a developer attribute. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/attributes/{attributesId}",
        "httpMethod": "POST",
        "method": "updateDeveloperAttribute",
        "resourceType": "attributes",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.balance.credit": {
        "description": "Credits the account balance for the developer.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/balance:credit",
        "httpMethod": "POST",
        "method": "credit",
        "resourceType": "balance",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.create": {
        "description": "Creates a developer. Once created, the developer can register an app and obtain an API key. At creation time, a developer is set as `active`. To change the developer status, use the SetDeveloperStatus API.",
        "flatPath": "v1/organizations/{organizationsId}/developers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.delete": {
        "description": "Deletes a developer. All apps and API keys associated with the developer are also removed. **Warning**: This API will permanently delete the developer and related artifacts. To avoid permanently deleting developers and their artifacts, set the developer status to `inactive` using the SetDeveloperStatus API. **Note**: The delete operation is asynchronous. The developer app is deleted immediately, but its associated resources, such as apps and API keys, may take anywhere from a few seconds to a few minutes to be deleted.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.get": {
        "description": "Returns the developer details, including the developer's name, email address, apps, and other information. **Note**: The response includes only the first 100 developer apps.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.getBalance": {
        "description": "Gets the account balance for the developer.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/balance",
        "httpMethod": "GET",
        "method": "getBalance",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.getMonetizationConfig": {
        "description": "Gets the monetization configuration for the developer.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/monetizationConfig",
        "httpMethod": "GET",
        "method": "getMonetizationConfig",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.list": {
        "description": "Lists all developers in an organization by email address. By default, the response does not include company developers. Set the `includeCompany` query parameter to `true` to include company developers. **Note**: A maximum of 1000 developers are returned in the response. You paginate the list of developers returned using the `startKey` and `count` query parameters.",
        "flatPath": "v1/organizations/{organizationsId}/developers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.setDeveloperStatus": {
        "description": "Sets the status of a developer. A developer is `active` by default. If you set a developer's status to `inactive`, the API keys assigned to the developer apps are no longer valid even though the API keys are set to `approved`. Inactive developers can still sign in to the developer portal and create apps; however, any new API keys generated during app creation won't work. To set the status of a developer, set the `action` query parameter to `active` or `inactive`, and the `Content-Type` header to `application/octet-stream`. If successful, the API call returns the following HTTP status code: `204 No Content`",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}",
        "httpMethod": "POST",
        "method": "setDeveloperStatus",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.subscriptions.create": {
        "description": "Creates a subscription to an API product. ",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/subscriptions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "subscriptions",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.subscriptions.expire": {
        "description": "Expires an API product subscription immediately.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/subscriptions/{subscriptionsId}:expire",
        "httpMethod": "POST",
        "method": "expire",
        "resourceType": "subscriptions",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.subscriptions.get": {
        "description": "Gets details for an API product subscription.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/subscriptions/{subscriptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "subscriptions",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.subscriptions.list": {
        "description": "Lists all API product subscriptions for a developer.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/subscriptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subscriptions",
        "resourceTypePath": "//organizations/developers",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.update": {
        "description": "Updates a developer. This API replaces the existing developer details with those specified in the request. Include or exclude any existing details that you want to retain or delete, respectively. The custom attribute limit is 18. **Note**: OAuth access tokens and Key Management Service (KMS) entities (apps, developers, and API products) are cached for 180 seconds (current default). Any custom attributes associated with these entities are cached for at least 180 seconds after the entity is accessed at runtime. Therefore, an `ExpiresIn` element on the OAuthV2 policy won't be able to expire an access token in less than 180 seconds.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.developers.updateMonetizationConfig": {
        "description": "Updates the monetization configuration for the developer.",
        "flatPath": "v1/organizations/{organizationsId}/developers/{developersId}/monetizationConfig",
        "httpMethod": "PUT",
        "method": "updateMonetizationConfig",
        "resourceType": "developers",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.envgroups.attachments.create": {
        "description": "Creates a new attachment of an environment to an environment group.",
        "flatPath": "v1/organizations/{organizationsId}/envgroups/{envgroupsId}/attachments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "attachments",
        "resourceTypePath": "//organizations/envgroups",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.envgroups.attachments.delete": {
        "description": "Deletes an environment group attachment.",
        "flatPath": "v1/organizations/{organizationsId}/envgroups/{envgroupsId}/attachments/{attachmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "attachments",
        "resourceTypePath": "//organizations/envgroups",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.envgroups.attachments.get": {
        "description": "Gets an environment group attachment.",
        "flatPath": "v1/organizations/{organizationsId}/envgroups/{envgroupsId}/attachments/{attachmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "attachments",
        "resourceTypePath": "//organizations/envgroups",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.envgroups.attachments.list": {
        "description": "Lists all attachments of an environment group.",
        "flatPath": "v1/organizations/{organizationsId}/envgroups/{envgroupsId}/attachments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "attachments",
        "resourceTypePath": "//organizations/envgroups",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.envgroups.create": {
        "description": "Creates a new environment group.",
        "flatPath": "v1/organizations/{organizationsId}/envgroups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "envgroups",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.envgroups.delete": {
        "description": "Deletes an environment group.",
        "flatPath": "v1/organizations/{organizationsId}/envgroups/{envgroupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "envgroups",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.envgroups.get": {
        "description": "Gets an environment group.",
        "flatPath": "v1/organizations/{organizationsId}/envgroups/{envgroupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "envgroups",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.envgroups.list": {
        "description": "Lists all environment groups.",
        "flatPath": "v1/organizations/{organizationsId}/envgroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "envgroups",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.envgroups.patch": {
        "description": "Updates an environment group.",
        "flatPath": "v1/organizations/{organizationsId}/envgroups/{envgroupsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "envgroups",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.analytics.admin.getSchemav2": {
        "description": "Gets a list of metrics and dimensions that can be used to create analytics queries and reports. Each schema element contains the name of the field, its associated type, and a flag indicating whether it is a standard or custom field.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/analytics/admin/schemav2",
        "httpMethod": "GET",
        "method": "getSchemav2",
        "resourceType": "admin",
        "resourceTypePath": "//organizations/environments/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.analytics.exports.create": {
        "description": "Submit a data export job to be processed in the background. If the request is successful, the API returns a 201 status, a URI that can be used to retrieve the status of the export job, and the `state` value of \"enqueued\".",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/analytics/exports",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "exports",
        "resourceTypePath": "//organizations/environments/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.analytics.exports.get": {
        "description": "Gets the details and status of an analytics export job. If the export job is still in progress, its `state` is set to \"running\". After the export job has completed successfully, its `state` is set to \"completed\". If the export job fails, its `state` is set to `failed`.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/analytics/exports/{exportsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "exports",
        "resourceTypePath": "//organizations/environments/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.analytics.exports.list": {
        "description": "Lists the details and status of all analytics export jobs belonging to the parent organization and environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/analytics/exports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "exports",
        "resourceTypePath": "//organizations/environments/analytics",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.deployments.list": {
        "description": "Lists all deployments of an API proxy in an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations/environments/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.debugsessions.create": {
        "description": "Creates a debug session for a deployed API Proxy revision.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/debugsessions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "debugsessions",
        "resourceTypePath": "//organizations/environments/apis/revisions",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.debugsessions.data.get": {
        "description": "Gets the debug data from a transaction.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/debugsessions/{debugsessionsId}/data/{dataId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "data",
        "resourceTypePath": "//organizations/environments/apis/revisions/debugsessions",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.debugsessions.deleteData": {
        "description": "Deletes the data from a debug session. This does not cancel the debug session or prevent further data from being collected if the session is still active in runtime pods.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/debugsessions/{debugsessionsId}/data",
        "httpMethod": "DELETE",
        "method": "deleteData",
        "resourceType": "debugsessions",
        "resourceTypePath": "//organizations/environments/apis/revisions",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.debugsessions.get": {
        "description": "Retrieves a debug session.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/debugsessions/{debugsessionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "debugsessions",
        "resourceTypePath": "//organizations/environments/apis/revisions",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.debugsessions.list": {
        "description": "Lists debug sessions that are currently active in the given API Proxy revision.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/debugsessions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "debugsessions",
        "resourceTypePath": "//organizations/environments/apis/revisions",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.deploy": {
        "description": "Deploys a revision of an API proxy. If another revision of the same API proxy revision is currently deployed, set the `override` parameter to `true` to have this revision replace the currently deployed revision. You cannot invoke an API proxy until it has been deployed to an environment. After you deploy an API proxy revision, you cannot edit it. To edit the API proxy, you must create and deploy a new revision. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.deploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}` ",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/deployments",
        "httpMethod": "POST",
        "method": "deploy",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/environments/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.deployments.generateDeployChangeReport": {
        "description": "Generates a report for a dry run analysis of a DeployApiProxy request without committing the deployment. In addition to the standard validations performed when adding deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being created. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run DeployApiProxy request. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateDeployChangeReport`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.deploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/deployments:generateDeployChangeReport",
        "httpMethod": "POST",
        "method": "generateDeployChangeReport",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations/environments/apis/revisions",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.deployments.generateUndeployChangeReport": {
        "description": "Generates a report for a dry run analysis of an UndeployApiProxy request without committing the undeploy. In addition to the standard validations performed when removing deployments, additional analysis will be done to detect possible traffic routing changes that would result from this deployment being removed. Any potential routing conflicts or unsafe changes will be reported in the response. This routing analysis is not performed for a non-dry-run UndeployApiProxy request. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments:generateUndeployChangeReport`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.undeploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/deployments:generateUndeployChangeReport",
        "httpMethod": "POST",
        "method": "generateUndeployChangeReport",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations/environments/apis/revisions",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.getDeployments": {
        "description": "Gets the deployment of an API proxy revision and actual state reported by runtime pods.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/deployments",
        "httpMethod": "GET",
        "method": "getDeployments",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/environments/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.apis.revisions.undeploy": {
        "description": "Undeploys an API proxy revision from an environment. For a request path `organizations/{org}/environments/{env}/apis/{api}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.proxyrevisions.undeploy` on the resource `organizations/{org}/apis/{api}/revisions/{rev}`",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/apis/{apisId}/revisions/{revisionsId}/deployments",
        "httpMethod": "DELETE",
        "method": "undeploy",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/environments/apis",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.archiveDeployments.create": {
        "description": "Creates a new ArchiveDeployment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/archiveDeployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "archiveDeployments",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.archiveDeployments.delete": {
        "description": "Deletes an archive deployment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/archiveDeployments/{archiveDeploymentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "archiveDeployments",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.archiveDeployments.generateDownloadUrl": {
        "description": "Generates a signed URL for downloading the original zip file used to create an Archive Deployment. The URL is only valid for a limited period and should be used within minutes after generation. Each call returns a new upload URL.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/archiveDeployments/{archiveDeploymentsId}:generateDownloadUrl",
        "httpMethod": "POST",
        "method": "generateDownloadUrl",
        "resourceType": "archiveDeployments",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.archiveDeployments.generateUploadUrl": {
        "description": "Generates a signed URL for uploading an Archive zip file to Google Cloud Storage. Once the upload is complete, the signed URL should be passed to CreateArchiveDeployment. When uploading to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * Source file size should not exceed 1GB limit. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * `content-type: application/zip` * `x-goog-content-length-range: 0,1073741824` And this header SHOULD NOT be specified: * `Authorization: Bearer YOUR_TOKEN`",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/archiveDeployments:generateUploadUrl",
        "httpMethod": "POST",
        "method": "generateUploadUrl",
        "resourceType": "archiveDeployments",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.archiveDeployments.get": {
        "description": "Gets the specified ArchiveDeployment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/archiveDeployments/{archiveDeploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "archiveDeployments",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.archiveDeployments.list": {
        "description": "Lists the ArchiveDeployments in the specified Environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/archiveDeployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "archiveDeployments",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.archiveDeployments.patch": {
        "description": "Updates an existing ArchiveDeployment. Labels can modified but most of the other fields are not modifiable.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/archiveDeployments/{archiveDeploymentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "archiveDeployments",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.caches.delete": {
        "description": "Deletes a cache.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/caches/{cachesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "caches",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.create": {
        "description": "Creates an environment in an organization.",
        "flatPath": "v1/organizations/{organizationsId}/environments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.delete": {
        "description": "Deletes an environment from an organization.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.deployments.list": {
        "description": "Lists all deployments of API proxies or shared flows in an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.flowhooks.attachSharedFlowToFlowHook": {
        "description": "Attaches a shared flow to a flow hook.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/flowhooks/{flowhooksId}",
        "httpMethod": "PUT",
        "method": "attachSharedFlowToFlowHook",
        "resourceType": "flowhooks",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.flowhooks.detachSharedFlowFromFlowHook": {
        "description": "Detaches a shared flow from a flow hook.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/flowhooks/{flowhooksId}",
        "httpMethod": "DELETE",
        "method": "detachSharedFlowFromFlowHook",
        "resourceType": "flowhooks",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.flowhooks.get": {
        "description": "Returns the name of the shared flow attached to the specified flow hook. If there's no shared flow attached to the flow hook, the API does not return an error; it simply does not return a name in the response.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/flowhooks/{flowhooksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "flowhooks",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.get": {
        "description": "Gets environment details.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.getDebugmask": {
        "description": "Gets the debug mask singleton resource for an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/debugmask",
        "httpMethod": "GET",
        "method": "getDebugmask",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.getDeployedConfig": {
        "description": "Gets the deployed configuration for an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/deployedConfig",
        "httpMethod": "GET",
        "method": "getDeployedConfig",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.getIamPolicy": {
        "description": "Gets the IAM policy on an environment. For more information, see [Manage users, roles, and permissions using the API](https://cloud.google.com/apigee/docs/api-platform/system-administration/manage-users-roles). You must have the `apigee.environments.getIamPolicy` permission to call this API.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.getTraceConfig": {
        "description": "Get distributed trace configuration in an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/traceConfig",
        "httpMethod": "GET",
        "method": "getTraceConfig",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keystores.aliases.create": {
        "description": "Creates an alias from a key/certificate pair. The structure of the request is controlled by the `format` query parameter: - `keycertfile` - Separate PEM-encoded key and certificate files are uploaded. Set `Content-Type: multipart/form-data` and include the `keyFile`, `certFile`, and `password` (if keys are encrypted) fields in the request body. If uploading to a truststore, omit `keyFile`. - `pkcs12` - A PKCS12 file is uploaded. Set `Content-Type: multipart/form-data`, provide the file in the `file` field, and include the `password` field if the file is encrypted in the request body. - `selfsignedcert` - A new private key and certificate are generated. Set `Content-Type: application/json` and include CertificateGenerationSpec in the request body.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keystores/{keystoresId}/aliases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "aliases",
        "resourceTypePath": "//organizations/environments/keystores",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keystores.aliases.csr": {
        "description": "Generates a PKCS #10 Certificate Signing Request for the private key in an alias.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keystores/{keystoresId}/aliases/{aliasesId}/csr",
        "httpMethod": "GET",
        "method": "csr",
        "resourceType": "aliases",
        "resourceTypePath": "//organizations/environments/keystores",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keystores.aliases.delete": {
        "description": "Deletes an alias.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keystores/{keystoresId}/aliases/{aliasesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "aliases",
        "resourceTypePath": "//organizations/environments/keystores",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keystores.aliases.get": {
        "description": "Gets an alias.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keystores/{keystoresId}/aliases/{aliasesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "aliases",
        "resourceTypePath": "//organizations/environments/keystores",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keystores.aliases.getCertificate": {
        "description": "Gets the certificate from an alias in PEM-encoded form.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keystores/{keystoresId}/aliases/{aliasesId}/certificate",
        "httpMethod": "GET",
        "method": "getCertificate",
        "resourceType": "aliases",
        "resourceTypePath": "//organizations/environments/keystores",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keystores.aliases.update": {
        "description": "Updates the certificate in an alias.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keystores/{keystoresId}/aliases/{aliasesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "aliases",
        "resourceTypePath": "//organizations/environments/keystores",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keystores.create": {
        "description": "Creates a keystore or truststore. - Keystore: Contains certificates and their associated keys. - Truststore: Contains trusted certificates used to validate a server's certificate. These certificates are typically self-signed certificates or certificates that are not signed by a trusted CA.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keystores",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "keystores",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keystores.delete": {
        "description": "Deletes a keystore or truststore.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keystores/{keystoresId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "keystores",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keystores.get": {
        "description": "Gets a keystore or truststore.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keystores/{keystoresId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "keystores",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keyvaluemaps.create": {
        "description": "Creates a key value map in an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keyvaluemaps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "keyvaluemaps",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.keyvaluemaps.delete": {
        "description": "Delete a key value map in an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/keyvaluemaps/{keyvaluemapsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "keyvaluemaps",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.optimizedStats.get": {
        "description": "Similar to GetStats except that the response is less verbose.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/optimizedStats/{optimizedStatsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "optimizedStats",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.queries.create": {
        "description": "Submit a query to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of \"enqueued\" means that the request succeeded.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/queries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "queries",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.queries.get": {
        "description": "Get query status If the query is still in progress, the `state` is set to \"running\" After the query has completed successfully, `state` is set to \"completed\"",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/queries/{queriesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "queries",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.queries.getResult": {
        "description": "After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/queries/{queriesId}/result",
        "httpMethod": "GET",
        "method": "getResult",
        "resourceType": "queries",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.queries.list": {
        "description": "Return a list of Asynchronous Queries",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/queries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "queries",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.references.create": {
        "description": "Creates a Reference in the specified environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/references",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "references",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.references.delete": {
        "description": "Deletes a Reference from an environment. Returns the deleted Reference resource.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/references/{referencesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "references",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.references.get": {
        "description": "Gets a Reference resource.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/references/{referencesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "references",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.references.update": {
        "description": "Updates an existing Reference. Note that this operation has PUT semantics; it will replace the entirety of the existing Reference with the resource in the request body.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/references/{referencesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "references",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.resourcefiles.create": {
        "description": "Creates a resource file. Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/resourcefiles",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "resourcefiles",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.resourcefiles.delete": {
        "description": "Deletes a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/resourcefiles/{type}/{name}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "resourcefiles",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.resourcefiles.get": {
        "description": "Gets the contents of a resource file. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/resourcefiles/{type}/{name}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "resourcefiles",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.resourcefiles.list": {
        "description": "Lists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/resourcefiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "resourcefiles",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.resourcefiles.listEnvironmentResources": {
        "description": "Lists all resource files, optionally filtering by type. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/resourcefiles/{type}",
        "httpMethod": "GET",
        "method": "listEnvironmentResources",
        "resourceType": "resourcefiles",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.resourcefiles.update": {
        "description": "Updates a resource file. Specify the `Content-Type` as `application/octet-stream` or `multipart/form-data`. For more information about resource files, see [Resource files](https://cloud.google.com/apigee/docs/api-platform/develop/resource-files).",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/resourcefiles/{type}/{name}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "resourcefiles",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.setIamPolicy": {
        "description": "Sets the IAM policy on an environment, if the policy already exists it will be replaced. For more information, see [Manage users, roles, and permissions using the API](https://cloud.google.com/apigee/docs/api-platform/system-administration/manage-users-roles). You must have the `apigee.environments.setIamPolicy` permission to call this API.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.sharedflows.deployments.list": {
        "description": "Lists all deployments of a shared flow in an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/sharedflows/{sharedflowsId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations/environments/sharedflows",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.sharedflows.revisions.deploy": {
        "description": "Deploys a revision of a shared flow. If another revision of the same shared flow is currently deployed, set the `override` parameter to `true` to have this revision replace the currently deployed revision. You cannot use a shared flow until it has been deployed to an environment. For a request path `organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.create` on the resource `organizations/{org}/environments/{env}` * `apigee.sharedflowrevisions.deploy` on the resource `organizations/{org}/sharedflows/{sf}/revisions/{rev}`",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/sharedflows/{sharedflowsId}/revisions/{revisionsId}/deployments",
        "httpMethod": "POST",
        "method": "deploy",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/environments/sharedflows",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.sharedflows.revisions.getDeployments": {
        "description": "Gets the deployment of a shared flow revision and actual state reported by runtime pods.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/sharedflows/{sharedflowsId}/revisions/{revisionsId}/deployments",
        "httpMethod": "GET",
        "method": "getDeployments",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/environments/sharedflows",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.sharedflows.revisions.undeploy": {
        "description": "Undeploys a shared flow revision from an environment. For a request path `organizations/{org}/environments/{env}/sharedflows/{sf}/revisions/{rev}/deployments`, two permissions are required: * `apigee.deployments.delete` on the resource `organizations/{org}/environments/{env}` * `apigee.sharedflowrevisions.undeploy` on the resource `organizations/{org}/sharedflows/{sf}/revisions/{rev}`",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/sharedflows/{sharedflowsId}/revisions/{revisionsId}/deployments",
        "httpMethod": "DELETE",
        "method": "undeploy",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/environments/sharedflows",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.stats.get": {
        "description": "Retrieve metrics grouped by dimensions. The types of metrics you can retrieve include traffic, message counts, API call latency, response size, and cache hits and counts. Dimensions let you view metrics in meaningful groups. You can optionally pass dimensions as path parameters to the `stats` API. If dimensions are not specified, the metrics are computed on the entire set of data for the given time range.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/stats/{statsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "stats",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.subscribe": {
        "description": "Creates a subscription for the environment's Pub/Sub topic. The server will assign a random name for this subscription. The \"name\" and \"push_config\" must *not* be specified.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}:subscribe",
        "httpMethod": "POST",
        "method": "subscribe",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.targetservers.create": {
        "description": "Creates a TargetServer in the specified environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/targetservers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "targetservers",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.targetservers.delete": {
        "description": "Deletes a TargetServer from an environment. Returns the deleted TargetServer resource.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/targetservers/{targetserversId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetservers",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.targetservers.get": {
        "description": "Gets a TargetServer resource.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/targetservers/{targetserversId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetservers",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.targetservers.update": {
        "description": "Updates an existing TargetServer. Note that this operation has PUT semantics; it will replace the entirety of the existing TargetServer with the resource in the request body.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/targetservers/{targetserversId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "targetservers",
        "resourceTypePath": "//organizations/environments",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.testIamPermissions": {
        "description": "Tests the permissions of a user on an environment, and returns a subset of permissions that the user has on the environment. If the environment does not exist, an empty permission set is returned (a NOT_FOUND error is not returned).",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.traceConfig.overrides.create": {
        "description": "Creates a trace configuration override. The response contains a system-generated UUID, that can be used to view, update, or delete the configuration override. Use the List API to view the existing trace configuration overrides.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/traceConfig/overrides",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "overrides",
        "resourceTypePath": "//organizations/environments/traceConfig",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.traceConfig.overrides.delete": {
        "description": "Deletes a distributed trace configuration override.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/traceConfig/overrides/{overridesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "overrides",
        "resourceTypePath": "//organizations/environments/traceConfig",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.traceConfig.overrides.get": {
        "description": "Gets a trace configuration override.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/traceConfig/overrides/{overridesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "overrides",
        "resourceTypePath": "//organizations/environments/traceConfig",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.traceConfig.overrides.list": {
        "description": "Lists all of the distributed trace configuration overrides in an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/traceConfig/overrides",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "overrides",
        "resourceTypePath": "//organizations/environments/traceConfig",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.traceConfig.overrides.patch": {
        "description": "Updates a distributed trace configuration override. Note that the repeated fields have replace semantics when included in the field mask and that they will be overwritten by the value of the fields in the request body.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/traceConfig/overrides/{overridesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "overrides",
        "resourceTypePath": "//organizations/environments/traceConfig",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.unsubscribe": {
        "description": "Deletes a subscription for the environment's Pub/Sub topic.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}:unsubscribe",
        "httpMethod": "POST",
        "method": "unsubscribe",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.update": {
        "description": "Updates an existing environment. When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get).",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.updateDebugmask": {
        "description": "Updates the debug mask singleton resource for an environment.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/debugmask",
        "httpMethod": "PATCH",
        "method": "updateDebugmask",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.updateEnvironment": {
        "description": "Updates an existing environment. When updating properties, you must pass all existing properties to the API, even if they are not being changed. If you omit properties from the payload, the properties are removed. To get the current list of properties for the environment, use the [Get Environment API](get).",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}",
        "httpMethod": "POST",
        "method": "updateEnvironment",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.environments.updateTraceConfig": {
        "description": "Updates the trace configurations in an environment. Note that the repeated fields have replace semantics when included in the field mask and that they will be overwritten by the value of the fields in the request body.",
        "flatPath": "v1/organizations/{organizationsId}/environments/{environmentsId}/traceConfig",
        "httpMethod": "PATCH",
        "method": "updateTraceConfig",
        "resourceType": "environments",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.get": {
        "description": "Gets the profile for an Apigee organization. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).",
        "flatPath": "v1/organizations/{organizationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.getDeployedIngressConfig": {
        "description": "Gets the deployed ingress configuration for an organization.",
        "flatPath": "v1/organizations/{organizationsId}/deployedIngressConfig",
        "httpMethod": "GET",
        "method": "getDeployedIngressConfig",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.getRuntimeConfig": {
        "description": "Get runtime config for an organization.",
        "flatPath": "v1/organizations/{organizationsId}/runtimeConfig",
        "httpMethod": "GET",
        "method": "getRuntimeConfig",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.getSyncAuthorization": {
        "description": "Lists the service accounts with the permissions required to allow the Synchronizer to download environment data from the control plane. An ETag is returned in the response to `getSyncAuthorization`. Pass that ETag when calling [setSyncAuthorization](setSyncAuthorization) to ensure that you are updating the correct version. If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.",
        "flatPath": "v1/organizations/{organizationsId}:getSyncAuthorization",
        "httpMethod": "POST",
        "method": "getSyncAuthorization",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.hostQueries.create": {
        "description": "Submit a query at host level to be processed in the background. If the submission of the query succeeds, the API returns a 201 status and an ID that refer to the query. In addition to the HTTP status 201, the `state` of \"enqueued\" means that the request succeeded.",
        "flatPath": "v1/organizations/{organizationsId}/hostQueries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "hostQueries",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.hostQueries.get": {
        "description": "Get status of a query submitted at host level. If the query is still in progress, the `state` is set to \"running\" After the query has completed successfully, `state` is set to \"completed\"",
        "flatPath": "v1/organizations/{organizationsId}/hostQueries/{hostQueriesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "hostQueries",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.hostQueries.getResult": {
        "description": "After the query is completed, use this API to retrieve the results. If the request succeeds, and there is a non-zero result set, the result is downloaded to the client as a zipped JSON file. The name of the downloaded file will be: OfflineQueryResult-.zip Example: `OfflineQueryResult-9cfc0d85-0f30-46d6-ae6f-318d0cb961bd.zip`",
        "flatPath": "v1/organizations/{organizationsId}/hostQueries/{hostQueriesId}/result",
        "httpMethod": "GET",
        "method": "getResult",
        "resourceType": "hostQueries",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.hostQueries.getResultView": {
        "description": "",
        "flatPath": "v1/organizations/{organizationsId}/hostQueries/{hostQueriesId}/resultView",
        "httpMethod": "GET",
        "method": "getResultView",
        "resourceType": "hostQueries",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.hostQueries.list": {
        "description": "Return a list of Asynchronous Queries at host level.",
        "flatPath": "v1/organizations/{organizationsId}/hostQueries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "hostQueries",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.hostStats.get": {
        "description": "Retrieve metrics grouped by dimensions in host level. The types of metrics you can retrieve include traffic, message counts, API call latency, response size, and cache hits and counts. Dimensions let you view metrics in meaningful groups. You can optionally pass dimensions as path parameters to the `stats` API. If dimensions are not specified, the metrics are computed on the entire set of data for the given time range.",
        "flatPath": "v1/organizations/{organizationsId}/hostStats/{hostStatsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "hostStats",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.attachments.create": {
        "description": "Creates a new attachment of an environment to an instance. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/attachments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "attachments",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.attachments.delete": {
        "description": "Deletes an attachment. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/attachments/{attachmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "attachments",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.attachments.get": {
        "description": "Gets an attachment. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/attachments/{attachmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "attachments",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.attachments.list": {
        "description": "Lists all attachments to an instance. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/attachments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "attachments",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.canaryevaluations.create": {
        "description": "Creates a new canary evaluation for an organization.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/canaryevaluations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "canaryevaluations",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.canaryevaluations.get": {
        "description": "Gets a CanaryEvaluation for an organization.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/canaryevaluations/{canaryevaluationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "canaryevaluations",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.create": {
        "description": "Creates an Apigee runtime instance. The instance is accessible from the authorized network configured on the organization. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instances",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.delete": {
        "description": "Deletes an Apigee runtime instance. The instance stops serving requests and the runtime data is deleted. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.get": {
        "description": "Gets the details for an Apigee runtime instance. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.list": {
        "description": "Lists all Apigee runtime instances for the organization. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.natAddresses.activate": {
        "description": "Activates the NAT address. The Apigee instance can now use this for Internet egress traffic. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/natAddresses/{natAddressesId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "natAddresses",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.natAddresses.create": {
        "description": "Creates a NAT address. The address is created in the RESERVED state and a static external IP address will be provisioned. At this time, the instance will not use this IP address for Internet egress traffic. The address can be activated for use once any required firewall IP whitelisting has been completed. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/natAddresses",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "natAddresses",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.natAddresses.delete": {
        "description": "Deletes the NAT address. Connections that are actively using the address are drained before it is removed. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/natAddresses/{natAddressesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "natAddresses",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.natAddresses.get": {
        "description": "Gets the details of a NAT address. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/natAddresses/{natAddressesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "natAddresses",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.natAddresses.list": {
        "description": "Lists the NAT addresses for an Apigee instance. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}/natAddresses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "natAddresses",
        "resourceTypePath": "//organizations/instances",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.patch": {
        "description": "Updates an Apigee runtime instance. You can update the fields described in NodeConfig. No other fields will be updated. **Note:** Not supported for Apigee hybrid.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "instances",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.instances.reportStatus": {
        "description": "Reports the latest status for a runtime instance.",
        "flatPath": "v1/organizations/{organizationsId}/instances/{instancesId}:reportStatus",
        "httpMethod": "POST",
        "method": "reportStatus",
        "resourceType": "instances",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.keyvaluemaps.create": {
        "description": "Creates a key value map in an organization.",
        "flatPath": "v1/organizations/{organizationsId}/keyvaluemaps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "keyvaluemaps",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.keyvaluemaps.delete": {
        "description": "Delete a key value map in an organization.",
        "flatPath": "v1/organizations/{organizationsId}/keyvaluemaps/{keyvaluemapsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "keyvaluemaps",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.list": {
        "description": "Lists the Apigee organizations and associated GCP projects that you have permission to access. See [Understanding organizations](https://cloud.google.com/apigee/docs/api-platform/fundamentals/organization-structure).",
        "flatPath": "v1/organizations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/organizations/{organizationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/organizations/{organizationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.optimizedHostStats.get": {
        "description": "Similar to GetHostStats except that the response is less verbose.",
        "flatPath": "v1/organizations/{organizationsId}/optimizedHostStats/{optimizedHostStatsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "optimizedHostStats",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.reports.create": {
        "description": "Creates a Custom Report for an Organization. A Custom Report provides Apigee Customers to create custom dashboards in addition to the standard dashboards which are provided. The Custom Report in its simplest form contains specifications about metrics, dimensions and filters. It is important to note that the custom report by itself does not provide an executable entity. The Edge UI converts the custom report definition into an analytics query and displays the result in a chart.",
        "flatPath": "v1/organizations/{organizationsId}/reports",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "reports",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.reports.delete": {
        "description": "Deletes an existing custom report definition",
        "flatPath": "v1/organizations/{organizationsId}/reports/{reportsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "reports",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.reports.get": {
        "description": "Retrieve a custom report definition.",
        "flatPath": "v1/organizations/{organizationsId}/reports/{reportsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reports",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.reports.list": {
        "description": "Return a list of Custom Reports",
        "flatPath": "v1/organizations/{organizationsId}/reports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reports",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.reports.update": {
        "description": "Update an existing custom report definition",
        "flatPath": "v1/organizations/{organizationsId}/reports/{reportsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "reports",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.setAddons": {
        "description": "Configures the add-ons for the Apigee organization. The existing add-on configuration will be fully replaced.",
        "flatPath": "v1/organizations/{organizationsId}:setAddons",
        "httpMethod": "POST",
        "method": "setAddons",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.setSyncAuthorization": {
        "description": "Sets the permissions required to allow the Synchronizer to download environment data from the control plane. You must call this API to enable proper functioning of hybrid. Pass the ETag when calling `setSyncAuthorization` to ensure that you are updating the correct version. To get an ETag, call [getSyncAuthorization](getSyncAuthorization). If you don't pass the ETag in the call to `setSyncAuthorization`, then the existing authorization is overwritten indiscriminately. For more information, see [Configure the Synchronizer](https://cloud.google.com/apigee/docs/hybrid/latest/synchronizer-access). **Note**: Available to Apigee hybrid only.",
        "flatPath": "v1/organizations/{organizationsId}:setSyncAuthorization",
        "httpMethod": "POST",
        "method": "setSyncAuthorization",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sharedflows.create": {
        "description": "Uploads a ZIP-formatted shared flow configuration bundle to an organization. If the shared flow already exists, this creates a new revision of it. If the shared flow does not exist, this creates it. Once imported, the shared flow revision must be deployed before it can be accessed at runtime. The size limit of a shared flow bundle is 15 MB.",
        "flatPath": "v1/organizations/{organizationsId}/sharedflows",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sharedflows",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sharedflows.delete": {
        "description": "Deletes a shared flow and all it's revisions. The shared flow must be undeployed before you can delete it.",
        "flatPath": "v1/organizations/{organizationsId}/sharedflows/{sharedflowsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sharedflows",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sharedflows.deployments.list": {
        "description": "Lists all deployments of a shared flow.",
        "flatPath": "v1/organizations/{organizationsId}/sharedflows/{sharedflowsId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations/sharedflows",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sharedflows.get": {
        "description": "Gets a shared flow by name, including a list of its revisions.",
        "flatPath": "v1/organizations/{organizationsId}/sharedflows/{sharedflowsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sharedflows",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sharedflows.list": {
        "description": "Lists all shared flows in the organization.",
        "flatPath": "v1/organizations/{organizationsId}/sharedflows",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sharedflows",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sharedflows.revisions.delete": {
        "description": "Deletes a shared flow and all associated policies, resources, and revisions. You must undeploy the shared flow before deleting it.",
        "flatPath": "v1/organizations/{organizationsId}/sharedflows/{sharedflowsId}/revisions/{revisionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/sharedflows",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sharedflows.revisions.deployments.list": {
        "description": "Lists all deployments of a shared flow revision.",
        "flatPath": "v1/organizations/{organizationsId}/sharedflows/{sharedflowsId}/revisions/{revisionsId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//organizations/sharedflows/revisions",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sharedflows.revisions.get": {
        "description": "Gets a revision of a shared flow. To download the shared flow configuration bundle for the specified revision as a zip file, set the `format` query parameter to `bundle`. If you are using curl, specify `-o filename.zip` to save the output to a file; otherwise, it displays to `stdout`. Then, develop the shared flow configuration locally and upload the updated sharedFlow configuration revision, as described in [updateSharedFlowRevision](updateSharedFlowRevision).",
        "flatPath": "v1/organizations/{organizationsId}/sharedflows/{sharedflowsId}/revisions/{revisionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/sharedflows",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sharedflows.revisions.updateSharedFlowRevision": {
        "description": "Updates a shared flow revision. This operation is only allowed on revisions which have never been deployed. After deployment a revision becomes immutable, even if it becomes undeployed. The payload is a ZIP-formatted shared flow. Content type must be either multipart/form-data or application/octet-stream.",
        "flatPath": "v1/organizations/{organizationsId}/sharedflows/{sharedflowsId}/revisions/{revisionsId}",
        "httpMethod": "POST",
        "method": "updateSharedFlowRevision",
        "resourceType": "revisions",
        "resourceTypePath": "//organizations/sharedflows",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sites.apicategories.create": {
        "description": "Creates a new category on the portal.",
        "flatPath": "v1/organizations/{organizationsId}/sites/{sitesId}/apicategories",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "apicategories",
        "resourceTypePath": "//organizations/sites",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sites.apicategories.delete": {
        "description": "Deletes a category from the portal.",
        "flatPath": "v1/organizations/{organizationsId}/sites/{sitesId}/apicategories/{apicategoriesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "apicategories",
        "resourceTypePath": "//organizations/sites",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sites.apicategories.get": {
        "description": "Gets a category on the portal.",
        "flatPath": "v1/organizations/{organizationsId}/sites/{sitesId}/apicategories/{apicategoriesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "apicategories",
        "resourceTypePath": "//organizations/sites",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sites.apicategories.list": {
        "description": "Lists the categories on the portal.",
        "flatPath": "v1/organizations/{organizationsId}/sites/{sitesId}/apicategories",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apicategories",
        "resourceTypePath": "//organizations/sites",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.sites.apicategories.patch": {
        "description": "Updates a category on the portal.",
        "flatPath": "v1/organizations/{organizationsId}/sites/{sitesId}/apicategories/{apicategoriesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "apicategories",
        "resourceTypePath": "//organizations/sites",
        "versions": [
          "v1"
        ]
      },
      "apigee.organizations.update": {
        "description": "Updates the properties for an Apigee organization. No other fields in the organization profile will be updated.",
        "flatPath": "v1/organizations/{organizationsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "apigee.projects.provisionOrganization": {
        "description": "Provisions a new Apigee organization with a functioning runtime. This is the standard way to create trial organizations for a free Apigee trial.",
        "flatPath": "v1/projects/{projectsId}:provisionOrganization",
        "httpMethod": "POST",
        "method": "provisionOrganization",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Apigee API"
  },
  "apikeys": {
    "description": "Manages the API keys associated with developer projects.",
    "methods": {
      "apikeys.keys.lookupKey": {
        "description": "Find the parent project and resource name of the API key that matches the key string in the request. If the API key has been purged, resource name will not be set. The service account must have the `apikeys.keys.lookup` permission on the parent project.",
        "flatPath": "v2/keys:lookupKey",
        "httpMethod": "GET",
        "method": "lookupKey",
        "resourceType": "keys",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "apikeys.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "apikeys.projects.locations.keys.clone": {
        "description": "Clones the existing key's restriction and display name to a new API key. The service account must have the `apikeys.keys.get` and `apikeys.keys.create` permissions in the project. NOTE: Key is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/keys/{keysId}:clone",
        "httpMethod": "POST",
        "method": "clone",
        "resourceType": "keys",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "apikeys.projects.locations.keys.create": {
        "description": "Creates a new API key. NOTE: Key is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/keys",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "keys",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "apikeys.projects.locations.keys.delete": {
        "description": "Deletes an API key. Deleted key can be retrieved within 30 days of deletion. Afterward, key will be purged from the project. NOTE: Key is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/keys/{keysId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "keys",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "apikeys.projects.locations.keys.get": {
        "description": "Gets the metadata for an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/keys/{keysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "keys",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "apikeys.projects.locations.keys.getKeyString": {
        "description": "Get the key string for an API key. NOTE: Key is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/keys/{keysId}/keyString",
        "httpMethod": "GET",
        "method": "getKeyString",
        "resourceType": "keys",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "apikeys.projects.locations.keys.list": {
        "description": "Lists the API keys owned by a project. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/keys",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "keys",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "apikeys.projects.locations.keys.patch": {
        "description": "Patches the modifiable fields of an API key. The key string of the API key isn't included in the response. NOTE: Key is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/keys/{keysId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "keys",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "apikeys.projects.locations.keys.undelete": {
        "description": "Undeletes an API key which was deleted within 30 days. NOTE: Key is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/keys/{keysId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "keys",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "API Keys API"
  },
  "appengine": {
    "description": "Provisions and manages developers' App Engine applications.",
    "methods": {
      "appengine.apps.authorizedCertificates.create": {
        "description": "Uploads the specified SSL certificate.",
        "flatPath": "v1alpha/apps/{appsId}/authorizedCertificates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "authorizedCertificates",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.authorizedCertificates.delete": {
        "description": "Deletes the specified SSL certificate.",
        "flatPath": "v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "authorizedCertificates",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.authorizedCertificates.get": {
        "description": "Gets the specified SSL certificate.",
        "flatPath": "v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "authorizedCertificates",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.authorizedCertificates.list": {
        "description": "Lists all SSL certificates the user is authorized to administer.",
        "flatPath": "v1alpha/apps/{appsId}/authorizedCertificates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "authorizedCertificates",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.authorizedCertificates.patch": {
        "description": "Updates the specified SSL certificate. To renew a certificate and maintain its existing domain mappings, update certificate_data with a new certificate. The new certificate must be applicable to the same domains as the original certificate. The certificate display_name may also be updated.",
        "flatPath": "v1alpha/apps/{appsId}/authorizedCertificates/{authorizedCertificatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "authorizedCertificates",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.authorizedDomains.list": {
        "description": "Lists all domains the user is authorized to administer.",
        "flatPath": "v1alpha/apps/{appsId}/authorizedDomains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "authorizedDomains",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.create": {
        "description": "Creates an App Engine application for a Google Cloud Platform project. Required fields: id - The ID of the target Cloud Platform project. location - The region (https://cloud.google.com/appengine/docs/locations) where you want the App Engine application located.For more information about App Engine applications, see Managing Projects, Applications, and Billing (https://cloud.google.com/appengine/docs/standard/python/console/).",
        "flatPath": "v1beta/apps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "apps",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.domainMappings.create": {
        "description": "Maps a domain to an application. A user must be authorized to administer a domain in order to map it to an application. For a list of available authorized domains, see AuthorizedDomains.ListAuthorizedDomains.",
        "flatPath": "v1alpha/apps/{appsId}/domainMappings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "domainMappings",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.domainMappings.delete": {
        "description": "Deletes the specified domain mapping. A user must be authorized to administer the associated domain in order to delete a DomainMapping resource.",
        "flatPath": "v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "domainMappings",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.domainMappings.get": {
        "description": "Gets the specified domain mapping.",
        "flatPath": "v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domainMappings",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.domainMappings.list": {
        "description": "Lists the domain mappings on an application.",
        "flatPath": "v1alpha/apps/{appsId}/domainMappings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "domainMappings",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.domainMappings.patch": {
        "description": "Updates the specified domain mapping. To map an SSL certificate to a domain mapping, update certificate_id to point to an AuthorizedCertificate resource. A user must be authorized to administer the associated domain in order to update a DomainMapping resource.",
        "flatPath": "v1alpha/apps/{appsId}/domainMappings/{domainMappingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "domainMappings",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.firewall.ingressRules.batchUpdate": {
        "description": "Replaces the entire firewall ruleset in one bulk operation. This overrides and replaces the rules of an existing firewall with the new rules.If the final rule does not match traffic with the '*' wildcard IP range, then an \"allow all\" rule is explicitly added to the end of the list.",
        "flatPath": "v1beta/apps/{appsId}/firewall/ingressRules:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "ingressRules",
        "resourceTypePath": "//apps/firewall",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.firewall.ingressRules.create": {
        "description": "Creates a firewall rule for the application.",
        "flatPath": "v1beta/apps/{appsId}/firewall/ingressRules",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "ingressRules",
        "resourceTypePath": "//apps/firewall",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.firewall.ingressRules.delete": {
        "description": "Deletes the specified firewall rule.",
        "flatPath": "v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "ingressRules",
        "resourceTypePath": "//apps/firewall",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.firewall.ingressRules.get": {
        "description": "Gets the specified firewall rule.",
        "flatPath": "v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "ingressRules",
        "resourceTypePath": "//apps/firewall",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.firewall.ingressRules.list": {
        "description": "Lists the firewall rules of an application.",
        "flatPath": "v1beta/apps/{appsId}/firewall/ingressRules",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "ingressRules",
        "resourceTypePath": "//apps/firewall",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.firewall.ingressRules.patch": {
        "description": "Updates the specified firewall rule.",
        "flatPath": "v1beta/apps/{appsId}/firewall/ingressRules/{ingressRulesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "ingressRules",
        "resourceTypePath": "//apps/firewall",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.get": {
        "description": "Gets information about an application.",
        "flatPath": "v1beta/apps/{appsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "apps",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha/apps/{appsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha/apps/{appsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha/apps/{appsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha/apps/{appsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//apps",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.patch": {
        "description": "Updates the specified Application resource. You can update the following fields: auth_domain - Google authentication domain for controlling user access to the application. default_cookie_expiration - Cookie expiration policy for the application. iap - Identity-Aware Proxy properties for the application.",
        "flatPath": "v1beta/apps/{appsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "apps",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.repair": {
        "description": "Recreates the required App Engine features for the specified App Engine application, for example a Cloud Storage bucket or App Engine service account. Use this method if you receive an error message about a missing feature, for example, Error retrieving the App Engine service account. If you have deleted your App Engine service account, this will not be able to recreate it. Instead, you should attempt to use the IAM undelete API if possible at https://cloud.google.com/iam/reference/rest/v1/projects.serviceAccounts/undelete?apix_params=%7B\"name\"%3A\"projects%2F-%2FserviceAccounts%2Funique_id\"%2C\"resource\"%3A%7B%7D%7D . If the deletion was recent, the numeric ID can be found in the Cloud Console Activity Log.",
        "flatPath": "v1beta/apps/{appsId}:repair",
        "httpMethod": "POST",
        "method": "repair",
        "resourceType": "apps",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.delete": {
        "description": "Deletes the specified service and all enclosed versions.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "services",
        "resourceTypePath": "//apps",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.get": {
        "description": "Gets the current configuration of the specified service.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "services",
        "resourceTypePath": "//apps",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.list": {
        "description": "Lists all the services in the application.",
        "flatPath": "v1beta/apps/{appsId}/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "//apps",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.patch": {
        "description": "Updates the configuration of the specified service.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "services",
        "resourceTypePath": "//apps",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.versions.create": {
        "description": "Deploys code and resource files to a new version.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}/versions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "versions",
        "resourceTypePath": "//apps/services",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.versions.delete": {
        "description": "Deletes an existing Version resource.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "versions",
        "resourceTypePath": "//apps/services",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.versions.get": {
        "description": "Gets the specified Version resource. By default, only a BASIC_VIEW will be returned. Specify the FULL_VIEW parameter to get the full resource.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//apps/services",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.versions.instances.debug": {
        "description": "Enables debugging on a VM instance. This allows you to use the SSH command to connect to the virtual machine where the instance lives. While in \"debug mode\", the instance continues to serve live traffic. You should delete the instance when you are done debugging and then allow the system to take over and determine if another instance should be started.Only applicable for instances in App Engine flexible environment.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}:debug",
        "httpMethod": "POST",
        "method": "debug",
        "resourceType": "instances",
        "resourceTypePath": "//apps/services/versions",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.versions.instances.delete": {
        "description": "Stops a running instance.The instance might be automatically recreated based on the scaling settings of the version. For more information, see \"How Instances are Managed\" (standard environment (https://cloud.google.com/appengine/docs/standard/python/how-instances-are-managed) | flexible environment (https://cloud.google.com/appengine/docs/flexible/python/how-instances-are-managed)).To ensure that instances are not re-created and avoid getting billed, you can stop all instances within the target version by changing the serving status of the version to STOPPED with the apps.services.versions.patch (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions/patch) method.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//apps/services/versions",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.versions.instances.get": {
        "description": "Gets instance information.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//apps/services/versions",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.versions.instances.list": {
        "description": "Lists the instances of a version.Tip: To aggregate details about instances over time, see the Stackdriver Monitoring API (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list).",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//apps/services/versions",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.versions.list": {
        "description": "Lists the versions of a service.",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//apps/services",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.apps.services.versions.patch": {
        "description": "Updates the specified Version resource. You can specify the following fields depending on the App Engine environment and type of scaling that the version resource uses:Standard environment instance_class (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.instance_class)automatic scaling in the standard environment: automatic_scaling.min_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_idle_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automaticScaling.standard_scheduler_settings.max_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.min_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_cpu_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StandardSchedulerSettings) automaticScaling.standard_scheduler_settings.target_throughput_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#StandardSchedulerSettings)basic scaling or manual scaling in the standard environment: serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.serving_status) manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#manualscaling)Flexible environment serving_status (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.serving_status)automatic scaling in the flexible environment: automatic_scaling.min_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.max_total_instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cool_down_period_sec (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling) automatic_scaling.cpu_utilization.target_utilization (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#Version.FIELDS.automatic_scaling)manual scaling in the flexible environment: manual_scaling.instances (https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1beta/apps.services.versions#manualscaling)",
        "flatPath": "v1beta/apps/{appsId}/services/{servicesId}/versions/{versionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "versions",
        "resourceTypePath": "//apps/services",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "appengine.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha"
        ]
      },
      "appengine.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha"
        ]
      },
      "appengine.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha"
        ]
      },
      "appengine.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "App Engine Admin API"
  },
  "area120tables": {
    "description": "",
    "methods": {
      "area120tables.tables.get": {
        "description": "Gets a table. Returns NOT_FOUND if the table does not exist.",
        "flatPath": "v1alpha1/tables/{tablesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.tables.list": {
        "description": "Lists tables for the user.",
        "flatPath": "v1alpha1/tables",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.tables.rows.batchCreate": {
        "description": "Creates multiple rows.",
        "flatPath": "v1alpha1/tables/{tablesId}/rows:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "rows",
        "resourceTypePath": "//tables",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.tables.rows.batchDelete": {
        "description": "Deletes multiple rows.",
        "flatPath": "v1alpha1/tables/{tablesId}/rows:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "rows",
        "resourceTypePath": "//tables",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.tables.rows.batchUpdate": {
        "description": "Updates multiple rows.",
        "flatPath": "v1alpha1/tables/{tablesId}/rows:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "rows",
        "resourceTypePath": "//tables",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.tables.rows.create": {
        "description": "Creates a row.",
        "flatPath": "v1alpha1/tables/{tablesId}/rows",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "rows",
        "resourceTypePath": "//tables",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.tables.rows.delete": {
        "description": "Deletes a row.",
        "flatPath": "v1alpha1/tables/{tablesId}/rows/{rowsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "rows",
        "resourceTypePath": "//tables",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.tables.rows.get": {
        "description": "Gets a row. Returns NOT_FOUND if the row does not exist in the table.",
        "flatPath": "v1alpha1/tables/{tablesId}/rows/{rowsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "rows",
        "resourceTypePath": "//tables",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.tables.rows.list": {
        "description": "Lists rows in a table. Returns NOT_FOUND if the table does not exist.",
        "flatPath": "v1alpha1/tables/{tablesId}/rows",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "rows",
        "resourceTypePath": "//tables",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.tables.rows.patch": {
        "description": "Updates a row.",
        "flatPath": "v1alpha1/tables/{tablesId}/rows/{rowsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "rows",
        "resourceTypePath": "//tables",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.workspaces.get": {
        "description": "Gets a workspace. Returns NOT_FOUND if the workspace does not exist.",
        "flatPath": "v1alpha1/workspaces/{workspacesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "workspaces",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "area120tables.workspaces.list": {
        "description": "Lists workspaces for the user.",
        "flatPath": "v1alpha1/workspaces",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "workspaces",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      }
    },
    "preferredVersion": "v1alpha1",
    "title": "Area120 Tables API"
  },
  "artifactregistry": {
    "description": "Store and manage build artifacts in a scalable and integrated service built on Google infrastructure.",
    "methods": {
      "artifactregistry.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "artifactregistry.projects.getProjectSettings": {
        "description": "Retrieves the Settings for the Project",
        "flatPath": "v1beta2/projects/{projectsId}/projectSettings",
        "httpMethod": "GET",
        "method": "getProjectSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.aptArtifacts.import": {
        "description": "Imports Apt artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "aptArtifacts",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.aptartifacts.upload": {
        "description": "Directly uploads an Apt artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/aptArtifacts:create",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "aptartifacts",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.create": {
        "description": "Creates a repository. The returned Operation will finish once the repository has been created. Its response will be the created Repository.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "repositories",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.delete": {
        "description": "Deletes a repository and all of its contents. The returned Operation will finish once the repository has been deleted. It will not have any Operation metadata and will return a google.protobuf.Empty response.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "repositories",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.dockerImages.get": {
        "description": "Gets a docker image.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages/{dockerImagesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dockerImages",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1"
        ]
      },
      "artifactregistry.projects.locations.repositories.dockerImages.list": {
        "description": "Lists docker images.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/dockerImages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dockerImages",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1"
        ]
      },
      "artifactregistry.projects.locations.repositories.files.get": {
        "description": "Gets a file.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files/{filesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "files",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.files.list": {
        "description": "Lists files.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/files",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "files",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.get": {
        "description": "Gets a repository.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "repositories",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1beta2",
          "v1"
        ]
      },
      "artifactregistry.projects.locations.repositories.getIamPolicy": {
        "description": "Gets the IAM policy for a given resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "repositories",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.list": {
        "description": "Lists repositories.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "repositories",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1beta2",
          "v1"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.delete": {
        "description": "Deletes a package and all of its versions and tags. The returned operation will complete once the package has been deleted.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "packages",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.get": {
        "description": "Gets a package.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "packages",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.list": {
        "description": "Lists packages.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "packages",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.tags.create": {
        "description": "Creates a tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/repositories/packages",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.tags.delete": {
        "description": "Deletes a tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/repositories/packages",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.tags.get": {
        "description": "Gets a tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/repositories/packages",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.tags.list": {
        "description": "Lists tags.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/repositories/packages",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.tags.patch": {
        "description": "Updates a tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/tags/{tagsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/repositories/packages",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.versions.delete": {
        "description": "Deletes a version and all of its content. The returned operation will complete once the version has been deleted.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/repositories/packages",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.versions.get": {
        "description": "Gets a version",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions/{versionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/repositories/packages",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.packages.versions.list": {
        "description": "Lists versions.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/packages/{packagesId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/repositories/packages",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.patch": {
        "description": "Updates a repository.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "repositories",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.setIamPolicy": {
        "description": "Updates the IAM policy for a given resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "repositories",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.testIamPermissions": {
        "description": "Tests if the caller has a list of permissions on a resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "repositories",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.yumArtifacts.import": {
        "description": "Imports Yum (RPM) artifacts. The returned Operation will complete once the resources are imported. Package, Version, and File resources are created based on the imported artifacts. Imported artifacts that conflict with existing resources are ignored.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "yumArtifacts",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1beta2"
        ]
      },
      "artifactregistry.projects.locations.repositories.yumartifacts.upload": {
        "description": "Directly uploads a Yum artifact. The returned Operation will complete once the resources are uploaded. Package, Version, and File resources are created based on the imported artifact. Imported artifacts that conflict with existing resources are ignored.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/yumArtifacts:create",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "yumartifacts",
        "resourceTypePath": "//projects/locations/repositories",
        "versions": [
          "v1beta2"
        ]
      },
      "artifactregistry.projects.updateProjectSettings": {
        "description": "Retrieves the Settings for the Project",
        "flatPath": "v1beta2/projects/{projectsId}/projectSettings",
        "httpMethod": "PATCH",
        "method": "updateProjectSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Artifact Registry API"
  },
  "assuredworkloads": {
    "description": "",
    "methods": {
      "assuredworkloads.organizations.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/organizations/{organizationsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1"
        ]
      },
      "assuredworkloads.organizations.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/organizations/{organizationsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1"
        ]
      },
      "assuredworkloads.organizations.locations.workloads.create": {
        "description": "Creates Assured Workload.",
        "flatPath": "v1/organizations/{organizationsId}/locations/{locationsId}/workloads",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "workloads",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1"
        ]
      },
      "assuredworkloads.organizations.locations.workloads.delete": {
        "description": "Deletes the workload. Make sure that workload's direct children are already in a deleted state, otherwise the request will fail with a FAILED_PRECONDITION error.",
        "flatPath": "v1/organizations/{organizationsId}/locations/{locationsId}/workloads/{workloadsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "workloads",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1"
        ]
      },
      "assuredworkloads.organizations.locations.workloads.get": {
        "description": "Gets Assured Workload associated with a CRM Node",
        "flatPath": "v1/organizations/{organizationsId}/locations/{locationsId}/workloads/{workloadsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "workloads",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1"
        ]
      },
      "assuredworkloads.organizations.locations.workloads.list": {
        "description": "Lists Assured Workloads under a CRM Node.",
        "flatPath": "v1/organizations/{organizationsId}/locations/{locationsId}/workloads",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "workloads",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1"
        ]
      },
      "assuredworkloads.organizations.locations.workloads.patch": {
        "description": "Updates an existing workload. Currently allows updating of workload display_name and labels. For force updates don't set etag field in the Workload. Only one update operation per workload can be in progress.",
        "flatPath": "v1/organizations/{organizationsId}/locations/{locationsId}/workloads/{workloadsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "workloads",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Assured Workloads API"
  },
  "authorizedbuyersmarketplace": {
    "description": "The Authorized Buyers Marketplace API allows buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.",
    "methods": {
      "authorizedbuyersmarketplace.bidders.finalizedDeals.list": {
        "description": "Lists finalized deals. Use the URL path \"/v1/buyers/{accountId}/finalizedDeals\" to list finalized deals for the current buyer and its clients. Bidders can use the URL path \"/v1/bidders/{accountId}/finalizedDeals\" to list finalized deals for the bidder, its buyers and all their clients.",
        "flatPath": "v1/bidders/{biddersId}/finalizedDeals",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "finalizedDeals",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.auctionPackages.get": {
        "description": "Gets an auction package given its name.",
        "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "auctionPackages",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.auctionPackages.list": {
        "description": "List the auction packages subscribed by a buyer and its clients.",
        "flatPath": "v1/buyers/{buyersId}/auctionPackages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "auctionPackages",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.auctionPackages.subscribe": {
        "description": "Subscribe to the auction package for the specified buyer. Once subscribed, the bidder will receive a call out for inventory matching the auction package targeting criteria with the auction package deal ID and the specified buyer.",
        "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:subscribe",
        "httpMethod": "POST",
        "method": "subscribe",
        "resourceType": "auctionPackages",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.auctionPackages.subscribeClients": {
        "description": "Subscribe the specified clients of the buyer to the auction package. If a client in the list does not belong to the buyer, an error response will be returned, and all of the following clients in the list will not be subscribed. Subscribing an already subscribed client will have no effect.",
        "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:subscribeClients",
        "httpMethod": "POST",
        "method": "subscribeClients",
        "resourceType": "auctionPackages",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribe": {
        "description": "Unsubscribe from the auction package for the specified buyer. Once unsubscribed, the bidder will no longer receive a call out for the auction package deal ID and the specified buyer.",
        "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:unsubscribe",
        "httpMethod": "POST",
        "method": "unsubscribe",
        "resourceType": "auctionPackages",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribeClients": {
        "description": "Unsubscribe from the auction package for the specified clients of the buyer. Unsubscribing a client that is not subscribed will have no effect.",
        "flatPath": "v1/buyers/{buyersId}/auctionPackages/{auctionPackagesId}:unsubscribeClients",
        "httpMethod": "POST",
        "method": "unsubscribeClients",
        "resourceType": "auctionPackages",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.activate": {
        "description": "Activates an existing client. The state of the client will be updated to \"ACTIVE\". This method has no effect if the client is already in \"ACTIVE\" state.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "clients",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.create": {
        "description": "Creates a new client.",
        "flatPath": "v1/buyers/{buyersId}/clients",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clients",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.deactivate": {
        "description": "Deactivates an existing client. The state of the client will be updated to \"INACTIVE\". This method has no effect if the client is already in \"INACTIVE\" state.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}:deactivate",
        "httpMethod": "POST",
        "method": "deactivate",
        "resourceType": "clients",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.get": {
        "description": "Gets a client with a given resource name.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clients",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.list": {
        "description": "Lists all the clients for the current buyer.",
        "flatPath": "v1/buyers/{buyersId}/clients",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clients",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.patch": {
        "description": "Updates an existing client.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "clients",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.users.activate": {
        "description": "Activates an existing client user. The state of the client user will be updated from \"INACTIVE\" to \"ACTIVE\". This method has no effect if the client user is already in \"ACTIVE\" state. An error will be returned if the client user to activate is still in \"INVITED\" state.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "users",
        "resourceTypePath": "//buyers/clients",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.users.create": {
        "description": "Creates a new client user in \"INVITED\" state. An email invitation will be sent to the new user, once accepted the user will become active.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "users",
        "resourceTypePath": "//buyers/clients",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.users.deactivate": {
        "description": "Deactivates an existing client user. The state of the client user will be updated from \"ACTIVE\" to \"INACTIVE\". This method has no effect if the client user is already in \"INACTIVE\" state. An error will be returned if the client user to deactivate is still in \"INVITED\" state.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}:deactivate",
        "httpMethod": "POST",
        "method": "deactivate",
        "resourceType": "users",
        "resourceTypePath": "//buyers/clients",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.users.delete": {
        "description": "Deletes an existing client user. The client user will lose access to the Authorized Buyers UI. Note that if a client user is deleted, the user's access to the UI can't be restored unless a new client user is created and activated.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "users",
        "resourceTypePath": "//buyers/clients",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.users.get": {
        "description": "Retrieves an existing client user.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users/{usersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "users",
        "resourceTypePath": "//buyers/clients",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.clients.users.list": {
        "description": "Lists all client users for a specified client.",
        "flatPath": "v1/buyers/{buyersId}/clients/{clientsId}/users",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "users",
        "resourceTypePath": "//buyers/clients",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.finalizedDeals.addCreative": {
        "description": "Add creative to be used in the bidding process for a finalized deal. For programmatic guaranteed deals, it's recommended that you associate at least one approved creative with the deal before calling SetReadyToServe, to help reduce the number of bid responses filtered because they don't contain approved creatives. Creatives successfully added to a deal can be found in the Realtime-bidding Creatives API creative.deal_ids. This method only applies to programmatic guaranteed deals. Maximum number of 1000 creatives can be added to a finalized deal.",
        "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:addCreative",
        "httpMethod": "POST",
        "method": "addCreative",
        "resourceType": "finalizedDeals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.finalizedDeals.get": {
        "description": "Gets a finalized deal given its name.",
        "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "finalizedDeals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.finalizedDeals.list": {
        "description": "Lists finalized deals. Use the URL path \"/v1/buyers/{accountId}/finalizedDeals\" to list finalized deals for the current buyer and its clients. Bidders can use the URL path \"/v1/bidders/{accountId}/finalizedDeals\" to list finalized deals for the bidder, its buyers and all their clients.",
        "flatPath": "v1/buyers/{buyersId}/finalizedDeals",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "finalizedDeals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.finalizedDeals.pause": {
        "description": "Pauses serving of the given finalized deal. This call only pauses the serving status, and does not affect other fields of the finalized deal. Calling this method for an already paused deal has no effect. This method only applies to programmatic guaranteed deals.",
        "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:pause",
        "httpMethod": "POST",
        "method": "pause",
        "resourceType": "finalizedDeals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.finalizedDeals.resume": {
        "description": "Resumes serving of the given finalized deal. Calling this method for an running deal has no effect. If a deal is initially paused by the seller, calling this method will not resume serving of the deal until the seller also resumes the deal. This method only applies to programmatic guaranteed deals.",
        "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:resume",
        "httpMethod": "POST",
        "method": "resume",
        "resourceType": "finalizedDeals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.finalizedDeals.setReadyToServe": {
        "description": "Sets the given finalized deal as ready to serve. By default, deals are ready to serve as soon as they're finalized. A bidder can opt out of this feature by asking to be included in an allowlist. Once opted out, finalized deals belonging to the bidder and its child seats will not start serving until this method is called. This method is useful to the bidders who prefer to not receive bid requests before the creative is ready. This method only applies to programmatic guaranteed deals.",
        "flatPath": "v1/buyers/{buyersId}/finalizedDeals/{finalizedDealsId}:setReadyToServe",
        "httpMethod": "POST",
        "method": "setReadyToServe",
        "resourceType": "finalizedDeals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.accept": {
        "description": "Accepts the proposal at the given revision number. If the revision number in the request is behind the latest from the server, an error message will be returned. This call updates the Proposal.state from `BUYER_ACCEPTANCE_REQUESTED` to `FINALIZED`; it has no side effect if the Proposal.state is already `FINALIZED` and throws exception if the Proposal.state is not either `BUYER_ACCEPTANCE_REQUESTED` or `FINALIZED`. Accepting a proposal means the buyer understands and accepts the Proposal.terms_and_conditions proposed by the seller.",
        "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}:accept",
        "httpMethod": "POST",
        "method": "accept",
        "resourceType": "proposals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.addNote": {
        "description": "Creates a note for this proposal and sends to the seller.",
        "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}:addNote",
        "httpMethod": "POST",
        "method": "addNote",
        "resourceType": "proposals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.cancelNegotiation": {
        "description": "Cancels an ongoing negotiation on a proposal. This does not cancel or end serving for the deals if the proposal has been finalized. If the proposal has not been finalized before, calling this method will set the Proposal.state to `TERMINATED` and increment the Proposal.proposal_revision. If the proposal has been finalized before and is under renegotiation now, calling this method will reset the Proposal.state to `FINALIZED` and increment the Proposal.proposal_revision. This method does not support private auction proposals whose Proposal.deal_type is 'PRIVATE_AUCTION'.",
        "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}:cancelNegotiation",
        "httpMethod": "POST",
        "method": "cancelNegotiation",
        "resourceType": "proposals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.deals.batchUpdate": {
        "description": "Batch updates multiple deals in the same proposal.",
        "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}/deals:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "deals",
        "resourceTypePath": "//buyers/proposals",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.deals.get": {
        "description": "Gets a deal given its name. The deal is returned at its head revision.",
        "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}/deals/{dealsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deals",
        "resourceTypePath": "//buyers/proposals",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.deals.list": {
        "description": "Lists all deals in a proposal. To retrieve only the finalized revision deals regardless if a deal is being renegotiated, see the FinalizedDeals resource.",
        "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}/deals",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deals",
        "resourceTypePath": "//buyers/proposals",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.deals.patch": {
        "description": "Updates the given deal at the buyer known revision number. If the server revision has advanced since the passed-in proposal.proposal_revision an ABORTED error message will be returned. The revision number is incremented by the server whenever the proposal or its constituent deals are updated. Note: The revision number is kept at a proposal level. The buyer of the API is expected to keep track of the revision number after the last update operation and send it in as part of the next update request. This way, if there are further changes on the server (e.g., seller making new updates), then the server can detect conflicts and reject the proposed changes.",
        "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}/deals/{dealsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deals",
        "resourceTypePath": "//buyers/proposals",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.get": {
        "description": "Gets a proposal using its name. The proposal is returned at most recent revision. revision.",
        "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "proposals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.list": {
        "description": "Lists proposals. A filter expression (list filter syntax) may be specified to filter the results. This will not list finalized versions of proposals that are being renegotiated; to retrieve these use the finalizedProposals resource.",
        "flatPath": "v1/buyers/{buyersId}/proposals",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "proposals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.patch": {
        "description": "Updates the proposal at the given revision number. If the revision number in the request is behind the latest from the server, an error message will be returned. See FieldMask for how to use FieldMask. Only fields specified in the UpdateProposalRequest.update_mask will be updated; Fields noted as 'Immutable' or 'Output only' yet specified in the UpdateProposalRequest.update_mask will be ignored and left unchanged. Updating a private auction proposal is not allowed and will result in an error.",
        "flatPath": "v1/buyers/{buyersId}/proposals/{proposalsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "proposals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.proposals.sendRfp": {
        "description": "Sends a request for proposal (RFP) to a publisher to initiate the negotiation regarding certain inventory. In the RFP, buyers can specify the deal type, deal terms, start and end dates, targeting, and a message to the publisher. Once the RFP is sent, a proposal in `SELLER_REVIEW_REQUESTED` state will be created and returned in the response. The publisher may review your request and respond with detailed deals in the proposal.",
        "flatPath": "v1/buyers/{buyersId}/proposals:sendRfp",
        "httpMethod": "POST",
        "method": "sendRfp",
        "resourceType": "proposals",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.publisherProfiles.get": {
        "description": "Gets the requested publisher profile by name.",
        "flatPath": "v1/buyers/{buyersId}/publisherProfiles/{publisherProfilesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "publisherProfiles",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "authorizedbuyersmarketplace.buyers.publisherProfiles.list": {
        "description": "Lists publisher profiles",
        "flatPath": "v1/buyers/{buyersId}/publisherProfiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "publisherProfiles",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Authorized Buyers Marketplace API"
  },
  "baremetalsolution": {
    "description": "Bare Metal Solution provides hardware to run specialized workloads with low latency on Google Cloud.",
    "methods": {
      "baremetalsolution.projects.locations.instances.resetInstance": {
        "description": "Perform an ungraceful, hard reset on a machine (equivalent to shutting the power off, and then turning it back on).",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:resetInstance",
        "httpMethod": "POST",
        "method": "resetInstance",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Bare Metal Solution API"
  },
  "bigquery": {
    "description": "A data platform for customers to create, manage, share and query data.",
    "methods": {
      "bigquery.datasets.delete": {
        "description": "Deletes the dataset specified by the datasetId value. Before you can delete a dataset, you must delete all its tables, either manually or by specifying deleteContents. Immediately after deletion, you can create another dataset with the same name.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "datasets",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.datasets.get": {
        "description": "Returns the dataset specified by datasetID.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datasets",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.datasets.insert": {
        "description": "Creates a new empty dataset.",
        "flatPath": "projects/{projectId}/datasets",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "datasets",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.datasets.list": {
        "description": "Lists all datasets in the specified project to which you have been granted the READER dataset role.",
        "flatPath": "projects/{projectId}/datasets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "datasets",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.datasets.patch": {
        "description": "Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource. This method supports patch semantics.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "datasets",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.datasets.update": {
        "description": "Updates information in an existing dataset. The update method replaces the entire dataset resource, whereas the patch method only replaces fields that are provided in the submitted dataset resource.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "datasets",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.jobs.cancel": {
        "description": "Requests that a job be cancelled. This call will return immediately, and the client will need to poll for the job status to see if the cancel completed successfully. Cancelled jobs may still incur costs.",
        "flatPath": "projects/{projectId}/jobs/{jobId}/cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.jobs.delete": {
        "description": "Requests the deletion of the metadata of a job. This call returns when the job's metadata is deleted.",
        "flatPath": "projects/{projectsId}/jobs/{jobsId}/delete",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.jobs.get": {
        "description": "Returns information about a specific job. Job information is available for a six month period after creation. Requires that you're the person who ran the job, or have the Is Owner project role.",
        "flatPath": "projects/{projectId}/jobs/{jobId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.jobs.getQueryResults": {
        "description": "Retrieves the results of a query job.",
        "flatPath": "projects/{projectId}/queries/{jobId}",
        "httpMethod": "GET",
        "method": "getQueryResults",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.jobs.insert": {
        "description": "Starts a new asynchronous job. Requires the Can View project role.",
        "flatPath": "projects/{projectId}/jobs",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.jobs.list": {
        "description": "Lists all jobs that you started in the specified project. Job information is available for a six month period after creation. The job list is sorted in reverse chronological order, by job creation time. Requires the Can View project role, or the Is Owner project role if you set the allUsers property.",
        "flatPath": "projects/{projectId}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.jobs.query": {
        "description": "Runs a BigQuery SQL query synchronously and returns query results if the query completes within a specified timeout.",
        "flatPath": "projects/{projectId}/queries",
        "httpMethod": "POST",
        "method": "query",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.models.delete": {
        "description": "Deletes the model specified by modelId from the dataset.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/models/{modelsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "models",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.models.get": {
        "description": "Gets the specified model resource by model ID.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/models/{modelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "models",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.models.list": {
        "description": "Lists all models in the specified dataset. Requires the READER dataset role. After retrieving the list of models, you can get information about a particular model by calling the models.get method.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/models",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "models",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.models.patch": {
        "description": "Patch specific fields in the specified model.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/models/{modelsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "models",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.projects.getServiceAccount": {
        "description": "Returns the email address of the service account for your project used for interactions with Google Cloud KMS.",
        "flatPath": "projects/{projectId}/serviceAccount",
        "httpMethod": "GET",
        "method": "getServiceAccount",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.projects.list": {
        "description": "Lists all projects to which you have been granted any project role.",
        "flatPath": "projects",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.routines.delete": {
        "description": "Deletes the routine specified by routineId from the dataset.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines/{routinesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "routines",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.routines.get": {
        "description": "Gets the specified routine resource by routine ID.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines/{routinesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "routines",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.routines.insert": {
        "description": "Creates a new routine in the dataset.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "routines",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.routines.list": {
        "description": "Lists all routines in the specified dataset. Requires the READER dataset role.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "routines",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.routines.update": {
        "description": "Updates information in an existing routine. The update method replaces the entire Routine resource.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/routines/{routinesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "routines",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.rowAccessPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/tables/{tablesId}/rowAccessPolicies/{rowAccessPoliciesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "rowAccessPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.rowAccessPolicies.list": {
        "description": "Lists all row access policies on the specified table.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/tables/{tablesId}/rowAccessPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "rowAccessPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.rowAccessPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/tables/{tablesId}/rowAccessPolicies/{rowAccessPoliciesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "rowAccessPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.rowAccessPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/tables/{tablesId}/rowAccessPolicies/{rowAccessPoliciesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "rowAccessPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tabledata.insertAll": {
        "description": "Streams data into BigQuery one record at a time without needing to run a load job. Requires the WRITER dataset role.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll",
        "httpMethod": "POST",
        "method": "insertAll",
        "resourceType": "tabledata",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tabledata.list": {
        "description": "Retrieves table data from a specified set of rows. Requires the READER dataset role.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tabledata",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tables.delete": {
        "description": "Deletes the table specified by tableId from the dataset. If the table contains data, all the data will be deleted.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tables.get": {
        "description": "Gets the specified table resource by table ID. This method does not return the data in the table, it only returns the table resource, which describes the structure of this table.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tables.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/tables/{tablesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tables.insert": {
        "description": "Creates a new, empty table in the dataset.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}/tables",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tables.list": {
        "description": "Lists all tables in the specified dataset. Requires the READER dataset role.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}/tables",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tables.patch": {
        "description": "Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource. This method supports patch semantics.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tables.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/tables/{tablesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tables.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "projects/{projectsId}/datasets/{datasetsId}/tables/{tablesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigquery.tables.update": {
        "description": "Updates information in an existing table. The update method replaces the entire table resource, whereas the patch method only replaces fields that are provided in the submitted table resource.",
        "flatPath": "projects/{projectId}/datasets/{datasetId}/tables/{tableId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "tables",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "BigQuery API"
  },
  "bigqueryconnection": {
    "description": "Allows users to manage BigQuery connections to external data sources.",
    "methods": {
      "bigqueryconnection.projects.locations.connections.create": {
        "description": "Creates a new connection.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connections",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "bigqueryconnection.projects.locations.connections.delete": {
        "description": "Deletes connection and associated credential.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "bigqueryconnection.projects.locations.connections.get": {
        "description": "Returns specified connection.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "bigqueryconnection.projects.locations.connections.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "bigqueryconnection.projects.locations.connections.list": {
        "description": "Returns a list of connections in the given project.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connections",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "bigqueryconnection.projects.locations.connections.patch": {
        "description": "Updates the specified connection. For security reasons, also resets credential if connection properties are in the update field mask.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "bigqueryconnection.projects.locations.connections.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "bigqueryconnection.projects.locations.connections.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "bigqueryconnection.projects.locations.connections.updateCredential": {
        "description": "Sets the credential for the specified connection.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/credential",
        "httpMethod": "PATCH",
        "method": "updateCredential",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1beta1",
    "title": "BigQuery Connection API"
  },
  "bigquerydatatransfer": {
    "description": "Schedule queries or transfer external data from SaaS applications to Google BigQuery on a regular basis.",
    "methods": {
      "bigquerydatatransfer.projects.dataSources.checkValidCreds": {
        "description": "Returns true if valid credentials exist for the given data source and requesting user. Some data sources doesn't support service account, so we need to talk to them on behalf of the end user. This API just checks whether we have OAuth token for the particular user, which is a pre-requisite before user can create a transfer config.",
        "flatPath": "v1/projects/{projectsId}/dataSources/{dataSourcesId}:checkValidCreds",
        "httpMethod": "POST",
        "method": "checkValidCreds",
        "resourceType": "dataSources",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.dataSources.get": {
        "description": "Retrieves a supported data source and returns its settings, which can be used for UI rendering.",
        "flatPath": "v1/projects/{projectsId}/dataSources/{dataSourcesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dataSources",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.dataSources.list": {
        "description": "Lists supported data sources and returns their settings, which can be used for UI rendering.",
        "flatPath": "v1/projects/{projectsId}/dataSources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dataSources",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.enrollDataSources": {
        "description": "Enroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the BigQuery UI 'https://bigquery.cloud.google.com' (and the documents can be found at https://cloud.google.com/bigquery/bigquery-web-ui and https://cloud.google.com/bigquery/docs/working-with-transfers).",
        "flatPath": "v1/projects/{projectsId}:enrollDataSources",
        "httpMethod": "POST",
        "method": "enrollDataSources",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.dataSources.checkValidCreds": {
        "description": "Returns true if valid credentials exist for the given data source and requesting user. Some data sources doesn't support service account, so we need to talk to them on behalf of the end user. This API just checks whether we have OAuth token for the particular user, which is a pre-requisite before user can create a transfer config.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/dataSources/{dataSourcesId}:checkValidCreds",
        "httpMethod": "POST",
        "method": "checkValidCreds",
        "resourceType": "dataSources",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.dataSources.get": {
        "description": "Retrieves a supported data source and returns its settings, which can be used for UI rendering.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/dataSources/{dataSourcesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dataSources",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.dataSources.list": {
        "description": "Lists supported data sources and returns their settings, which can be used for UI rendering.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/dataSources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dataSources",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.enrollDataSources": {
        "description": "Enroll data sources in a user project. This allows users to create transfer configurations for these data sources. They will also appear in the ListDataSources RPC and as such, will appear in the BigQuery UI 'https://bigquery.cloud.google.com' (and the documents can be found at https://cloud.google.com/bigquery/bigquery-web-ui and https://cloud.google.com/bigquery/docs/working-with-transfers).",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}:enrollDataSources",
        "httpMethod": "POST",
        "method": "enrollDataSources",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.create": {
        "description": "Creates a new data transfer configuration.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.delete": {
        "description": "Deletes a data transfer configuration, including any associated transfer runs and logs.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs/{transferConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.get": {
        "description": "Returns information about a data transfer config.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs/{transferConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.list": {
        "description": "Returns information about all transfer configs owned by a project in the specified location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.patch": {
        "description": "Updates a data transfer configuration. All fields must be set, even if they are not updated.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs/{transferConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.runs.delete": {
        "description": "Deletes the specified transfer run.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs/{transferConfigsId}/runs/{runsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "runs",
        "resourceTypePath": "//projects/locations/transferConfigs",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.runs.get": {
        "description": "Returns information about the particular transfer run.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs/{transferConfigsId}/runs/{runsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "runs",
        "resourceTypePath": "//projects/locations/transferConfigs",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.runs.list": {
        "description": "Returns information about running and completed jobs.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs/{transferConfigsId}/runs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "runs",
        "resourceTypePath": "//projects/locations/transferConfigs",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.runs.transferLogs.list": {
        "description": "Returns user facing log messages for the data transfer run.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs/{transferConfigsId}/runs/{runsId}/transferLogs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "transferLogs",
        "resourceTypePath": "//projects/locations/transferConfigs/runs",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.scheduleRuns": {
        "description": "Creates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs/{transferConfigsId}:scheduleRuns",
        "httpMethod": "POST",
        "method": "scheduleRuns",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.locations.transferConfigs.startManualRuns": {
        "description": "Start manual transfer runs to be executed now with schedule_time equal to current time. The transfer runs can be created for a time range where the run_time is between start_time (inclusive) and end_time (exclusive), or for a specific run_time.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/transferConfigs/{transferConfigsId}:startManualRuns",
        "httpMethod": "POST",
        "method": "startManualRuns",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.create": {
        "description": "Creates a new data transfer configuration.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.delete": {
        "description": "Deletes a data transfer configuration, including any associated transfer runs and logs.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs/{transferConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.get": {
        "description": "Returns information about a data transfer config.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs/{transferConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.list": {
        "description": "Returns information about all transfer configs owned by a project in the specified location.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.patch": {
        "description": "Updates a data transfer configuration. All fields must be set, even if they are not updated.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs/{transferConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.runs.delete": {
        "description": "Deletes the specified transfer run.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs/{transferConfigsId}/runs/{runsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "runs",
        "resourceTypePath": "//projects/transferConfigs",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.runs.get": {
        "description": "Returns information about the particular transfer run.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs/{transferConfigsId}/runs/{runsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "runs",
        "resourceTypePath": "//projects/transferConfigs",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.runs.list": {
        "description": "Returns information about running and completed jobs.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs/{transferConfigsId}/runs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "runs",
        "resourceTypePath": "//projects/transferConfigs",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.runs.transferLogs.list": {
        "description": "Returns user facing log messages for the data transfer run.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs/{transferConfigsId}/runs/{runsId}/transferLogs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "transferLogs",
        "resourceTypePath": "//projects/transferConfigs/runs",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.scheduleRuns": {
        "description": "Creates transfer runs for a time range [start_time, end_time]. For each date - or whatever granularity the data source supports - in the range, one transfer run is created. Note that runs are created per UTC time in the time range. DEPRECATED: use StartManualTransferRuns instead.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs/{transferConfigsId}:scheduleRuns",
        "httpMethod": "POST",
        "method": "scheduleRuns",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigquerydatatransfer.projects.transferConfigs.startManualRuns": {
        "description": "Start manual transfer runs to be executed now with schedule_time equal to current time. The transfer runs can be created for a time range where the run_time is between start_time (inclusive) and end_time (exclusive), or for a specific run_time.",
        "flatPath": "v1/projects/{projectsId}/transferConfigs/{transferConfigsId}:startManualRuns",
        "httpMethod": "POST",
        "method": "startManualRuns",
        "resourceType": "transferConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "BigQuery Data Transfer API"
  },
  "bigqueryreservation": {
    "description": "A service to modify your BigQuery flat-rate reservations.",
    "methods": {
      "bigqueryreservation.projects.locations.capacityCommitments.create": {
        "description": "Creates a new capacity commitment resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/capacityCommitments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "capacityCommitments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.capacityCommitments.delete": {
        "description": "Deletes a capacity commitment. Attempting to delete capacity commitment before its commitment_end_time will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/capacityCommitments/{capacityCommitmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "capacityCommitments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.capacityCommitments.get": {
        "description": "Returns information about the capacity commitment.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/capacityCommitments/{capacityCommitmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "capacityCommitments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.capacityCommitments.list": {
        "description": "Lists all the capacity commitments for the admin project.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/capacityCommitments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "capacityCommitments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.capacityCommitments.merge": {
        "description": "Merges capacity commitments of the same plan into a single commitment. The resulting capacity commitment has the greater commitment_end_time out of the to-be-merged capacity commitments. Attempting to merge capacity commitments of different plan will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/capacityCommitments:merge",
        "httpMethod": "POST",
        "method": "merge",
        "resourceType": "capacityCommitments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.capacityCommitments.patch": {
        "description": "Updates an existing capacity commitment. Only `plan` and `renewal_plan` fields can be updated. Plan can only be changed to a plan of a longer commitment period. Attempting to change to a plan with shorter commitment period will fail with the error code `google.rpc.Code.FAILED_PRECONDITION`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/capacityCommitments/{capacityCommitmentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "capacityCommitments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.capacityCommitments.split": {
        "description": "Splits capacity commitment to two commitments of the same plan and `commitment_end_time`. A common use case is to enable downgrading commitments. For example, in order to downgrade from 10000 slots to 8000, you might split a 10000 capacity commitment into commitments of 2000 and 8000. Then, you would change the plan of the first one to `FLEX` and then delete it.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/capacityCommitments/{capacityCommitmentsId}:split",
        "httpMethod": "POST",
        "method": "split",
        "resourceType": "capacityCommitments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.getBiReservation": {
        "description": "Retrieves a BI reservation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/biReservation",
        "httpMethod": "GET",
        "method": "getBiReservation",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.assignments.create": {
        "description": "Creates an assignment object which allows the given project to submit jobs of a certain type using slots from the specified reservation. Currently a resource (project, folder, organization) can only have one assignment per each (job_type, location) combination, and that reservation will be used for all jobs of the matching type. Different assignments can be created on different levels of the projects, folders or organization hierarchy. During query execution, the assignment is looked up at the project, folder and organization levels in that order. The first assignment found is applied to the query. When creating assignments, it does not matter if other assignments exist at higher levels. Example: * The organization `organizationA` contains two projects, `project1` and `project2`. * Assignments for all three entities (`organizationA`, `project1`, and `project2`) could all be created and mapped to the same or different reservations. \"None\" assignments represent an absence of the assignment. Projects assigned to None use on-demand pricing. To create a \"None\" assignment, use \"none\" as a reservation_id in the parent. Example parent: `projects/myproject/locations/US/reservations/none`. Returns `google.rpc.Code.PERMISSION_DENIED` if user does not have 'bigquery.admin' permissions on the project using the reservation and the project that owns this reservation. Returns `google.rpc.Code.INVALID_ARGUMENT` when location of the assignment does not match location of the reservation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}/assignments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "assignments",
        "resourceTypePath": "//projects/locations/reservations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.assignments.delete": {
        "description": "Deletes a assignment. No expansion will happen. Example: * Organization `organizationA` contains two projects, `project1` and `project2`. * Reservation `res1` exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: `` and `` In this example, deletion of the `` assignment won't affect the other assignment ``. After said deletion, queries from `project1` will still use `res1` while queries from `project2` will switch to use on-demand mode.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}/assignments/{assignmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "assignments",
        "resourceTypePath": "//projects/locations/reservations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.assignments.list": {
        "description": "Lists assignments. Only explicitly created assignments will be returned. Example: * Organization `organizationA` contains two projects, `project1` and `project2`. * Reservation `res1` exists and was created previously. * CreateAssignment was used previously to define the following associations between entities and reservations: `` and `` In this example, ListAssignments will just return the above two assignments for reservation `res1`, and no expansion/merge will happen. The wildcard \"-\" can be used for reservations in the request. In that case all assignments belongs to the specified project and location will be listed. **Note** \"-\" cannot be used for projects nor locations.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}/assignments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assignments",
        "resourceTypePath": "//projects/locations/reservations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.assignments.move": {
        "description": "Moves an assignment under a new reservation. This differs from removing an existing assignment and recreating a new one by providing a transactional change that ensures an assignee always has an associated reservation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}/assignments/{assignmentsId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "assignments",
        "resourceTypePath": "//projects/locations/reservations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.assignments.patch": {
        "description": "Updates an existing assignment. Only the `priority` field can be updated.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}/assignments/{assignmentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "assignments",
        "resourceTypePath": "//projects/locations/reservations",
        "versions": [
          "v1beta1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.create": {
        "description": "Creates a new reservation resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "reservations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.delete": {
        "description": "Deletes a reservation. Returns `google.rpc.Code.FAILED_PRECONDITION` when reservation has assignments.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "reservations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.get": {
        "description": "Returns information about the reservation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reservations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.list": {
        "description": "Lists all the reservations for the project in the specified location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reservations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.reservations.patch": {
        "description": "Updates an existing reservation resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "reservations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.searchAllAssignments": {
        "description": "Looks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn't have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project->folder->organization) happens in this API. 3. Parent here is `projects/*/locations/*`, instead of `projects/*/locations/*reservations/*`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}:searchAllAssignments",
        "httpMethod": "GET",
        "method": "searchAllAssignments",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.searchAssignments": {
        "description": "Looks up assignments for a specified resource for a particular region. If the request is about a project: 1. Assignments created on the project will be returned if they exist. 2. Otherwise assignments created on the closest ancestor will be returned. 3. Assignments for different JobTypes will all be returned. The same logic applies if the request is about a folder. If the request is about an organization, then assignments created on the organization will be returned (organization doesn't have ancestors). Comparing to ListAssignments, there are some behavior differences: 1. permission on the assignee will be verified in this API. 2. Hierarchy lookup (project->folder->organization) happens in this API. 3. Parent here is `projects/*/locations/*`, instead of `projects/*/locations/*reservations/*`. **Note** \"-\" cannot be used for projects nor locations.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}:searchAssignments",
        "httpMethod": "GET",
        "method": "searchAssignments",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "bigqueryreservation.projects.locations.updateBiReservation": {
        "description": "Updates a BI reservation. Only fields specified in the `field_mask` are updated. A singleton BI reservation always exists with default size 0. In order to reserve BI capacity it needs to be updated to an amount greater than 0. In order to release BI capacity reservation size must be set to 0.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/biReservation",
        "httpMethod": "PATCH",
        "method": "updateBiReservation",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "BigQuery Reservation API"
  },
  "bigtableadmin": {
    "description": "Administer your Cloud Bigtable tables and instances.",
    "methods": {
      "bigtableadmin.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v2/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v2/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.operations.projects.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2/operations/projects/{projectsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//operations/projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.appProfiles.create": {
        "description": "Creates an app profile within an instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/appProfiles",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "appProfiles",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.appProfiles.delete": {
        "description": "Deletes an app profile from an instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/appProfiles/{appProfilesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "appProfiles",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.appProfiles.get": {
        "description": "Gets information about an app profile.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/appProfiles/{appProfilesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "appProfiles",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.appProfiles.list": {
        "description": "Lists information about app profiles in an instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/appProfiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "appProfiles",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.appProfiles.patch": {
        "description": "Updates an app profile within an instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/appProfiles/{appProfilesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "appProfiles",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.backups.create": {
        "description": "Starts creating a new Cloud Bigtable Backup. The returned backup long-running operation can be used to track creation of the backup. The metadata field type is CreateBackupMetadata. The response field type is Backup, if successful. Cancelling the returned operation will stop the creation and delete the backup.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}/backups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances/clusters",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.backups.delete": {
        "description": "Deletes a pending or completed Cloud Bigtable backup.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}/backups/{backupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances/clusters",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.backups.get": {
        "description": "Gets metadata on a pending or completed Cloud Bigtable Backup.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}/backups/{backupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances/clusters",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.backups.getIamPolicy": {
        "description": "Gets the access control policy for a Table resource. Returns an empty policy if the resource exists but does not have a policy set.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}/backups/{backupsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances/clusters",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.backups.list": {
        "description": "Lists Cloud Bigtable backups. Returns both completed and pending backups.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}/backups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances/clusters",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.backups.patch": {
        "description": "Updates a pending or completed Cloud Bigtable Backup.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}/backups/{backupsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances/clusters",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.backups.setIamPolicy": {
        "description": "Sets the access control policy on a Table resource. Replaces any existing policy.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}/backups/{backupsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances/clusters",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.backups.testIamPermissions": {
        "description": "Returns permissions that the caller has on the specified table resource.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}/backups/{backupsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances/clusters",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.create": {
        "description": "Creates a cluster within an instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.delete": {
        "description": "Deletes a cluster from an instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.get": {
        "description": "Gets information about a cluster.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.list": {
        "description": "Lists information about clusters in an instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.partialUpdateCluster": {
        "description": "Partially updates a cluster within a project. This method is the preferred way to update a Cluster. ",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}",
        "httpMethod": "PATCH",
        "method": "partialUpdateCluster",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.clusters.update": {
        "description": "Updates a cluster within an instance. UpdateCluster is deprecated. Please use PartialUpdateCluster instead.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/clusters/{clustersId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.create": {
        "description": "Create an instance within a project.",
        "flatPath": "v2/projects/{projectsId}/instances",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.delete": {
        "description": "Delete an instance from a project.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.get": {
        "description": "Gets information about an instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.getIamPolicy": {
        "description": "Gets the access control policy for an instance resource. Returns an empty policy if an instance exists but does not have a policy set.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.list": {
        "description": "Lists information about instances in a project.",
        "flatPath": "v2/projects/{projectsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.partialUpdateInstance": {
        "description": "Partially updates an instance within a project. This method can modify all fields of an Instance and is the preferred way to update an Instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}",
        "httpMethod": "PATCH",
        "method": "partialUpdateInstance",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.setIamPolicy": {
        "description": "Sets the access control policy on an instance resource. Replaces any existing policy.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.checkConsistency": {
        "description": "Checks replication consistency based on a consistency token, that is, if replication has caught up based on the conditions specified in the token and the check request.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables/{tablesId}:checkConsistency",
        "httpMethod": "POST",
        "method": "checkConsistency",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.create": {
        "description": "Creates a new table in the specified instance. The table can be created with a full set of initial column families, specified in the request.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.delete": {
        "description": "Permanently deletes a specified table and all of its data.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables/{tablesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.dropRowRange": {
        "description": "Permanently drop/delete a row range from a specified table. The request can specify whether to delete all rows in a table, or only those that match a particular prefix.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables/{tablesId}:dropRowRange",
        "httpMethod": "POST",
        "method": "dropRowRange",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.generateConsistencyToken": {
        "description": "Generates a consistency token for a Table, which can be used in CheckConsistency to check whether mutations to the table that finished before this call started have been replicated. The tokens will be available for 90 days.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables/{tablesId}:generateConsistencyToken",
        "httpMethod": "POST",
        "method": "generateConsistencyToken",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.get": {
        "description": "Gets metadata information about the specified table.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables/{tablesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.getIamPolicy": {
        "description": "Gets the access control policy for a Table resource. Returns an empty policy if the resource exists but does not have a policy set.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables/{tablesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.list": {
        "description": "Lists all tables served from a specified instance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.modifyColumnFamilies": {
        "description": "Performs a series of column family modifications on the specified table. Either all or none of the modifications will occur before this method returns, but data requests received prior to that point may see a table where only some modifications have taken effect.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables/{tablesId}:modifyColumnFamilies",
        "httpMethod": "POST",
        "method": "modifyColumnFamilies",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.restore": {
        "description": "Create a new table by restoring from a completed backup. The new table must be in the same project as the instance containing the backup. The returned table long-running operation can be used to track the progress of the operation, and to cancel it. The metadata field type is RestoreTableMetadata. The response type is Table, if successful.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.setIamPolicy": {
        "description": "Sets the access control policy on a Table resource. Replaces any existing policy.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables/{tablesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.tables.testIamPermissions": {
        "description": "Returns permissions that the caller has on the specified table resource.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}/tables/{tablesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "tables",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.testIamPermissions": {
        "description": "Returns permissions that the caller has on the specified instance resource.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.instances.update": {
        "description": "Updates an instance within a project. This method updates only the display name and type for an Instance. To update other Instance properties, such as labels, use PartialUpdateInstance.",
        "flatPath": "v2/projects/{projectsId}/instances/{instancesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "bigtableadmin.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v2/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Cloud Bigtable Admin API"
  },
  "billingbudgets": {
    "description": "The Cloud Billing Budget API stores Cloud Billing budgets, which define a budget plan and the rules to execute as spend is tracked against that plan.",
    "methods": {
      "billingbudgets.billingAccounts.budgets.create": {
        "description": "Creates a new budget. See Quotas and limits for more information on the limits of the number of budgets you can create.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/budgets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "budgets",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "billingbudgets.billingAccounts.budgets.delete": {
        "description": "Deletes a budget. Returns successfully if already deleted.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/budgets/{budgetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "budgets",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "billingbudgets.billingAccounts.budgets.get": {
        "description": "Returns a budget. WARNING: There are some fields exposed on the Google Cloud Console that aren't available on this API. When reading from the API, you will not see these fields in the return value, though they may have been set in the Cloud Console.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/budgets/{budgetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "budgets",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "billingbudgets.billingAccounts.budgets.list": {
        "description": "Returns a list of budgets for a billing account. WARNING: There are some fields exposed on the Google Cloud Console that aren't available on this API. When reading from the API, you will not see these fields in the return value, though they may have been set in the Cloud Console.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/budgets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "budgets",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "billingbudgets.billingAccounts.budgets.patch": {
        "description": "Updates a budget and returns the updated budget. WARNING: There are some fields exposed on the Google Cloud Console that aren't available on this API. Budget fields that are not exposed in this API will not be changed by this method.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/budgets/{budgetsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "budgets",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Billing Budget API"
  },
  "binaryauthorization": {
    "description": "The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run.",
    "methods": {
      "binaryauthorization.projects.attestors.create": {
        "description": "Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists.",
        "flatPath": "v1beta1/projects/{projectsId}/attestors",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "attestors",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.attestors.delete": {
        "description": "Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.",
        "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "attestors",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.attestors.get": {
        "description": "Gets an attestor. Returns NOT_FOUND if the attestor does not exist.",
        "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "attestors",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.attestors.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "attestors",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.attestors.list": {
        "description": "Lists attestors. Returns INVALID_ARGUMENT if the project does not exist.",
        "flatPath": "v1beta1/projects/{projectsId}/attestors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "attestors",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.attestors.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "attestors",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.attestors.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "attestors",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.attestors.update": {
        "description": "Updates an attestor. Returns NOT_FOUND if the attestor does not exist.",
        "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "attestors",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.attestors.validateAttestationOccurrence": {
        "description": "Returns whether the given Attestation for the given image URI was signed by the given Attestor",
        "flatPath": "v1beta1/projects/{projectsId}/attestors/{attestorsId}:validateAttestationOccurrence",
        "httpMethod": "POST",
        "method": "validateAttestationOccurrence",
        "resourceType": "attestors",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.getPolicy": {
        "description": "A policy specifies the attestors that must attest to a container image, before the project is allowed to deploy that image. There is at most one policy per project. All image admission requests are permitted if a project has no policy. Gets the policy for this project. Returns a default policy if the project does not have one.",
        "flatPath": "v1beta1/projects/{projectsId}/policy",
        "httpMethod": "GET",
        "method": "getPolicy",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.policy.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/policy:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "policy",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.policy.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/policy:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "policy",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.policy.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/policy:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "policy",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.projects.updatePolicy": {
        "description": "Creates or updates a project's policy, and returns a copy of the new policy. A policy is always updated as a whole, to avoid race conditions with concurrent policy enforcement (or management!) requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed.",
        "flatPath": "v1beta1/projects/{projectsId}/policy",
        "httpMethod": "PUT",
        "method": "updatePolicy",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "binaryauthorization.systempolicy.getPolicy": {
        "description": "Gets the current system policy in the specified location.",
        "flatPath": "v1beta1/locations/{locationsId}/policy",
        "httpMethod": "GET",
        "method": "getPolicy",
        "resourceType": "systempolicy",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Binary Authorization API"
  },
  "blogger": {
    "description": "The Blogger API provides access to posts, comments and pages of a Blogger blog.",
    "methods": {
      "blogger.blogUserInfos.get": {
        "description": "Gets one blog and user info pair by blog id and user id.",
        "flatPath": "v3/users/{userId}/blogs/{blogId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "blogUserInfos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.blogs.get": {
        "description": "Gets a blog by id.",
        "flatPath": "v2/blogs/{blogId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "blogs",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "blogger.blogs.getByUrl": {
        "description": "Gets a blog by url.",
        "flatPath": "v3/blogs/byurl",
        "httpMethod": "GET",
        "method": "getByUrl",
        "resourceType": "blogs",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.blogs.list": {
        "description": "Lists blogs by user id, possibly filtered.",
        "flatPath": "v2/users/{userId}/blogs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "blogs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "blogger.blogs.listByUser": {
        "description": "Lists blogs by user.",
        "flatPath": "v3/users/{userId}/blogs",
        "httpMethod": "GET",
        "method": "listByUser",
        "resourceType": "blogs",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.comments.approve": {
        "description": "Marks a comment as not spam by blog id, post id and comment id.",
        "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.comments.delete": {
        "description": "Deletes a comment by blog id, post id and comment id.",
        "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.comments.get": {
        "description": "Gets a comment by blog id, post id and comment id.",
        "flatPath": "v2/blogs/{blogId}/posts/{postId}/comments/{commentId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "blogger.comments.list": {
        "description": "Lists comments.",
        "flatPath": "v2/blogs/{blogId}/posts/{postId}/comments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "blogger.comments.listByBlog": {
        "description": "Lists comments by blog.",
        "flatPath": "v3/blogs/{blogId}/comments",
        "httpMethod": "GET",
        "method": "listByBlog",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.comments.markAsSpam": {
        "description": "Marks a comment as spam by blog id, post id and comment id.",
        "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/spam",
        "httpMethod": "POST",
        "method": "markAsSpam",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.comments.removeContent": {
        "description": "Removes the content of a comment by blog id, post id and comment id.",
        "flatPath": "v3/blogs/{blogId}/posts/{postId}/comments/{commentId}/removecontent",
        "httpMethod": "POST",
        "method": "removeContent",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.pageViews.get": {
        "description": "Gets page views by blog id.",
        "flatPath": "v3/blogs/{blogId}/pageviews",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "pageViews",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.pages.delete": {
        "description": "Deletes a page by blog id and page id.",
        "flatPath": "v3/blogs/{blogId}/pages/{pageId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.pages.get": {
        "description": "Gets a page by blog id and page id.",
        "flatPath": "v2/blogs/{blogId}/pages/{pageId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "blogger.pages.insert": {
        "description": "Inserts a page.",
        "flatPath": "v3/blogs/{blogId}/pages",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.pages.list": {
        "description": "Lists pages.",
        "flatPath": "v2/blogs/{blogId}/pages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "blogger.pages.patch": {
        "description": "Patches a page.",
        "flatPath": "v3/blogs/{blogId}/pages/{pageId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.pages.publish": {
        "description": "Publishes a page.",
        "flatPath": "v3/blogs/{blogId}/pages/{pageId}/publish",
        "httpMethod": "POST",
        "method": "publish",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.pages.revert": {
        "description": "Reverts a published or scheduled page to draft state.",
        "flatPath": "v3/blogs/{blogId}/pages/{pageId}/revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.pages.update": {
        "description": "Updates a page by blog id and page id.",
        "flatPath": "v3/blogs/{blogId}/pages/{pageId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.postUserInfos.get": {
        "description": "Gets one post and user info pair, by post_id and user_id.",
        "flatPath": "v3/users/{userId}/blogs/{blogId}/posts/{postId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "postUserInfos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.postUserInfos.list": {
        "description": "Lists post and user info pairs.",
        "flatPath": "v3/users/{userId}/blogs/{blogId}/posts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "postUserInfos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.posts.delete": {
        "description": "Deletes a post by blog id and post id.",
        "flatPath": "v3/blogs/{blogId}/posts/{postId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.posts.get": {
        "description": "Gets a post by blog id and post id",
        "flatPath": "v2/blogs/{blogId}/posts/{postId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "blogger.posts.getByPath": {
        "description": "Gets a post by path.",
        "flatPath": "v3/blogs/{blogId}/posts/bypath",
        "httpMethod": "GET",
        "method": "getByPath",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.posts.insert": {
        "description": "Inserts a post.",
        "flatPath": "v3/blogs/{blogId}/posts",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.posts.list": {
        "description": "Lists posts.",
        "flatPath": "v2/blogs/{blogId}/posts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "blogger.posts.patch": {
        "description": "Patches a post.",
        "flatPath": "v3/blogs/{blogId}/posts/{postId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.posts.publish": {
        "description": "Publishes a post.",
        "flatPath": "v3/blogs/{blogId}/posts/{postId}/publish",
        "httpMethod": "POST",
        "method": "publish",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.posts.revert": {
        "description": "Reverts a published or scheduled post to draft state.",
        "flatPath": "v3/blogs/{blogId}/posts/{postId}/revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.posts.search": {
        "description": "Searches for posts matching given query terms in the specified blog.",
        "flatPath": "v3/blogs/{blogId}/posts/search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.posts.update": {
        "description": "Updates a post by blog id and post id.",
        "flatPath": "v3/blogs/{blogId}/posts/{postId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "posts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "blogger.users.get": {
        "description": "Gets a user by user id.",
        "flatPath": "v2/users/{userId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Blogger API v3"
  },
  "books": {
    "description": "The Google Books API allows clients to access the Google Books repository.",
    "methods": {
      "books.bookshelves.get": {
        "description": "Retrieves metadata for a specific bookshelf for the specified user.",
        "flatPath": "books/v1/users/{userId}/bookshelves/{shelf}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "bookshelves",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.bookshelves.list": {
        "description": "Retrieves a list of public bookshelves for the specified user.",
        "flatPath": "books/v1/users/{userId}/bookshelves",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bookshelves",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.bookshelves.volumes.list": {
        "description": "Retrieves volumes in a specific bookshelf for the specified user.",
        "flatPath": "books/v1/users/{userId}/bookshelves/{shelf}/volumes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "volumes",
        "resourceTypePath": "//bookshelves",
        "versions": [
          "v1"
        ]
      },
      "books.cloudloading.addBook": {
        "description": "Add a user-upload volume and triggers processing.",
        "flatPath": "books/v1/cloudloading/addBook",
        "httpMethod": "POST",
        "method": "addBook",
        "resourceType": "cloudloading",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.cloudloading.deleteBook": {
        "description": "Remove the book and its contents",
        "flatPath": "books/v1/cloudloading/deleteBook",
        "httpMethod": "POST",
        "method": "deleteBook",
        "resourceType": "cloudloading",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.cloudloading.updateBook": {
        "description": "Updates a user-upload volume.",
        "flatPath": "books/v1/cloudloading/updateBook",
        "httpMethod": "POST",
        "method": "updateBook",
        "resourceType": "cloudloading",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.dictionary.listOfflineMetadata": {
        "description": "Returns a list of offline dictionary metadata available",
        "flatPath": "books/v1/dictionary/listOfflineMetadata",
        "httpMethod": "GET",
        "method": "listOfflineMetadata",
        "resourceType": "dictionary",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.familysharing.getFamilyInfo": {
        "description": "Gets information regarding the family that the user is part of.",
        "flatPath": "books/v1/familysharing/getFamilyInfo",
        "httpMethod": "GET",
        "method": "getFamilyInfo",
        "resourceType": "familysharing",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.familysharing.share": {
        "description": "Initiates sharing of the content with the user's family. Empty response indicates success.",
        "flatPath": "books/v1/familysharing/share",
        "httpMethod": "POST",
        "method": "share",
        "resourceType": "familysharing",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.familysharing.unshare": {
        "description": "Initiates revoking content that has already been shared with the user's family. Empty response indicates success.",
        "flatPath": "books/v1/familysharing/unshare",
        "httpMethod": "POST",
        "method": "unshare",
        "resourceType": "familysharing",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.layers.annotationData.get": {
        "description": "Gets the annotation data.",
        "flatPath": "books/v1/volumes/{volumeId}/layers/{layerId}/data/{annotationDataId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "annotationData",
        "resourceTypePath": "//layers",
        "versions": [
          "v1"
        ]
      },
      "books.layers.annotationData.list": {
        "description": "Gets the annotation data for a volume and layer.",
        "flatPath": "books/v1/volumes/{volumeId}/layers/{layerId}/data",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "annotationData",
        "resourceTypePath": "//layers",
        "versions": [
          "v1"
        ]
      },
      "books.layers.get": {
        "description": "Gets the layer summary for a volume.",
        "flatPath": "books/v1/volumes/{volumeId}/layersummary/{summaryId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "layers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.layers.list": {
        "description": "List the layer summaries for a volume.",
        "flatPath": "books/v1/volumes/{volumeId}/layersummary",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "layers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.layers.volumeAnnotations.get": {
        "description": "Gets the volume annotation.",
        "flatPath": "books/v1/volumes/{volumeId}/layers/{layerId}/annotations/{annotationId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "volumeAnnotations",
        "resourceTypePath": "//layers",
        "versions": [
          "v1"
        ]
      },
      "books.layers.volumeAnnotations.list": {
        "description": "Gets the volume annotations for a volume and layer.",
        "flatPath": "books/v1/volumes/{volumeId}/layers/{layerId}",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "volumeAnnotations",
        "resourceTypePath": "//layers",
        "versions": [
          "v1"
        ]
      },
      "books.myconfig.getUserSettings": {
        "description": "Gets the current settings for the user.",
        "flatPath": "books/v1/myconfig/getUserSettings",
        "httpMethod": "GET",
        "method": "getUserSettings",
        "resourceType": "myconfig",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.myconfig.releaseDownloadAccess": {
        "description": "Release downloaded content access restriction.",
        "flatPath": "books/v1/myconfig/releaseDownloadAccess",
        "httpMethod": "POST",
        "method": "releaseDownloadAccess",
        "resourceType": "myconfig",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.myconfig.requestAccess": {
        "description": "Request concurrent and download access restrictions.",
        "flatPath": "books/v1/myconfig/requestAccess",
        "httpMethod": "POST",
        "method": "requestAccess",
        "resourceType": "myconfig",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.myconfig.syncVolumeLicenses": {
        "description": "Request downloaded content access for specified volumes on the My eBooks shelf.",
        "flatPath": "books/v1/myconfig/syncVolumeLicenses",
        "httpMethod": "POST",
        "method": "syncVolumeLicenses",
        "resourceType": "myconfig",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.myconfig.updateUserSettings": {
        "description": "Sets the settings for the user. If a sub-object is specified, it will overwrite the existing sub-object stored in the server. Unspecified sub-objects will retain the existing value.",
        "flatPath": "books/v1/myconfig/updateUserSettings",
        "httpMethod": "POST",
        "method": "updateUserSettings",
        "resourceType": "myconfig",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.annotations.delete": {
        "description": "Deletes an annotation.",
        "flatPath": "books/v1/mylibrary/annotations/{annotationId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "annotations",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.annotations.insert": {
        "description": "Inserts a new annotation.",
        "flatPath": "books/v1/mylibrary/annotations",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "annotations",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.annotations.list": {
        "description": "Retrieves a list of annotations, possibly filtered.",
        "flatPath": "books/v1/mylibrary/annotations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "annotations",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.annotations.summary": {
        "description": "Gets the summary of specified layers.",
        "flatPath": "books/v1/mylibrary/annotations/summary",
        "httpMethod": "POST",
        "method": "summary",
        "resourceType": "annotations",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.annotations.update": {
        "description": "Updates an existing annotation.",
        "flatPath": "books/v1/mylibrary/annotations/{annotationId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "annotations",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.bookshelves.addVolume": {
        "description": "Adds a volume to a bookshelf.",
        "flatPath": "books/v1/mylibrary/bookshelves/{shelf}/addVolume",
        "httpMethod": "POST",
        "method": "addVolume",
        "resourceType": "bookshelves",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.bookshelves.clearVolumes": {
        "description": "Clears all volumes from a bookshelf.",
        "flatPath": "books/v1/mylibrary/bookshelves/{shelf}/clearVolumes",
        "httpMethod": "POST",
        "method": "clearVolumes",
        "resourceType": "bookshelves",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.bookshelves.get": {
        "description": "Retrieves metadata for a specific bookshelf belonging to the authenticated user.",
        "flatPath": "books/v1/mylibrary/bookshelves/{shelf}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "bookshelves",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.bookshelves.list": {
        "description": "Retrieves a list of bookshelves belonging to the authenticated user.",
        "flatPath": "books/v1/mylibrary/bookshelves",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bookshelves",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.bookshelves.moveVolume": {
        "description": "Moves a volume within a bookshelf.",
        "flatPath": "books/v1/mylibrary/bookshelves/{shelf}/moveVolume",
        "httpMethod": "POST",
        "method": "moveVolume",
        "resourceType": "bookshelves",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.bookshelves.removeVolume": {
        "description": "Removes a volume from a bookshelf.",
        "flatPath": "books/v1/mylibrary/bookshelves/{shelf}/removeVolume",
        "httpMethod": "POST",
        "method": "removeVolume",
        "resourceType": "bookshelves",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.bookshelves.volumes.list": {
        "description": "Gets volume information for volumes on a bookshelf.",
        "flatPath": "books/v1/mylibrary/bookshelves/{shelf}/volumes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "volumes",
        "resourceTypePath": "//mylibrary/bookshelves",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.readingpositions.get": {
        "description": "Retrieves my reading position information for a volume.",
        "flatPath": "books/v1/mylibrary/readingpositions/{volumeId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "readingpositions",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.mylibrary.readingpositions.setPosition": {
        "description": "Sets my reading position information for a volume.",
        "flatPath": "books/v1/mylibrary/readingpositions/{volumeId}/setPosition",
        "httpMethod": "POST",
        "method": "setPosition",
        "resourceType": "readingpositions",
        "resourceTypePath": "//mylibrary",
        "versions": [
          "v1"
        ]
      },
      "books.notification.get": {
        "description": "Returns notification details for a given notification id.",
        "flatPath": "books/v1/notification/get",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "notification",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.onboarding.listCategories": {
        "description": "List categories for onboarding experience.",
        "flatPath": "books/v1/onboarding/listCategories",
        "httpMethod": "GET",
        "method": "listCategories",
        "resourceType": "onboarding",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.onboarding.listCategoryVolumes": {
        "description": "List available volumes under categories for onboarding experience.",
        "flatPath": "books/v1/onboarding/listCategoryVolumes",
        "httpMethod": "GET",
        "method": "listCategoryVolumes",
        "resourceType": "onboarding",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.personalizedstream.get": {
        "description": "Returns a stream of personalized book clusters",
        "flatPath": "books/v1/personalizedstream/get",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "personalizedstream",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.promooffer.accept": {
        "description": "Accepts the promo offer.",
        "flatPath": "books/v1/promooffer/accept",
        "httpMethod": "POST",
        "method": "accept",
        "resourceType": "promooffer",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.promooffer.dismiss": {
        "description": "Marks the promo offer as dismissed.",
        "flatPath": "books/v1/promooffer/dismiss",
        "httpMethod": "POST",
        "method": "dismiss",
        "resourceType": "promooffer",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.promooffer.get": {
        "description": "Returns a list of promo offers available to the user",
        "flatPath": "books/v1/promooffer/get",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "promooffer",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.series.get": {
        "description": "Returns Series metadata for the given series ids.",
        "flatPath": "books/v1/series/get",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "series",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.series.membership.get": {
        "description": "Returns Series membership data given the series id.",
        "flatPath": "books/v1/series/membership/get",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "membership",
        "resourceTypePath": "//series",
        "versions": [
          "v1"
        ]
      },
      "books.volumes.associated.list": {
        "description": "Return a list of associated books.",
        "flatPath": "books/v1/volumes/{volumeId}/associated",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "associated",
        "resourceTypePath": "//volumes",
        "versions": [
          "v1"
        ]
      },
      "books.volumes.get": {
        "description": "Gets volume information for a single volume.",
        "flatPath": "books/v1/volumes/{volumeId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "volumes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.volumes.list": {
        "description": "Performs a book search.",
        "flatPath": "books/v1/volumes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "volumes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "books.volumes.mybooks.list": {
        "description": "Return a list of books in My Library.",
        "flatPath": "books/v1/volumes/mybooks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "mybooks",
        "resourceTypePath": "//volumes",
        "versions": [
          "v1"
        ]
      },
      "books.volumes.recommended.list": {
        "description": "Return a list of recommended books for the current user.",
        "flatPath": "books/v1/volumes/recommended",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "recommended",
        "resourceTypePath": "//volumes",
        "versions": [
          "v1"
        ]
      },
      "books.volumes.recommended.rate": {
        "description": "Rate a recommended book for the current user.",
        "flatPath": "books/v1/volumes/recommended/rate",
        "httpMethod": "POST",
        "method": "rate",
        "resourceType": "recommended",
        "resourceTypePath": "//volumes",
        "versions": [
          "v1"
        ]
      },
      "books.volumes.useruploaded.list": {
        "description": "Return a list of books uploaded by the current user.",
        "flatPath": "books/v1/volumes/useruploaded",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "useruploaded",
        "resourceTypePath": "//volumes",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Books API"
  },
  "calendar": {
    "description": "The Google Calendar API lets you manage your calendars and events.",
    "methods": {
      "calendar.acl.delete": {
        "description": "Deletes an access control rule.",
        "flatPath": "calendars/{calendarId}/acl/{ruleId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "acl",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.acl.get": {
        "description": "Returns an access control rule.",
        "flatPath": "calendars/{calendarId}/acl/{ruleId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "acl",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.acl.insert": {
        "description": "Creates an access control rule.",
        "flatPath": "calendars/{calendarId}/acl",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "acl",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.acl.list": {
        "description": "Returns the rules in the access control list for the calendar.",
        "flatPath": "calendars/{calendarId}/acl",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "acl",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.acl.patch": {
        "description": "Updates an access control rule. This method supports patch semantics.",
        "flatPath": "calendars/{calendarId}/acl/{ruleId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "acl",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.acl.update": {
        "description": "Updates an access control rule.",
        "flatPath": "calendars/{calendarId}/acl/{ruleId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "acl",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.acl.watch": {
        "description": "Watch for changes to ACL resources.",
        "flatPath": "calendars/{calendarId}/acl/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "acl",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendarList.delete": {
        "description": "Removes a calendar from the user's calendar list.",
        "flatPath": "users/me/calendarList/{calendarId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "calendarList",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendarList.get": {
        "description": "Returns a calendar from the user's calendar list.",
        "flatPath": "users/me/calendarList/{calendarId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "calendarList",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendarList.insert": {
        "description": "Inserts an existing calendar into the user's calendar list.",
        "flatPath": "users/me/calendarList",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "calendarList",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendarList.list": {
        "description": "Returns the calendars on the user's calendar list.",
        "flatPath": "users/me/calendarList",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "calendarList",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendarList.patch": {
        "description": "Updates an existing calendar on the user's calendar list. This method supports patch semantics.",
        "flatPath": "users/me/calendarList/{calendarId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "calendarList",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendarList.update": {
        "description": "Updates an existing calendar on the user's calendar list.",
        "flatPath": "users/me/calendarList/{calendarId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "calendarList",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendarList.watch": {
        "description": "Watch for changes to CalendarList resources.",
        "flatPath": "users/me/calendarList/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "calendarList",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendars.clear": {
        "description": "Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.",
        "flatPath": "calendars/{calendarId}/clear",
        "httpMethod": "POST",
        "method": "clear",
        "resourceType": "calendars",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendars.delete": {
        "description": "Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.",
        "flatPath": "calendars/{calendarId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "calendars",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendars.get": {
        "description": "Returns metadata for a calendar.",
        "flatPath": "calendars/{calendarId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "calendars",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendars.insert": {
        "description": "Creates a secondary calendar.",
        "flatPath": "calendars",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "calendars",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendars.patch": {
        "description": "Updates metadata for a calendar. This method supports patch semantics.",
        "flatPath": "calendars/{calendarId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "calendars",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.calendars.update": {
        "description": "Updates metadata for a calendar.",
        "flatPath": "calendars/{calendarId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "calendars",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.channels.stop": {
        "description": "Stop watching resources through this channel",
        "flatPath": "channels/stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "channels",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.colors.get": {
        "description": "Returns the color definitions for calendars and events.",
        "flatPath": "colors",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "colors",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.delete": {
        "description": "Deletes an event.",
        "flatPath": "calendars/{calendarId}/events/{eventId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.get": {
        "description": "Returns an event.",
        "flatPath": "calendars/{calendarId}/events/{eventId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.import": {
        "description": "Imports an event. This operation is used to add a private copy of an existing event to a calendar.",
        "flatPath": "calendars/{calendarId}/events/import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.insert": {
        "description": "Creates an event.",
        "flatPath": "calendars/{calendarId}/events",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.instances": {
        "description": "Returns instances of the specified recurring event.",
        "flatPath": "calendars/{calendarId}/events/{eventId}/instances",
        "httpMethod": "GET",
        "method": "instances",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.list": {
        "description": "Returns events on the specified calendar.",
        "flatPath": "calendars/{calendarId}/events",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.move": {
        "description": "Moves an event to another calendar, i.e. changes an event's organizer.",
        "flatPath": "calendars/{calendarId}/events/{eventId}/move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.patch": {
        "description": "Updates an event. This method supports patch semantics.",
        "flatPath": "calendars/{calendarId}/events/{eventId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.quickAdd": {
        "description": "Creates an event based on a simple text string.",
        "flatPath": "calendars/{calendarId}/events/quickAdd",
        "httpMethod": "POST",
        "method": "quickAdd",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.update": {
        "description": "Updates an event.",
        "flatPath": "calendars/{calendarId}/events/{eventId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.events.watch": {
        "description": "Watch for changes to Events resources.",
        "flatPath": "calendars/{calendarId}/events/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.freebusy.query": {
        "description": "Returns free/busy information for a set of calendars.",
        "flatPath": "freeBusy",
        "httpMethod": "POST",
        "method": "query",
        "resourceType": "freebusy",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.settings.get": {
        "description": "Returns a single user setting.",
        "flatPath": "users/me/settings/{setting}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "settings",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.settings.list": {
        "description": "Returns all user settings for the authenticated user.",
        "flatPath": "users/me/settings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "settings",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "calendar.settings.watch": {
        "description": "Watch for changes to Settings resources.",
        "flatPath": "users/me/settings/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "settings",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Google Calendar API"
  },
  "chat": {
    "description": "Enables bots to fetch information and perform actions in Hangouts Chat.",
    "methods": {
      "chat.dms.conversations.messages": {
        "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
        "flatPath": "v1/dms/{dmsId}/conversations/{conversationsId}/messages",
        "httpMethod": "POST",
        "method": "messages",
        "resourceType": "conversations",
        "resourceTypePath": "//dms",
        "versions": [
          "v1"
        ]
      },
      "chat.dms.messages": {
        "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
        "flatPath": "v1/dms/{dmsId}/messages",
        "httpMethod": "POST",
        "method": "messages",
        "resourceType": "dms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "chat.dms.webhooks": {
        "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
        "flatPath": "v1/dms/{dmsId}/webhooks",
        "httpMethod": "POST",
        "method": "webhooks",
        "resourceType": "dms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "chat.media.download": {
        "description": "Downloads media. Download is supported on the URI `/v1/media/{+name}?alt=media`.",
        "flatPath": "v1/media/{mediaId}",
        "httpMethod": "GET",
        "method": "download",
        "resourceType": "media",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "chat.rooms.conversations.messages": {
        "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
        "flatPath": "v1/rooms/{roomsId}/conversations/{conversationsId}/messages",
        "httpMethod": "POST",
        "method": "messages",
        "resourceType": "conversations",
        "resourceTypePath": "//rooms",
        "versions": [
          "v1"
        ]
      },
      "chat.rooms.messages": {
        "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
        "flatPath": "v1/rooms/{roomsId}/messages",
        "httpMethod": "POST",
        "method": "messages",
        "resourceType": "rooms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "chat.rooms.webhooks": {
        "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
        "flatPath": "v1/rooms/{roomsId}/webhooks",
        "httpMethod": "POST",
        "method": "webhooks",
        "resourceType": "rooms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.get": {
        "description": "Returns a space.",
        "flatPath": "v1/spaces/{spacesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "spaces",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.list": {
        "description": "Lists spaces the caller is a member of.",
        "flatPath": "v1/spaces",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "spaces",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.members.get": {
        "description": "Returns a membership.",
        "flatPath": "v1/spaces/{spacesId}/members/{membersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "members",
        "resourceTypePath": "//spaces",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.members.list": {
        "description": "Lists human memberships in a space.",
        "flatPath": "v1/spaces/{spacesId}/members",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "members",
        "resourceTypePath": "//spaces",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.messages.attachments.get": {
        "description": "Gets the metadata of a message attachment. The attachment data is fetched using the media API.",
        "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}/attachments/{attachmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "attachments",
        "resourceTypePath": "//spaces/messages",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.messages.create": {
        "description": "Creates a message.",
        "flatPath": "v1/spaces/{spacesId}/messages",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "messages",
        "resourceTypePath": "//spaces",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.messages.delete": {
        "description": "Deletes a message.",
        "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "messages",
        "resourceTypePath": "//spaces",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.messages.get": {
        "description": "Returns a message.",
        "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "messages",
        "resourceTypePath": "//spaces",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.messages.update": {
        "description": "Updates a message.",
        "flatPath": "v1/spaces/{spacesId}/messages/{messagesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "messages",
        "resourceTypePath": "//spaces",
        "versions": [
          "v1"
        ]
      },
      "chat.spaces.webhooks": {
        "description": "Legacy path for creating message. Calling these will result in a BadRequest response.",
        "flatPath": "v1/spaces/{spacesId}/webhooks",
        "httpMethod": "POST",
        "method": "webhooks",
        "resourceType": "spaces",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Hangouts Chat API"
  },
  "chromemanagement": {
    "description": "The Chrome Management API is a suite of services that allows Chrome administrators to view, manage and gain insights on their Chrome OS and Chrome Browser devices.",
    "methods": {
      "chromemanagement.customers.apps.android.get": {
        "description": "Get a specific app for a customer by its resource name.",
        "flatPath": "v1/customers/{customersId}/apps/android/{androidId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "android",
        "resourceTypePath": "//customers/apps",
        "versions": [
          "v1"
        ]
      },
      "chromemanagement.customers.apps.chrome.get": {
        "description": "Get a specific app for a customer by its resource name.",
        "flatPath": "v1/customers/{customersId}/apps/chrome/{chromeId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "chrome",
        "resourceTypePath": "//customers/apps",
        "versions": [
          "v1"
        ]
      },
      "chromemanagement.customers.apps.countChromeAppRequests": {
        "description": "Generate summary of app installation requests.",
        "flatPath": "v1/customers/{customersId}/apps:countChromeAppRequests",
        "httpMethod": "GET",
        "method": "countChromeAppRequests",
        "resourceType": "apps",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "chromemanagement.customers.apps.web.get": {
        "description": "Get a specific app for a customer by its resource name.",
        "flatPath": "v1/customers/{customersId}/apps/web/{webId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "web",
        "resourceTypePath": "//customers/apps",
        "versions": [
          "v1"
        ]
      },
      "chromemanagement.customers.reports.countChromeVersions": {
        "description": "Generate report of installed Chrome versions.",
        "flatPath": "v1/customers/{customersId}/reports:countChromeVersions",
        "httpMethod": "GET",
        "method": "countChromeVersions",
        "resourceType": "reports",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "chromemanagement.customers.reports.countInstalledApps": {
        "description": "Generate report of app installations.",
        "flatPath": "v1/customers/{customersId}/reports:countInstalledApps",
        "httpMethod": "GET",
        "method": "countInstalledApps",
        "resourceType": "reports",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "chromemanagement.customers.reports.findInstalledAppDevices": {
        "description": "Generate report of devices that have a specified app installed.",
        "flatPath": "v1/customers/{customersId}/reports:findInstalledAppDevices",
        "httpMethod": "GET",
        "method": "findInstalledAppDevices",
        "resourceType": "reports",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "chromemanagement.customers.telemetry.devices.list": {
        "description": "List all telemetry devices.",
        "flatPath": "v1/customers/{customersId}/telemetry/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//customers/telemetry",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Chrome Management API"
  },
  "chromepolicy": {
    "description": "The Chrome Policy API is a suite of services that allows Chrome administrators to control the policies applied to their managed Chrome OS devices and Chrome browsers.",
    "methods": {
      "chromepolicy.customers.policies.orgunits.batchInherit": {
        "description": "Modify multiple policy values that are applied to a specific org unit so that they now inherit the value from a parent (if applicable). All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.",
        "flatPath": "v1/customers/{customersId}/policies/orgunits:batchInherit",
        "httpMethod": "POST",
        "method": "batchInherit",
        "resourceType": "orgunits",
        "resourceTypePath": "//customers/policies",
        "versions": [
          "v1"
        ]
      },
      "chromepolicy.customers.policies.orgunits.batchModify": {
        "description": "Modify multiple policy values that are applied to a specific org unit. All targets must have the same target format. That is to say that they must point to the same target resource and must have the same keys specified in `additionalTargetKeyNames`, though the values for those keys may be different. On failure the request will return the error details as part of the google.rpc.Status.",
        "flatPath": "v1/customers/{customersId}/policies/orgunits:batchModify",
        "httpMethod": "POST",
        "method": "batchModify",
        "resourceType": "orgunits",
        "resourceTypePath": "//customers/policies",
        "versions": [
          "v1"
        ]
      },
      "chromepolicy.customers.policies.resolve": {
        "description": "Gets the resolved policy values for a list of policies that match a search query.",
        "flatPath": "v1/customers/{customersId}/policies:resolve",
        "httpMethod": "POST",
        "method": "resolve",
        "resourceType": "policies",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "chromepolicy.customers.policySchemas.get": {
        "description": "Get a specific policy schema for a customer by its resource name.",
        "flatPath": "v1/customers/{customersId}/policySchemas/{policySchemasId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "policySchemas",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "chromepolicy.customers.policySchemas.list": {
        "description": "Gets a list of policy schemas that match a specified filter value for a given customer.",
        "flatPath": "v1/customers/{customersId}/policySchemas",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "policySchemas",
        "resourceTypePath": "//customers",
        "versions": [
          "v1"
        ]
      },
      "chromepolicy.media.upload": {
        "description": "Creates an enterprise file from the content provided by user. Returns a public download url for end user.",
        "flatPath": "v1/customers/{customersId}/policies/files:uploadPolicyFile",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "media",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Chrome Policy API"
  },
  "chromeuxreport": {
    "description": "The Chrome UX Report API lets you view real user experience data for millions of websites.",
    "methods": {
      "chromeuxreport.records.queryRecord": {
        "description": "Queries the Chrome User Experience for a single `record` for a given site. Returns a `record` that contains one or more `metrics` corresponding to performance data about the requested site.",
        "flatPath": "v1/records:queryRecord",
        "httpMethod": "POST",
        "method": "queryRecord",
        "resourceType": "records",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Chrome UX Report API"
  },
  "civicinfo": {
    "description": "Provides polling places, early vote locations, contest data, election officials, and government representatives for U.S. residential addresses.",
    "methods": {
      "civicinfo.divisions.search": {
        "description": "Searches for political divisions by their natural name or OCD ID.",
        "flatPath": "civicinfo/v2/divisions",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "divisions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "civicinfo.elections.electionQuery": {
        "description": "List of available elections to query.",
        "flatPath": "civicinfo/v2/elections",
        "httpMethod": "GET",
        "method": "electionQuery",
        "resourceType": "elections",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "civicinfo.elections.voterInfoQuery": {
        "description": "Looks up information relevant to a voter based on the voter's registered address.",
        "flatPath": "civicinfo/v2/voterinfo",
        "httpMethod": "GET",
        "method": "voterInfoQuery",
        "resourceType": "elections",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "civicinfo.representatives.representativeInfoByAddress": {
        "description": "Looks up political geography and representative information for a single address.",
        "flatPath": "civicinfo/v2/representatives",
        "httpMethod": "GET",
        "method": "representativeInfoByAddress",
        "resourceType": "representatives",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "civicinfo.representatives.representativeInfoByDivision": {
        "description": "Looks up representative information for a single geographic division.",
        "flatPath": "civicinfo/v2/representatives/{ocdId}",
        "httpMethod": "GET",
        "method": "representativeInfoByDivision",
        "resourceType": "representatives",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Google Civic Information API"
  },
  "classroom": {
    "description": "Manages classes, rosters, and invitations in Google Classroom.",
    "methods": {
      "classroom.courses.aliases.create": {
        "description": "Creates an alias for a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create the alias or for access errors. * `NOT_FOUND` if the course does not exist. * `ALREADY_EXISTS` if the alias already exists. * `FAILED_PRECONDITION` if the alias requested does not make sense for the requesting user or course (for example, if a user not in a domain attempts to access a domain-scoped alias).",
        "flatPath": "v1/courses/{courseId}/aliases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "aliases",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.aliases.delete": {
        "description": "Deletes an alias of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to remove the alias or for access errors. * `NOT_FOUND` if the alias does not exist. * `FAILED_PRECONDITION` if the alias requested does not make sense for the requesting user or course (for example, if a user not in a domain attempts to delete a domain-scoped alias).",
        "flatPath": "v1/courses/{courseId}/aliases/{alias}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "aliases",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.aliases.list": {
        "description": "Returns a list of aliases for a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the course or for access errors. * `NOT_FOUND` if the course does not exist.",
        "flatPath": "v1/courses/{courseId}/aliases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "aliases",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.announcements.create": {
        "description": "Creates an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create announcements in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible",
        "flatPath": "v1/courses/{courseId}/announcements",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "announcements",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.announcements.delete": {
        "description": "Deletes an announcement. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding announcement item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding announcement, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.",
        "flatPath": "v1/courses/{courseId}/announcements/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "announcements",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.announcements.get": {
        "description": "Returns an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or announcement, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or announcement does not exist.",
        "flatPath": "v1/courses/{courseId}/announcements/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "announcements",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.announcements.list": {
        "description": "Returns a list of announcements that the requester is permitted to view. Course students may only view `PUBLISHED` announcements. Course teachers and domain administrators may view all announcements. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.",
        "flatPath": "v1/courses/{courseId}/announcements",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "announcements",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.announcements.modifyAssignees": {
        "description": "Modifies assignee mode and options of an announcement. Only a teacher of the course that contains the announcement may call this method. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.",
        "flatPath": "v1/courses/{courseId}/announcements/{id}:modifyAssignees",
        "httpMethod": "POST",
        "method": "modifyAssignees",
        "resourceType": "announcements",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.announcements.patch": {
        "description": "Updates one or more fields of an announcement. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding announcement or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested announcement has already been deleted. * `NOT_FOUND` if the requested course or announcement does not exist",
        "flatPath": "v1/courses/{courseId}/announcements/{id}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "announcements",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.create": {
        "description": "Creates course work. The resulting course work (and corresponding student submissions) are associated with the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to make the request. Classroom API requests to modify course work and student submissions must be made with an OAuth client ID from the associated Developer Console project. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create course work in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible",
        "flatPath": "v1/courses/{courseId}/courseWork",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "courseWork",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.delete": {
        "description": "Deletes a course work. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested course work has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.",
        "flatPath": "v1/courses/{courseId}/courseWork/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "courseWork",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.get": {
        "description": "Returns course work. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "courseWork",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.list": {
        "description": "Returns a list of course work that the requester is permitted to view. Course students may only view `PUBLISHED` course work. Course teachers and domain administrators may view all course work. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "courseWork",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.modifyAssignees": {
        "description": "Modifies assignee mode and options of a coursework. Only a teacher of the course that contains the coursework may call this method. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{id}:modifyAssignees",
        "httpMethod": "POST",
        "method": "modifyAssignees",
        "resourceType": "courseWork",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.patch": {
        "description": "Updates one or more fields of a course work. See google.classroom.v1.CourseWork for details of which fields may be updated and who may change them. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the user is not permitted to make the requested modification to the student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested course work has already been deleted. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{id}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "courseWork",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.studentSubmissions.get": {
        "description": "Returns a student submission. * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, course work, or student submission or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "studentSubmissions",
        "resourceTypePath": "//courses/courseWork",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.studentSubmissions.list": {
        "description": "Returns a list of student submissions that the requester is permitted to view, factoring in the OAuth scopes of the request. `-` may be specified as the `course_work_id` to include student submissions for multiple course work items. Course students may only view their own work. Course teachers and domain administrators may view all student submissions. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "studentSubmissions",
        "resourceTypePath": "//courses/courseWork",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.studentSubmissions.modifyAttachments": {
        "description": "Modifies attachments of student submission. Attachments may only be added to student submissions belonging to course work objects with a `workType` of `ASSIGNMENT`. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, if the user is not permitted to modify attachments on the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:modifyAttachments",
        "httpMethod": "POST",
        "method": "modifyAttachments",
        "resourceType": "studentSubmissions",
        "resourceTypePath": "//courses/courseWork",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.studentSubmissions.patch": {
        "description": "Updates one or more fields of a student submission. See google.classroom.v1.StudentSubmission for details of which fields may be updated and who may change them. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work, if the user is not permitted to make the requested modification to the student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "studentSubmissions",
        "resourceTypePath": "//courses/courseWork",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.studentSubmissions.reclaim": {
        "description": "Reclaims a student submission on behalf of the student that owns it. Reclaiming a student submission transfers ownership of attached Drive files to the student and updates the submission state. Only the student that owns the requested student submission may call this method, and only for a student submission that has been turned in. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, unsubmit the requested student submission, or for access errors. * `FAILED_PRECONDITION` if the student submission has not been turned in. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:reclaim",
        "httpMethod": "POST",
        "method": "reclaim",
        "resourceType": "studentSubmissions",
        "resourceTypePath": "//courses/courseWork",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.studentSubmissions.return": {
        "description": "Returns a student submission. Returning a student submission transfers ownership of attached Drive files to the student and may also update the submission state. Unlike the Classroom application, returning a student submission does not set assignedGrade to the draftGrade value. Only a teacher of the course that contains the requested student submission may call this method. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, return the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:return",
        "httpMethod": "POST",
        "method": "return",
        "resourceType": "studentSubmissions",
        "resourceTypePath": "//courses/courseWork",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWork.studentSubmissions.turnIn": {
        "description": "Turns in a student submission. Turning in a student submission transfers ownership of attached Drive files to the teacher and may also update the submission state. This may only be called by the student that owns the specified student submission. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work, turn in the requested student submission, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course, course work, or student submission does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWork/{courseWorkId}/studentSubmissions/{id}:turnIn",
        "httpMethod": "POST",
        "method": "turnIn",
        "resourceType": "studentSubmissions",
        "resourceTypePath": "//courses/courseWork",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWorkMaterials.create": {
        "description": "Creates a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create course work material in the requested course, share a Drive attachment, or for access errors. * `INVALID_ARGUMENT` if the request is malformed or if more than 20 * materials are provided. * `NOT_FOUND` if the requested course does not exist. * `FAILED_PRECONDITION` for the following request error: * AttachmentNotVisible",
        "flatPath": "v1/courses/{courseId}/courseWorkMaterials",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "courseWorkMaterials",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWorkMaterials.delete": {
        "description": "Deletes a course work material. This request must be made by the Developer Console project of the [OAuth client ID](https://support.google.com/cloud/answer/6158849) used to create the corresponding course work material item. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding course work material, if the requesting user is not permitted to delete the requested course or for access errors. * `FAILED_PRECONDITION` if the requested course work material has already been deleted. * `NOT_FOUND` if no course exists with the requested ID.",
        "flatPath": "v1/courses/{courseId}/courseWorkMaterials/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "courseWorkMaterials",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWorkMaterials.get": {
        "description": "Returns a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or course work material, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or course work material does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWorkMaterials/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "courseWorkMaterials",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWorkMaterials.list": {
        "description": "Returns a list of course work material that the requester is permitted to view. Course students may only view `PUBLISHED` course work material. Course teachers and domain administrators may view all course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.",
        "flatPath": "v1/courses/{courseId}/courseWorkMaterials",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "courseWorkMaterials",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.courseWorkMaterials.patch": {
        "description": "Updates one or more fields of a course work material. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `FAILED_PRECONDITION` if the requested course work material has already been deleted. * `NOT_FOUND` if the requested course or course work material does not exist",
        "flatPath": "v1/courses/{courseId}/courseWorkMaterials/{id}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "courseWorkMaterials",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.create": {
        "description": "Creates a course. The user specified in `ownerId` is the owner of the created course and added as a teacher. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create courses or for access errors. * `NOT_FOUND` if the primary teacher is not a valid user. * `FAILED_PRECONDITION` if the course owner's account is disabled or for the following request errors: * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if an alias was specified in the `id` and already exists.",
        "flatPath": "v1/courses",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "courses",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.delete": {
        "description": "Deletes a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID.",
        "flatPath": "v1/courses/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "courses",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.get": {
        "description": "Returns a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID.",
        "flatPath": "v1/courses/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "courses",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.list": {
        "description": "Returns a list of courses that the requesting user is permitted to view, restricted to those that match the request. Returned courses are ordered by creation time, with the most recently created coming first. This method returns the following error codes: * `PERMISSION_DENIED` for access errors. * `INVALID_ARGUMENT` if the query argument is malformed. * `NOT_FOUND` if any users specified in the query arguments do not exist.",
        "flatPath": "v1/courses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "courses",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.patch": {
        "description": "Updates one or more fields in a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID. * `INVALID_ARGUMENT` if invalid fields are specified in the update mask or if no update mask is supplied. * `FAILED_PRECONDITION` for the following request errors: * CourseNotModifiable",
        "flatPath": "v1/courses/{id}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "courses",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.students.create": {
        "description": "Adds a user as a student of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create students in this course or for access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a student or teacher in the course.",
        "flatPath": "v1/courses/{courseId}/students",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "students",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.students.delete": {
        "description": "Deletes a student of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete students of this course or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not exist.",
        "flatPath": "v1/courses/{courseId}/students/{userId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "students",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.students.get": {
        "description": "Returns a student of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view students of this course or for access errors. * `NOT_FOUND` if no student of this course has the requested ID or if the course does not exist.",
        "flatPath": "v1/courses/{courseId}/students/{userId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "students",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.students.list": {
        "description": "Returns a list of students of this course that the requester is permitted to view. This method returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.",
        "flatPath": "v1/courses/{courseId}/students",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "students",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.teachers.create": {
        "description": "Creates a teacher of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create teachers in this course or for access errors. * `NOT_FOUND` if the requested course ID does not exist. * `FAILED_PRECONDITION` if the requested user's account is disabled, for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * `ALREADY_EXISTS` if the user is already a teacher or student in the course.",
        "flatPath": "v1/courses/{courseId}/teachers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "teachers",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.teachers.delete": {
        "description": "Removes the specified teacher from the specified course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete teachers of this course or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not exist. * `FAILED_PRECONDITION` if the requested ID belongs to the primary teacher of this course. * `FAILED_PRECONDITION` if the requested ID belongs to the owner of the course Drive folder. * `FAILED_PRECONDITION` if the course no longer has an active owner.",
        "flatPath": "v1/courses/{courseId}/teachers/{userId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "teachers",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.teachers.get": {
        "description": "Returns a teacher of a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view teachers of this course or for access errors. * `NOT_FOUND` if no teacher of this course has the requested ID or if the course does not exist.",
        "flatPath": "v1/courses/{courseId}/teachers/{userId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "teachers",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.teachers.list": {
        "description": "Returns a list of teachers of this course that the requester is permitted to view. This method returns the following error codes: * `NOT_FOUND` if the course does not exist. * `PERMISSION_DENIED` for access errors.",
        "flatPath": "v1/courses/{courseId}/teachers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "teachers",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.topics.create": {
        "description": "Creates a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course, create a topic in the requested course, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.",
        "flatPath": "v1/courses/{courseId}/topics",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "topics",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.topics.delete": {
        "description": "Deletes a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not allowed to delete the requested topic or for access errors. * `FAILED_PRECONDITION` if the requested topic has already been deleted. * `NOT_FOUND` if no course or topic exists with the requested ID.",
        "flatPath": "v1/courses/{courseId}/topics/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "topics",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.topics.get": {
        "description": "Returns a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or topic, or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or topic does not exist.",
        "flatPath": "v1/courses/{courseId}/topics/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "topics",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.topics.list": {
        "description": "Returns the list of topics that the requester is permitted to view. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access the requested course or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course does not exist.",
        "flatPath": "v1/courses/{courseId}/topics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "topics",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.topics.patch": {
        "description": "Updates one or more fields of a topic. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting developer project did not create the corresponding topic or for access errors. * `INVALID_ARGUMENT` if the request is malformed. * `NOT_FOUND` if the requested course or topic does not exist",
        "flatPath": "v1/courses/{courseId}/topics/{id}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "topics",
        "resourceTypePath": "//courses",
        "versions": [
          "v1"
        ]
      },
      "classroom.courses.update": {
        "description": "Updates a course. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to modify the requested course or for access errors. * `NOT_FOUND` if no course exists with the requested ID. * `FAILED_PRECONDITION` for the following request errors: * CourseNotModifiable",
        "flatPath": "v1/courses/{id}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "courses",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.invitations.accept": {
        "description": "Accepts an invitation, removing it and adding the invited user to the teachers or students (as appropriate) of the specified course. Only the invited user may accept an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to accept the requested invitation or for access errors. * `FAILED_PRECONDITION` for the following request errors: * CourseMemberLimitReached * CourseNotModifiable * CourseTeacherLimitReached * UserGroupsMembershipLimitReached * `NOT_FOUND` if no invitation exists with the requested ID.",
        "flatPath": "v1/invitations/{id}:accept",
        "httpMethod": "POST",
        "method": "accept",
        "resourceType": "invitations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.invitations.create": {
        "description": "Creates an invitation. Only one invitation for a user and course may exist at a time. Delete and re-create an invitation to make changes. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to create invitations for this course or for access errors. * `NOT_FOUND` if the course or the user does not exist. * `FAILED_PRECONDITION` if the requested user's account is disabled or if the user already has this role or a role with greater permissions. * `ALREADY_EXISTS` if an invitation for the specified user and course already exists.",
        "flatPath": "v1/invitations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "invitations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.invitations.delete": {
        "description": "Deletes an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to delete the requested invitation or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.",
        "flatPath": "v1/invitations/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "invitations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.invitations.get": {
        "description": "Returns an invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view the requested invitation or for access errors. * `NOT_FOUND` if no invitation exists with the requested ID.",
        "flatPath": "v1/invitations/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "invitations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.invitations.list": {
        "description": "Returns a list of invitations that the requesting user is permitted to view, restricted to those that match the list request. *Note:* At least one of `user_id` or `course_id` must be supplied. Both fields can be supplied. This method returns the following error codes: * `PERMISSION_DENIED` for access errors.",
        "flatPath": "v1/invitations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "invitations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.registrations.create": {
        "description": "Creates a `Registration`, causing Classroom to start sending notifications from the provided `feed` to the destination provided in `cloudPubSubTopic`. Returns the created `Registration`. Currently, this will be the same as the argument, but with server-assigned fields such as `expiry_time` and `id` filled in. Note that any value specified for the `expiry_time` or `id` fields will be ignored. While Classroom may validate the `cloudPubSubTopic` and return errors on a best effort basis, it is the caller's responsibility to ensure that it exists and that Classroom has permission to publish to it. This method may return the following error codes: * `PERMISSION_DENIED` if: * the authenticated user does not have permission to receive notifications from the requested field; or * the current user has not granted access to the current Cloud project with the appropriate scope for the requested feed. Note that domain-wide delegation of authority is not currently supported for this purpose. If the request has the appropriate scope, but no grant exists, a Request Errors is returned. * another access error is encountered. * `INVALID_ARGUMENT` if: * no `cloudPubsubTopic` is specified, or the specified `cloudPubsubTopic` is not valid; or * no `feed` is specified, or the specified `feed` is not valid. * `NOT_FOUND` if: * the specified `feed` cannot be located, or the requesting user does not have permission to determine whether or not it exists; or * the specified `cloudPubsubTopic` cannot be located, or Classroom has not been granted permission to publish to it.",
        "flatPath": "v1/registrations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "registrations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.registrations.delete": {
        "description": "Deletes a `Registration`, causing Classroom to stop sending notifications for that `Registration`.",
        "flatPath": "v1/registrations/{registrationId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "registrations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.userProfiles.get": {
        "description": "Returns a user profile. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to access this user profile, if no profile exists with the requested ID, or for access errors.",
        "flatPath": "v1/userProfiles/{userId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userProfiles",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "classroom.userProfiles.guardianInvitations.create": {
        "description": "Creates a guardian invitation, and sends an email to the guardian asking them to confirm that they are the student's guardian. Once the guardian accepts the invitation, their `state` will change to `COMPLETED` and they will start receiving guardian notifications. A `Guardian` resource will also be created to represent the active guardian. The request object must have the `student_id` and `invited_email_address` fields set. Failing to set these fields, or setting any other fields in the request, will result in an error. This method returns the following error codes: * `PERMISSION_DENIED` if the current user does not have permission to manage guardians, if the guardian in question has already rejected too many requests for that student, if guardians are not enabled for the domain in question, or for other access errors. * `RESOURCE_EXHAUSTED` if the student or guardian has exceeded the guardian link limit. * `INVALID_ARGUMENT` if the guardian email address is not valid (for example, if it is too long), or if the format of the student ID provided cannot be recognized (it is not an email address, nor a `user_id` from this API). This error will also be returned if read-only fields are set, or if the `state` field is set to to a value other than `PENDING`. * `NOT_FOUND` if the student ID provided is a valid student ID, but Classroom has no record of that student. * `ALREADY_EXISTS` if there is already a pending guardian invitation for the student and `invited_email_address` provided, or if the provided `invited_email_address` matches the Google account of an existing `Guardian` for this user.",
        "flatPath": "v1/userProfiles/{studentId}/guardianInvitations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "guardianInvitations",
        "resourceTypePath": "//userProfiles",
        "versions": [
          "v1"
        ]
      },
      "classroom.userProfiles.guardianInvitations.get": {
        "description": "Returns a specific guardian invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the requesting user is not permitted to view guardian invitations for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). * `NOT_FOUND` if Classroom cannot find any record of the given student or `invitation_id`. May also be returned if the student exists, but the requesting user does not have access to see that student.",
        "flatPath": "v1/userProfiles/{studentId}/guardianInvitations/{invitationId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "guardianInvitations",
        "resourceTypePath": "//userProfiles",
        "versions": [
          "v1"
        ]
      },
      "classroom.userProfiles.guardianInvitations.list": {
        "description": "Returns a list of guardian invitations that the requesting user is permitted to view, filtered by the parameters provided. This method returns the following error codes: * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting user is not permitted to view guardian invitations for that student, if `\"-\"` is specified as the `student_id` and the user is not a domain administrator, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). May also be returned if an invalid `page_token` or `state` is provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be recognized, but Classroom has no record of that student.",
        "flatPath": "v1/userProfiles/{studentId}/guardianInvitations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "guardianInvitations",
        "resourceTypePath": "//userProfiles",
        "versions": [
          "v1"
        ]
      },
      "classroom.userProfiles.guardianInvitations.patch": {
        "description": "Modifies a guardian invitation. Currently, the only valid modification is to change the `state` from `PENDING` to `COMPLETE`. This has the effect of withdrawing the invitation. This method returns the following error codes: * `PERMISSION_DENIED` if the current user does not have permission to manage guardians, if guardians are not enabled for the domain in question or for other access errors. * `FAILED_PRECONDITION` if the guardian link is not in the `PENDING` state. * `INVALID_ARGUMENT` if the format of the student ID provided cannot be recognized (it is not an email address, nor a `user_id` from this API), or if the passed `GuardianInvitation` has a `state` other than `COMPLETE`, or if it modifies fields other than `state`. * `NOT_FOUND` if the student ID provided is a valid student ID, but Classroom has no record of that student, or if the `id` field does not refer to a guardian invitation known to Classroom.",
        "flatPath": "v1/userProfiles/{studentId}/guardianInvitations/{invitationId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "guardianInvitations",
        "resourceTypePath": "//userProfiles",
        "versions": [
          "v1"
        ]
      },
      "classroom.userProfiles.guardians.delete": {
        "description": "Deletes a guardian. The guardian will no longer receive guardian notifications and the guardian will no longer be accessible via the API. This method returns the following error codes: * `PERMISSION_DENIED` if no user that matches the provided `student_id` is visible to the requesting user, if the requesting user is not permitted to manage guardians for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API). * `NOT_FOUND` if the requesting user is permitted to modify guardians for the requested `student_id`, but no `Guardian` record exists for that student with the provided `guardian_id`.",
        "flatPath": "v1/userProfiles/{studentId}/guardians/{guardianId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "guardians",
        "resourceTypePath": "//userProfiles",
        "versions": [
          "v1"
        ]
      },
      "classroom.userProfiles.guardians.get": {
        "description": "Returns a specific guardian. This method returns the following error codes: * `PERMISSION_DENIED` if no user that matches the provided `student_id` is visible to the requesting user, if the requesting user is not permitted to view guardian information for the student identified by the `student_id`, if guardians are not enabled for the domain in question, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). * `NOT_FOUND` if the requesting user is permitted to view guardians for the requested `student_id`, but no `Guardian` record exists for that student that matches the provided `guardian_id`.",
        "flatPath": "v1/userProfiles/{studentId}/guardians/{guardianId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "guardians",
        "resourceTypePath": "//userProfiles",
        "versions": [
          "v1"
        ]
      },
      "classroom.userProfiles.guardians.list": {
        "description": "Returns a list of guardians that the requesting user is permitted to view, restricted to those that match the request. To list guardians for any student that the requesting user may view guardians for, use the literal character `-` for the student ID. This method returns the following error codes: * `PERMISSION_DENIED` if a `student_id` is specified, and the requesting user is not permitted to view guardian information for that student, if `\"-\"` is specified as the `student_id` and the user is not a domain administrator, if guardians are not enabled for the domain in question, if the `invited_email_address` filter is set by a user who is not a domain administrator, or for other access errors. * `INVALID_ARGUMENT` if a `student_id` is specified, but its format cannot be recognized (it is not an email address, nor a `student_id` from the API, nor the literal string `me`). May also be returned if an invalid `page_token` is provided. * `NOT_FOUND` if a `student_id` is specified, and its format can be recognized, but Classroom has no record of that student.",
        "flatPath": "v1/userProfiles/{studentId}/guardians",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "guardians",
        "resourceTypePath": "//userProfiles",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Classroom API"
  },
  "cloudasset": {
    "description": "The cloud asset API manages the history and inventory of cloud resources.",
    "methods": {
      "cloudasset.analyzeIamPolicy": {
        "description": "Analyzes IAM policies to answer which identities have what accesses on which resources.",
        "flatPath": "v1p4beta1/{v1p4beta1Id}/{v1p4beta1Id1}:analyzeIamPolicy",
        "httpMethod": "GET",
        "method": "analyzeIamPolicy",
        "resourceType": "v1p4beta1",
        "resourceTypePath": "/",
        "versions": [
          "v1p4beta1",
          "v1"
        ]
      },
      "cloudasset.analyzeIamPolicyLongrunning": {
        "description": "Analyzes IAM policies asynchronously to answer which identities have what accesses on which resources, and writes the analysis results to a Google Cloud Storage or a BigQuery destination. For Cloud Storage destination, the output format is the JSON format that represents a AnalyzeIamPolicyResponse. This method implements the google.longrunning.Operation, which allows you to track the operation status. We recommend intervals of at least 2 seconds with exponential backoff retry to poll the operation result. The metadata contains the metadata for the long-running operation.",
        "flatPath": "v1/{v1Id}/{v1Id1}:analyzeIamPolicyLongrunning",
        "httpMethod": "POST",
        "method": "analyzeIamPolicyLongrunning",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.analyzeMove": {
        "description": "Analyze moving a resource to a specified destination without kicking off the actual move. The analysis is best effort depending on the user's permissions of viewing different hierarchical policies and configurations. The policies and configuration are subject to change before the actual resource migration takes place.",
        "flatPath": "v1/{v1Id}/{v1Id1}:analyzeMove",
        "httpMethod": "GET",
        "method": "analyzeMove",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.assets.list": {
        "description": "Lists assets with time and resource types and returns paged results in response.",
        "flatPath": "v1p5beta1/{v1p5beta1Id}/{v1p5beta1Id1}/assets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assets",
        "resourceTypePath": "/",
        "versions": [
          "v1p5beta1",
          "v1"
        ]
      },
      "cloudasset.batchGetAssetsHistory": {
        "description": "Batch gets the update history of assets that overlap a time window. For IAM_POLICY content, this API outputs history when the asset and its attached IAM POLICY both exist. This can create gaps in the output history. Otherwise, this API outputs history with asset in both non-delete or deleted status. If a specified asset does not exist, this API returns an INVALID_ARGUMENT error.",
        "flatPath": "v1/{v1Id}/{v1Id1}:batchGetAssetsHistory",
        "httpMethod": "GET",
        "method": "batchGetAssetsHistory",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.exportAssets": {
        "description": "Exports assets with time and resource types to a given Cloud Storage location/BigQuery table. For Cloud Storage location destinations, the output format is newline-delimited JSON. Each line represents a google.cloud.asset.v1p7beta1.Asset in the JSON format; for BigQuery table destinations, the output table stores the fields in asset proto as columns. This API implements the google.longrunning.Operation API , which allows you to keep track of the export. We recommend intervals of at least 2 seconds with exponential retry to poll the export operation result. For regular-size resource parent, the export operation usually finishes within 5 minutes.",
        "flatPath": "v1p7beta1/{v1p7beta1Id}/{v1p7beta1Id1}:exportAssets",
        "httpMethod": "POST",
        "method": "exportAssets",
        "resourceType": "v1p7beta1",
        "resourceTypePath": "/",
        "versions": [
          "v1p7beta1",
          "v1"
        ]
      },
      "cloudasset.exportIamPolicyAnalysis": {
        "description": "Exports the answers of which identities have what accesses on which resources to a Google Cloud Storage destination. The output format is the JSON format that represents a AnalyzeIamPolicyResponse in the JSON format. This method implements the google.longrunning.Operation, which allows you to keep track of the export. We recommend intervals of at least 2 seconds with exponential retry to poll the export operation result. The metadata contains the request to help callers to map responses to requests.",
        "flatPath": "v1p4beta1/{v1p4beta1Id}/{v1p4beta1Id1}:exportIamPolicyAnalysis",
        "httpMethod": "POST",
        "method": "exportIamPolicyAnalysis",
        "resourceType": "v1p4beta1",
        "resourceTypePath": "/",
        "versions": [
          "v1p4beta1"
        ]
      },
      "cloudasset.feeds.create": {
        "description": "Creates a feed in a parent project/folder/organization to listen to its asset updates.",
        "flatPath": "v1/{v1Id}/{v1Id1}/feeds",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "feeds",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.feeds.delete": {
        "description": "Deletes an asset feed.",
        "flatPath": "v1/{v1Id}/{v1Id1}/feeds/{feedsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "feeds",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.feeds.get": {
        "description": "Gets details about an asset feed.",
        "flatPath": "v1/{v1Id}/{v1Id1}/feeds/{feedsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "feeds",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.feeds.list": {
        "description": "Lists all asset feeds in a parent project/folder/organization.",
        "flatPath": "v1/{v1Id}/{v1Id1}/feeds",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "feeds",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.feeds.patch": {
        "description": "Updates an asset feed configuration.",
        "flatPath": "v1/{v1Id}/{v1Id1}/feeds/{feedsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "feeds",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.folders.exportAssets": {
        "description": "Exports assets with time and resource types to a given Cloud Storage location. The output format is newline-delimited JSON. This API implements the google.longrunning.Operation API allowing you to keep track of the export. We recommend intervals of at least 2 seconds with exponential retry to poll the export operation result. For regular-size resource parent, the export operation usually finishes within 5 minutes.",
        "flatPath": "v1beta1/folders/{foldersId}:exportAssets",
        "httpMethod": "POST",
        "method": "exportAssets",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudasset.folders.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/folders/{foldersId}/operations/{operationsId}/{operationsId1}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//folders",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudasset.iamPolicies.searchAll": {
        "description": "Searches all the IAM policies within a given accessible CRM scope (project/folder/organization). This RPC gives callers especially administrators the ability to search all the IAM policies within a scope, even if they don't have `.getIamPolicy` permission of all the IAM policies. Callers should have `cloud.assets.SearchAllIamPolicies` permission on the requested scope, otherwise the request will be rejected.",
        "flatPath": "v1p1beta1/{v1p1beta1Id}/{v1p1beta1Id1}/iamPolicies:searchAll",
        "httpMethod": "GET",
        "method": "searchAll",
        "resourceType": "iamPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1"
        ]
      },
      "cloudasset.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1p7beta1/{v1p7beta1Id}/{v1p7beta1Id1}/operations/{operationsId}/{operationsId1}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1p7beta1",
          "v1"
        ]
      },
      "cloudasset.organizations.batchGetAssetsHistory": {
        "description": "Batch gets the update history of assets that overlap a time window. For IAM_POLICY content, this API outputs history when the asset and its attached IAM POLICY both exist. This can create gaps in the output history. Otherwise, this API outputs history with asset in both non-delete or deleted status. If a specified asset does not exist, this API returns an INVALID_ARGUMENT error.",
        "flatPath": "v1beta1/organizations/{organizationsId}:batchGetAssetsHistory",
        "httpMethod": "GET",
        "method": "batchGetAssetsHistory",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudasset.organizations.exportAssets": {
        "description": "Exports assets with time and resource types to a given Cloud Storage location. The output format is newline-delimited JSON. This API implements the google.longrunning.Operation API allowing you to keep track of the export. We recommend intervals of at least 2 seconds with exponential retry to poll the export operation result. For regular-size resource parent, the export operation usually finishes within 5 minutes.",
        "flatPath": "v1beta1/organizations/{organizationsId}:exportAssets",
        "httpMethod": "POST",
        "method": "exportAssets",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudasset.organizations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/organizations/{organizationsId}/operations/{operationsId}/{operationsId1}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudasset.projects.batchGetAssetsHistory": {
        "description": "Batch gets the update history of assets that overlap a time window. For IAM_POLICY content, this API outputs history when the asset and its attached IAM POLICY both exist. This can create gaps in the output history. Otherwise, this API outputs history with asset in both non-delete or deleted status. If a specified asset does not exist, this API returns an INVALID_ARGUMENT error.",
        "flatPath": "v1beta1/projects/{projectsId}:batchGetAssetsHistory",
        "httpMethod": "GET",
        "method": "batchGetAssetsHistory",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudasset.projects.exportAssets": {
        "description": "Exports assets with time and resource types to a given Cloud Storage location. The output format is newline-delimited JSON. This API implements the google.longrunning.Operation API allowing you to keep track of the export. We recommend intervals of at least 2 seconds with exponential retry to poll the export operation result. For regular-size resource parent, the export operation usually finishes within 5 minutes.",
        "flatPath": "v1beta1/projects/{projectsId}:exportAssets",
        "httpMethod": "POST",
        "method": "exportAssets",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudasset.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/operations/{operationsId}/{operationsId1}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudasset.resources.searchAll": {
        "description": "Searches all the resources within a given accessible CRM scope (project/folder/organization). This RPC gives callers especially administrators the ability to search all the resources within a scope, even if they don't have `.get` permission of all the resources. Callers should have `cloud.assets.SearchAllResources` permission on the requested scope, otherwise the request will be rejected.",
        "flatPath": "v1p1beta1/{v1p1beta1Id}/{v1p1beta1Id1}/resources:searchAll",
        "httpMethod": "GET",
        "method": "searchAll",
        "resourceType": "resources",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1"
        ]
      },
      "cloudasset.savedQueries.create": {
        "description": "Creates a saved query in a parent project/folder/organization.",
        "flatPath": "v1/{v1Id}/{v1Id1}/savedQueries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "savedQueries",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.savedQueries.delete": {
        "description": "Deletes a saved query.",
        "flatPath": "v1/{v1Id}/{v1Id1}/savedQueries/{savedQueriesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "savedQueries",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.savedQueries.get": {
        "description": "Gets details about a saved query.",
        "flatPath": "v1/{v1Id}/{v1Id1}/savedQueries/{savedQueriesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "savedQueries",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.savedQueries.list": {
        "description": "Lists all saved queries in a parent project/folder/organization.",
        "flatPath": "v1/{v1Id}/{v1Id1}/savedQueries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "savedQueries",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.savedQueries.patch": {
        "description": "Updates a saved query.",
        "flatPath": "v1/{v1Id}/{v1Id1}/savedQueries/{savedQueriesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "savedQueries",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.searchAllIamPolicies": {
        "description": "Searches all IAM policies within the specified scope, such as a project, folder, or organization. The caller must be granted the `cloudasset.assets.searchAllIamPolicies` permission on the desired scope, otherwise the request will be rejected.",
        "flatPath": "v1/{v1Id}/{v1Id1}:searchAllIamPolicies",
        "httpMethod": "GET",
        "method": "searchAllIamPolicies",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudasset.searchAllResources": {
        "description": "Searches all Cloud resources within the specified scope, such as a project, folder, or organization. The caller must be granted the `cloudasset.assets.searchAllResources` permission on the desired scope, otherwise the request will be rejected.",
        "flatPath": "v1/{v1Id}/{v1Id1}:searchAllResources",
        "httpMethod": "GET",
        "method": "searchAllResources",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Asset API"
  },
  "cloudbilling": {
    "description": "Allows developers to manage billing for their Google Cloud Platform projects programmatically.",
    "methods": {
      "cloudbilling.billingAccounts.create": {
        "description": "This method creates [billing subaccounts](https://cloud.google.com/billing/docs/concepts#subaccounts). Google Cloud resellers should use the Channel Services APIs, [accounts.customers.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers/create) and [accounts.customers.entitlements.create](https://cloud.google.com/channel/docs/reference/rest/v1/accounts.customers.entitlements/create). When creating a subaccount, the current authenticated user must have the `billing.accounts.update` IAM permission on the parent account, which is typically given to billing account [administrators](https://cloud.google.com/billing/docs/how-to/billing-access). This method will return an error if the parent account has not been provisioned as a reseller account.",
        "flatPath": "v1/billingAccounts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "billingAccounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.billingAccounts.get": {
        "description": "Gets information about a billing account. The current authenticated user must be a [viewer of the billing account](https://cloud.google.com/billing/docs/how-to/billing-access).",
        "flatPath": "v1/billingAccounts/{billingAccountsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "billingAccounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.billingAccounts.getIamPolicy": {
        "description": "Gets the access control policy for a billing account. The caller must have the `billing.accounts.getIamPolicy` permission on the account, which is often given to billing account [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).",
        "flatPath": "v1/billingAccounts/{billingAccountsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "billingAccounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.billingAccounts.list": {
        "description": "Lists the billing accounts that the current authenticated user has permission to [view](https://cloud.google.com/billing/docs/how-to/billing-access).",
        "flatPath": "v1/billingAccounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "billingAccounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.billingAccounts.patch": {
        "description": "Updates a billing account's fields. Currently the only field that can be edited is `display_name`. The current authenticated user must have the `billing.accounts.update` IAM permission, which is typically given to the [administrator](https://cloud.google.com/billing/docs/how-to/billing-access) of the billing account.",
        "flatPath": "v1/billingAccounts/{billingAccountsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "billingAccounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.billingAccounts.projects.list": {
        "description": "Lists the projects associated with a billing account. The current authenticated user must have the `billing.resourceAssociations.list` IAM permission, which is often given to billing account [viewers](https://cloud.google.com/billing/docs/how-to/billing-access).",
        "flatPath": "v1/billingAccounts/{billingAccountsId}/projects",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "projects",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.billingAccounts.setIamPolicy": {
        "description": "Sets the access control policy for a billing account. Replaces any existing policy. The caller must have the `billing.accounts.setIamPolicy` permission on the account, which is often given to billing account [administrators](https://cloud.google.com/billing/docs/how-to/billing-access).",
        "flatPath": "v1/billingAccounts/{billingAccountsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "billingAccounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.billingAccounts.testIamPermissions": {
        "description": "Tests the access control policy for a billing account. This method takes the resource and a set of permissions as input and returns the subset of the input permissions that the caller is allowed for that resource.",
        "flatPath": "v1/billingAccounts/{billingAccountsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "billingAccounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.projects.getBillingInfo": {
        "description": "Gets the billing information for a project. The current authenticated user must have [permission to view the project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo ).",
        "flatPath": "v1/projects/{projectsId}/billingInfo",
        "httpMethod": "GET",
        "method": "getBillingInfo",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.projects.updateBillingInfo": {
        "description": "Sets or updates the billing account associated with a project. You specify the new billing account by setting the `billing_account_name` in the `ProjectBillingInfo` resource to the resource name of a billing account. Associating a project with an open billing account enables billing on the project and allows charges for resource usage. If the project already had a billing account, this method changes the billing account used for resource usage charges. *Note:* Incurred charges that have not yet been reported in the transaction history of the Google Cloud Console might be billed to the new billing account, even if the charge occurred before the new billing account was assigned to the project. The current authenticated user must have ownership privileges for both the [project](https://cloud.google.com/docs/permissions-overview#h.bgs0oxofvnoo ) and the [billing account](https://cloud.google.com/billing/docs/how-to/billing-access). You can disable billing on the project by setting the `billing_account_name` field to empty. This action disassociates the current billing account from the project. Any billable activity of your in-use services will stop, and your application could stop functioning as expected. Any unbilled charges to date will be billed to the previously associated account. The current authenticated user must be either an owner of the project or an owner of the billing account for the project. Note that associating a project with a *closed* billing account will have much the same effect as disabling billing on the project: any paid resources used by the project will be shut down. Thus, unless you wish to disable billing, you should always call this method with the name of an *open* billing account.",
        "flatPath": "v1/projects/{projectsId}/billingInfo",
        "httpMethod": "PUT",
        "method": "updateBillingInfo",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.services.list": {
        "description": "Lists all public cloud services.",
        "flatPath": "v1/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbilling.services.skus.list": {
        "description": "Lists all publicly available SKUs for a given cloud service.",
        "flatPath": "v1/services/{servicesId}/skus",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "skus",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Billing API"
  },
  "cloudbuild": {
    "description": "Creates and manages builds on Google Cloud Platform.",
    "methods": {
      "cloudbuild.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.builds.approve": {
        "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
        "flatPath": "v1/projects/{projectsId}/builds/{buildsId}:approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "builds",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.builds.cancel": {
        "description": "Cancels a build in progress.",
        "flatPath": "v1/projects/{projectId}/builds/{id}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "builds",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.builds.create": {
        "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
        "flatPath": "v1/projects/{projectId}/builds",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "builds",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.builds.get": {
        "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
        "flatPath": "v1/projects/{projectId}/builds/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "builds",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.builds.list": {
        "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
        "flatPath": "v1/projects/{projectId}/builds",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "builds",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.builds.retry": {
        "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
        "flatPath": "v1/projects/{projectId}/builds/{id}:retry",
        "httpMethod": "POST",
        "method": "retry",
        "resourceType": "builds",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.githubEnterpriseConfigs.create": {
        "description": "Create an association between a GCP project and a GitHub Enterprise server.",
        "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.githubEnterpriseConfigs.delete": {
        "description": "Delete an association between a GCP project and a GitHub Enterprise server.",
        "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.githubEnterpriseConfigs.get": {
        "description": "Retrieve a GitHubEnterpriseConfig.",
        "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.githubEnterpriseConfigs.list": {
        "description": "List all GitHubEnterpriseConfigs for a given project.",
        "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.githubEnterpriseConfigs.patch": {
        "description": "Update an association between a GCP project and a GitHub Enterprise server.",
        "flatPath": "v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.builds.approve": {
        "description": "Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "builds",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.builds.cancel": {
        "description": "Cancels a build in progress.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "builds",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.builds.create": {
        "description": "Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "builds",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.builds.get": {
        "description": "Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "builds",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.builds.list": {
        "description": "Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "builds",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.builds.retry": {
        "description": "Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Google Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:retry",
        "httpMethod": "POST",
        "method": "retry",
        "resourceType": "builds",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.githubEnterpriseConfigs.create": {
        "description": "Create an association between a GCP project and a GitHub Enterprise server.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.githubEnterpriseConfigs.delete": {
        "description": "Delete an association between a GCP project and a GitHub Enterprise server.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.githubEnterpriseConfigs.get": {
        "description": "Retrieve a GitHubEnterpriseConfig.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.githubEnterpriseConfigs.list": {
        "description": "List all GitHubEnterpriseConfigs for a given project.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.githubEnterpriseConfigs.patch": {
        "description": "Update an association between a GCP project and a GitHub Enterprise server.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "githubEnterpriseConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "cloudbuild.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "cloudbuild.projects.locations.triggers.create": {
        "description": "Creates a new `BuildTrigger`. This API is experimental.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.triggers.delete": {
        "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.triggers.get": {
        "description": "Returns information about a `BuildTrigger`. This API is experimental.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.triggers.list": {
        "description": "Lists existing `BuildTrigger`s. This API is experimental.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.triggers.patch": {
        "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.triggers.run": {
        "description": "Runs a `BuildTrigger` at a particular source revision.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.triggers.webhook": {
        "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:webhook",
        "httpMethod": "POST",
        "method": "webhook",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.locations.workerPools.create": {
        "description": "Creates a `WorkerPool` to run the builds, and returns the new worker pool. NOTE: As of now, this method returns an `Operation` that is always complete.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudbuild.projects.locations.workerPools.delete": {
        "description": "Deletes a `WorkerPool`. NOTE: As of now, this method returns an `Operation` that is always complete.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudbuild.projects.locations.workerPools.get": {
        "description": "Returns details of a `WorkerPool`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudbuild.projects.locations.workerPools.list": {
        "description": "Lists `WorkerPool`s in the given project.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudbuild.projects.locations.workerPools.patch": {
        "description": "Updates a `WorkerPool`. NOTE: As of now, this method returns an `Operation` that is always complete.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudbuild.projects.triggers.create": {
        "description": "Creates a new `BuildTrigger`. This API is experimental.",
        "flatPath": "v1/projects/{projectId}/triggers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "triggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.triggers.delete": {
        "description": "Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
        "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "triggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.triggers.get": {
        "description": "Returns information about a `BuildTrigger`. This API is experimental.",
        "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "triggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.triggers.list": {
        "description": "Lists existing `BuildTrigger`s. This API is experimental.",
        "flatPath": "v1/projects/{projectId}/triggers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "triggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.triggers.patch": {
        "description": "Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.",
        "flatPath": "v1/projects/{projectId}/triggers/{triggerId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "triggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.triggers.run": {
        "description": "Runs a `BuildTrigger` at a particular source revision.",
        "flatPath": "v1/projects/{projectId}/triggers/{triggerId}:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "triggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.triggers.webhook": {
        "description": "ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.",
        "flatPath": "v1/projects/{projectId}/triggers/{trigger}:webhook",
        "httpMethod": "POST",
        "method": "webhook",
        "resourceType": "triggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudbuild.projects.workerPools.create": {
        "description": "Creates a `WorkerPool` to run the builds, and returns the new worker pool.",
        "flatPath": "v1alpha1/projects/{projectsId}/workerPools",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1alpha2"
        ]
      },
      "cloudbuild.projects.workerPools.delete": {
        "description": "Deletes a `WorkerPool` by its project ID and WorkerPool name.",
        "flatPath": "v1alpha1/projects/{projectsId}/workerPools/{workerPoolsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1alpha2"
        ]
      },
      "cloudbuild.projects.workerPools.get": {
        "description": "Returns information about a `WorkerPool`.",
        "flatPath": "v1alpha1/projects/{projectsId}/workerPools/{workerPoolsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1alpha2"
        ]
      },
      "cloudbuild.projects.workerPools.list": {
        "description": "List project's `WorkerPool`s.",
        "flatPath": "v1alpha1/projects/{projectsId}/workerPools",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1alpha2"
        ]
      },
      "cloudbuild.projects.workerPools.patch": {
        "description": "Update a `WorkerPool`.",
        "flatPath": "v1alpha1/projects/{projectsId}/workerPools/{workerPoolsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "workerPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1alpha2"
        ]
      },
      "cloudbuild.webhook": {
        "description": "ReceiveWebhook is called when the API receives a GitHub webhook.",
        "flatPath": "v1/webhook",
        "httpMethod": "POST",
        "method": "webhook",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Build API"
  },
  "cloudchannel": {
    "description": "The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.",
    "methods": {
      "cloudchannel.accounts.channelPartnerLinks.create": {
        "description": "Initiates a channel partner link between a distributor and a reseller, or between resellers in an n-tier reseller channel. Invited partners need to follow the invite_link_uri provided in the response to accept. After accepting the invitation, a link is set up between the two parties. You must be a distributor to call this method. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * ALREADY_EXISTS: The ChannelPartnerLink sent in the request already exists. * NOT_FOUND: No Cloud Identity customer exists for provided domain. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The new ChannelPartnerLink resource.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "channelPartnerLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.channelPartnerLinks.customers.create": {
        "description": "Creates a new Customer resource under the reseller or distributor account. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: * Required request parameters are missing or invalid. * Domain field value doesn't match the primary email domain. Return value: The newly created Customer resource.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks/{channelPartnerLinksId}/customers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "customers",
        "resourceTypePath": "//accounts/channelPartnerLinks",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.channelPartnerLinks.customers.delete": {
        "description": "Deletes the given Customer permanently. Possible error codes: * PERMISSION_DENIED: The account making the request does not own this customer. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * FAILED_PRECONDITION: The customer has existing entitlements. * NOT_FOUND: No Customer resource found for the name in the request.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks/{channelPartnerLinksId}/customers/{customersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "customers",
        "resourceTypePath": "//accounts/channelPartnerLinks",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.channelPartnerLinks.customers.get": {
        "description": "Returns the requested Customer resource. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: The customer resource doesn't exist. Usually the result of an invalid name parameter. Return value: The Customer resource.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks/{channelPartnerLinksId}/customers/{customersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customers",
        "resourceTypePath": "//accounts/channelPartnerLinks",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.channelPartnerLinks.customers.import": {
        "description": "Imports a Customer from the Cloud Identity associated with the provided Cloud Identity ID or domain before a TransferEntitlements call. If a linked Customer already exists and overwrite_if_exists is true, it will update that Customer's data. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * NOT_FOUND: Cloud Identity doesn't exist or was deleted. * INVALID_ARGUMENT: Required parameters are missing, or the auth_token is expired or invalid. * ALREADY_EXISTS: A customer already exists and has conflicting critical fields. Requires an overwrite. Return value: The Customer.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks/{channelPartnerLinksId}/customers:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "customers",
        "resourceTypePath": "//accounts/channelPartnerLinks",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.channelPartnerLinks.customers.list": {
        "description": "List Customers. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. Return value: List of Customers, or an empty list if there are no customers.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks/{channelPartnerLinksId}/customers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customers",
        "resourceTypePath": "//accounts/channelPartnerLinks",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.channelPartnerLinks.customers.patch": {
        "description": "Updates an existing Customer resource for the reseller or distributor. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: No Customer resource found for the name in the request. Return value: The updated Customer resource.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks/{channelPartnerLinksId}/customers/{customersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customers",
        "resourceTypePath": "//accounts/channelPartnerLinks",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.channelPartnerLinks.get": {
        "description": "Returns the requested ChannelPartnerLink resource. You must be a distributor to call this method. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: ChannelPartnerLink resource not found because of an invalid channel partner link name. Return value: The ChannelPartnerLink resource.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks/{channelPartnerLinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "channelPartnerLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.channelPartnerLinks.list": {
        "description": "List ChannelPartnerLinks belonging to a distributor. You must be a distributor to call this method. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. Return value: The list of the distributor account's ChannelPartnerLink resources.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "channelPartnerLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.channelPartnerLinks.patch": {
        "description": "Updates a channel partner link. Distributors call this method to change a link's status. For example, to suspend a partner link. You must be a distributor to call this method. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: * Required request parameters are missing or invalid. * Link state cannot change from invited to active or suspended. * Cannot send reseller_cloud_identity_id, invite_url, or name in update mask. * NOT_FOUND: ChannelPartnerLink resource not found. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The updated ChannelPartnerLink resource.",
        "flatPath": "v1/accounts/{accountsId}/channelPartnerLinks/{channelPartnerLinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "channelPartnerLinks",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.checkCloudIdentityAccountsExist": {
        "description": "Confirms the existence of Cloud Identity accounts based on the domain and if the Cloud Identity accounts are owned by the reseller. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * INVALID_VALUE: Invalid domain value in the request. Return value: A list of CloudIdentityCustomerAccount resources for the domain (may be empty) Note: in the v1alpha1 version of the API, a NOT_FOUND error returns if no CloudIdentityCustomerAccount resources match the domain.",
        "flatPath": "v1/accounts/{accountsId}:checkCloudIdentityAccountsExist",
        "httpMethod": "POST",
        "method": "checkCloudIdentityAccountsExist",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.create": {
        "description": "Creates a new Customer resource under the reseller or distributor account. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: * Required request parameters are missing or invalid. * Domain field value doesn't match the primary email domain. Return value: The newly created Customer resource.",
        "flatPath": "v1/accounts/{accountsId}/customers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.delete": {
        "description": "Deletes the given Customer permanently. Possible error codes: * PERMISSION_DENIED: The account making the request does not own this customer. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * FAILED_PRECONDITION: The customer has existing entitlements. * NOT_FOUND: No Customer resource found for the name in the request.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.activate": {
        "description": "Activates a previously suspended entitlement. Entitlements suspended for pending ToS acceptance can't be activated using this method. An entitlement activation is a long-running operation and it updates the state of the customer entitlement. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: Entitlement resource not found. * SUSPENSION_NOT_RESELLER_INITIATED: Can only activate reseller-initiated suspensions and entitlements that have accepted the TOS. * NOT_SUSPENDED: Can only activate suspended entitlements not in an ACTIVE state. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements/{entitlementsId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.cancel": {
        "description": "Cancels a previously fulfilled entitlement. An entitlement cancellation is a long-running operation. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * FAILED_PRECONDITION: There are Google Cloud projects linked to the Google Cloud entitlement's Cloud Billing subaccount. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: Entitlement resource not found. * DELETION_TYPE_NOT_ALLOWED: Cancel is only allowed for Google Workspace add-ons, or entitlements for Google Cloud's development platform. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The response will contain google.protobuf.Empty on success. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements/{entitlementsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.changeOffer": {
        "description": "Updates the Offer for an existing customer entitlement. An entitlement update is a long-running operation and it updates the entitlement as a result of fulfillment. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: Offer or Entitlement resource not found. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements/{entitlementsId}:changeOffer",
        "httpMethod": "POST",
        "method": "changeOffer",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.changeParameters": {
        "description": "Change parameters of the entitlement. An entitlement update is a long-running operation and it updates the entitlement as a result of fulfillment. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. For example, the number of seats being changed is greater than the allowed number of max seats, or decreasing seats for a commitment based plan. * NOT_FOUND: Entitlement resource not found. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements/{entitlementsId}:changeParameters",
        "httpMethod": "POST",
        "method": "changeParameters",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.changeRenewalSettings": {
        "description": "Updates the renewal settings for an existing customer entitlement. An entitlement update is a long-running operation and it updates the entitlement as a result of fulfillment. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: Entitlement resource not found. * NOT_COMMITMENT_PLAN: Renewal Settings are only applicable for a commitment plan. Can't enable or disable renewals for non-commitment plans. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements/{entitlementsId}:changeRenewalSettings",
        "httpMethod": "POST",
        "method": "changeRenewalSettings",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.create": {
        "description": "Creates an entitlement for a customer. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: * Required request parameters are missing or invalid. * There is already a customer entitlement for a SKU from the same product family. * INVALID_VALUE: Make sure the OfferId is valid. If it is, contact Google Channel support for further troubleshooting. * NOT_FOUND: The customer or offer resource was not found. * ALREADY_EXISTS: * The SKU was already purchased for the customer. * The customer's primary email already exists. Retry after changing the customer's primary contact email. * CONDITION_NOT_MET or FAILED_PRECONDITION: * The domain required for purchasing a SKU has not been verified. * A pre-requisite SKU required to purchase an Add-On SKU is missing. For example, Google Workspace Business Starter is required to purchase Vault or Drive. * (Developer accounts only) Reseller and resold domain must meet the following naming requirements: * Domain names must start with goog-test. * Domain names must include the reseller domain. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.get": {
        "description": "Returns the requested Entitlement resource. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: The customer entitlement was not found. Return value: The requested Entitlement resource.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements/{entitlementsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.list": {
        "description": "Lists Entitlements belonging to a customer. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. Return value: A list of the customer's Entitlements.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.lookupOffer": {
        "description": "Returns the requested Offer resource. Possible error codes: * PERMISSION_DENIED: The entitlement doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: Entitlement or offer was not found. Return value: The Offer resource.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements/{entitlementsId}:lookupOffer",
        "httpMethod": "GET",
        "method": "lookupOffer",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.startPaidService": {
        "description": "Starts paid service for a trial entitlement. Starts paid service for a trial entitlement immediately. This method is only applicable if a plan is set up for a trial entitlement but has some trial days remaining. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: Entitlement resource not found. * FAILED_PRECONDITION/NOT_IN_TRIAL: This method only works for entitlement on trial plans. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements/{entitlementsId}:startPaidService",
        "httpMethod": "POST",
        "method": "startPaidService",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.entitlements.suspend": {
        "description": "Suspends a previously fulfilled entitlement. An entitlement suspension is a long-running operation. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: Entitlement resource not found. * NOT_ACTIVE: Entitlement is not active. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}/entitlements/{entitlementsId}:suspend",
        "httpMethod": "POST",
        "method": "suspend",
        "resourceType": "entitlements",
        "resourceTypePath": "//accounts/customers",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.get": {
        "description": "Returns the requested Customer resource. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: The customer resource doesn't exist. Usually the result of an invalid name parameter. Return value: The Customer resource.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.import": {
        "description": "Imports a Customer from the Cloud Identity associated with the provided Cloud Identity ID or domain before a TransferEntitlements call. If a linked Customer already exists and overwrite_if_exists is true, it will update that Customer's data. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * NOT_FOUND: Cloud Identity doesn't exist or was deleted. * INVALID_ARGUMENT: Required parameters are missing, or the auth_token is expired or invalid. * ALREADY_EXISTS: A customer already exists and has conflicting critical fields. Requires an overwrite. Return value: The Customer.",
        "flatPath": "v1/accounts/{accountsId}/customers:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.list": {
        "description": "List Customers. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. Return value: List of Customers, or an empty list if there are no customers.",
        "flatPath": "v1/accounts/{accountsId}/customers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.listPurchasableOffers": {
        "description": "Lists the following: * Offers that you can purchase for a customer. * Offers that you can change for an entitlement. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller * INVALID_ARGUMENT: Required request parameters are missing or invalid.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}:listPurchasableOffers",
        "httpMethod": "GET",
        "method": "listPurchasableOffers",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.listPurchasableSkus": {
        "description": "Lists the following: * SKUs that you can purchase for a customer * SKUs that you can upgrade or downgrade for an entitlement. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}:listPurchasableSkus",
        "httpMethod": "GET",
        "method": "listPurchasableSkus",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.patch": {
        "description": "Updates an existing Customer resource for the reseller or distributor. Possible error codes: * PERMISSION_DENIED: The reseller account making the request is different from the reseller account in the API request. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: No Customer resource found for the name in the request. Return value: The updated Customer resource.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.provisionCloudIdentity": {
        "description": "Creates a Cloud Identity for the given customer using the customer's information, or the information provided here. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: The customer was not found. * ALREADY_EXISTS: The customer's primary email already exists. Retry after changing the customer's primary contact email. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The Operation metadata contains an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}:provisionCloudIdentity",
        "httpMethod": "POST",
        "method": "provisionCloudIdentity",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.transferEntitlements": {
        "description": "Transfers customer entitlements to new reseller. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: The customer or offer resource was not found. * ALREADY_EXISTS: The SKU was already transferred for the customer. * CONDITION_NOT_MET or FAILED_PRECONDITION: * The SKU requires domain verification to transfer, but the domain is not verified. * An Add-On SKU (example, Vault or Drive) is missing the pre-requisite SKU (example, G Suite Basic). * (Developer accounts only) Reseller and resold domain must meet the following naming requirements: * Domain names must start with goog-test. * Domain names must include the reseller domain. * Specify all transferring entitlements. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}:transferEntitlements",
        "httpMethod": "POST",
        "method": "transferEntitlements",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.customers.transferEntitlementsToGoogle": {
        "description": "Transfers customer entitlements from their current reseller to Google. Possible error codes: * PERMISSION_DENIED: The customer doesn't belong to the reseller. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: The customer or offer resource was not found. * ALREADY_EXISTS: The SKU was already transferred for the customer. * CONDITION_NOT_MET or FAILED_PRECONDITION: * The SKU requires domain verification to transfer, but the domain is not verified. * An Add-On SKU (example, Vault or Drive) is missing the pre-requisite SKU (example, G Suite Basic). * (Developer accounts only) Reseller and resold domain must meet the following naming requirements: * Domain names must start with goog-test. * Domain names must include the reseller domain. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The ID of a long-running operation. To get the results of the operation, call the GetOperation method of CloudChannelOperationsService. The response will contain google.protobuf.Empty on success. The Operation metadata will contain an instance of OperationMetadata.",
        "flatPath": "v1/accounts/{accountsId}/customers/{customersId}:transferEntitlementsToGoogle",
        "httpMethod": "POST",
        "method": "transferEntitlementsToGoogle",
        "resourceType": "customers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.listSubscribers": {
        "description": "Lists service accounts with subscriber privileges on the Cloud Pub/Sub topic created for this Channel Services account. Possible error codes: * PERMISSION_DENIED: The reseller account making the request and the provided reseller account are different, or the impersonated user is not a super admin. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: The topic resource doesn't exist. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: A list of service email addresses.",
        "flatPath": "v1/accounts/{accountsId}:listSubscribers",
        "httpMethod": "GET",
        "method": "listSubscribers",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.listTransferableOffers": {
        "description": "List TransferableOffers of a customer based on Cloud Identity ID or Customer Name in the request. Use this method when a reseller gets the entitlement information of an unowned customer. The reseller should provide the customer's Cloud Identity ID or Customer Name. Possible error codes: * PERMISSION_DENIED: * The customer doesn't belong to the reseller and has no auth token. * The supplied auth token is invalid. * The reseller account making the request is different from the reseller account in the query. * INVALID_ARGUMENT: Required request parameters are missing or invalid. Return value: List of TransferableOffer for the given customer and SKU.",
        "flatPath": "v1/accounts/{accountsId}:listTransferableOffers",
        "httpMethod": "POST",
        "method": "listTransferableOffers",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.listTransferableSkus": {
        "description": "List TransferableSkus of a customer based on the Cloud Identity ID or Customer Name in the request. Use this method to list the entitlements information of an unowned customer. You should provide the customer's Cloud Identity ID or Customer Name. Possible error codes: * PERMISSION_DENIED: * The customer doesn't belong to the reseller and has no auth token. * The supplied auth token is invalid. * The reseller account making the request is different from the reseller account in the query. * INVALID_ARGUMENT: Required request parameters are missing or invalid. Return value: A list of the customer's TransferableSku.",
        "flatPath": "v1/accounts/{accountsId}:listTransferableSkus",
        "httpMethod": "POST",
        "method": "listTransferableSkus",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.offers.list": {
        "description": "Lists the Offers the reseller can sell. Possible error codes: * INVALID_ARGUMENT: Required request parameters are missing or invalid.",
        "flatPath": "v1/accounts/{accountsId}/offers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "offers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.register": {
        "description": "Registers a service account with subscriber privileges on the Cloud Pub/Sub topic for this Channel Services account. After you create a subscriber, you get the events through SubscriberEvent Possible error codes: * PERMISSION_DENIED: The reseller account making the request and the provided reseller account are different, or the impersonated user is not a super admin. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The topic name with the registered service email address.",
        "flatPath": "v1/accounts/{accountsId}:register",
        "httpMethod": "POST",
        "method": "register",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.accounts.unregister": {
        "description": "Unregisters a service account with subscriber privileges on the Cloud Pub/Sub topic created for this Channel Services account. If there are no service accounts left with subscriber privileges, this deletes the topic. You can call ListSubscribers to check for these accounts. Possible error codes: * PERMISSION_DENIED: The reseller account making the request and the provided reseller account are different, or the impersonated user is not a super admin. * INVALID_ARGUMENT: Required request parameters are missing or invalid. * NOT_FOUND: The topic resource doesn't exist. * INTERNAL: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. * UNKNOWN: Any non-user error related to a technical issue in the backend. Contact Cloud Channel support. Return value: The topic name that unregistered the service email address. Returns a success response if the service email address wasn't registered with the topic.",
        "flatPath": "v1/accounts/{accountsId}:unregister",
        "httpMethod": "POST",
        "method": "unregister",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.products.list": {
        "description": "Lists the Products the reseller is authorized to sell. Possible error codes: * INVALID_ARGUMENT: Required request parameters are missing or invalid.",
        "flatPath": "v1/products",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudchannel.products.skus.list": {
        "description": "Lists the SKUs for a product the reseller is authorized to sell. Possible error codes: * INVALID_ARGUMENT: Required request parameters are missing or invalid.",
        "flatPath": "v1/products/{productsId}/skus",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "skus",
        "resourceTypePath": "//products",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Channel API"
  },
  "clouddebugger": {
    "description": "Examines the call stack and variables of a running application without stopping or slowing it down.",
    "methods": {
      "clouddebugger.controller.debuggees.breakpoints.list": {
        "description": "Returns the list of all active breakpoints for the debuggee. The breakpoint specification (`location`, `condition`, and `expressions` fields) is semantically immutable, although the field values may change. For example, an agent may update the location line number to reflect the actual line where the breakpoint was set, but this doesn't change the breakpoint semantics. This means that an agent does not need to check if a breakpoint has changed when it encounters the same breakpoint on a successive call. Moreover, an agent should remember the breakpoints that are completed until the controller removes them from the active list to avoid setting those breakpoints again.",
        "flatPath": "v2/controller/debuggees/{debuggeeId}/breakpoints",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "breakpoints",
        "resourceTypePath": "//controller/debuggees",
        "versions": [
          "v2"
        ]
      },
      "clouddebugger.controller.debuggees.breakpoints.update": {
        "description": "Updates the breakpoint state or mutable fields. The entire Breakpoint message must be sent back to the controller service. Updates to active breakpoint fields are only allowed if the new value does not change the breakpoint specification. Updates to the `location`, `condition` and `expressions` fields should not alter the breakpoint semantics. These may only make changes such as canonicalizing a value or snapping the location to the correct line of code.",
        "flatPath": "v2/controller/debuggees/{debuggeeId}/breakpoints/{id}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "breakpoints",
        "resourceTypePath": "//controller/debuggees",
        "versions": [
          "v2"
        ]
      },
      "clouddebugger.controller.debuggees.register": {
        "description": "Registers the debuggee with the controller service. All agents attached to the same application must call this method with exactly the same request content to get back the same stable `debuggee_id`. Agents should call this method again whenever `google.rpc.Code.NOT_FOUND` is returned from any controller method. This protocol allows the controller service to disable debuggees, recover from data loss, or change the `debuggee_id` format. Agents must handle `debuggee_id` value changing upon re-registration.",
        "flatPath": "v2/controller/debuggees/register",
        "httpMethod": "POST",
        "method": "register",
        "resourceType": "debuggees",
        "resourceTypePath": "//controller",
        "versions": [
          "v2"
        ]
      },
      "clouddebugger.debugger.debuggees.breakpoints.delete": {
        "description": "Deletes the breakpoint from the debuggee.",
        "flatPath": "v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "breakpoints",
        "resourceTypePath": "//debugger/debuggees",
        "versions": [
          "v2"
        ]
      },
      "clouddebugger.debugger.debuggees.breakpoints.get": {
        "description": "Gets breakpoint information.",
        "flatPath": "v2/debugger/debuggees/{debuggeeId}/breakpoints/{breakpointId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "breakpoints",
        "resourceTypePath": "//debugger/debuggees",
        "versions": [
          "v2"
        ]
      },
      "clouddebugger.debugger.debuggees.breakpoints.list": {
        "description": "Lists all breakpoints for the debuggee.",
        "flatPath": "v2/debugger/debuggees/{debuggeeId}/breakpoints",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "breakpoints",
        "resourceTypePath": "//debugger/debuggees",
        "versions": [
          "v2"
        ]
      },
      "clouddebugger.debugger.debuggees.breakpoints.set": {
        "description": "Sets the breakpoint to the debuggee.",
        "flatPath": "v2/debugger/debuggees/{debuggeeId}/breakpoints/set",
        "httpMethod": "POST",
        "method": "set",
        "resourceType": "breakpoints",
        "resourceTypePath": "//debugger/debuggees",
        "versions": [
          "v2"
        ]
      },
      "clouddebugger.debugger.debuggees.list": {
        "description": "Lists all the debuggees that the user has access to.",
        "flatPath": "v2/debugger/debuggees",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "debuggees",
        "resourceTypePath": "//debugger",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Cloud Debugger API"
  },
  "clouddeploy": {
    "description": "",
    "methods": {
      "clouddeploy.projects.locations.deliveryPipelines.create": {
        "description": "Creates a new DeliveryPipeline in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deliveryPipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.delete": {
        "description": "Deletes a single DeliveryPipeline.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deliveryPipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.get": {
        "description": "Gets details of a single DeliveryPipeline.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deliveryPipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "deliveryPipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.list": {
        "description": "Lists DeliveryPipelines in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deliveryPipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.patch": {
        "description": "Updates the parameters of a single DeliveryPipeline.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deliveryPipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.releases.create": {
        "description": "Creates a new Release in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}/releases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "releases",
        "resourceTypePath": "//projects/locations/deliveryPipelines",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.releases.get": {
        "description": "Gets details of a single Release.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}/releases/{releasesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "releases",
        "resourceTypePath": "//projects/locations/deliveryPipelines",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.releases.list": {
        "description": "Lists Releases in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}/releases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "releases",
        "resourceTypePath": "//projects/locations/deliveryPipelines",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.releases.rollouts.approve": {
        "description": "Approves a Rollout.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}/releases/{releasesId}/rollouts/{rolloutsId}:approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "rollouts",
        "resourceTypePath": "//projects/locations/deliveryPipelines/releases",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.releases.rollouts.create": {
        "description": "Creates a new Rollout in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}/releases/{releasesId}/rollouts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "rollouts",
        "resourceTypePath": "//projects/locations/deliveryPipelines/releases",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.releases.rollouts.get": {
        "description": "Gets details of a single Rollout.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}/releases/{releasesId}/rollouts/{rolloutsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "rollouts",
        "resourceTypePath": "//projects/locations/deliveryPipelines/releases",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.releases.rollouts.list": {
        "description": "Lists Rollouts in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}/releases/{releasesId}/rollouts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "rollouts",
        "resourceTypePath": "//projects/locations/deliveryPipelines/releases",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "deliveryPipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.deliveryPipelines.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/deliveryPipelines/{deliveryPipelinesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "deliveryPipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.getConfig": {
        "description": "Gets the configuration for a location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.targets.create": {
        "description": "Creates a new Target in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/targets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "targets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.targets.delete": {
        "description": "Deletes a single Target.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/targets/{targetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.targets.get": {
        "description": "Gets details of a single Target.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/targets/{targetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.targets.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/targets/{targetsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "targets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.targets.list": {
        "description": "Lists Targets in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/targets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.targets.patch": {
        "description": "Updates the parameters of a single Target.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/targets/{targetsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "targets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.targets.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/targets/{targetsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "targets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "clouddeploy.projects.locations.targets.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/targets/{targetsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "targets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Cloud Deploy API"
  },
  "clouderrorreporting": {
    "description": "Groups and counts similar errors from cloud services and applications, reports new errors, and provides access to error groups and their associated errors.",
    "methods": {
      "clouderrorreporting.projects.deleteEvents": {
        "description": "Deletes all error events of a given project.",
        "flatPath": "v1beta1/projects/{projectsId}/events",
        "httpMethod": "DELETE",
        "method": "deleteEvents",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "clouderrorreporting.projects.events.list": {
        "description": "Lists the specified events.",
        "flatPath": "v1beta1/projects/{projectsId}/events",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "events",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "clouderrorreporting.projects.events.report": {
        "description": "Report an individual error event and record the event to a log. This endpoint accepts **either** an OAuth token, **or** an [API key](https://support.google.com/cloud/answer/6158862) for authentication. To use an API key, append it to the URL as the value of a `key` parameter. For example: `POST https://clouderrorreporting.googleapis.com/v1beta1/{projectName}/events:report?key=123ABC456` **Note:** [Error Reporting] (https://cloud.google.com/error-reporting) is a global service built on Cloud Logging and doesn't analyze logs stored in regional log buckets or logs routed to other Google Cloud projects. For more information, see [Using Error Reporting with regionalized logs] (https://cloud.google.com/error-reporting/docs/regionalization).",
        "flatPath": "v1beta1/projects/{projectsId}/events:report",
        "httpMethod": "POST",
        "method": "report",
        "resourceType": "events",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "clouderrorreporting.projects.groupStats.list": {
        "description": "Lists the specified groups.",
        "flatPath": "v1beta1/projects/{projectsId}/groupStats",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "groupStats",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "clouderrorreporting.projects.groups.get": {
        "description": "Get the specified group.",
        "flatPath": "v1beta1/projects/{projectsId}/groups/{groupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "groups",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "clouderrorreporting.projects.groups.update": {
        "description": "Replace the data for the specified group. Fails if the group does not exist.",
        "flatPath": "v1beta1/projects/{projectsId}/groups/{groupsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "groups",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1beta1",
    "title": "Error Reporting API"
  },
  "cloudfunctions": {
    "description": "Manages lightweight user-provided functions executed in response to events.",
    "methods": {
      "cloudfunctions.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.call": {
        "description": "Synchronously invokes a deployed Cloud Function. To be used for testing purposes as very limited traffic is allowed. For more information on the actual limits, refer to [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions/{functionsId}:call",
        "httpMethod": "POST",
        "method": "call",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.create": {
        "description": "Creates a new function. If a function with the given name already exists in the specified project, the long running operation will return `ALREADY_EXISTS` error.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.delete": {
        "description": "Deletes a function with the given name from the specified project. If the given function is used by some trigger, the trigger will be updated to remove this function.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions/{functionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.generateDownloadUrl": {
        "description": "Returns a signed URL for downloading deployed function source code. The URL is only valid for a limited period and should be used within minutes after generation. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions/{functionsId}:generateDownloadUrl",
        "httpMethod": "POST",
        "method": "generateDownloadUrl",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.generateUploadUrl": {
        "description": "Returns a signed URL for uploading a function source code. For more information about the signed URL usage see: https://cloud.google.com/storage/docs/access-control/signed-urls. Once the function source code upload is complete, the used signed URL should be provided in CreateFunction or UpdateFunction request as a reference to the function source code. When uploading source code to the generated signed URL, please follow these restrictions: * Source file type should be a zip file. * Source file size should not exceed 100MB limit. * No credentials should be attached - the signed URLs provide access to the target bucket using internal service identity; if credentials were attached, the identity from the credentials would be used, but that identity does not have permissions to upload files to the URL. When making a HTTP PUT request, these two headers need to be specified: * `content-type: application/zip` * `x-goog-content-length-range: 0,104857600` And this header SHOULD NOT be specified: * `Authorization: Bearer YOUR_TOKEN`",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions:generateUploadUrl",
        "httpMethod": "POST",
        "method": "generateUploadUrl",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.get": {
        "description": "Returns a function with the given name from the requested project.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions/{functionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.getIamPolicy": {
        "description": "Gets the IAM access control policy for a function. Returns an empty policy if the function exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions/{functionsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.list": {
        "description": "Returns a list of functions that belong to the requested project.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.patch": {
        "description": "Updates existing function.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions/{functionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.setIamPolicy": {
        "description": "Sets the IAM access control policy on the specified function. Replaces any existing policy.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions/{functionsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.functions.testIamPermissions": {
        "description": "Tests the specified permissions against the IAM access control policy for a function. If the function does not exist, this will return an empty set of permissions, not a NOT_FOUND error.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/functions/{functionsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "functions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudfunctions.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Functions API"
  },
  "cloudidentity": {
    "description": "API for provisioning and managing identity resources.",
    "methods": {
      "cloudidentity.customers.userinvitations.cancel": {
        "description": "Cancels a UserInvitation that was already sent.",
        "flatPath": "v1beta1/customers/{customersId}/userinvitations/{userinvitationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "userinvitations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudidentity.customers.userinvitations.get": {
        "description": "Retrieves a UserInvitation resource. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.",
        "flatPath": "v1beta1/customers/{customersId}/userinvitations/{userinvitationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userinvitations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudidentity.customers.userinvitations.isInvitableUser": {
        "description": "Verifies whether a user account is eligible to receive a UserInvitation (is an unmanaged account). Eligibility is based on the following criteria: * the email address is a consumer account and it's the primary email address of the account, and * the domain of the email address matches an existing verified Google Workspace or Cloud Identity domain If both conditions are met, the user is eligible. **Note:** This method is not supported for Workspace Essentials customers.",
        "flatPath": "v1beta1/customers/{customersId}/userinvitations/{userinvitationsId}:isInvitableUser",
        "httpMethod": "GET",
        "method": "isInvitableUser",
        "resourceType": "userinvitations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudidentity.customers.userinvitations.list": {
        "description": "Retrieves a list of UserInvitation resources. **Note:** New consumer accounts with the customer's verified domain created within the previous 48 hours will not appear in the result. This delay also applies to newly-verified domains.",
        "flatPath": "v1beta1/customers/{customersId}/userinvitations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userinvitations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudidentity.customers.userinvitations.send": {
        "description": "Sends a UserInvitation to email. If the `UserInvitation` does not exist for this request and it is a valid request, the request creates a `UserInvitation`. **Note:** The `get` and `list` methods have a 48-hour delay where newly-created consumer accounts will not appear in the results. You can still send a `UserInvitation` to those accounts if you know the unmanaged email address and IsInvitableUser==True.",
        "flatPath": "v1beta1/customers/{customersId}/userinvitations/{userinvitationsId}:send",
        "httpMethod": "POST",
        "method": "send",
        "resourceType": "userinvitations",
        "resourceTypePath": "//customers",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudidentity.devices.cancelWipe": {
        "description": "Cancels an unfinished device wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.",
        "flatPath": "v1beta1/devices/{devicesId}:cancelWipe",
        "httpMethod": "POST",
        "method": "cancelWipe",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.create": {
        "description": "Creates a device. Only company-owned device may be created. **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium",
        "flatPath": "v1beta1/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.delete": {
        "description": "Deletes the specified device.",
        "flatPath": "v1beta1/devices/{devicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.approve": {
        "description": "Approves device to access user data.",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}:approve",
        "httpMethod": "POST",
        "method": "approve",
        "resourceType": "deviceUsers",
        "resourceTypePath": "//devices",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.block": {
        "description": "Blocks device from accessing user data",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}:block",
        "httpMethod": "POST",
        "method": "block",
        "resourceType": "deviceUsers",
        "resourceTypePath": "//devices",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.cancelWipe": {
        "description": "Cancels an unfinished user account wipe. This operation can be used to cancel device wipe in the gap between the wipe operation returning success and the device being wiped.",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}:cancelWipe",
        "httpMethod": "POST",
        "method": "cancelWipe",
        "resourceType": "deviceUsers",
        "resourceTypePath": "//devices",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.clientStates.get": {
        "description": "Gets the client state for the device user",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}/clientStates/{clientStatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clientStates",
        "resourceTypePath": "//devices/deviceUsers",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.clientStates.list": {
        "description": "Lists the client states for the given search query.",
        "flatPath": "v1/devices/{devicesId}/deviceUsers/{deviceUsersId}/clientStates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clientStates",
        "resourceTypePath": "//devices/deviceUsers",
        "versions": [
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.clientStates.patch": {
        "description": "Updates the client state for the device user **Note**: This method is available only to customers who have one of the following SKUs: Enterprise Standard, Enterprise Plus, Enterprise for Education, and Cloud Identity Premium",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}/clientStates/{clientStatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "clientStates",
        "resourceTypePath": "//devices/deviceUsers",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.delete": {
        "description": "Deletes the specified DeviceUser. This also revokes the user's access to device data.",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deviceUsers",
        "resourceTypePath": "//devices",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.get": {
        "description": "Retrieves the specified DeviceUser",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deviceUsers",
        "resourceTypePath": "//devices",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.list": {
        "description": "Lists/Searches DeviceUsers.",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deviceUsers",
        "resourceTypePath": "//devices",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.lookup": {
        "description": "Looks up resource names of the DeviceUsers associated with the caller's credentials, as well as the properties provided in the request. This method must be called with end-user credentials with the scope: https://www.googleapis.com/auth/cloud-identity.devices.lookup If multiple properties are provided, only DeviceUsers having all of these properties are considered as matches - i.e. the query behaves like an AND. Different platforms require different amounts of information from the caller to ensure that the DeviceUser is uniquely identified. - iOS: No properties need to be passed, the caller's credentials are sufficient to identify the corresponding DeviceUser. - Android: Specifying the 'android_id' field is required. - Desktop: Specifying the 'raw_resource_id' field is required.",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers:lookup",
        "httpMethod": "GET",
        "method": "lookup",
        "resourceType": "deviceUsers",
        "resourceTypePath": "//devices",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.deviceUsers.wipe": {
        "description": "Wipes the user's account on a device.",
        "flatPath": "v1beta1/devices/{devicesId}/deviceUsers/{deviceUsersId}:wipe",
        "httpMethod": "POST",
        "method": "wipe",
        "resourceType": "deviceUsers",
        "resourceTypePath": "//devices",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.get": {
        "description": "Retrieves the specified device.",
        "flatPath": "v1beta1/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.list": {
        "description": "Lists/Searches devices.",
        "flatPath": "v1beta1/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.devices.wipe": {
        "description": "Wipes all data on the specified device.",
        "flatPath": "v1beta1/devices/{devicesId}:wipe",
        "httpMethod": "POST",
        "method": "wipe",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.create": {
        "description": "Creates a `Group`.",
        "flatPath": "v1beta1/groups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.delete": {
        "description": "Deletes a `Group`.",
        "flatPath": "v1beta1/groups/{groupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.get": {
        "description": "Retrieves a `Group`.",
        "flatPath": "v1beta1/groups/{groupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.getSecuritySettings": {
        "description": "Get Security Settings",
        "flatPath": "v1beta1/groups/{groupsId}/securitySettings",
        "httpMethod": "GET",
        "method": "getSecuritySettings",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudidentity.groups.list": {
        "description": "Lists the `Group` resources under a customer or namespace.",
        "flatPath": "v1beta1/groups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.lookup": {
        "description": "Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Group` by its `EntityKey`.",
        "flatPath": "v1beta1/groups:lookup",
        "httpMethod": "GET",
        "method": "lookup",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.checkTransitiveMembership": {
        "description": "Check a potential member for membership in a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A member has membership to a group as long as there is a single viewable transitive membership between the group and the member. The actor must have view permissions to at least one transitive membership between the member and group.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships:checkTransitiveMembership",
        "httpMethod": "GET",
        "method": "checkTransitiveMembership",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.create": {
        "description": "Creates a `Membership`.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.delete": {
        "description": "Deletes a `Membership`.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.get": {
        "description": "Retrieves a `Membership`.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.getMembershipGraph": {
        "description": "Get a membership graph of just a member or both a member and a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. Given a member, the response will contain all membership paths from the member. Given both a group and a member, the response will contain all membership paths between the group and the member.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships:getMembershipGraph",
        "httpMethod": "GET",
        "method": "getMembershipGraph",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.list": {
        "description": "Lists the `Membership`s within a `Group`.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.lookup": {
        "description": "Looks up the [resource name](https://cloud.google.com/apis/design/resource_names) of a `Membership` by its `EntityKey`.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships:lookup",
        "httpMethod": "GET",
        "method": "lookup",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.modifyMembershipRoles": {
        "description": "Modifies the `MembershipRole`s of a `Membership`.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships/{membershipsId}:modifyMembershipRoles",
        "httpMethod": "POST",
        "method": "modifyMembershipRoles",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.searchTransitiveGroups": {
        "description": "Search transitive groups of a member. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A transitive group is any group that has a direct or indirect membership to the member. Actor must have view permissions all transitive groups.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships:searchTransitiveGroups",
        "httpMethod": "GET",
        "method": "searchTransitiveGroups",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.memberships.searchTransitiveMemberships": {
        "description": "Search transitive memberships of a group. **Note:** This feature is only available to Google Workspace Enterprise Standard, Enterprise Plus, and Enterprise for Education; and Cloud Identity Premium accounts. A transitive membership is any direct or indirect membership of a group. Actor must have view permissions to all transitive memberships.",
        "flatPath": "v1beta1/groups/{groupsId}/memberships:searchTransitiveMemberships",
        "httpMethod": "GET",
        "method": "searchTransitiveMemberships",
        "resourceType": "memberships",
        "resourceTypePath": "//groups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.patch": {
        "description": "Updates a `Group`.",
        "flatPath": "v1beta1/groups/{groupsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.search": {
        "description": "Searches for `Group` resources matching a specified query.",
        "flatPath": "v1beta1/groups:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudidentity.groups.updateSecuritySettings": {
        "description": "Update Security Settings",
        "flatPath": "v1beta1/groups/{groupsId}/securitySettings",
        "httpMethod": "PATCH",
        "method": "updateSecuritySettings",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Identity API"
  },
  "cloudiot": {
    "description": "Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.",
    "methods": {
      "cloudiot.projects.locations.registries.bindDeviceToGateway": {
        "description": "Associates the device with the gateway.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}:bindDeviceToGateway",
        "httpMethod": "POST",
        "method": "bindDeviceToGateway",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.create": {
        "description": "Creates a device registry that contains devices.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.delete": {
        "description": "Deletes a device registry configuration.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.devices.configVersions.list": {
        "description": "Lists the last few versions of the device configuration in descending order (i.e.: newest first).",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}/configVersions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "configVersions",
        "resourceTypePath": "//projects/locations/registries/devices",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.devices.create": {
        "description": "Creates a device in a device registry.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.devices.delete": {
        "description": "Deletes a device.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "devices",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.devices.get": {
        "description": "Gets details about a device.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.devices.list": {
        "description": "List devices in a device registry.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.devices.modifyCloudToDeviceConfig": {
        "description": "Modifies the configuration for the device, which is eventually sent from the Cloud IoT Core servers. Returns the modified configuration version and its metadata.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}:modifyCloudToDeviceConfig",
        "httpMethod": "POST",
        "method": "modifyCloudToDeviceConfig",
        "resourceType": "devices",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.devices.patch": {
        "description": "Updates a device.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "devices",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.devices.sendCommandToDevice": {
        "description": "Sends a command to the specified device. In order for a device to be able to receive commands, it must: 1) be connected to Cloud IoT Core using the MQTT protocol, and 2) be subscribed to the group of MQTT topics specified by /devices/{device-id}/commands/#. This subscription will receive commands at the top-level topic /devices/{device-id}/commands as well as commands for subfolders, like /devices/{device-id}/commands/subfolder. Note that subscribing to specific subfolders is not supported. If the command could not be delivered to the device, this method will return an error; in particular, if the device is not subscribed, this method will return FAILED_PRECONDITION. Otherwise, this method will return OK. If the subscription is QoS 1, at least once delivery will be guaranteed; for QoS 0, no acknowledgment will be expected from the device.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}:sendCommandToDevice",
        "httpMethod": "POST",
        "method": "sendCommandToDevice",
        "resourceType": "devices",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.devices.states.list": {
        "description": "Lists the last few versions of the device state in descending order (i.e.: newest first).",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/devices/{devicesId}/states",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "states",
        "resourceTypePath": "//projects/locations/registries/devices",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.get": {
        "description": "Gets a device registry configuration.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.groups.devices.list": {
        "description": "List devices in a device registry.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//projects/locations/registries/groups",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.groups.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.groups.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.groups.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}/groups/{groupsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations/registries",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.list": {
        "description": "Lists device registries.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.patch": {
        "description": "Updates a device registry configuration.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudiot.projects.locations.registries.unbindDeviceFromGateway": {
        "description": "Deletes the association between the device and the gateway.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/registries/{registriesId}:unbindDeviceFromGateway",
        "httpMethod": "POST",
        "method": "unbindDeviceFromGateway",
        "resourceType": "registries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud IoT API"
  },
  "cloudkms": {
    "description": "Manages keys and performs cryptographic operations in a central cloud service, for direct use by other cloud resources and applications.",
    "methods": {
      "cloudkms.projects.locations.generateRandomBytes": {
        "description": "Generate random bytes using the Cloud KMS randomness source in the provided location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}:generateRandomBytes",
        "httpMethod": "POST",
        "method": "generateRandomBytes",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.create": {
        "description": "Create a new KeyRing in a given Project and Location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "keyRings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.create": {
        "description": "Create a new CryptoKey within a KeyRing. CryptoKey.purpose and CryptoKey.version_template.algorithm are required.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.asymmetricDecrypt": {
        "description": "Decrypts data that was encrypted with a public key retrieved from GetPublicKey corresponding to a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_DECRYPT.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:asymmetricDecrypt",
        "httpMethod": "POST",
        "method": "asymmetricDecrypt",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.asymmetricSign": {
        "description": "Signs data using a CryptoKeyVersion with CryptoKey.purpose ASYMMETRIC_SIGN, producing a signature that can be verified with the public key retrieved from GetPublicKey.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:asymmetricSign",
        "httpMethod": "POST",
        "method": "asymmetricSign",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.create": {
        "description": "Create a new CryptoKeyVersion in a CryptoKey. The server will assign the next sequential id. If unset, state will be set to ENABLED.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.destroy": {
        "description": "Schedule a CryptoKeyVersion for destruction. Upon calling this method, CryptoKeyVersion.state will be set to DESTROY_SCHEDULED, and destroy_time will be set to the time destroy_scheduled_duration in the future. At that time, the state will automatically change to DESTROYED, and the key material will be irrevocably destroyed. Before the destroy_time is reached, RestoreCryptoKeyVersion may be called to reverse the process.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:destroy",
        "httpMethod": "POST",
        "method": "destroy",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.get": {
        "description": "Returns metadata for a given CryptoKeyVersion.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.getPublicKey": {
        "description": "Returns the public key for the given CryptoKeyVersion. The CryptoKey.purpose must be ASYMMETRIC_SIGN or ASYMMETRIC_DECRYPT.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}/publicKey",
        "httpMethod": "GET",
        "method": "getPublicKey",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.import": {
        "description": "Import wrapped key material into a CryptoKeyVersion. All requests must specify a CryptoKey. If a CryptoKeyVersion is additionally specified in the request, key material will be reimported into that version. Otherwise, a new version will be created, and will be assigned the next sequential id within the CryptoKey.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.list": {
        "description": "Lists CryptoKeyVersions.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.macSign": {
        "description": "Signs data using a CryptoKeyVersion with CryptoKey.purpose MAC, producing a tag that can be verified by another source with the same key.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:macSign",
        "httpMethod": "POST",
        "method": "macSign",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.macVerify": {
        "description": "Verifies MAC tag using a CryptoKeyVersion with CryptoKey.purpose MAC, and returns a response that indicates whether or not the verification was successful.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:macVerify",
        "httpMethod": "POST",
        "method": "macVerify",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.patch": {
        "description": "Update a CryptoKeyVersion's metadata. state may be changed between ENABLED and DISABLED using this method. See DestroyCryptoKeyVersion and RestoreCryptoKeyVersion to move between other states.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.cryptoKeyVersions.restore": {
        "description": "Restore a CryptoKeyVersion in the DESTROY_SCHEDULED state. Upon restoration of the CryptoKeyVersion, state will be set to DISABLED, and destroy_time will be cleared.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}/cryptoKeyVersions/{cryptoKeyVersionsId}:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "cryptoKeyVersions",
        "resourceTypePath": "//projects/locations/keyRings/cryptoKeys",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.decrypt": {
        "description": "Decrypts data that was protected by Encrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:decrypt",
        "httpMethod": "POST",
        "method": "decrypt",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.encrypt": {
        "description": "Encrypts data, so that it can only be recovered by a call to Decrypt. The CryptoKey.purpose must be ENCRYPT_DECRYPT.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:encrypt",
        "httpMethod": "POST",
        "method": "encrypt",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.get": {
        "description": "Returns metadata for a given CryptoKey, as well as its primary CryptoKeyVersion.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.list": {
        "description": "Lists CryptoKeys.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.patch": {
        "description": "Update a CryptoKey.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.cryptoKeys.updatePrimaryVersion": {
        "description": "Update the version of a CryptoKey that will be used in Encrypt. Returns an error if called on a key whose purpose is not ENCRYPT_DECRYPT.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/cryptoKeys/{cryptoKeysId}:updatePrimaryVersion",
        "httpMethod": "POST",
        "method": "updatePrimaryVersion",
        "resourceType": "cryptoKeys",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.get": {
        "description": "Returns metadata for a given KeyRing.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "keyRings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "keyRings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.importJobs.create": {
        "description": "Create a new ImportJob within a KeyRing. ImportJob.import_method is required.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "importJobs",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.importJobs.get": {
        "description": "Returns metadata for a given ImportJob.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs/{importJobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "importJobs",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.importJobs.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs/{importJobsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "importJobs",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.importJobs.list": {
        "description": "Lists ImportJobs.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "importJobs",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.importJobs.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs/{importJobsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "importJobs",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.importJobs.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}/importJobs/{importJobsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "importJobs",
        "resourceTypePath": "//projects/locations/keyRings",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.list": {
        "description": "Lists KeyRings.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "keyRings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "keyRings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.keyRings.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/keyRings/{keyRingsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "keyRings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "cloudkms.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Key Management Service (KMS) API"
  },
  "cloudprofiler": {
    "description": "Manages continuous profiling information.",
    "methods": {
      "cloudprofiler.projects.profiles.create": {
        "description": "CreateProfile creates a new profile resource in the online mode. The server ensures that the new profiles are created at a constant rate per deployment, so the creation request may hang for some time until the next profile session is available. The request may fail with ABORTED error if the creation is not available within ~1m, the response will indicate the duration of the backoff the client should take before attempting creating a profile again. The backoff duration is returned in google.rpc.RetryInfo extension on the response status. To a gRPC client, the extension will be return as a binary-serialized proto in the trailing metadata item named \"google.rpc.retryinfo-bin\". ",
        "flatPath": "v2/projects/{projectsId}/profiles",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "profiles",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "cloudprofiler.projects.profiles.createOffline": {
        "description": "CreateOfflineProfile creates a new profile resource in the offline mode. The client provides the profile to create along with the profile bytes, the server records it.",
        "flatPath": "v2/projects/{projectsId}/profiles:createOffline",
        "httpMethod": "POST",
        "method": "createOffline",
        "resourceType": "profiles",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "cloudprofiler.projects.profiles.patch": {
        "description": "UpdateProfile updates the profile bytes and labels on the profile resource created in the online mode. Updating the bytes for profiles created in the offline mode is currently not supported: the profile content must be provided at the time of the profile creation.",
        "flatPath": "v2/projects/{projectsId}/profiles/{profilesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "profiles",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Stackdriver Profiler API"
  },
  "cloudresourcemanager": {
    "description": "Creates, reads, and updates metadata for Google Cloud Platform resource containers.",
    "methods": {
      "cloudresourcemanager.folders.clearOrgPolicy": {
        "description": "Clears a `Policy` from a resource.",
        "flatPath": "v1/folders/{foldersId}:clearOrgPolicy",
        "httpMethod": "POST",
        "method": "clearOrgPolicy",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.folders.create": {
        "description": "Creates a Folder in the resource hierarchy. Returns an Operation which can be used to track the progress of the folder creation workflow. Upon success the Operation.response field will be populated with the created Folder. In order to succeed, the addition of this new Folder must not violate the Folder naming, height or fanout constraints. + The Folder's display_name must be distinct from all other Folders that share its parent. + The addition of the Folder must not cause the active Folder hierarchy to exceed a height of 10. Note, the full active + deleted Folder hierarchy is allowed to reach a height of 20; this provides additional headroom when moving folders that contain deleted folders. + The addition of the Folder must not cause the total number of Folders under its parent to exceed 300. If the operation fails due to a folder constraint violation, some errors may be returned by the CreateFolder request, with status code FAILED_PRECONDITION and an error description. Other folder constraint violations will be communicated in the Operation, with the specific PreconditionFailure returned via the details list in the Operation.error field. The caller must have `resourcemanager.folders.create` permission on the identified parent.",
        "flatPath": "v2/folders",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.delete": {
        "description": "Requests deletion of a Folder. The Folder is moved into the DELETE_REQUESTED state immediately, and is deleted approximately 30 days later. This method may only be called on an empty Folder in the ACTIVE state, where a Folder is empty if it doesn't contain any Folders or Projects in the ACTIVE state. The caller must have `resourcemanager.folders.delete` permission on the identified folder.",
        "flatPath": "v2/folders/{foldersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.get": {
        "description": "Retrieves a Folder identified by the supplied resource name. Valid Folder resource names have the format `folders/{folder_id}` (for example, `folders/1234`). The caller must have `resourcemanager.folders.get` permission on the identified folder.",
        "flatPath": "v2/folders/{foldersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.getEffectiveOrgPolicy": {
        "description": "Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.",
        "flatPath": "v1/folders/{foldersId}:getEffectiveOrgPolicy",
        "httpMethod": "POST",
        "method": "getEffectiveOrgPolicy",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.folders.getIamPolicy": {
        "description": "Gets the access control policy for a Folder. The returned policy may be empty if no such policy or resource exists. The `resource` field should be the Folder's resource name, e.g. \"folders/1234\". The caller must have `resourcemanager.folders.getIamPolicy` permission on the identified folder.",
        "flatPath": "v2/folders/{foldersId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.getOrgPolicy": {
        "description": "Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.",
        "flatPath": "v1/folders/{foldersId}:getOrgPolicy",
        "httpMethod": "POST",
        "method": "getOrgPolicy",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.folders.list": {
        "description": "Lists the Folders that are direct descendants of supplied parent resource. List provides a strongly consistent view of the Folders underneath the specified parent resource. List returns Folders sorted based upon the (ascending) lexical ordering of their display_name. The caller must have `resourcemanager.folders.list` permission on the identified parent.",
        "flatPath": "v2/folders",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.listAvailableOrgPolicyConstraints": {
        "description": "Lists `Constraints` that could be applied on the specified resource.",
        "flatPath": "v1/folders/{foldersId}:listAvailableOrgPolicyConstraints",
        "httpMethod": "POST",
        "method": "listAvailableOrgPolicyConstraints",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.folders.listOrgPolicies": {
        "description": "Lists all the `Policies` set for a particular resource.",
        "flatPath": "v1/folders/{foldersId}:listOrgPolicies",
        "httpMethod": "POST",
        "method": "listOrgPolicies",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.folders.move": {
        "description": "Moves a Folder under a new resource parent. Returns an Operation which can be used to track the progress of the folder move workflow. Upon success the Operation.response field will be populated with the moved Folder. Upon failure, a FolderOperationError categorizing the failure cause will be returned - if the failure occurs synchronously then the FolderOperationError will be returned via the Status.details field and if it occurs asynchronously then the FolderOperation will be returned via the Operation.error field. In addition, the Operation.metadata field will be populated with a FolderOperation message as an aid to stateless clients. Folder moves will be rejected if they violate either the naming, height or fanout constraints described in the CreateFolder documentation. The caller must have `resourcemanager.folders.move` permission on the folder's current and proposed new parent.",
        "flatPath": "v2/folders/{foldersId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.patch": {
        "description": "Updates a Folder, changing its display_name. Changes to the folder display_name will be rejected if they violate either the display_name formatting rules or naming constraints described in the CreateFolder documentation. The Folder's display name must start and end with a letter or digit, may contain letters, digits, spaces, hyphens and underscores and can be between 3 and 30 characters. This is captured by the regular expression: `\\p{L}\\p{N}{1,28}[\\p{L}\\p{N}]`. The caller must have `resourcemanager.folders.update` permission on the identified folder. If the update fails due to the unique name constraint then a PreconditionFailure explaining this violation will be returned in the Status.details field.",
        "flatPath": "v2/folders/{foldersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.search": {
        "description": "Search for folders that match specific filter criteria. Search provides an eventually consistent view of the folders a user has access to which meet the specified filter criteria. This will only return folders on which the caller has the permission `resourcemanager.folders.get`.",
        "flatPath": "v2/folders:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.setIamPolicy": {
        "description": "Sets the access control policy on a Folder, replacing any existing policy. The `resource` field should be the Folder's resource name, e.g. \"folders/1234\". The caller must have `resourcemanager.folders.setIamPolicy` permission on the identified folder.",
        "flatPath": "v2/folders/{foldersId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.setOrgPolicy": {
        "description": "Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.",
        "flatPath": "v1/folders/{foldersId}:setOrgPolicy",
        "httpMethod": "POST",
        "method": "setOrgPolicy",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.folders.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified Folder. The `resource` field should be the Folder's resource name, e.g. \"folders/1234\". There are no permissions required for making this API call.",
        "flatPath": "v2/folders/{foldersId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.folders.undelete": {
        "description": "Cancels the deletion request for a Folder. This method may only be called on a Folder in the DELETE_REQUESTED state. In order to succeed, the Folder's parent must be in the ACTIVE state. In addition, reintroducing the folder into the tree must not violate folder naming, height and fanout constraints described in the CreateFolder documentation. The caller must have `resourcemanager.folders.undelete` permission on the identified folder.",
        "flatPath": "v2/folders/{foldersId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.liens.create": {
        "description": "Create a Lien which applies to the resource denoted by the `parent` field. Callers of this method will require permission on the `parent` resource. For example, applying to `projects/1234` requires permission `resourcemanager.projects.updateLiens`. NOTE: Some resources may limit the number of Liens which may be applied.",
        "flatPath": "v1/liens",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "liens",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.liens.delete": {
        "description": "Delete a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.updateLiens`.",
        "flatPath": "v1/liens/{liensId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "liens",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.liens.get": {
        "description": "Retrieve a Lien by `name`. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`",
        "flatPath": "v1/liens/{liensId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "liens",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.liens.list": {
        "description": "List all Liens applied to the `parent` resource. Callers of this method will require permission on the `parent` resource. For example, a Lien with a `parent` of `projects/1234` requires permission `resourcemanager.projects.get`.",
        "flatPath": "v1/liens",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "liens",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v1",
          "v2",
          "v3"
        ]
      },
      "cloudresourcemanager.organizations.clearOrgPolicy": {
        "description": "Clears a `Policy` from a resource.",
        "flatPath": "v1/organizations/{organizationsId}:clearOrgPolicy",
        "httpMethod": "POST",
        "method": "clearOrgPolicy",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.organizations.get": {
        "description": "Fetches an Organization resource identified by the specified resource name.",
        "flatPath": "v1beta1/organizations/{organizationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.organizations.getEffectiveOrgPolicy": {
        "description": "Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.",
        "flatPath": "v1/organizations/{organizationsId}:getEffectiveOrgPolicy",
        "httpMethod": "POST",
        "method": "getEffectiveOrgPolicy",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.organizations.getIamPolicy": {
        "description": "Gets the access control policy for an Organization resource. May be empty if no such policy or resource exists. The `resource` field should be the organization's resource name, e.g. \"organizations/123\".",
        "flatPath": "v1beta1/organizations/{organizationsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.organizations.getOrgPolicy": {
        "description": "Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.",
        "flatPath": "v1/organizations/{organizationsId}:getOrgPolicy",
        "httpMethod": "POST",
        "method": "getOrgPolicy",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.organizations.list": {
        "description": "Lists Organization resources that are visible to the user and satisfy the specified filter. This method returns Organizations in an unspecified order. New Organizations do not necessarily appear at the end of the list.",
        "flatPath": "v1beta1/organizations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudresourcemanager.organizations.listAvailableOrgPolicyConstraints": {
        "description": "Lists `Constraints` that could be applied on the specified resource.",
        "flatPath": "v1/organizations/{organizationsId}:listAvailableOrgPolicyConstraints",
        "httpMethod": "POST",
        "method": "listAvailableOrgPolicyConstraints",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.organizations.listOrgPolicies": {
        "description": "Lists all the `Policies` set for a particular resource.",
        "flatPath": "v1/organizations/{organizationsId}:listOrgPolicies",
        "httpMethod": "POST",
        "method": "listOrgPolicies",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.organizations.search": {
        "description": "Searches Organization resources that are visible to the user and satisfy the specified filter. This method returns Organizations in an unspecified order. New Organizations do not necessarily appear at the end of the results. Search will only return organizations on which the user has the permission `resourcemanager.organizations.get`",
        "flatPath": "v1/organizations:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.organizations.setIamPolicy": {
        "description": "Sets the access control policy on an Organization resource. Replaces any existing policy. The `resource` field should be the organization's resource name, e.g. \"organizations/123\".",
        "flatPath": "v1beta1/organizations/{organizationsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.organizations.setOrgPolicy": {
        "description": "Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.",
        "flatPath": "v1/organizations/{organizationsId}:setOrgPolicy",
        "httpMethod": "POST",
        "method": "setOrgPolicy",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.organizations.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified Organization. The `resource` field should be the organization's resource name, e.g. \"organizations/123\".",
        "flatPath": "v1beta1/organizations/{organizationsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.organizations.update": {
        "description": "Updates an Organization resource identified by the specified resource name.",
        "flatPath": "v1beta1/organizations/{organizationsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "cloudresourcemanager.projects.clearOrgPolicy": {
        "description": "Clears a `Policy` from a resource.",
        "flatPath": "v1/projects/{projectsId}:clearOrgPolicy",
        "httpMethod": "POST",
        "method": "clearOrgPolicy",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.projects.create": {
        "description": "Creates a Project resource. Initially, the Project resource is owned by its creator exclusively. The creator can later grant permission to others to read or update the Project. Several APIs are activated automatically for the Project, including Google Cloud Storage. The parent is identified by a specified ResourceId, which must include both an ID and a type, such as project, folder, or organization. This method does not associate the new project with a billing account. You can set or update the billing account associated with a project using the [`projects.updateBillingInfo`] (/billing/reference/rest/v1/projects/updateBillingInfo) method.",
        "flatPath": "v1beta1/projects",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.projects.delete": {
        "description": "Marks the Project identified by the specified `project_id` (for example, `my-project-123`) for deletion. This method will only affect the Project if it has a lifecycle state of ACTIVE. This method changes the Project's lifecycle state from ACTIVE to DELETE_REQUESTED. The deletion starts at an unspecified time, at which point the project is no longer accessible. Until the deletion completes, you can check the lifecycle state checked by retrieving the Project with GetProject, and the Project remains visible to ListProjects. However, you cannot update the project. After the deletion completes, the Project is not retrievable by the GetProject and ListProjects methods. The caller must have delete permissions for this Project.",
        "flatPath": "v1beta1/projects/{projectId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.projects.get": {
        "description": "Retrieves the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have read permissions for this Project.",
        "flatPath": "v1beta1/projects/{projectId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.projects.getAncestry": {
        "description": "Gets a list of ancestors in the resource hierarchy for the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have read permissions for this Project.",
        "flatPath": "v1beta1/projects/{projectId}:getAncestry",
        "httpMethod": "POST",
        "method": "getAncestry",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudresourcemanager.projects.getEffectiveOrgPolicy": {
        "description": "Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy. The returned `Policy` will not have an `etag`set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.",
        "flatPath": "v1/projects/{projectsId}:getEffectiveOrgPolicy",
        "httpMethod": "POST",
        "method": "getEffectiveOrgPolicy",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.projects.getIamPolicy": {
        "description": "Returns the IAM access control policy for the specified Project. Permission is denied if the policy or the resource does not exist. For additional information about resource structure and identification, see [Resource Names](/apis/design/resource_names).",
        "flatPath": "v1beta1/projects/{resource}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.projects.getOrgPolicy": {
        "description": "Gets a `Policy` on a resource. If no `Policy` is set on the resource, a `Policy` is returned with default values including `POLICY_TYPE_NOT_SET` for the `policy_type oneof`. The `etag` value can be used with `SetOrgPolicy()` to create or update a `Policy` during read-modify-write.",
        "flatPath": "v1/projects/{projectsId}:getOrgPolicy",
        "httpMethod": "POST",
        "method": "getOrgPolicy",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.projects.list": {
        "description": "Lists Projects that the caller has the `resourcemanager.projects.get` permission on and satisfy the specified filter. This method returns Projects in an unspecified order. This method is eventually consistent with project mutations; this means that a newly created project may not appear in the results or recent updates to an existing project may not be reflected in the results. To retrieve the latest state of a project, use the GetProject method. NOTE: If the request filter contains a `parent.type` and `parent.id` and the caller has the `resourcemanager.projects.list` permission on the parent, the results will be drawn from an alternate index which provides more consistent results. In future versions of this API, this List method will be split into List and Search to properly capture the behavioral difference.",
        "flatPath": "v1beta1/projects",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.projects.listAvailableOrgPolicyConstraints": {
        "description": "Lists `Constraints` that could be applied on the specified resource.",
        "flatPath": "v1/projects/{projectsId}:listAvailableOrgPolicyConstraints",
        "httpMethod": "POST",
        "method": "listAvailableOrgPolicyConstraints",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.projects.listOrgPolicies": {
        "description": "Lists all the `Policies` set for a particular resource.",
        "flatPath": "v1/projects/{projectsId}:listOrgPolicies",
        "httpMethod": "POST",
        "method": "listOrgPolicies",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.projects.move": {
        "description": "Move a project to another place in your resource hierarchy, under a new resource parent. Returns an operation which can be used to track the process of the project move workflow. Upon success, the `Operation.response` field will be populated with the moved project. The caller must have `resourcemanager.projects.move` permission on the project, on the project's current and proposed new parent. If project has no current parent, or it currently does not have an associated organization resource, you will also need the `resourcemanager.projects.setIamPolicy` permission in the project. ",
        "flatPath": "v3/projects/{projectsId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.projects.patch": {
        "description": "Updates the `display_name` and labels of the project identified by the specified `name` (for example, `projects/415104041262`). Deleting all labels requires an update mask for labels field. The caller must have `resourcemanager.projects.update` permission for this project.",
        "flatPath": "v3/projects/{projectsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.projects.search": {
        "description": "Search for projects that the caller has both `resourcemanager.projects.get` permission on, and also satisfy the specified query. This method returns projects in an unspecified order. This method is eventually consistent with project mutations; this means that a newly created project may not appear in the results or recent updates to an existing project may not be reflected in the results. To retrieve the latest state of a project, use the GetProject method.",
        "flatPath": "v3/projects:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.projects.setIamPolicy": {
        "description": "Sets the IAM access control policy for the specified Project. CAUTION: This method will replace the existing policy, and cannot be used to append additional IAM settings. NOTE: Removing service accounts from policies or changing their roles can render services completely inoperable. It is important to understand how the service account is being used before removing or updating its roles. The following constraints apply when using `setIamPolicy()`: + Project does not support `allUsers` and `allAuthenticatedUsers` as `members` in a `Binding` of a `Policy`. + The owner role can be granted to a `user`, `serviceAccount`, or a group that is part of an organization. For example, group@myownpersonaldomain.com could be added as an owner to a project in the myownpersonaldomain.com organization, but not the examplepetstore.com organization. + Service accounts can be made owners of a project directly without any restrictions. However, to be added as an owner, a user must be invited via Cloud Platform console and must accept the invitation. + A user cannot be granted the owner role using `setIamPolicy()`. The user must be granted the owner role using the Cloud Platform Console and must explicitly accept the invitation. + Invitations to grant the owner role cannot be sent using `setIamPolicy()`; they must be sent only using the Cloud Platform Console. + Membership changes that leave the project without any owners that have accepted the Terms of Service (ToS) will be rejected. + If the project is not part of an organization, there must be at least one owner who has accepted the Terms of Service (ToS) agreement in the policy. Calling `setIamPolicy()` to remove the last ToS-accepted owner from the policy will fail. This restriction also applies to legacy projects that no longer have owners who have accepted the ToS. Edits to IAM policies will be rejected until the lack of a ToS-accepting owner is rectified. Authorization requires the Google IAM permission `resourcemanager.projects.setIamPolicy` on the project",
        "flatPath": "v1beta1/projects/{resource}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.projects.setOrgPolicy": {
        "description": "Updates the specified `Policy` on the resource. Creates a new `Policy` for that `Constraint` on the resource if one does not exist. Not supplying an `etag` on the request `Policy` results in an unconditional write of the `Policy`.",
        "flatPath": "v1/projects/{projectsId}:setOrgPolicy",
        "httpMethod": "POST",
        "method": "setOrgPolicy",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudresourcemanager.projects.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified Project.",
        "flatPath": "v1beta1/projects/{resource}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.projects.undelete": {
        "description": "Restores the Project identified by the specified `project_id` (for example, `my-project-123`). You can only use this method for a Project that has a lifecycle state of DELETE_REQUESTED. After deletion starts, the Project cannot be restored. The caller must have undelete permissions for this Project.",
        "flatPath": "v1beta1/projects/{projectId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1",
          "v3"
        ]
      },
      "cloudresourcemanager.projects.update": {
        "description": "Updates the attributes of the Project identified by the specified `project_id` (for example, `my-project-123`). The caller must have modify permissions for this Project.",
        "flatPath": "v1beta1/projects/{projectId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudresourcemanager.tagBindings.create": {
        "description": "Creates a TagBinding between a TagValue and a cloud resource (currently project, folder, or organization).",
        "flatPath": "v3/tagBindings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tagBindings",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagBindings.delete": {
        "description": "Deletes a TagBinding.",
        "flatPath": "v3/tagBindings/{tagBindingsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tagBindings",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagBindings.list": {
        "description": "Lists the TagBindings for the given cloud resource, as specified with `parent`. NOTE: The `parent` field is expected to be a full resource name: https://cloud.google.com/apis/design/resource_names#full_resource_name",
        "flatPath": "v3/tagBindings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tagBindings",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagKeys.create": {
        "description": "Creates a new TagKey. If another request with the same parameters is sent while the original request is in process, the second request will receive an error. A maximum of 300 TagKeys can exist under a parent at any given time.",
        "flatPath": "v3/tagKeys",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tagKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagKeys.delete": {
        "description": "Deletes a TagKey. The TagKey cannot be deleted if it has any child TagValues.",
        "flatPath": "v3/tagKeys/{tagKeysId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tagKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagKeys.get": {
        "description": "Retrieves a TagKey. This method will return `PERMISSION_DENIED` if the key does not exist or the user does not have permission to view it.",
        "flatPath": "v3/tagKeys/{tagKeysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tagKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagKeys.getIamPolicy": {
        "description": "Gets the access control policy for a TagKey. The returned policy may be empty if no such policy or resource exists. The `resource` field should be the TagKey's resource name. For example, \"tagKeys/1234\". The caller must have `cloudresourcemanager.googleapis.com/tagKeys.getIamPolicy` permission on the specified TagKey.",
        "flatPath": "v3/tagKeys/{tagKeysId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "tagKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagKeys.list": {
        "description": "Lists all TagKeys for a parent resource.",
        "flatPath": "v3/tagKeys",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tagKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagKeys.patch": {
        "description": "Updates the attributes of the TagKey resource.",
        "flatPath": "v3/tagKeys/{tagKeysId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tagKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagKeys.setIamPolicy": {
        "description": "Sets the access control policy on a TagKey, replacing any existing policy. The `resource` field should be the TagKey's resource name. For example, \"tagKeys/1234\". The caller must have `resourcemanager.tagKeys.setIamPolicy` permission on the identified tagValue.",
        "flatPath": "v3/tagKeys/{tagKeysId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "tagKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagKeys.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified TagKey. The `resource` field should be the TagKey's resource name. For example, \"tagKeys/1234\". There are no permissions required for making this API call.",
        "flatPath": "v3/tagKeys/{tagKeysId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "tagKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagValues.create": {
        "description": "Creates a TagValue as a child of the specified TagKey. If a another request with the same parameters is sent while the original request is in process the second request will receive an error. A maximum of 300 TagValues can exist under a TagKey at any given time.",
        "flatPath": "v3/tagValues",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tagValues",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagValues.delete": {
        "description": "Deletes a TagValue. The TagValue cannot have any bindings when it is deleted.",
        "flatPath": "v3/tagValues/{tagValuesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tagValues",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagValues.get": {
        "description": "Retrieves TagValue. If the TagValue or namespaced name does not exist, or if the user does not have permission to view it, this method will return `PERMISSION_DENIED`.",
        "flatPath": "v3/tagValues/{tagValuesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tagValues",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagValues.getIamPolicy": {
        "description": "Gets the access control policy for a TagValue. The returned policy may be empty if no such policy or resource exists. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. The caller must have the `cloudresourcemanager.googleapis.com/tagValues.getIamPolicy` permission on the identified TagValue to get the access control policy.",
        "flatPath": "v3/tagValues/{tagValuesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "tagValues",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagValues.list": {
        "description": "Lists all TagValues for a specific TagKey.",
        "flatPath": "v3/tagValues",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tagValues",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagValues.patch": {
        "description": "Updates the attributes of the TagValue resource.",
        "flatPath": "v3/tagValues/{tagValuesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tagValues",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagValues.setIamPolicy": {
        "description": "Sets the access control policy on a TagValue, replacing any existing policy. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. The caller must have `resourcemanager.tagValues.setIamPolicy` permission on the identified tagValue.",
        "flatPath": "v3/tagValues/{tagValuesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "tagValues",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "cloudresourcemanager.tagValues.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified TagValue. The `resource` field should be the TagValue's resource name. For example: `tagValues/1234`. There are no permissions required for making this API call.",
        "flatPath": "v3/tagValues/{tagValuesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "tagValues",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Cloud Resource Manager API"
  },
  "cloudscheduler": {
    "description": "Creates and manages jobs run on a regular recurring schedule.",
    "methods": {
      "cloudscheduler.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudscheduler.projects.locations.jobs.create": {
        "description": "Creates a job.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudscheduler.projects.locations.jobs.delete": {
        "description": "Deletes a job.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudscheduler.projects.locations.jobs.get": {
        "description": "Gets a job.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudscheduler.projects.locations.jobs.list": {
        "description": "Lists jobs.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudscheduler.projects.locations.jobs.patch": {
        "description": "Updates a job. If successful, the updated Job is returned. If the job does not exist, `NOT_FOUND` is returned. If UpdateJob does not successfully return, it is possible for the job to be in an Job.State.UPDATE_FAILED state. A job in this state may not be executed. If this happens, retry the UpdateJob request until a successful response is received.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudscheduler.projects.locations.jobs.pause": {
        "description": "Pauses a job. If a job is paused then the system will stop executing the job until it is re-enabled via ResumeJob. The state of the job is stored in state; if paused it will be set to Job.State.PAUSED. A job must be in Job.State.ENABLED to be paused.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}:pause",
        "httpMethod": "POST",
        "method": "pause",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudscheduler.projects.locations.jobs.resume": {
        "description": "Resume a job. This method reenables a job after it has been Job.State.PAUSED. The state of a job is stored in Job.state; after calling this method it will be set to Job.State.ENABLED. A job must be in Job.State.PAUSED to be resumed.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}:resume",
        "httpMethod": "POST",
        "method": "resume",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudscheduler.projects.locations.jobs.run": {
        "description": "Forces a job to run now. When this method is called, Cloud Scheduler will dispatch the job, even if the job is already running.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "cloudscheduler.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Scheduler API"
  },
  "cloudsearch": {
    "description": "Cloud Search provides cloud-based search capabilities over Google Workspace data. The Cloud Search API allows indexing of non-Google Workspace data into Cloud Search.",
    "methods": {
      "cloudsearch.debug.datasources.items.checkAccess": {
        "description": "Checks whether an item is accessible by specified principal. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/debug/datasources/{datasourcesId}/items/{itemsId}:checkAccess",
        "httpMethod": "POST",
        "method": "checkAccess",
        "resourceType": "items",
        "resourceTypePath": "//debug/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.debug.datasources.items.searchByViewUrl": {
        "description": "Fetches the item whose viewUrl exactly matches that of the URL provided in the request. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/debug/datasources/{datasourcesId}/items:searchByViewUrl",
        "httpMethod": "POST",
        "method": "searchByViewUrl",
        "resourceType": "items",
        "resourceTypePath": "//debug/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.debug.datasources.items.unmappedids.list": {
        "description": "List all unmapped identities for a specific item. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/debug/datasources/{datasourcesId}/items/{itemsId}/unmappedids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "unmappedids",
        "resourceTypePath": "//debug/datasources/items",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.debug.identitysources.items.listForunmappedidentity": {
        "description": "Lists names of items associated with an unmapped identity. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/debug/identitysources/{identitysourcesId}/items:forunmappedidentity",
        "httpMethod": "GET",
        "method": "listForunmappedidentity",
        "resourceType": "items",
        "resourceTypePath": "//debug/identitysources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.debug.identitysources.unmappedids.list": {
        "description": "Lists unmapped user identities for an identity source. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/debug/identitysources/{identitysourcesId}/unmappedids",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "unmappedids",
        "resourceTypePath": "//debug/identitysources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.deleteSchema": {
        "description": "Deletes the schema of a data source. **Note:** This API requires an admin or service account to execute.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
        "httpMethod": "DELETE",
        "method": "deleteSchema",
        "resourceType": "datasources",
        "resourceTypePath": "//indexing",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.getSchema": {
        "description": "Gets the schema of a data source. **Note:** This API requires an admin or service account to execute.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
        "httpMethod": "GET",
        "method": "getSchema",
        "resourceType": "datasources",
        "resourceTypePath": "//indexing",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.items.delete": {
        "description": "Deletes Item resource for the specified resource name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "items",
        "resourceTypePath": "//indexing/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.items.deleteQueueItems": {
        "description": "Deletes all items in a queue. This method is useful for deleting stale items. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/items:deleteQueueItems",
        "httpMethod": "POST",
        "method": "deleteQueueItems",
        "resourceType": "items",
        "resourceTypePath": "//indexing/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.items.get": {
        "description": "Gets Item resource by item name. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "items",
        "resourceTypePath": "//indexing/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.items.index": {
        "description": "Updates Item ACL, metadata, and content. It will insert the Item if it does not exist. This method does not support partial updates. Fields with no provided values are cleared out in the Cloud Search index. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:index",
        "httpMethod": "POST",
        "method": "index",
        "resourceType": "items",
        "resourceTypePath": "//indexing/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.items.list": {
        "description": "Lists all or a subset of Item resources. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/items",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "items",
        "resourceTypePath": "//indexing/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.items.poll": {
        "description": "Polls for unreserved items from the indexing queue and marks a set as reserved, starting with items that have the oldest timestamp from the highest priority ItemStatus. The priority order is as follows: ERROR MODIFIED NEW_ITEM ACCEPTED Reserving items ensures that polling from other threads cannot create overlapping sets. After handling the reserved items, the client should put items back into the unreserved state, either by calling index, or by calling push with the type REQUEUE. Items automatically become available (unreserved) after 4 hours even if no update or push method is called. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/items:poll",
        "httpMethod": "POST",
        "method": "poll",
        "resourceType": "items",
        "resourceTypePath": "//indexing/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.items.push": {
        "description": "Pushes an item onto a queue for later polling and updating. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:push",
        "httpMethod": "POST",
        "method": "push",
        "resourceType": "items",
        "resourceTypePath": "//indexing/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.items.unreserve": {
        "description": "Unreserves all items from a queue, making them all eligible to be polled. This method is useful for resetting the indexing queue after a connector has been restarted. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/items:unreserve",
        "httpMethod": "POST",
        "method": "unreserve",
        "resourceType": "items",
        "resourceTypePath": "//indexing/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.items.upload": {
        "description": "Creates an upload session for uploading item content. For items smaller than 100 KB, it's easier to embed the content inline within an index request. This API requires an admin or service account to execute. The service account used is the one whitelisted in the corresponding data source.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/items/{itemsId}:upload",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "items",
        "resourceTypePath": "//indexing/datasources",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.indexing.datasources.updateSchema": {
        "description": "Updates the schema of a data source. This method does not perform incremental updates to the schema. Instead, this method updates the schema by overwriting the entire schema. **Note:** This API requires an admin or service account to execute.",
        "flatPath": "v1/indexing/datasources/{datasourcesId}/schema",
        "httpMethod": "PUT",
        "method": "updateSchema",
        "resourceType": "datasources",
        "resourceTypePath": "//indexing",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.initializeCustomer": {
        "description": "Initializes the customer. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1:initializeCustomer",
        "httpMethod": "POST",
        "method": "initializeCustomer",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.media.upload": {
        "description": "Uploads media for indexing. The upload endpoint supports direct and resumable upload protocols and is intended for large items that can not be [inlined during index requests](https://developers.google.com/cloud-search/docs/reference/rest/v1/indexing.datasources.items#itemcontent). To index large content: 1. Call indexing.datasources.items.upload with the item name to begin an upload session and retrieve the UploadItemRef. 1. Call media.upload to upload the content, as a streaming request, using the same resource name from the UploadItemRef from step 1. 1. Call indexing.datasources.items.index to index the item. Populate the [ItemContent](/cloud-search/docs/reference/rest/v1/indexing.datasources.items#ItemContent) with the UploadItemRef from step 1. For additional information, see [Create a content connector using the REST API](https://developers.google.com/cloud-search/docs/guides/content-connector#rest). **Note:** This API requires a service account to execute.",
        "flatPath": "v1/media/{mediaId}",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "media",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.operations.lro.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations/{operationsId}/lro",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "lro",
        "resourceTypePath": "//operations",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.query.search": {
        "description": "The Cloud Search Query API provides the search method, which returns the most relevant results from a user query. The results can come from Google Workspace apps, such as Gmail or Google Drive, or they can come from data that you have indexed from a third party. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
        "flatPath": "v1/query/search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "query",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.query.sources.list": {
        "description": "Returns list of sources that user can use for Search and Suggest APIs. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
        "flatPath": "v1/query/sources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sources",
        "resourceTypePath": "//query",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.query.suggest": {
        "description": "Provides suggestions for autocompleting the query. **Note:** This API requires a standard end user account to execute. A service account can't perform Query API requests directly; to use a service account to perform queries, set up [Google Workspace domain-wide delegation of authority](https://developers.google.com/cloud-search/docs/guides/delegation/).",
        "flatPath": "v1/query/suggest",
        "httpMethod": "POST",
        "method": "suggest",
        "resourceType": "query",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.datasources.create": {
        "description": "Creates a datasource. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/datasources",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "datasources",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.datasources.delete": {
        "description": "Deletes a datasource. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/datasources/{datasourcesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "datasources",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.datasources.get": {
        "description": "Gets a datasource. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/datasources/{datasourcesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datasources",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.datasources.list": {
        "description": "Lists datasources. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/datasources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "datasources",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.datasources.update": {
        "description": "Updates a datasource. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/datasources/{datasourcesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "datasources",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.getCustomer": {
        "description": "Get customer settings. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/customer",
        "httpMethod": "GET",
        "method": "getCustomer",
        "resourceType": "settings",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.searchapplications.create": {
        "description": "Creates a search application. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/searchapplications",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "searchapplications",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.searchapplications.delete": {
        "description": "Deletes a search application. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "searchapplications",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.searchapplications.get": {
        "description": "Gets the specified search application. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "searchapplications",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.searchapplications.list": {
        "description": "Lists all search applications. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/searchapplications",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "searchapplications",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.searchapplications.reset": {
        "description": "Resets a search application to default settings. This will return an empty response. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/searchapplications/{searchapplicationsId}:reset",
        "httpMethod": "POST",
        "method": "reset",
        "resourceType": "searchapplications",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.searchapplications.update": {
        "description": "Updates a search application. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/searchapplications/{searchapplicationsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "searchapplications",
        "resourceTypePath": "//settings",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.settings.updateCustomer": {
        "description": "Update customer settings. **Note:** This API requires an admin account to execute.",
        "flatPath": "v1/settings/customer",
        "httpMethod": "PATCH",
        "method": "updateCustomer",
        "resourceType": "settings",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.stats.getIndex": {
        "description": "Gets indexed item statistics aggreggated across all data sources. This API only returns statistics for previous dates; it doesn't return statistics for the current day. **Note:** This API requires a standard end user account to execute.",
        "flatPath": "v1/stats/index",
        "httpMethod": "GET",
        "method": "getIndex",
        "resourceType": "stats",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.stats.getQuery": {
        "description": "Get the query statistics for customer. **Note:** This API requires a standard end user account to execute.",
        "flatPath": "v1/stats/query",
        "httpMethod": "GET",
        "method": "getQuery",
        "resourceType": "stats",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.stats.getSession": {
        "description": "Get the # of search sessions, % of successful sessions with a click query statistics for customer. **Note:** This API requires a standard end user account to execute.",
        "flatPath": "v1/stats/session",
        "httpMethod": "GET",
        "method": "getSession",
        "resourceType": "stats",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.stats.getUser": {
        "description": "Get the users statistics for customer. **Note:** This API requires a standard end user account to execute.",
        "flatPath": "v1/stats/user",
        "httpMethod": "GET",
        "method": "getUser",
        "resourceType": "stats",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.stats.index.datasources.get": {
        "description": "Gets indexed item statistics for a single data source. **Note:** This API requires a standard end user account to execute.",
        "flatPath": "v1/stats/index/datasources/{datasourcesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datasources",
        "resourceTypePath": "//stats/index",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.stats.query.searchapplications.get": {
        "description": "Get the query statistics for search application. **Note:** This API requires a standard end user account to execute.",
        "flatPath": "v1/stats/query/searchapplications/{searchapplicationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "searchapplications",
        "resourceTypePath": "//stats/query",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.stats.session.searchapplications.get": {
        "description": "Get the # of search sessions, % of successful sessions with a click query statistics for search application. **Note:** This API requires a standard end user account to execute.",
        "flatPath": "v1/stats/session/searchapplications/{searchapplicationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "searchapplications",
        "resourceTypePath": "//stats/session",
        "versions": [
          "v1"
        ]
      },
      "cloudsearch.stats.user.searchapplications.get": {
        "description": "Get the users statistics for search application. **Note:** This API requires a standard end user account to execute.",
        "flatPath": "v1/stats/user/searchapplications/{searchapplicationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "searchapplications",
        "resourceTypePath": "//stats/user",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Search API"
  },
  "cloudshell": {
    "description": "Allows users to start, configure, and connect to interactive shell sessions running in the cloud.",
    "methods": {
      "cloudshell.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudshell.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudshell.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudshell.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudshell.users.environments.addPublicKey": {
        "description": "Adds a public SSH key to an environment, allowing clients with the corresponding private key to connect to that environment via SSH. If a key with the same content already exists, this will error with ALREADY_EXISTS.",
        "flatPath": "v1/users/{usersId}/environments/{environmentsId}:addPublicKey",
        "httpMethod": "POST",
        "method": "addPublicKey",
        "resourceType": "environments",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "cloudshell.users.environments.authorize": {
        "description": "Sends OAuth credentials to a running environment on behalf of a user. When this completes, the environment will be authorized to run various Google Cloud command line tools without requiring the user to manually authenticate.",
        "flatPath": "v1/users/{usersId}/environments/{environmentsId}:authorize",
        "httpMethod": "POST",
        "method": "authorize",
        "resourceType": "environments",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "cloudshell.users.environments.get": {
        "description": "Gets an environment. Returns NOT_FOUND if the environment does not exist.",
        "flatPath": "v1/users/{usersId}/environments/{environmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "environments",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "cloudshell.users.environments.removePublicKey": {
        "description": "Removes a public SSH key from an environment. Clients will no longer be able to connect to the environment using the corresponding private key. If a key with the same content is not present, this will error with NOT_FOUND.",
        "flatPath": "v1/users/{usersId}/environments/{environmentsId}:removePublicKey",
        "httpMethod": "POST",
        "method": "removePublicKey",
        "resourceType": "environments",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "cloudshell.users.environments.start": {
        "description": "Starts an existing environment, allowing clients to connect to it. The returned operation will contain an instance of StartEnvironmentMetadata in its metadata field. Users can wait for the environment to start by polling this operation via GetOperation. Once the environment has finished starting and is ready to accept connections, the operation will contain a StartEnvironmentResponse in its response field.",
        "flatPath": "v1/users/{usersId}/environments/{environmentsId}:start",
        "httpMethod": "POST",
        "method": "start",
        "resourceType": "environments",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Shell API"
  },
  "cloudsupport": {
    "description": "Manages Google Cloud technical support cases for Customer Care support offerings.",
    "methods": {
      "cloudsupport.attachments.create": {
        "description": "Create a file attachment on a case or Cloud resource.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/attachments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "attachments",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.caseClassifications.search": {
        "description": "Retrieve valid classifications to be used when creating a support case. The classications are hierarchical, with each classification containing all levels of the hierarchy, separated by \" > \". For example \"Technical Issue > Compute > Compute Engine\".",
        "flatPath": "v2beta/caseClassifications:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "caseClassifications",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.attachments.list": {
        "description": "Retrieve all attachments associated with a support case.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases/{casesId}/attachments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "attachments",
        "resourceTypePath": "//cases",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.close": {
        "description": "Close the specified case.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases/{casesId}:close",
        "httpMethod": "POST",
        "method": "close",
        "resourceType": "cases",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.comments.create": {
        "description": "Add a new comment to the specified Case.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases/{casesId}/comments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "comments",
        "resourceTypePath": "//cases",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.comments.list": {
        "description": "Retrieve all Comments associated with the Case object.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases/{casesId}/comments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "comments",
        "resourceTypePath": "//cases",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.create": {
        "description": "Create a new case and associate it with the given Cloud resource.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "cases",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.escalate": {
        "description": "Escalate a case. Escalating a case will initiate the Cloud Support escalation management process. This operation is only available to certain Customer Care tiers. Go to https://cloud.google.com/support and look for 'Technical support escalations' in the feature list to find out which tiers are able to perform escalations.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases/{casesId}:escalate",
        "httpMethod": "POST",
        "method": "escalate",
        "resourceType": "cases",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.get": {
        "description": "Retrieve the specified case.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases/{casesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "cases",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.list": {
        "description": "Retrieve all cases under the specified parent.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "cases",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.patch": {
        "description": "Update the specified case. Only a subset of fields (display_name, description, time_zone, subscriber_email_addresses, related_resources, severity, primary_contact, and labels) can be updated.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases/{casesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "cases",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.cases.search": {
        "description": "Search cases using the specified query.",
        "flatPath": "v2beta/cases:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "cases",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.media.download": {
        "description": "Download a file attachment on a case. Note: HTTP requests must append \"?alt=media\" to the URL.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases/{casesId}/attachments/{attachmentsId}:download",
        "httpMethod": "GET",
        "method": "download",
        "resourceType": "media",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      },
      "cloudsupport.media.upload": {
        "description": "Create a file attachment on a case or Cloud resource.",
        "flatPath": "v2beta/{v2betaId}/{v2betaId1}/cases/{casesId}/attachments",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "media",
        "resourceTypePath": "/",
        "versions": [
          "v2beta"
        ]
      }
    },
    "preferredVersion": "v2beta",
    "title": "Google Cloud Support API"
  },
  "cloudtasks": {
    "description": "Manages the execution of large numbers of distributed requests.",
    "methods": {
      "cloudtasks.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v2beta2/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.create": {
        "description": "Creates a queue. Queues created with this method allow tasks to live for a maximum of 31 days. After a task is 31 days old, the task will be deleted regardless of whether it was dispatched or not. WARNING: Using this method may have unintended side effects if you are using an App Engine `queue.yaml` or `queue.xml` file to manage your queues. Read [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using this method.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.delete": {
        "description": "Deletes a queue. This command will delete the queue even if it has tasks in it. Note: If you delete a queue, a queue with the same name can't be created for 7 days. WARNING: Using this method may have unintended side effects if you are using an App Engine `queue.yaml` or `queue.xml` file to manage your queues. Read [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using this method.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.get": {
        "description": "Gets a queue.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.getIamPolicy": {
        "description": "Gets the access control policy for a Queue. Returns an empty policy if the resource exists and does not have a policy set. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission on the specified resource parent: * `cloudtasks.queues.getIamPolicy`",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.list": {
        "description": "Lists queues. Queues are returned in lexicographical order.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.patch": {
        "description": "Updates a queue. This method creates the queue if it does not exist and updates the queue if it does exist. Queues created with this method allow tasks to live for a maximum of 31 days. After a task is 31 days old, the task will be deleted regardless of whether it was dispatched or not. WARNING: Using this method may have unintended side effects if you are using an App Engine `queue.yaml` or `queue.xml` file to manage your queues. Read [Overview of Queue Management and queue.yaml](https://cloud.google.com/tasks/docs/queue-yaml) before using this method.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.pause": {
        "description": "Pauses the queue. If a queue is paused then the system will stop dispatching tasks until the queue is resumed via ResumeQueue. Tasks can still be added when the queue is paused. A queue is paused if its state is PAUSED.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}:pause",
        "httpMethod": "POST",
        "method": "pause",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.purge": {
        "description": "Purges a queue by deleting all of its tasks. All tasks created before this method is called are permanently deleted. Purge operations can take up to one minute to take effect. Tasks might be dispatched before the purge takes effect. A purge is irreversible.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}:purge",
        "httpMethod": "POST",
        "method": "purge",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.resume": {
        "description": "Resume a queue. This method resumes a queue after it has been PAUSED or DISABLED. The state of a queue is stored in the queue's state; after calling this method it will be set to RUNNING. WARNING: Resuming many high-QPS queues at the same time can lead to target overloading. If you are resuming high-QPS queues, follow the 500/50/5 pattern described in [Managing Cloud Tasks Scaling Risks](https://cloud.google.com/tasks/docs/manage-cloud-task-scaling).",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}:resume",
        "httpMethod": "POST",
        "method": "resume",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.setIamPolicy": {
        "description": "Sets the access control policy for a Queue. Replaces any existing policy. Note: The Cloud Console does not check queue-level IAM permissions yet. Project-level permissions are required to use the Cloud Console. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission on the specified resource parent: * `cloudtasks.queues.setIamPolicy`",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.tasks.acknowledge": {
        "description": "Acknowledges a pull task. The worker, that is, the entity that leased this task must call this method to indicate that the work associated with the task has finished. The worker must acknowledge a task within the lease_duration or the lease will expire and the task will become available to be leased again. After the task is acknowledged, it will not be returned by a later LeaseTasks, GetTask, or ListTasks.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}/tasks/{tasksId}:acknowledge",
        "httpMethod": "POST",
        "method": "acknowledge",
        "resourceType": "tasks",
        "resourceTypePath": "//projects/locations/queues",
        "versions": [
          "v2beta2"
        ]
      },
      "cloudtasks.projects.locations.queues.tasks.cancelLease": {
        "description": "Cancel a pull task's lease. The worker can use this method to cancel a task's lease by setting its schedule_time to now. This will make the task available to be leased to the next caller of LeaseTasks.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}/tasks/{tasksId}:cancelLease",
        "httpMethod": "POST",
        "method": "cancelLease",
        "resourceType": "tasks",
        "resourceTypePath": "//projects/locations/queues",
        "versions": [
          "v2beta2"
        ]
      },
      "cloudtasks.projects.locations.queues.tasks.create": {
        "description": "Creates a task and adds it to a queue. Tasks cannot be updated after creation; there is no UpdateTask command. * For App Engine queues, the maximum task size is 100KB. * For pull queues, the maximum task size is 1MB.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}/tasks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tasks",
        "resourceTypePath": "//projects/locations/queues",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.tasks.delete": {
        "description": "Deletes a task. A task can be deleted if it is scheduled or dispatched. A task cannot be deleted if it has completed successfully or permanently failed.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}/tasks/{tasksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tasks",
        "resourceTypePath": "//projects/locations/queues",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.tasks.get": {
        "description": "Gets a task.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}/tasks/{tasksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tasks",
        "resourceTypePath": "//projects/locations/queues",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.tasks.lease": {
        "description": "Leases tasks from a pull queue for lease_duration. This method is invoked by the worker to obtain a lease. The worker must acknowledge the task via AcknowledgeTask after they have performed the work associated with the task. The payload is intended to store data that the worker needs to perform the work associated with the task. To return the payloads in the response, set response_view to FULL. A maximum of 10 qps of LeaseTasks requests are allowed per queue. RESOURCE_EXHAUSTED is returned when this limit is exceeded. RESOURCE_EXHAUSTED is also returned when max_tasks_dispatched_per_second is exceeded.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}/tasks:lease",
        "httpMethod": "POST",
        "method": "lease",
        "resourceType": "tasks",
        "resourceTypePath": "//projects/locations/queues",
        "versions": [
          "v2beta2"
        ]
      },
      "cloudtasks.projects.locations.queues.tasks.list": {
        "description": "Lists the tasks in a queue. By default, only the BASIC view is retrieved due to performance considerations; response_view controls the subset of information which is returned. The tasks may be returned in any order. The ordering may change at any time.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}/tasks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tasks",
        "resourceTypePath": "//projects/locations/queues",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.tasks.renewLease": {
        "description": "Renew the current lease of a pull task. The worker can use this method to extend the lease by a new duration, starting from now. The new task lease will be returned in the task's schedule_time.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}/tasks/{tasksId}:renewLease",
        "httpMethod": "POST",
        "method": "renewLease",
        "resourceType": "tasks",
        "resourceTypePath": "//projects/locations/queues",
        "versions": [
          "v2beta2"
        ]
      },
      "cloudtasks.projects.locations.queues.tasks.run": {
        "description": "Forces a task to run now. When this method is called, Cloud Tasks will dispatch the task, even if the task is already running, the queue has reached its RateLimits or is PAUSED. This command is meant to be used for manual debugging. For example, RunTask can be used to retry a failed task after a fix has been made or to manually force a task to be dispatched now. The dispatched task is returned. That is, the task that is returned contains the status after the task is dispatched but before the task is received by its target. If Cloud Tasks receives a successful response from the task's target, then the task will be deleted; otherwise the task's schedule_time will be reset to the time that RunTask was called plus the retry delay specified in the queue's RetryConfig. RunTask returns NOT_FOUND when it is called on a task that has already succeeded or permanently failed. RunTask cannot be called on a pull task.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}/tasks/{tasksId}:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "tasks",
        "resourceTypePath": "//projects/locations/queues",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      },
      "cloudtasks.projects.locations.queues.testIamPermissions": {
        "description": "Returns permissions that a caller has on a Queue. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v2beta2/projects/{projectsId}/locations/{locationsId}/queues/{queuesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "queues",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta2",
          "v2beta3",
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Cloud Tasks API"
  },
  "cloudtrace": {
    "description": "Sends application trace data to Cloud Trace for viewing. Trace data is collected for all App Engine applications by default. Trace data from other applications can be provided using this API. This library is used to interact with the Cloud Trace API directly. If you are looking to instrument your application for Cloud Trace, we recommend using OpenCensus.",
    "methods": {
      "cloudtrace.projects.patchTraces": {
        "description": "Sends new traces to Cloud Trace or updates existing traces. If the ID of a trace that you send matches that of an existing trace, any fields in the existing trace and its spans are overwritten by the provided values, and any new fields provided are merged with the existing trace data. If the ID does not match, a new trace is created.",
        "flatPath": "v1/projects/{projectId}/traces",
        "httpMethod": "PATCH",
        "method": "patchTraces",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "cloudtrace.projects.traceSinks.create": {
        "description": "Creates a sink that exports trace spans to a destination. The export of newly-ingested traces begins immediately, unless the sink's `writer_identity` is not permitted to write to the destination. A sink can export traces only from the resource owning the sink (the 'parent').",
        "flatPath": "v2beta1/projects/{projectsId}/traceSinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "traceSinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1"
        ]
      },
      "cloudtrace.projects.traceSinks.delete": {
        "description": "Deletes a sink.",
        "flatPath": "v2beta1/projects/{projectsId}/traceSinks/{traceSinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "traceSinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1"
        ]
      },
      "cloudtrace.projects.traceSinks.get": {
        "description": "Get a trace sink by name under the parent resource (GCP project).",
        "flatPath": "v2beta1/projects/{projectsId}/traceSinks/{traceSinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "traceSinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1"
        ]
      },
      "cloudtrace.projects.traceSinks.list": {
        "description": "List all sinks for the parent resource (GCP project).",
        "flatPath": "v2beta1/projects/{projectsId}/traceSinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "traceSinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1"
        ]
      },
      "cloudtrace.projects.traceSinks.patch": {
        "description": "Updates a sink. This method updates fields in the existing sink according to the provided update mask. The sink's name cannot be changed nor any output-only fields (e.g. the writer_identity).",
        "flatPath": "v2beta1/projects/{projectsId}/traceSinks/{traceSinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "traceSinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1"
        ]
      },
      "cloudtrace.projects.traces.batchWrite": {
        "description": "Sends new spans to new or existing traces. You cannot update existing spans.",
        "flatPath": "v2/projects/{projectsId}/traces:batchWrite",
        "httpMethod": "POST",
        "method": "batchWrite",
        "resourceType": "traces",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "cloudtrace.projects.traces.get": {
        "description": "Gets a single trace by its ID.",
        "flatPath": "v1/projects/{projectId}/traces/{traceId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "traces",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudtrace.projects.traces.list": {
        "description": "Returns of a list of traces that match the specified filter conditions.",
        "flatPath": "v1/projects/{projectId}/traces",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "traces",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "cloudtrace.projects.traces.spans.createSpan": {
        "description": "Creates a new span.",
        "flatPath": "v2/projects/{projectsId}/traces/{tracesId}/spans/{spansId}",
        "httpMethod": "POST",
        "method": "createSpan",
        "resourceType": "spans",
        "resourceTypePath": "//projects/traces",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Cloud Trace API"
  },
  "composer": {
    "description": "Manages Apache Airflow environments on Google Cloud Platform.",
    "methods": {
      "composer.projects.locations.environments.checkUpgrade": {
        "description": "Check if an upgrade operation on the environment will succeed. In case of problems detailed info can be found in the returned Operation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/environments/{environmentsId}:checkUpgrade",
        "httpMethod": "POST",
        "method": "checkUpgrade",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "composer.projects.locations.environments.create": {
        "description": "Create a new environment.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/environments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "composer.projects.locations.environments.delete": {
        "description": "Delete an environment.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/environments/{environmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "composer.projects.locations.environments.get": {
        "description": "Get an existing environment.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/environments/{environmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "composer.projects.locations.environments.list": {
        "description": "List environments.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/environments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "composer.projects.locations.environments.patch": {
        "description": "Update an environment.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/environments/{environmentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "composer.projects.locations.environments.restartWebServer": {
        "description": "Restart Airflow web server.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/environments/{environmentsId}:restartWebServer",
        "httpMethod": "POST",
        "method": "restartWebServer",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "composer.projects.locations.imageVersions.list": {
        "description": "List ImageVersions for provided location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/imageVersions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "imageVersions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "composer.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "composer.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "composer.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Composer API"
  },
  "compute": {
    "description": "Creates and runs virtual machines on Google Cloud Platform.",
    "methods": {
      "compute.acceleratorTypes.aggregatedList": {
        "description": "Retrieves an aggregated list of accelerator types.",
        "flatPath": "projects/{project}/aggregated/acceleratorTypes",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "acceleratorTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.acceleratorTypes.get": {
        "description": "Returns the specified accelerator type.",
        "flatPath": "projects/{project}/zones/{zone}/acceleratorTypes/{acceleratorType}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "acceleratorTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.acceleratorTypes.list": {
        "description": "Retrieves a list of accelerator types that are available to the specified project.",
        "flatPath": "projects/{project}/zones/{zone}/acceleratorTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "acceleratorTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.addresses.aggregatedList": {
        "description": "Retrieves an aggregated list of addresses.",
        "flatPath": "projects/{project}/aggregated/addresses",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "addresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.addresses.delete": {
        "description": "Deletes the specified address resource.",
        "flatPath": "projects/{project}/regions/{region}/addresses/{address}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "addresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.addresses.get": {
        "description": "Returns the specified address resource.",
        "flatPath": "projects/{project}/regions/{region}/addresses/{address}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "addresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.addresses.insert": {
        "description": "Creates an address resource in the specified project by using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/addresses",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "addresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.addresses.list": {
        "description": "Retrieves a list of addresses contained within the specified region.",
        "flatPath": "projects/{project}/regions/{region}/addresses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "addresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.addresses.setLabels": {
        "description": "Sets the labels on an Address. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/regions/{region}/addresses/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "addresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.addresses.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/addresses/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "addresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.autoscalers.aggregatedList": {
        "description": "Retrieves an aggregated list of autoscalers.",
        "flatPath": "projects/{project}/aggregated/autoscalers",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "autoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.autoscalers.delete": {
        "description": "Deletes the specified autoscaler.",
        "flatPath": "projects/{project}/zones/{zone}/autoscalers/{autoscaler}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "autoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.autoscalers.get": {
        "description": "Returns the specified autoscaler resource. Gets a list of available autoscalers by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}/autoscalers/{autoscaler}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "autoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.autoscalers.insert": {
        "description": "Creates an autoscaler in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/zones/{zone}/autoscalers",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "autoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.autoscalers.list": {
        "description": "Retrieves a list of autoscalers contained within the specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/autoscalers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "autoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.autoscalers.patch": {
        "description": "Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/zones/{zone}/autoscalers",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "autoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.autoscalers.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/autoscalers/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "autoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.autoscalers.update": {
        "description": "Updates an autoscaler in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/zones/{zone}/autoscalers",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "autoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendBuckets.addSignedUrlKey": {
        "description": "Adds a key for validating requests with signed URLs for this backend bucket.",
        "flatPath": "projects/{project}/global/backendBuckets/{backendBucket}/addSignedUrlKey",
        "httpMethod": "POST",
        "method": "addSignedUrlKey",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendBuckets.delete": {
        "description": "Deletes the specified BackendBucket resource.",
        "flatPath": "projects/{project}/global/backendBuckets/{backendBucket}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendBuckets.deleteSignedUrlKey": {
        "description": "Deletes a key for validating requests with signed URLs for this backend bucket.",
        "flatPath": "projects/{project}/global/backendBuckets/{backendBucket}/deleteSignedUrlKey",
        "httpMethod": "POST",
        "method": "deleteSignedUrlKey",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendBuckets.get": {
        "description": "Returns the specified BackendBucket resource. Gets a list of available backend buckets by making a list() request.",
        "flatPath": "projects/{project}/global/backendBuckets/{backendBucket}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendBuckets.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/global/backendBuckets/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.backendBuckets.insert": {
        "description": "Creates a BackendBucket resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/backendBuckets",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendBuckets.list": {
        "description": "Retrieves the list of BackendBucket resources available to the specified project.",
        "flatPath": "projects/{project}/global/backendBuckets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendBuckets.patch": {
        "description": "Updates the specified BackendBucket resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/backendBuckets/{backendBucket}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendBuckets.setEdgeSecurityPolicy": {
        "description": "Sets the edge security policy for the specified backend bucket.",
        "flatPath": "projects/{project}/global/backendBuckets/{backendBucket}/setEdgeSecurityPolicy",
        "httpMethod": "POST",
        "method": "setEdgeSecurityPolicy",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.backendBuckets.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/global/backendBuckets/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.backendBuckets.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/backendBuckets/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.backendBuckets.update": {
        "description": "Updates the specified BackendBucket resource with the data included in the request.",
        "flatPath": "projects/{project}/global/backendBuckets/{backendBucket}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "backendBuckets",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.addSignedUrlKey": {
        "description": "Adds a key for validating requests with signed URLs for this backend service.",
        "flatPath": "projects/{project}/global/backendServices/{backendService}/addSignedUrlKey",
        "httpMethod": "POST",
        "method": "addSignedUrlKey",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.aggregatedList": {
        "description": "Retrieves the list of all BackendService resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/backendServices",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.delete": {
        "description": "Deletes the specified BackendService resource.",
        "flatPath": "projects/{project}/global/backendServices/{backendService}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.deleteSignedUrlKey": {
        "description": "Deletes a key for validating requests with signed URLs for this backend service.",
        "flatPath": "projects/{project}/global/backendServices/{backendService}/deleteSignedUrlKey",
        "httpMethod": "POST",
        "method": "deleteSignedUrlKey",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.get": {
        "description": "Returns the specified BackendService resource. Gets a list of available backend services.",
        "flatPath": "projects/{project}/global/backendServices/{backendService}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.getHealth": {
        "description": "Gets the most recent health check results for this BackendService. Example request body: { \"group\": \"/zones/us-east1-b/instanceGroups/lb-backend-example\" }",
        "flatPath": "projects/{project}/global/backendServices/{backendService}/getHealth",
        "httpMethod": "POST",
        "method": "getHealth",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/global/backendServices/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.backendServices.insert": {
        "description": "Creates a BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview .",
        "flatPath": "projects/{project}/global/backendServices",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.list": {
        "description": "Retrieves the list of BackendService resources available to the specified project.",
        "flatPath": "projects/{project}/global/backendServices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.patch": {
        "description": "Patches the specified BackendService resource with the data included in the request. For more information, see Backend services overview. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/backendServices/{backendService}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.setEdgeSecurityPolicy": {
        "description": "Sets the edge security policy for the specified backend service.",
        "flatPath": "projects/{project}/global/backendServices/{backendService}/setEdgeSecurityPolicy",
        "httpMethod": "POST",
        "method": "setEdgeSecurityPolicy",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.backendServices.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/global/backendServices/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.backendServices.setSecurityPolicy": {
        "description": "Sets the Google Cloud Armor security policy for the specified backend service. For more information, see Google Cloud Armor Overview",
        "flatPath": "projects/{project}/global/backendServices/{backendService}/setSecurityPolicy",
        "httpMethod": "POST",
        "method": "setSecurityPolicy",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.backendServices.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/backendServices/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.backendServices.update": {
        "description": "Updates the specified BackendService resource with the data included in the request. For more information, see Backend services overview.",
        "flatPath": "projects/{project}/global/backendServices/{backendService}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "backendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.diskTypes.aggregatedList": {
        "description": "Retrieves an aggregated list of disk types.",
        "flatPath": "projects/{project}/aggregated/diskTypes",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "diskTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.diskTypes.get": {
        "description": "Returns the specified disk type. Gets a list of available disk types by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}/diskTypes/{diskType}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "diskTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.diskTypes.list": {
        "description": "Retrieves a list of disk types available to the specified project.",
        "flatPath": "projects/{project}/zones/{zone}/diskTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "diskTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.addResourcePolicies": {
        "description": "Adds existing resource policies to a disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{disk}/addResourcePolicies",
        "httpMethod": "POST",
        "method": "addResourcePolicies",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.aggregatedList": {
        "description": "Retrieves an aggregated list of persistent disks.",
        "flatPath": "projects/{project}/aggregated/disks",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.createSnapshot": {
        "description": "Creates a snapshot of a specified persistent disk.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{disk}/createSnapshot",
        "httpMethod": "POST",
        "method": "createSnapshot",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.delete": {
        "description": "Deletes the specified persistent disk. Deleting a disk removes its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{disk}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.get": {
        "description": "Returns a specified persistent disk. Gets a list of available persistent disks by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{disk}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.insert": {
        "description": "Creates a persistent disk in the specified project using the data in the request. You can create a disk from a source (sourceImage, sourceSnapshot, or sourceDisk) or create an empty 500 GB data disk by omitting all properties. You can also create a disk that is larger than the default size by specifying the sizeGb property.",
        "flatPath": "projects/{project}/zones/{zone}/disks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.list": {
        "description": "Retrieves a list of persistent disks contained within the specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/disks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.removeResourcePolicies": {
        "description": "Removes resource policies from a disk.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{disk}/removeResourcePolicies",
        "httpMethod": "POST",
        "method": "removeResourcePolicies",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.resize": {
        "description": "Resizes the specified persistent disk. You can only increase the size of the disk.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{disk}/resize",
        "httpMethod": "POST",
        "method": "resize",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.setLabels": {
        "description": "Sets the labels on a disk. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.disks.update": {
        "description": "Update the specified disk with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.",
        "flatPath": "projects/{project}/zones/{zone}/disks/{disk}",
        "httpMethod": "PATCH",
        "method": "update",
        "resourceType": "disks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.externalVpnGateways.delete": {
        "description": "Deletes the specified externalVpnGateway.",
        "flatPath": "projects/{project}/global/externalVpnGateways/{externalVpnGateway}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "externalVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.externalVpnGateways.get": {
        "description": "Returns the specified externalVpnGateway. Get a list of available externalVpnGateways by making a list() request.",
        "flatPath": "projects/{project}/global/externalVpnGateways/{externalVpnGateway}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "externalVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.externalVpnGateways.insert": {
        "description": "Creates a ExternalVpnGateway in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/externalVpnGateways",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "externalVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.externalVpnGateways.list": {
        "description": "Retrieves the list of ExternalVpnGateway available to the specified project.",
        "flatPath": "projects/{project}/global/externalVpnGateways",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "externalVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.externalVpnGateways.setLabels": {
        "description": "Sets the labels on an ExternalVpnGateway. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/global/externalVpnGateways/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "externalVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.externalVpnGateways.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/externalVpnGateways/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "externalVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.addAssociation": {
        "description": "Inserts an association for the specified firewall policy.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}/addAssociation",
        "httpMethod": "POST",
        "method": "addAssociation",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.addRule": {
        "description": "Inserts a rule into a firewall policy.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}/addRule",
        "httpMethod": "POST",
        "method": "addRule",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.cloneRules": {
        "description": "Copies rules to the specified firewall policy.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}/cloneRules",
        "httpMethod": "POST",
        "method": "cloneRules",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.delete": {
        "description": "Deletes the specified policy.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.get": {
        "description": "Returns the specified firewall policy.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.getAssociation": {
        "description": "Gets an association with the specified name.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}/getAssociation",
        "httpMethod": "GET",
        "method": "getAssociation",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "locations/global/firewallPolicies/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.getRule": {
        "description": "Gets a rule of the specified priority.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}/getRule",
        "httpMethod": "GET",
        "method": "getRule",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.insert": {
        "description": "Creates a new policy in the specified project using the data included in the request.",
        "flatPath": "locations/global/firewallPolicies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.list": {
        "description": "Lists all the policies that have been configured for the specified folder or organization.",
        "flatPath": "locations/global/firewallPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.listAssociations": {
        "description": "Lists associations of a specified target, i.e., organization or folder.",
        "flatPath": "locations/global/firewallPolicies/listAssociations",
        "httpMethod": "GET",
        "method": "listAssociations",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.move": {
        "description": "Moves the specified firewall policy.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}/move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.patch": {
        "description": "Patches the specified policy with the data included in the request.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.patchRule": {
        "description": "Patches a rule of the specified priority.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}/patchRule",
        "httpMethod": "POST",
        "method": "patchRule",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.removeAssociation": {
        "description": "Removes an association for the specified firewall policy.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}/removeAssociation",
        "httpMethod": "POST",
        "method": "removeAssociation",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.removeRule": {
        "description": "Deletes a rule of the specified priority.",
        "flatPath": "locations/global/firewallPolicies/{firewallPolicy}/removeRule",
        "httpMethod": "POST",
        "method": "removeRule",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "locations/global/firewallPolicies/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewallPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "locations/global/firewallPolicies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "firewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewalls.delete": {
        "description": "Deletes the specified firewall.",
        "flatPath": "projects/{project}/global/firewalls/{firewall}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "firewalls",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewalls.get": {
        "description": "Returns the specified firewall.",
        "flatPath": "projects/{project}/global/firewalls/{firewall}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "firewalls",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewalls.insert": {
        "description": "Creates a firewall rule in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/firewalls",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "firewalls",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewalls.list": {
        "description": "Retrieves the list of firewall rules available to the specified project.",
        "flatPath": "projects/{project}/global/firewalls",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "firewalls",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewalls.patch": {
        "description": "Updates the specified firewall rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/firewalls/{firewall}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "firewalls",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.firewalls.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/firewalls/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "firewalls",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.firewalls.update": {
        "description": "Updates the specified firewall rule with the data included in the request. Note that all fields will be updated if using PUT, even fields that are not specified. To update individual fields, please use PATCH instead.",
        "flatPath": "projects/{project}/global/firewalls/{firewall}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "firewalls",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.forwardingRules.aggregatedList": {
        "description": "Retrieves an aggregated list of forwarding rules.",
        "flatPath": "projects/{project}/aggregated/forwardingRules",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "forwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.forwardingRules.delete": {
        "description": "Deletes the specified ForwardingRule resource.",
        "flatPath": "projects/{project}/regions/{region}/forwardingRules/{forwardingRule}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "forwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.forwardingRules.get": {
        "description": "Returns the specified ForwardingRule resource.",
        "flatPath": "projects/{project}/regions/{region}/forwardingRules/{forwardingRule}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "forwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.forwardingRules.insert": {
        "description": "Creates a ForwardingRule resource in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/forwardingRules",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "forwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.forwardingRules.list": {
        "description": "Retrieves a list of ForwardingRule resources available to the specified project and region.",
        "flatPath": "projects/{project}/regions/{region}/forwardingRules",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "forwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.forwardingRules.patch": {
        "description": "Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.",
        "flatPath": "projects/{project}/regions/{region}/forwardingRules/{forwardingRule}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "forwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.forwardingRules.setLabels": {
        "description": "Sets the labels on the specified resource. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/regions/{region}/forwardingRules/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "forwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.forwardingRules.setTarget": {
        "description": "Changes target URL for forwarding rule. The new target should be of the same type as the old target.",
        "flatPath": "projects/{project}/regions/{region}/forwardingRules/{forwardingRule}/setTarget",
        "httpMethod": "POST",
        "method": "setTarget",
        "resourceType": "forwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.forwardingRules.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/forwardingRules/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "forwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.futureReservations.aggregatedList": {
        "description": "Retrieves an aggregated list of future reservations.",
        "flatPath": "projects/{project}/aggregated/futureReservations",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "futureReservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.futureReservations.cancel": {
        "description": "Cancel the specified future reservation.",
        "flatPath": "projects/{project}/zones/{zone}/futureReservations/{futureReservation}/cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "futureReservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.futureReservations.delete": {
        "description": "Deletes the specified future reservation.",
        "flatPath": "projects/{project}/zones/{zone}/futureReservations/{futureReservation}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "futureReservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.futureReservations.get": {
        "description": "Retrieves information about the specified future reservation.",
        "flatPath": "projects/{project}/zones/{zone}/futureReservations/{futureReservation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "futureReservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.futureReservations.insert": {
        "description": "Creates a new Future Reservation.",
        "flatPath": "projects/{project}/zones/{zone}/futureReservations",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "futureReservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.futureReservations.list": {
        "description": "A list of all the future reservations that have been configured for the specified project in specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/futureReservations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "futureReservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.futureReservations.update": {
        "description": "Updates the specified future reservation.",
        "flatPath": "projects/{project}/zones/{zone}/futureReservations/{futureReservation}",
        "httpMethod": "PATCH",
        "method": "update",
        "resourceType": "futureReservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.globalAddresses.delete": {
        "description": "Deletes the specified address resource.",
        "flatPath": "projects/{project}/global/addresses/{address}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "globalAddresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalAddresses.get": {
        "description": "Returns the specified address resource. Gets a list of available addresses by making a list() request.",
        "flatPath": "projects/{project}/global/addresses/{address}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "globalAddresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalAddresses.getOwnerInstance": {
        "description": "Find owner instance from given ip address",
        "flatPath": "projects/{project}/global/addresses/getOwnerInstance",
        "httpMethod": "GET",
        "method": "getOwnerInstance",
        "resourceType": "globalAddresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.globalAddresses.insert": {
        "description": "Creates an address resource in the specified project by using the data included in the request.",
        "flatPath": "projects/{project}/global/addresses",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "globalAddresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalAddresses.list": {
        "description": "Retrieves a list of global addresses.",
        "flatPath": "projects/{project}/global/addresses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "globalAddresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalAddresses.setLabels": {
        "description": "Sets the labels on a GlobalAddress. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/global/addresses/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "globalAddresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.globalAddresses.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/addresses/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "globalAddresses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.globalForwardingRules.delete": {
        "description": "Deletes the specified GlobalForwardingRule resource.",
        "flatPath": "projects/{project}/global/forwardingRules/{forwardingRule}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "globalForwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalForwardingRules.get": {
        "description": "Returns the specified GlobalForwardingRule resource. Gets a list of available forwarding rules by making a list() request.",
        "flatPath": "projects/{project}/global/forwardingRules/{forwardingRule}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "globalForwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalForwardingRules.insert": {
        "description": "Creates a GlobalForwardingRule resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/forwardingRules",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "globalForwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalForwardingRules.list": {
        "description": "Retrieves a list of GlobalForwardingRule resources available to the specified project.",
        "flatPath": "projects/{project}/global/forwardingRules",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "globalForwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalForwardingRules.patch": {
        "description": "Updates the specified forwarding rule with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. Currently, you can only patch the network_tier field.",
        "flatPath": "projects/{project}/global/forwardingRules/{forwardingRule}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "globalForwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalForwardingRules.setLabels": {
        "description": "Sets the labels on the specified resource. To learn more about labels, read the Labeling resources documentation.",
        "flatPath": "projects/{project}/global/forwardingRules/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "globalForwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalForwardingRules.setTarget": {
        "description": "Changes target URL for the GlobalForwardingRule resource. The new target should be of the same type as the old target.",
        "flatPath": "projects/{project}/global/forwardingRules/{forwardingRule}/setTarget",
        "httpMethod": "POST",
        "method": "setTarget",
        "resourceType": "globalForwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalForwardingRules.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/forwardingRules/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "globalForwardingRules",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.globalNetworkEndpointGroups.attachNetworkEndpoints": {
        "description": "Attach a network endpoint to the specified network endpoint group.",
        "flatPath": "projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints",
        "httpMethod": "POST",
        "method": "attachNetworkEndpoints",
        "resourceType": "globalNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalNetworkEndpointGroups.delete": {
        "description": "Deletes the specified network endpoint group.Note that the NEG cannot be deleted if there are backend services referencing it.",
        "flatPath": "projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "globalNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalNetworkEndpointGroups.detachNetworkEndpoints": {
        "description": "Detach the network endpoint from the specified network endpoint group.",
        "flatPath": "projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints",
        "httpMethod": "POST",
        "method": "detachNetworkEndpoints",
        "resourceType": "globalNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalNetworkEndpointGroups.get": {
        "description": "Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.",
        "flatPath": "projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "globalNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalNetworkEndpointGroups.insert": {
        "description": "Creates a network endpoint group in the specified project using the parameters that are included in the request.",
        "flatPath": "projects/{project}/global/networkEndpointGroups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "globalNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalNetworkEndpointGroups.list": {
        "description": "Retrieves the list of network endpoint groups that are located in the specified project.",
        "flatPath": "projects/{project}/global/networkEndpointGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "globalNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalNetworkEndpointGroups.listNetworkEndpoints": {
        "description": "Lists the network endpoints in the specified network endpoint group.",
        "flatPath": "projects/{project}/global/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints",
        "httpMethod": "POST",
        "method": "listNetworkEndpoints",
        "resourceType": "globalNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalOperations.aggregatedList": {
        "description": "Retrieves an aggregated list of all operations.",
        "flatPath": "projects/{project}/aggregated/operations",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "globalOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalOperations.delete": {
        "description": "Deletes the specified Operations resource.",
        "flatPath": "projects/{project}/global/operations/{operation}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "globalOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalOperations.get": {
        "description": "Retrieves the specified Operations resource.",
        "flatPath": "projects/{project}/global/operations/{operation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "globalOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalOperations.list": {
        "description": "Retrieves a list of Operation resources contained within the specified project.",
        "flatPath": "projects/{project}/global/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "globalOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalOperations.wait": {
        "description": "Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`. ",
        "flatPath": "projects/{project}/global/operations/{operation}/wait",
        "httpMethod": "POST",
        "method": "wait",
        "resourceType": "globalOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalOrganizationOperations.delete": {
        "description": "Deletes the specified Operations resource.",
        "flatPath": "locations/global/operations/{operation}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "globalOrganizationOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalOrganizationOperations.get": {
        "description": "Retrieves the specified Operations resource. Gets a list of operations by making a `list()` request.",
        "flatPath": "locations/global/operations/{operation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "globalOrganizationOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalOrganizationOperations.list": {
        "description": "Retrieves a list of Operation resources contained within the specified organization.",
        "flatPath": "locations/global/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "globalOrganizationOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalPublicDelegatedPrefixes.delete": {
        "description": "Deletes the specified global PublicDelegatedPrefix.",
        "flatPath": "projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "globalPublicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalPublicDelegatedPrefixes.get": {
        "description": "Returns the specified global PublicDelegatedPrefix resource.",
        "flatPath": "projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "globalPublicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalPublicDelegatedPrefixes.insert": {
        "description": "Creates a global PublicDelegatedPrefix in the specified project using the parameters that are included in the request.",
        "flatPath": "projects/{project}/global/publicDelegatedPrefixes",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "globalPublicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalPublicDelegatedPrefixes.list": {
        "description": "Lists the global PublicDelegatedPrefixes for a project.",
        "flatPath": "projects/{project}/global/publicDelegatedPrefixes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "globalPublicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.globalPublicDelegatedPrefixes.patch": {
        "description": "Patches the specified global PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "globalPublicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.healthChecks.aggregatedList": {
        "description": "Retrieves the list of all HealthCheck resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/healthChecks",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "healthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.healthChecks.delete": {
        "description": "Deletes the specified HealthCheck resource.",
        "flatPath": "projects/{project}/global/healthChecks/{healthCheck}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "healthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.healthChecks.get": {
        "description": "Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.",
        "flatPath": "projects/{project}/global/healthChecks/{healthCheck}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "healthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.healthChecks.insert": {
        "description": "Creates a HealthCheck resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/healthChecks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "healthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.healthChecks.list": {
        "description": "Retrieves the list of HealthCheck resources available to the specified project.",
        "flatPath": "projects/{project}/global/healthChecks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "healthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.healthChecks.patch": {
        "description": "Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/healthChecks/{healthCheck}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "healthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.healthChecks.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/healthChecks/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "healthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.healthChecks.update": {
        "description": "Updates a HealthCheck resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/healthChecks/{healthCheck}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "healthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpHealthChecks.delete": {
        "description": "Deletes the specified HttpHealthCheck resource.",
        "flatPath": "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "httpHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpHealthChecks.get": {
        "description": "Returns the specified HttpHealthCheck resource. Gets a list of available HTTP health checks by making a list() request.",
        "flatPath": "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "httpHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpHealthChecks.insert": {
        "description": "Creates a HttpHealthCheck resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/httpHealthChecks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "httpHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpHealthChecks.list": {
        "description": "Retrieves the list of HttpHealthCheck resources available to the specified project.",
        "flatPath": "projects/{project}/global/httpHealthChecks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "httpHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpHealthChecks.patch": {
        "description": "Updates a HttpHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "httpHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpHealthChecks.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/httpHealthChecks/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "httpHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.httpHealthChecks.update": {
        "description": "Updates a HttpHealthCheck resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/httpHealthChecks/{httpHealthCheck}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "httpHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpsHealthChecks.delete": {
        "description": "Deletes the specified HttpsHealthCheck resource.",
        "flatPath": "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "httpsHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpsHealthChecks.get": {
        "description": "Returns the specified HttpsHealthCheck resource. Gets a list of available HTTPS health checks by making a list() request.",
        "flatPath": "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "httpsHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpsHealthChecks.insert": {
        "description": "Creates a HttpsHealthCheck resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/httpsHealthChecks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "httpsHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpsHealthChecks.list": {
        "description": "Retrieves the list of HttpsHealthCheck resources available to the specified project.",
        "flatPath": "projects/{project}/global/httpsHealthChecks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "httpsHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpsHealthChecks.patch": {
        "description": "Updates a HttpsHealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "httpsHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.httpsHealthChecks.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/httpsHealthChecks/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "httpsHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.httpsHealthChecks.update": {
        "description": "Updates a HttpsHealthCheck resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/httpsHealthChecks/{httpsHealthCheck}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "httpsHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.imageFamilyViews.get": {
        "description": "Returns the latest image that is part of an image family, is not deprecated and is rolled out in the specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/imageFamilyViews/{family}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "imageFamilyViews",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.delete": {
        "description": "Deletes the specified image.",
        "flatPath": "projects/{project}/global/images/{image}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.deprecate": {
        "description": "Sets the deprecation status of an image. If an empty request body is given, clears the deprecation status instead.",
        "flatPath": "projects/{project}/global/images/{image}/deprecate",
        "httpMethod": "POST",
        "method": "deprecate",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.get": {
        "description": "Returns the specified image. Gets a list of available images by making a list() request.",
        "flatPath": "projects/{project}/global/images/{image}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.getFromFamily": {
        "description": "Returns the latest image that is part of an image family and is not deprecated.",
        "flatPath": "projects/{project}/global/images/family/{family}",
        "httpMethod": "GET",
        "method": "getFromFamily",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/global/images/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.insert": {
        "description": "Creates an image in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/images",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.list": {
        "description": "Retrieves the list of custom images available to the specified project. Custom images are images you create that belong to your project. This method does not get any images that belong to other projects, including publicly-available images, like Debian 8. If you want to get a list of publicly-available images, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud.",
        "flatPath": "projects/{project}/global/images",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.patch": {
        "description": "Patches the specified image with the data included in the request. Only the following fields can be modified: family, description, deprecation status.",
        "flatPath": "projects/{project}/global/images/{image}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/global/images/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.setLabels": {
        "description": "Sets the labels on an image. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/global/images/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.images.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/images/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.abandonInstances": {
        "description": "Flags the specified instances to be removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/abandonInstances",
        "httpMethod": "POST",
        "method": "abandonInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.aggregatedList": {
        "description": "Retrieves the list of managed instance groups and groups them by zone.",
        "flatPath": "projects/{project}/aggregated/instanceGroupManagers",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.applyUpdatesToInstances": {
        "description": "Applies changes to selected instances on the managed instance group. This method can be used to apply new overrides and/or new versions.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances",
        "httpMethod": "POST",
        "method": "applyUpdatesToInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.createInstances": {
        "description": "Creates instances with per-instance configs in this managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/createInstances",
        "httpMethod": "POST",
        "method": "createInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.delete": {
        "description": "Deletes the specified managed instance group and all of the instances in that group. Note that the instance group must not belong to a backend service. Read Deleting an instance group for more information.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.deleteInstances": {
        "description": "Flags the specified instances in the managed instance group for immediate deletion. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. This operation is marked as DONE when the action is scheduled even if the instances are still being deleted. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deleteInstances",
        "httpMethod": "POST",
        "method": "deleteInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.deletePerInstanceConfigs": {
        "description": "Deletes selected per-instance configs for the managed instance group.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs",
        "httpMethod": "POST",
        "method": "deletePerInstanceConfigs",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.get": {
        "description": "Returns all of the details about the specified managed instance group. Gets a list of available managed instance groups by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.insert": {
        "description": "Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method. A managed instance group can have up to 1000 VM instances per group. Please contact Cloud Support if you need an increase in this limit.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.list": {
        "description": "Retrieves a list of managed instance groups that are contained within the specified project and zone.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.listErrors": {
        "description": "Lists all errors thrown by actions on instances for a given managed instance group. The filter and orderBy query parameters are not supported.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listErrors",
        "httpMethod": "GET",
        "method": "listErrors",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.listManagedInstances": {
        "description": "Lists all of the instances in the managed instance group. Each instance in the list has a currentAction, which indicates the action that the managed instance group is performing on the instance. For example, if the group is still creating an instance, the currentAction is CREATING. If a previous action failed, the list displays the errors for that failed action. The orderBy query parameter is not supported.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances",
        "httpMethod": "POST",
        "method": "listManagedInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.listPerInstanceConfigs": {
        "description": "Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs",
        "httpMethod": "POST",
        "method": "listPerInstanceConfigs",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.patch": {
        "description": "Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listManagedInstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.patchPerInstanceConfigs": {
        "description": "Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs",
        "httpMethod": "POST",
        "method": "patchPerInstanceConfigs",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.recreateInstances": {
        "description": "Flags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field; for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/recreateInstances",
        "httpMethod": "POST",
        "method": "recreateInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.resize": {
        "description": "Resizes the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method. When resizing down, the instance group arbitrarily chooses the order in which VMs are deleted. The group takes into account some VM attributes when making the selection including: + The status of the VM instance. + The health of the VM instance. + The instance template version the VM is based on. + For regional managed instance groups, the location of the VM instance. This list is subject to change. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resize",
        "httpMethod": "POST",
        "method": "resize",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.resizeAdvanced": {
        "description": "Resizes the managed instance group with advanced configuration options like disabling creation retries. This is an extended version of the resize method. If you increase the size of the instance group, the group creates new instances using the current instance template. If you decrease the size, the group deletes instances. The resize operation is marked DONE when the resize actions are scheduled even if the group has not yet added or deleted any instances. You must separately verify the status of the creating, creatingWithoutRetries, or deleting actions with the get or listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced",
        "httpMethod": "POST",
        "method": "resizeAdvanced",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instanceGroupManagers.resumeInstances": {
        "description": "Flags the specified instances in the managed instance group to be resumed. This method increases the targetSize and decreases the targetSuspendedSize of the managed instance group by the number of instances that you resume. The resumeInstances operation is marked DONE if the resumeInstances request is successful. The underlying actions take additional time. You must separately verify the status of the RESUMING action with the listmanagedinstances method. In this request, you can only specify instances that are suspended. For example, if an instance was previously suspended using the suspendInstances method, it can be resumed using the resumeInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are resumed. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/resumeInstances",
        "httpMethod": "POST",
        "method": "resumeInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instanceGroupManagers.setAutoHealingPolicies": {
        "description": "Motifies the autohealing policy for the instances in this managed instance group. [Deprecated] This method is deprecated. Use instanceGroupManagers.patch instead.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies",
        "httpMethod": "POST",
        "method": "setAutoHealingPolicies",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instanceGroupManagers.setInstanceTemplate": {
        "description": "Specifies the instance template to use when creating new instances in this group. The templates for existing instances in the group do not change unless you run recreateInstances, run applyUpdatesToInstances, or set the group's updatePolicy.type to PROACTIVE.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate",
        "httpMethod": "POST",
        "method": "setInstanceTemplate",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.setTargetPools": {
        "description": "Modifies the target pools to which all instances in this managed instance group are assigned. The target pools automatically apply to all of the instances in the managed instance group. This operation is marked DONE when you make the request even if the instances have not yet been added to their target pools. The change might take some time to apply to all of the instances in the group depending on the size of the group.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/setTargetPools",
        "httpMethod": "POST",
        "method": "setTargetPools",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroupManagers.startInstances": {
        "description": "Flags the specified instances in the managed instance group to be started. This method increases the targetSize and decreases the targetStoppedSize of the managed instance group by the number of instances that you start. The startInstances operation is marked DONE if the startInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STARTING action with the listmanagedinstances method. In this request, you can only specify instances that are stopped. For example, if an instance was previously stopped using the stopInstances method, it can be started using the startInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are started. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/startInstances",
        "httpMethod": "POST",
        "method": "startInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instanceGroupManagers.stopInstances": {
        "description": "Flags the specified instances in the managed instance group to be immediately stopped. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetStoppedSize of the managed instance group by the number of instances that you stop. The stopInstances operation is marked DONE if the stopInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STOPPING action with the listmanagedinstances method. If the instanceLifecyclePolicy.metadataBasedReadinessSignal field is set on the Instance Group Manager, each instance will be initialized before it is stopped, to give user programs time to perform necessary tasks. To initialize an instance, the Instance Group Manager sets the metadata key google-compute-initialization-intent to value INITIALIZE_AND_STOP on the instance, and waits for the user program to signal it is ready. This is done by setting the guest attribute path google-compute/initialization-state to value INITIALIZED. If the instance does not signal successful initialization (does not set the guest attribute to INITIALIZED) before timeout, the initialization is considered failed and the instance is not stopped. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is suspended. Stopped instances can be started using the startInstances method. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/stopInstances",
        "httpMethod": "POST",
        "method": "stopInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instanceGroupManagers.suspendInstances": {
        "description": "Flags the specified instances in the managed instance group to be immediately suspended. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetSuspendedSize of the managed instance group by the number of instances that you suspend. The suspendInstances operation is marked DONE if the suspendInstances request is successful. The underlying actions take additional time. You must separately verify the status of the SUSPENDING action with the listmanagedinstances method. If the instanceLifecyclePolicy.metadataBasedReadinessSignal field is set on the Instance Group Manager, each instance will be initialized before it is suspended, to give user programs time to perform necessary tasks. To initialize an instance, the Instance Group Manager sets the metadata key google-compute-initialization-intent to value INITIALIZE_AND_SUSPEND on the instance, and waits for the user program to signal it is ready. This is done by setting the guest attribute path google-compute/initialization-state to value INITIALIZED. If the instance does not signal successful initialization (does not set the guest attribute to INITIALIZED) before timeout, the initialization is considered failed and the instance is not suspended. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is suspended. Suspended instances can be resumed using the resumeInstances method. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/suspendInstances",
        "httpMethod": "POST",
        "method": "suspendInstances",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instanceGroupManagers.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instanceGroupManagers.update": {
        "description": "Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is updated even if the instances in the group have not yet been updated. You must separately verify the status of the individual instances with the listManagedInstances method. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instanceGroupManagers.updatePerInstanceConfigs": {
        "description": "Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs",
        "httpMethod": "POST",
        "method": "updatePerInstanceConfigs",
        "resourceType": "instanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.addInstances": {
        "description": "Adds a list of instances to the specified instance group. All of the instances in the instance group must be in the same network/subnetwork. Read Adding instances for more information.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/addInstances",
        "httpMethod": "POST",
        "method": "addInstances",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.aggregatedList": {
        "description": "Retrieves the list of instance groups and sorts them by zone.",
        "flatPath": "projects/{project}/aggregated/instanceGroups",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.delete": {
        "description": "Deletes the specified instance group. The instances in the group are not deleted. Note that instance group must not belong to a backend service. Read Deleting an instance group for more information.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.get": {
        "description": "Returns the specified zonal instance group. Get a list of available zonal instance groups by making a list() request. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.insert": {
        "description": "Creates an instance group in the specified project using the parameters that are included in the request.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.list": {
        "description": "Retrieves the list of zonal instance group resources contained within the specified zone. For managed instance groups, use the instanceGroupManagers or regionInstanceGroupManagers methods instead.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.listInstances": {
        "description": "Lists the instances in the specified instance group. The orderBy query parameter is not supported.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/listInstances",
        "httpMethod": "POST",
        "method": "listInstances",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.removeInstances": {
        "description": "Removes one or more instances from the specified instance group, but does not delete those instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration before the VM instance is removed or deleted.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/removeInstances",
        "httpMethod": "POST",
        "method": "removeInstances",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.setNamedPorts": {
        "description": "Sets the named ports for the specified instance group.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroups/{instanceGroup}/setNamedPorts",
        "httpMethod": "POST",
        "method": "setNamedPorts",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceGroups.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/instanceGroups/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "instanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instanceTemplates.delete": {
        "description": "Deletes the specified instance template. Deleting an instance template is permanent and cannot be undone. It is not possible to delete templates that are already in use by a managed instance group.",
        "flatPath": "projects/{project}/global/instanceTemplates/{instanceTemplate}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instanceTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceTemplates.get": {
        "description": "Returns the specified instance template. Gets a list of available instance templates by making a list() request.",
        "flatPath": "projects/{project}/global/instanceTemplates/{instanceTemplate}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instanceTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceTemplates.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/global/instanceTemplates/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "instanceTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceTemplates.insert": {
        "description": "Creates an instance template in the specified project using the data that is included in the request. If you are creating a new template to update an existing instance group, your new instance template must use the same network or, if applicable, the same subnetwork as the original template.",
        "flatPath": "projects/{project}/global/instanceTemplates",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "instanceTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceTemplates.list": {
        "description": "Retrieves a list of instance templates that are contained within the specified project.",
        "flatPath": "projects/{project}/global/instanceTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instanceTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceTemplates.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/global/instanceTemplates/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "instanceTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instanceTemplates.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/instanceTemplates/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "instanceTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.addAccessConfig": {
        "description": "Adds an access config to an instance's network interface.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/addAccessConfig",
        "httpMethod": "POST",
        "method": "addAccessConfig",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.addResourcePolicies": {
        "description": "Adds existing resource policies to an instance. You can only add one policy right now which will be applied to this instance for scheduling live migrations.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/addResourcePolicies",
        "httpMethod": "POST",
        "method": "addResourcePolicies",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.aggregatedList": {
        "description": "Retrieves an aggregated list of all of the instances in your project across all regions and zones. The performance of this method degrades when a filter is specified on a project that has a very large number of instances.",
        "flatPath": "projects/{project}/aggregated/instances",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.attachDisk": {
        "description": "Attaches an existing Disk resource to an instance. You must first create the disk before you can attach it. It is not possible to create and attach a disk at the same time. For more information, read Adding a persistent disk to your instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/attachDisk",
        "httpMethod": "POST",
        "method": "attachDisk",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.bulkInsert": {
        "description": "Creates multiple instances. Count specifies the number of instances to create.",
        "flatPath": "projects/{project}/zones/{zone}/instances/bulkInsert",
        "httpMethod": "POST",
        "method": "bulkInsert",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.delete": {
        "description": "Deletes the specified Instance resource. For more information, see Deleting an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.deleteAccessConfig": {
        "description": "Deletes an access config from an instance's network interface.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/deleteAccessConfig",
        "httpMethod": "POST",
        "method": "deleteAccessConfig",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.detachDisk": {
        "description": "Detaches a disk from an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/detachDisk",
        "httpMethod": "POST",
        "method": "detachDisk",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.get": {
        "description": "Returns the specified Instance resource. Gets a list of available instances by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.getEffectiveFirewalls": {
        "description": "Returns effective firewalls applied to an interface of the instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/getEffectiveFirewalls",
        "httpMethod": "GET",
        "method": "getEffectiveFirewalls",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.getGuestAttributes": {
        "description": "Returns the specified guest attributes entry.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/getGuestAttributes",
        "httpMethod": "GET",
        "method": "getGuestAttributes",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.getScreenshot": {
        "description": "Returns the screenshot from the specified instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/screenshot",
        "httpMethod": "GET",
        "method": "getScreenshot",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.getSerialPortOutput": {
        "description": "Returns the last 1 MB of serial port output from the specified instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/serialPort",
        "httpMethod": "GET",
        "method": "getSerialPortOutput",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.getShieldedInstanceIdentity": {
        "description": "Returns the Shielded Instance Identity of an instance",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/getShieldedInstanceIdentity",
        "httpMethod": "GET",
        "method": "getShieldedInstanceIdentity",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.getShieldedVmIdentity": {
        "description": "Returns the Shielded VM Identity of an instance",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/getShieldedVmIdentity",
        "httpMethod": "GET",
        "method": "getShieldedVmIdentity",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instances.insert": {
        "description": "Creates an instance resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/zones/{zone}/instances",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.list": {
        "description": "Retrieves the list of instances contained within the specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.listReferrers": {
        "description": "Retrieves a list of resources that refer to the VM instance specified in the request. For example, if the VM instance is part of a managed or unmanaged instance group, the referrers list includes the instance group. For more information, read Viewing referrers to VM instances.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/referrers",
        "httpMethod": "GET",
        "method": "listReferrers",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.performMaintenance": {
        "description": "Perform a manual maintenance on the instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/performMaintenance",
        "httpMethod": "POST",
        "method": "performMaintenance",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instances.removeResourcePolicies": {
        "description": "Removes resource policies from an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/removeResourcePolicies",
        "httpMethod": "POST",
        "method": "removeResourcePolicies",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.reset": {
        "description": "Performs a reset on the instance. This is a hard reset the VM does not do a graceful shutdown. For more information, see Resetting an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/reset",
        "httpMethod": "POST",
        "method": "reset",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.resume": {
        "description": "Resumes an instance that was suspended using the instances().suspend method.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/resume",
        "httpMethod": "POST",
        "method": "resume",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instances.sendDiagnosticInterrupt": {
        "description": "Sends diagnostic interrupt to the instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/sendDiagnosticInterrupt",
        "httpMethod": "POST",
        "method": "sendDiagnosticInterrupt",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setDeletionProtection": {
        "description": "Sets deletion protection on the instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{resource}/setDeletionProtection",
        "httpMethod": "POST",
        "method": "setDeletionProtection",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setDiskAutoDelete": {
        "description": "Sets the auto-delete flag for a disk attached to an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setDiskAutoDelete",
        "httpMethod": "POST",
        "method": "setDiskAutoDelete",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setLabels": {
        "description": "Sets labels on an instance. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setMachineResources": {
        "description": "Changes the number and/or type of accelerator for a stopped instance to the values specified in the request.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setMachineResources",
        "httpMethod": "POST",
        "method": "setMachineResources",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setMachineType": {
        "description": "Changes the machine type for a stopped instance to the machine type specified in the request.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setMachineType",
        "httpMethod": "POST",
        "method": "setMachineType",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setMetadata": {
        "description": "Sets metadata for the specified instance to the data included in the request.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setMetadata",
        "httpMethod": "POST",
        "method": "setMetadata",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setMinCpuPlatform": {
        "description": "Changes the minimum CPU platform that this instance should use. This method can only be called on a stopped instance. For more information, read Specifying a Minimum CPU Platform.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setMinCpuPlatform",
        "httpMethod": "POST",
        "method": "setMinCpuPlatform",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setName": {
        "description": "Sets name of an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setName",
        "httpMethod": "POST",
        "method": "setName",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instances.setScheduling": {
        "description": "Sets an instance's scheduling options. You can only call this method on a stopped instance, that is, a VM instance that is in a `TERMINATED` state. See Instance Life Cycle for more information on the possible instance states.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setScheduling",
        "httpMethod": "POST",
        "method": "setScheduling",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setServiceAccount": {
        "description": "Sets the service account on the instance. For more information, read Changing the service account and access scopes for an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setServiceAccount",
        "httpMethod": "POST",
        "method": "setServiceAccount",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setShieldedInstanceIntegrityPolicy": {
        "description": "Sets the Shielded Instance integrity policy for an instance. You can only use this method on a running instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setShieldedInstanceIntegrityPolicy",
        "httpMethod": "PATCH",
        "method": "setShieldedInstanceIntegrityPolicy",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.setShieldedVmIntegrityPolicy": {
        "description": "Sets the Shielded VM integrity policy for a VM instance. You can only use this method on a running VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setShieldedVmIntegrityPolicy",
        "httpMethod": "PATCH",
        "method": "setShieldedVmIntegrityPolicy",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instances.setTags": {
        "description": "Sets network tags for the specified instance to the data included in the request.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/setTags",
        "httpMethod": "POST",
        "method": "setTags",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.simulateMaintenanceEvent": {
        "description": "Simulates a maintenance event on the instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/simulateMaintenanceEvent",
        "httpMethod": "POST",
        "method": "simulateMaintenanceEvent",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.start": {
        "description": "Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/start",
        "httpMethod": "POST",
        "method": "start",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.startWithEncryptionKey": {
        "description": "Starts an instance that was stopped using the instances().stop method. For more information, see Restart an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/startWithEncryptionKey",
        "httpMethod": "POST",
        "method": "startWithEncryptionKey",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.stop": {
        "description": "Stops a running instance, shutting it down cleanly, and allows you to restart the instance at a later time. Stopped instances do not incur VM usage charges while they are stopped. However, resources that the VM is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted. For more information, see Stopping an instance.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.suspend": {
        "description": "This method suspends a running instance, saving its state to persistent storage, and allows you to resume the instance at a later time. Suspended instances incur reduced per-minute, virtual machine usage charges while they are suspended. Any resources the virtual machine is using, such as persistent disks and static IP addresses, will continue to be charged until they are deleted.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/suspend",
        "httpMethod": "POST",
        "method": "suspend",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instances.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.update": {
        "description": "Updates an instance only if the necessary resources are available. This method can update only a specific set of instance properties. See Updating a running instance for a list of updatable instance properties.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.updateAccessConfig": {
        "description": "Updates the specified access config from an instance's network interface with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/updateAccessConfig",
        "httpMethod": "POST",
        "method": "updateAccessConfig",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.updateDisplayDevice": {
        "description": "Updates the Display config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/updateDisplayDevice",
        "httpMethod": "PATCH",
        "method": "updateDisplayDevice",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.updateNetworkInterface": {
        "description": "Updates an instance's network interface. This method can only update an interface's alias IP range and attached network. See Modifying alias IP ranges for an existing instance for instructions on changing alias IP ranges. See Migrating a VM between networks for instructions on migrating an interface. This method follows PATCH semantics.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/updateNetworkInterface",
        "httpMethod": "PATCH",
        "method": "updateNetworkInterface",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.updateShieldedInstanceConfig": {
        "description": "Updates the Shielded Instance config for an instance. You can only use this method on a stopped instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/updateShieldedInstanceConfig",
        "httpMethod": "PATCH",
        "method": "updateShieldedInstanceConfig",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.instances.updateShieldedVmConfig": {
        "description": "Updates the Shielded VM config for a VM instance. You can only use this method on a stopped VM instance. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/zones/{zone}/instances/{instance}/updateShieldedVmConfig",
        "httpMethod": "PATCH",
        "method": "updateShieldedVmConfig",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.instantSnapshots.aggregatedList": {
        "description": "Retrieves an aggregated list of instantSnapshots.",
        "flatPath": "projects/{project}/aggregated/instantSnapshots",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instantSnapshots.delete": {
        "description": "Deletes the specified InstantSnapshot resource. Keep in mind that deleting a single instantSnapshot might not necessarily delete all the data on that instantSnapshot. If any data on the instantSnapshot that is marked for deletion is needed for subsequent instantSnapshots, the data will be moved to the next corresponding instantSnapshot. For more information, see Deleting instantSnapshots.",
        "flatPath": "projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instantSnapshots.export": {
        "description": "Export the changed blocks between two instant snapshots to a customer's bucket in the user specified format.",
        "flatPath": "projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}/export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instantSnapshots.get": {
        "description": "Returns the specified InstantSnapshot resource in the specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/instantSnapshots/{instantSnapshot}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instantSnapshots.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/zones/{zone}/instantSnapshots/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instantSnapshots.insert": {
        "description": "Creates an instant snapshot in the specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/instantSnapshots",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instantSnapshots.list": {
        "description": "Retrieves the list of InstantSnapshot resources contained within the specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/instantSnapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instantSnapshots.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/zones/{zone}/instantSnapshots/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instantSnapshots.setLabels": {
        "description": "Sets the labels on a instantSnapshot in the given zone. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/zones/{zone}/instantSnapshots/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.instantSnapshots.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/instantSnapshots/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "instantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.interconnectAttachments.aggregatedList": {
        "description": "Retrieves an aggregated list of interconnect attachments.",
        "flatPath": "projects/{project}/aggregated/interconnectAttachments",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnectAttachments.delete": {
        "description": "Deletes the specified interconnect attachment.",
        "flatPath": "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnectAttachments.get": {
        "description": "Returns the specified interconnect attachment.",
        "flatPath": "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnectAttachments.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/regions/{region}/interconnectAttachments/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.interconnectAttachments.insert": {
        "description": "Creates an InterconnectAttachment in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/interconnectAttachments",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnectAttachments.list": {
        "description": "Retrieves the list of interconnect attachments contained within the specified region.",
        "flatPath": "projects/{project}/regions/{region}/interconnectAttachments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnectAttachments.patch": {
        "description": "Updates the specified interconnect attachment with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/interconnectAttachments/{interconnectAttachment}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnectAttachments.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/regions/{region}/interconnectAttachments/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.interconnectAttachments.setLabels": {
        "description": "Sets the labels on an InterconnectAttachment. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/regions/{region}/interconnectAttachments/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.interconnectAttachments.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/interconnectAttachments/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "interconnectAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.interconnectLocations.get": {
        "description": "Returns the details for the specified interconnect location. Gets a list of available interconnect locations by making a list() request.",
        "flatPath": "projects/{project}/global/interconnectLocations/{interconnectLocation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "interconnectLocations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnectLocations.list": {
        "description": "Retrieves the list of interconnect locations available to the specified project.",
        "flatPath": "projects/{project}/global/interconnectLocations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "interconnectLocations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnectLocations.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/interconnectLocations/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "interconnectLocations",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.interconnects.delete": {
        "description": "Deletes the specified interconnect.",
        "flatPath": "projects/{project}/global/interconnects/{interconnect}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnects.get": {
        "description": "Returns the specified interconnect. Get a list of available interconnects by making a list() request.",
        "flatPath": "projects/{project}/global/interconnects/{interconnect}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnects.getDiagnostics": {
        "description": "Returns the interconnectDiagnostics for the specified interconnect.",
        "flatPath": "projects/{project}/global/interconnects/{interconnect}/getDiagnostics",
        "httpMethod": "GET",
        "method": "getDiagnostics",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnects.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/global/interconnects/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.interconnects.getMacsecConfig": {
        "description": "Returns the interconnectMacsecConfig for the specified interconnect.",
        "flatPath": "projects/{project}/global/interconnects/{interconnect}/getMacsecConfig",
        "httpMethod": "GET",
        "method": "getMacsecConfig",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.interconnects.insert": {
        "description": "Creates a Interconnect in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/interconnects",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnects.list": {
        "description": "Retrieves the list of interconnect available to the specified project.",
        "flatPath": "projects/{project}/global/interconnects",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnects.patch": {
        "description": "Updates the specified interconnect with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/interconnects/{interconnect}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.interconnects.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/global/interconnects/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.interconnects.setLabels": {
        "description": "Sets the labels on an Interconnect. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/global/interconnects/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.interconnects.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/interconnects/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "interconnects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.licenseCodes.get": {
        "description": "Return a specified license code. License codes are mirrored across all projects that have permissions to read the License Code. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenseCodes/{licenseCode}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "licenseCodes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.licenseCodes.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenseCodes/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "licenseCodes",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.licenseCodes.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenseCodes/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "licenseCodes",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.licenseCodes.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenseCodes/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "licenseCodes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.licenses.delete": {
        "description": "Deletes the specified license. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenses/{license}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "licenses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.licenses.get": {
        "description": "Returns the specified License resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenses/{license}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "licenses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.licenses.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenses/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "licenses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.licenses.insert": {
        "description": "Create a License resource in the specified project. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenses",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "licenses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.licenses.list": {
        "description": "Retrieves the list of licenses available in the specified project. This method does not get any licenses that belong to other projects, including licenses attached to publicly-available images, like Debian 9. If you want to get a list of publicly-available licenses, use this method to make a request to the respective image project, such as debian-cloud or windows-cloud. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "licenses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.licenses.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenses/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "licenses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.licenses.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. *Caution* This resource is intended for use only by third-party partners who are creating Cloud Marketplace images. ",
        "flatPath": "projects/{project}/global/licenses/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "licenses",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.machineImages.delete": {
        "description": "Deletes the specified machine image. Deleting a machine image is permanent and cannot be undone.",
        "flatPath": "projects/{project}/global/machineImages/{machineImage}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "machineImages",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.machineImages.get": {
        "description": "Returns the specified machine image. Gets a list of available machine images by making a list() request.",
        "flatPath": "projects/{project}/global/machineImages/{machineImage}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "machineImages",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.machineImages.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/global/machineImages/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "machineImages",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.machineImages.insert": {
        "description": "Creates a machine image in the specified project using the data that is included in the request. If you are creating a new machine image to update an existing instance, your new machine image should use the same network or, if applicable, the same subnetwork as the original instance.",
        "flatPath": "projects/{project}/global/machineImages",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "machineImages",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.machineImages.list": {
        "description": "Retrieves a list of machine images that are contained within the specified project.",
        "flatPath": "projects/{project}/global/machineImages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "machineImages",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.machineImages.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/global/machineImages/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "machineImages",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.machineImages.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/machineImages/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "machineImages",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.machineTypes.aggregatedList": {
        "description": "Retrieves an aggregated list of machine types.",
        "flatPath": "projects/{project}/aggregated/machineTypes",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "machineTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.machineTypes.get": {
        "description": "Returns the specified machine type. Gets a list of available machine types by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}/machineTypes/{machineType}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "machineTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.machineTypes.list": {
        "description": "Retrieves a list of machine types available to the specified project.",
        "flatPath": "projects/{project}/zones/{zone}/machineTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "machineTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkEdgeSecurityServices.aggregatedList": {
        "description": "Retrieves the list of all NetworkEdgeSecurityService resources available to the specified project.",
        "flatPath": "projects/{project}/aggregated/networkEdgeSecurityServices",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "networkEdgeSecurityServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkEdgeSecurityServices.delete": {
        "description": "Deletes the specified service.",
        "flatPath": "projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "networkEdgeSecurityServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkEdgeSecurityServices.get": {
        "description": "Gets a specified NetworkEdgeSecurityService.",
        "flatPath": "projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "networkEdgeSecurityServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkEdgeSecurityServices.insert": {
        "description": "Creates a new service in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/networkEdgeSecurityServices",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "networkEdgeSecurityServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkEdgeSecurityServices.patch": {
        "description": "Patches the specified policy with the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/networkEdgeSecurityServices/{networkEdgeSecurityService}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "networkEdgeSecurityServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkEndpointGroups.aggregatedList": {
        "description": "Retrieves the list of network endpoint groups and sorts them by zone.",
        "flatPath": "projects/{project}/aggregated/networkEndpointGroups",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "networkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkEndpointGroups.attachNetworkEndpoints": {
        "description": "Attach a list of network endpoints to the specified network endpoint group.",
        "flatPath": "projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/attachNetworkEndpoints",
        "httpMethod": "POST",
        "method": "attachNetworkEndpoints",
        "resourceType": "networkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkEndpointGroups.delete": {
        "description": "Deletes the specified network endpoint group. The network endpoints in the NEG and the VM instances they belong to are not terminated when the NEG is deleted. Note that the NEG cannot be deleted if there are backend services referencing it.",
        "flatPath": "projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "networkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkEndpointGroups.detachNetworkEndpoints": {
        "description": "Detach a list of network endpoints from the specified network endpoint group.",
        "flatPath": "projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/detachNetworkEndpoints",
        "httpMethod": "POST",
        "method": "detachNetworkEndpoints",
        "resourceType": "networkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkEndpointGroups.get": {
        "description": "Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "networkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkEndpointGroups.insert": {
        "description": "Creates a network endpoint group in the specified project using the parameters that are included in the request.",
        "flatPath": "projects/{project}/zones/{zone}/networkEndpointGroups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "networkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkEndpointGroups.list": {
        "description": "Retrieves the list of network endpoint groups that are located in the specified project and zone.",
        "flatPath": "projects/{project}/zones/{zone}/networkEndpointGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "networkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkEndpointGroups.listNetworkEndpoints": {
        "description": "Lists the network endpoints in the specified network endpoint group.",
        "flatPath": "projects/{project}/zones/{zone}/networkEndpointGroups/{networkEndpointGroup}/listNetworkEndpoints",
        "httpMethod": "POST",
        "method": "listNetworkEndpoints",
        "resourceType": "networkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkEndpointGroups.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/networkEndpointGroups/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "networkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networkFirewallPolicies.addAssociation": {
        "description": "Inserts an association for the specified firewall policy.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}/addAssociation",
        "httpMethod": "POST",
        "method": "addAssociation",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.addRule": {
        "description": "Inserts a rule into a firewall policy.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}/addRule",
        "httpMethod": "POST",
        "method": "addRule",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.cloneRules": {
        "description": "Copies rules to the specified firewall policy.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}/cloneRules",
        "httpMethod": "POST",
        "method": "cloneRules",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.delete": {
        "description": "Deletes the specified policy.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.get": {
        "description": "Returns the specified network firewall policy.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.getAssociation": {
        "description": "Gets an association with the specified name.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}/getAssociation",
        "httpMethod": "GET",
        "method": "getAssociation",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/global/firewallPolicies/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.getRule": {
        "description": "Gets a rule of the specified priority.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}/getRule",
        "httpMethod": "GET",
        "method": "getRule",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.insert": {
        "description": "Creates a new policy in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/firewallPolicies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.list": {
        "description": "Lists all the policies that have been configured for the specified project.",
        "flatPath": "projects/{project}/global/firewallPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.patch": {
        "description": "Patches the specified policy with the data included in the request.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.patchRule": {
        "description": "Patches a rule of the specified priority.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}/patchRule",
        "httpMethod": "POST",
        "method": "patchRule",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.removeAssociation": {
        "description": "Removes an association for the specified firewall policy.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}/removeAssociation",
        "httpMethod": "POST",
        "method": "removeAssociation",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.removeRule": {
        "description": "Deletes a rule of the specified priority.",
        "flatPath": "projects/{project}/global/firewallPolicies/{firewallPolicy}/removeRule",
        "httpMethod": "POST",
        "method": "removeRule",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/global/firewallPolicies/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networkFirewallPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/firewallPolicies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "networkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networks.addPeering": {
        "description": "Adds a peering to the specified network.",
        "flatPath": "projects/{project}/global/networks/{network}/addPeering",
        "httpMethod": "POST",
        "method": "addPeering",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.delete": {
        "description": "Deletes the specified network.",
        "flatPath": "projects/{project}/global/networks/{network}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.get": {
        "description": "Returns the specified network. Gets a list of available networks by making a list() request.",
        "flatPath": "projects/{project}/global/networks/{network}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.getEffectiveFirewalls": {
        "description": "Returns the effective firewalls on a given network.",
        "flatPath": "projects/{project}/global/networks/{network}/getEffectiveFirewalls",
        "httpMethod": "GET",
        "method": "getEffectiveFirewalls",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.insert": {
        "description": "Creates a network in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/networks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.list": {
        "description": "Retrieves the list of networks available to the specified project.",
        "flatPath": "projects/{project}/global/networks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.listIpAddresses": {
        "description": "Lists the internal IP addresses in the specified network.",
        "flatPath": "projects/{project}/global/networks/{network}/listIpAddresses",
        "httpMethod": "GET",
        "method": "listIpAddresses",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networks.listIpOwners": {
        "description": "Lists the internal IP owners in the specified network.",
        "flatPath": "projects/{project}/global/networks/{network}/listIpOwners",
        "httpMethod": "GET",
        "method": "listIpOwners",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.networks.listPeeringRoutes": {
        "description": "Lists the peering routes exchanged over peering connection.",
        "flatPath": "projects/{project}/global/networks/{network}/listPeeringRoutes",
        "httpMethod": "GET",
        "method": "listPeeringRoutes",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.patch": {
        "description": "Patches the specified network with the data included in the request. Only the following fields can be modified: routingConfig.routingMode.",
        "flatPath": "projects/{project}/global/networks/{network}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.removePeering": {
        "description": "Removes a peering from the specified network.",
        "flatPath": "projects/{project}/global/networks/{network}/removePeering",
        "httpMethod": "POST",
        "method": "removePeering",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.switchToCustomMode": {
        "description": "Switches the network mode from auto subnet mode to custom subnet mode.",
        "flatPath": "projects/{project}/global/networks/{network}/switchToCustomMode",
        "httpMethod": "POST",
        "method": "switchToCustomMode",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.networks.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/networks/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.networks.updatePeering": {
        "description": "Updates the specified network peering with the data included in the request. You can only modify the NetworkPeering.export_custom_routes field and the NetworkPeering.import_custom_routes field.",
        "flatPath": "projects/{project}/global/networks/{network}/updatePeering",
        "httpMethod": "PATCH",
        "method": "updatePeering",
        "resourceType": "networks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.addNodes": {
        "description": "Adds specified number of nodes to the node group.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/addNodes",
        "httpMethod": "POST",
        "method": "addNodes",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.aggregatedList": {
        "description": "Retrieves an aggregated list of node groups. Note: use nodeGroups.listNodes for more details about each group.",
        "flatPath": "projects/{project}/aggregated/nodeGroups",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.delete": {
        "description": "Deletes the specified NodeGroup resource.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.deleteNodes": {
        "description": "Deletes specified nodes from the node group.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/deleteNodes",
        "httpMethod": "POST",
        "method": "deleteNodes",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.get": {
        "description": "Returns the specified NodeGroup. Get a list of available NodeGroups by making a list() request. Note: the \"nodes\" field should not be used. Use nodeGroups.listNodes instead.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.insert": {
        "description": "Creates a NodeGroup resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.list": {
        "description": "Retrieves a list of node groups available to the specified project. Note: use nodeGroups.listNodes for more details about each group.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.listNodes": {
        "description": "Lists nodes in the node group.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/listNodes",
        "httpMethod": "POST",
        "method": "listNodes",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.patch": {
        "description": "Updates the specified node group.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.setNodeTemplate": {
        "description": "Updates the node template of the node group.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{nodeGroup}/setNodeTemplate",
        "httpMethod": "POST",
        "method": "setNodeTemplate",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeGroups.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/nodeGroups/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "nodeGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTemplates.aggregatedList": {
        "description": "Retrieves an aggregated list of node templates.",
        "flatPath": "projects/{project}/aggregated/nodeTemplates",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "nodeTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTemplates.delete": {
        "description": "Deletes the specified NodeTemplate resource.",
        "flatPath": "projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "nodeTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTemplates.get": {
        "description": "Returns the specified node template. Gets a list of available node templates by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/nodeTemplates/{nodeTemplate}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodeTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTemplates.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/regions/{region}/nodeTemplates/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "nodeTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTemplates.insert": {
        "description": "Creates a NodeTemplate resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/nodeTemplates",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "nodeTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTemplates.list": {
        "description": "Retrieves a list of node templates available to the specified project.",
        "flatPath": "projects/{project}/regions/{region}/nodeTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodeTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTemplates.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/regions/{region}/nodeTemplates/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "nodeTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTemplates.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/nodeTemplates/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "nodeTemplates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTypes.aggregatedList": {
        "description": "Retrieves an aggregated list of node types.",
        "flatPath": "projects/{project}/aggregated/nodeTypes",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "nodeTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTypes.get": {
        "description": "Returns the specified node type. Gets a list of available node types by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}/nodeTypes/{nodeType}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodeTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.nodeTypes.list": {
        "description": "Retrieves a list of node types available to the specified project.",
        "flatPath": "projects/{project}/zones/{zone}/nodeTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodeTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.organizationSecurityPolicies.addAssociation": {
        "description": "Inserts an association for the specified security policy.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}/addAssociation",
        "httpMethod": "POST",
        "method": "addAssociation",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.addRule": {
        "description": "Inserts a rule into a security policy.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}/addRule",
        "httpMethod": "POST",
        "method": "addRule",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.copyRules": {
        "description": "Copies rules to the specified security policy.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}/copyRules",
        "httpMethod": "POST",
        "method": "copyRules",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.delete": {
        "description": "Deletes the specified policy.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.get": {
        "description": "List all of the ordered rules present in a single specified policy.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.getAssociation": {
        "description": "Gets an association with the specified name.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}/getAssociation",
        "httpMethod": "GET",
        "method": "getAssociation",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.getRule": {
        "description": "Gets a rule at the specified priority.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}/getRule",
        "httpMethod": "GET",
        "method": "getRule",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.insert": {
        "description": "Creates a new policy in the specified project using the data included in the request.",
        "flatPath": "locations/global/securityPolicies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.list": {
        "description": "List all the policies that have been configured for the specified project.",
        "flatPath": "locations/global/securityPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.listAssociations": {
        "description": "Lists associations of a specified target, i.e., organization or folder.",
        "flatPath": "locations/global/securityPolicies/listAssociations",
        "httpMethod": "GET",
        "method": "listAssociations",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.move": {
        "description": "Moves the specified security policy.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}/move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.patch": {
        "description": "Patches the specified policy with the data included in the request.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.patchRule": {
        "description": "Patches a rule at the specified priority.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}/patchRule",
        "httpMethod": "POST",
        "method": "patchRule",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.removeAssociation": {
        "description": "Removes an association for the specified security policy.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}/removeAssociation",
        "httpMethod": "POST",
        "method": "removeAssociation",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.organizationSecurityPolicies.removeRule": {
        "description": "Deletes a rule at the specified priority.",
        "flatPath": "locations/global/securityPolicies/{securityPolicy}/removeRule",
        "httpMethod": "POST",
        "method": "removeRule",
        "resourceType": "organizationSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.packetMirrorings.aggregatedList": {
        "description": "Retrieves an aggregated list of packetMirrorings.",
        "flatPath": "projects/{project}/aggregated/packetMirrorings",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "packetMirrorings",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.packetMirrorings.delete": {
        "description": "Deletes the specified PacketMirroring resource.",
        "flatPath": "projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "packetMirrorings",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.packetMirrorings.get": {
        "description": "Returns the specified PacketMirroring resource.",
        "flatPath": "projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "packetMirrorings",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.packetMirrorings.insert": {
        "description": "Creates a PacketMirroring resource in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/packetMirrorings",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "packetMirrorings",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.packetMirrorings.list": {
        "description": "Retrieves a list of PacketMirroring resources available to the specified project and region.",
        "flatPath": "projects/{project}/regions/{region}/packetMirrorings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "packetMirrorings",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.packetMirrorings.patch": {
        "description": "Patches the specified PacketMirroring resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/packetMirrorings/{packetMirroring}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "packetMirrorings",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.packetMirrorings.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/packetMirrorings/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "packetMirrorings",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.disableXpnHost": {
        "description": "Disable this project as a shared VPC host project.",
        "flatPath": "projects/{project}/disableXpnHost",
        "httpMethod": "POST",
        "method": "disableXpnHost",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.disableXpnResource": {
        "description": "Disable a service resource (also known as service project) associated with this host project.",
        "flatPath": "projects/{project}/disableXpnResource",
        "httpMethod": "POST",
        "method": "disableXpnResource",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.enableXpnHost": {
        "description": "Enable this project as a shared VPC host project.",
        "flatPath": "projects/{project}/enableXpnHost",
        "httpMethod": "POST",
        "method": "enableXpnHost",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.enableXpnResource": {
        "description": "Enable service resource (a.k.a service project) for a host project, so that subnets in the host project can be used by instances in the service project.",
        "flatPath": "projects/{project}/enableXpnResource",
        "httpMethod": "POST",
        "method": "enableXpnResource",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.get": {
        "description": "Returns the specified Project resource.",
        "flatPath": "projects/{project}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.getXpnHost": {
        "description": "Gets the shared VPC host project that this project links to. May be empty if no link exists.",
        "flatPath": "projects/{project}/getXpnHost",
        "httpMethod": "GET",
        "method": "getXpnHost",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.getXpnResources": {
        "description": "Gets service resources (a.k.a service project) associated with this host project.",
        "flatPath": "projects/{project}/getXpnResources",
        "httpMethod": "GET",
        "method": "getXpnResources",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.listXpnHosts": {
        "description": "Lists all shared VPC host projects visible to the user in an organization.",
        "flatPath": "projects/{project}/listXpnHosts",
        "httpMethod": "POST",
        "method": "listXpnHosts",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.moveDisk": {
        "description": "Moves a persistent disk from one zone to another.",
        "flatPath": "projects/{project}/moveDisk",
        "httpMethod": "POST",
        "method": "moveDisk",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.moveInstance": {
        "description": "Moves an instance and its attached persistent disks from one zone to another.",
        "flatPath": "projects/{project}/moveInstance",
        "httpMethod": "POST",
        "method": "moveInstance",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.setCommonInstanceMetadata": {
        "description": "Sets metadata common to all instances within the specified project using the data included in the request.",
        "flatPath": "projects/{project}/setCommonInstanceMetadata",
        "httpMethod": "POST",
        "method": "setCommonInstanceMetadata",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.setDefaultNetworkTier": {
        "description": "Sets the default network tier of the project. The default network tier is used when an address/forwardingRule/instance is created without specifying the network tier field.",
        "flatPath": "projects/{project}/setDefaultNetworkTier",
        "httpMethod": "POST",
        "method": "setDefaultNetworkTier",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.projects.setDefaultServiceAccount": {
        "description": "Sets the default service account of the project. The default service account is used when a VM instance is created with the service account email address set to \"default\".",
        "flatPath": "projects/{project}/setDefaultServiceAccount",
        "httpMethod": "POST",
        "method": "setDefaultServiceAccount",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.projects.setUsageExportBucket": {
        "description": "Enables the usage export feature and sets the usage export bucket where reports are stored. If you provide an empty request body using this method, the usage export feature will be disabled.",
        "flatPath": "projects/{project}/setUsageExportBucket",
        "httpMethod": "POST",
        "method": "setUsageExportBucket",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicAdvertisedPrefixes.delete": {
        "description": "Deletes the specified PublicAdvertisedPrefix",
        "flatPath": "projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "publicAdvertisedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicAdvertisedPrefixes.get": {
        "description": "Returns the specified PublicAdvertisedPrefix resource.",
        "flatPath": "projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "publicAdvertisedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicAdvertisedPrefixes.insert": {
        "description": "Creates a PublicAdvertisedPrefix in the specified project using the parameters that are included in the request.",
        "flatPath": "projects/{project}/global/publicAdvertisedPrefixes",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "publicAdvertisedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicAdvertisedPrefixes.list": {
        "description": "Lists the PublicAdvertisedPrefixes for a project.",
        "flatPath": "projects/{project}/global/publicAdvertisedPrefixes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "publicAdvertisedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicAdvertisedPrefixes.patch": {
        "description": "Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/publicAdvertisedPrefixes/{publicAdvertisedPrefix}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "publicAdvertisedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicDelegatedPrefixes.aggregatedList": {
        "description": "Lists all PublicDelegatedPrefix resources owned by the specific project across all scopes.",
        "flatPath": "projects/{project}/aggregated/publicDelegatedPrefixes",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "publicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicDelegatedPrefixes.delete": {
        "description": "Deletes the specified PublicDelegatedPrefix in the given region.",
        "flatPath": "projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "publicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicDelegatedPrefixes.get": {
        "description": "Returns the specified PublicDelegatedPrefix resource in the given region.",
        "flatPath": "projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "publicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicDelegatedPrefixes.insert": {
        "description": "Creates a PublicDelegatedPrefix in the specified project in the given region using the parameters that are included in the request.",
        "flatPath": "projects/{project}/regions/{region}/publicDelegatedPrefixes",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "publicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicDelegatedPrefixes.list": {
        "description": "Lists the PublicDelegatedPrefixes for a project in the given region.",
        "flatPath": "projects/{project}/regions/{region}/publicDelegatedPrefixes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "publicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.publicDelegatedPrefixes.patch": {
        "description": "Patches the specified PublicDelegatedPrefix resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/publicDelegatedPrefixes/{publicDelegatedPrefix}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "publicDelegatedPrefixes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionAutoscalers.delete": {
        "description": "Deletes the specified autoscaler.",
        "flatPath": "projects/{project}/regions/{region}/autoscalers/{autoscaler}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionAutoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionAutoscalers.get": {
        "description": "Returns the specified autoscaler.",
        "flatPath": "projects/{project}/regions/{region}/autoscalers/{autoscaler}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionAutoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionAutoscalers.insert": {
        "description": "Creates an autoscaler in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/autoscalers",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionAutoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionAutoscalers.list": {
        "description": "Retrieves a list of autoscalers contained within the specified region.",
        "flatPath": "projects/{project}/regions/{region}/autoscalers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionAutoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionAutoscalers.patch": {
        "description": "Updates an autoscaler in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/autoscalers",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "regionAutoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionAutoscalers.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/autoscalers/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionAutoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionAutoscalers.update": {
        "description": "Updates an autoscaler in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/autoscalers",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "regionAutoscalers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionBackendServices.delete": {
        "description": "Deletes the specified regional BackendService resource.",
        "flatPath": "projects/{project}/regions/{region}/backendServices/{backendService}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionBackendServices.get": {
        "description": "Returns the specified regional BackendService resource.",
        "flatPath": "projects/{project}/regions/{region}/backendServices/{backendService}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionBackendServices.getHealth": {
        "description": "Gets the most recent health check results for this regional BackendService.",
        "flatPath": "projects/{project}/regions/{region}/backendServices/{backendService}/getHealth",
        "httpMethod": "POST",
        "method": "getHealth",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionBackendServices.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/regions/{region}/backendServices/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionBackendServices.insert": {
        "description": "Creates a regional BackendService resource in the specified project using the data included in the request. For more information, see Backend services overview.",
        "flatPath": "projects/{project}/regions/{region}/backendServices",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionBackendServices.list": {
        "description": "Retrieves the list of regional BackendService resources available to the specified project in the given region.",
        "flatPath": "projects/{project}/regions/{region}/backendServices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionBackendServices.patch": {
        "description": "Updates the specified regional BackendService resource with the data included in the request. For more information, see Understanding backend services This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/backendServices/{backendService}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionBackendServices.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/regions/{region}/backendServices/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionBackendServices.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/backendServices/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionBackendServices.update": {
        "description": "Updates the specified regional BackendService resource with the data included in the request. For more information, see Backend services overview .",
        "flatPath": "projects/{project}/regions/{region}/backendServices/{backendService}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "regionBackendServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionCommitments.aggregatedList": {
        "description": "Retrieves an aggregated list of commitments by region.",
        "flatPath": "projects/{project}/aggregated/commitments",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "regionCommitments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionCommitments.get": {
        "description": "Returns the specified commitment resource. Gets a list of available commitments by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/commitments/{commitment}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionCommitments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionCommitments.insert": {
        "description": "Creates a commitment in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/commitments",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionCommitments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionCommitments.list": {
        "description": "Retrieves a list of commitments contained within the specified region.",
        "flatPath": "projects/{project}/regions/{region}/commitments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionCommitments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionCommitments.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/commitments/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionCommitments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionCommitments.update": {
        "description": "Updates the specified commitment with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: auto_renew.",
        "flatPath": "projects/{project}/regions/{region}/commitments/{commitment}",
        "httpMethod": "PATCH",
        "method": "update",
        "resourceType": "regionCommitments",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionCommitments.updateReservations": {
        "description": "Transfers GPUs or local SSDs between reservations within commitments.",
        "flatPath": "projects/{project}/regions/{region}/commitments/{commitment}/updateReservations",
        "httpMethod": "POST",
        "method": "updateReservations",
        "resourceType": "regionCommitments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionDiskTypes.get": {
        "description": "Returns the specified regional disk type. Gets a list of available disk types by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/diskTypes/{diskType}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionDiskTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDiskTypes.list": {
        "description": "Retrieves a list of regional disk types available to the specified project.",
        "flatPath": "projects/{project}/regions/{region}/diskTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionDiskTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.addResourcePolicies": {
        "description": "Adds existing resource policies to a regional disk. You can only add one policy which will be applied to this disk for scheduling snapshot creation.",
        "flatPath": "projects/{project}/regions/{region}/disks/{disk}/addResourcePolicies",
        "httpMethod": "POST",
        "method": "addResourcePolicies",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.createSnapshot": {
        "description": "Creates a snapshot of this regional disk.",
        "flatPath": "projects/{project}/regions/{region}/disks/{disk}/createSnapshot",
        "httpMethod": "POST",
        "method": "createSnapshot",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.delete": {
        "description": "Deletes the specified regional persistent disk. Deleting a regional disk removes all the replicas of its data permanently and is irreversible. However, deleting a disk does not delete any snapshots previously made from the disk. You must separately delete snapshots.",
        "flatPath": "projects/{project}/regions/{region}/disks/{disk}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.get": {
        "description": "Returns a specified regional persistent disk.",
        "flatPath": "projects/{project}/regions/{region}/disks/{disk}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/regions/{region}/disks/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.insert": {
        "description": "Creates a persistent regional disk in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/disks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.list": {
        "description": "Retrieves the list of persistent disks contained within the specified region.",
        "flatPath": "projects/{project}/regions/{region}/disks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.removeResourcePolicies": {
        "description": "Removes resource policies from a regional disk.",
        "flatPath": "projects/{project}/regions/{region}/disks/{disk}/removeResourcePolicies",
        "httpMethod": "POST",
        "method": "removeResourcePolicies",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.resize": {
        "description": "Resizes the specified regional persistent disk.",
        "flatPath": "projects/{project}/regions/{region}/disks/{disk}/resize",
        "httpMethod": "POST",
        "method": "resize",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/regions/{region}/disks/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.setLabels": {
        "description": "Sets the labels on the target regional disk.",
        "flatPath": "projects/{project}/regions/{region}/disks/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/disks/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionDisks.update": {
        "description": "Update the specified disk with the data included in the request. Update is performed only on selected fields included as part of update-mask. Only the following fields can be modified: user_license.",
        "flatPath": "projects/{project}/regions/{region}/disks/{disk}",
        "httpMethod": "PATCH",
        "method": "update",
        "resourceType": "regionDisks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionHealthCheckServices.aggregatedList": {
        "description": "Retrieves the list of all HealthCheckService resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/healthCheckServices",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "regionHealthCheckServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionHealthCheckServices.delete": {
        "description": "Deletes the specified regional HealthCheckService.",
        "flatPath": "projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionHealthCheckServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthCheckServices.get": {
        "description": "Returns the specified regional HealthCheckService resource.",
        "flatPath": "projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionHealthCheckServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthCheckServices.insert": {
        "description": "Creates a regional HealthCheckService resource in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/healthCheckServices",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionHealthCheckServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthCheckServices.list": {
        "description": "Lists all the HealthCheckService resources that have been configured for the specified project in the given region.",
        "flatPath": "projects/{project}/regions/{region}/healthCheckServices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionHealthCheckServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthCheckServices.patch": {
        "description": "Updates the specified regional HealthCheckService resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/healthCheckServices/{healthCheckService}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "regionHealthCheckServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthCheckServices.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/healthCheckServices/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionHealthCheckServices",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionHealthChecks.delete": {
        "description": "Deletes the specified HealthCheck resource.",
        "flatPath": "projects/{project}/regions/{region}/healthChecks/{healthCheck}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthChecks.get": {
        "description": "Returns the specified HealthCheck resource. Gets a list of available health checks by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/healthChecks/{healthCheck}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthChecks.insert": {
        "description": "Creates a HealthCheck resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/healthChecks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthChecks.list": {
        "description": "Retrieves the list of HealthCheck resources available to the specified project.",
        "flatPath": "projects/{project}/regions/{region}/healthChecks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthChecks.patch": {
        "description": "Updates a HealthCheck resource in the specified project using the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/healthChecks/{healthCheck}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "regionHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionHealthChecks.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/healthChecks/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionHealthChecks.update": {
        "description": "Updates a HealthCheck resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/healthChecks/{healthCheck}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "regionHealthChecks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.abandonInstances": {
        "description": "Flags the specified instances to be immediately removed from the managed instance group. Abandoning an instance does not delete the instance, but it does remove the instance from any target pools that are applied by the managed instance group. This method reduces the targetSize of the managed instance group by the number of instances that you abandon. This operation is marked as DONE when the action is scheduled even if the instances have not yet been removed from the group. You must separately verify the status of the abandoning action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/abandonInstances",
        "httpMethod": "POST",
        "method": "abandonInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.applyUpdatesToInstances": {
        "description": "Apply updates to selected instances the managed instance group.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/applyUpdatesToInstances",
        "httpMethod": "POST",
        "method": "applyUpdatesToInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.createInstances": {
        "description": "Creates instances with per-instance configs in this regional managed instance group. Instances are created using the current instance template. The create instances operation is marked DONE if the createInstances request is successful. The underlying actions take additional time. You must separately verify the status of the creating or actions with the listmanagedinstances method.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/createInstances",
        "httpMethod": "POST",
        "method": "createInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.delete": {
        "description": "Deletes the specified managed instance group and all of the instances in that group.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.deleteInstances": {
        "description": "Flags the specified instances in the managed instance group to be immediately deleted. The instances are also removed from any target pools of which they were a member. This method reduces the targetSize of the managed instance group by the number of instances that you delete. The deleteInstances operation is marked DONE if the deleteInstances request is successful. The underlying actions take additional time. You must separately verify the status of the deleting action with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deleteInstances",
        "httpMethod": "POST",
        "method": "deleteInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.deletePerInstanceConfigs": {
        "description": "Deletes selected per-instance configs for the managed instance group.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/deletePerInstanceConfigs",
        "httpMethod": "POST",
        "method": "deletePerInstanceConfigs",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.get": {
        "description": "Returns all of the details about the specified managed instance group.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.insert": {
        "description": "Creates a managed instance group using the information that you specify in the request. After the group is created, instances in the group are created using the specified instance template. This operation is marked as DONE when the group is created even if the instances in the group have not yet been created. You must separately verify the status of the individual instances with the listmanagedinstances method. A regional managed instance group can contain up to 2000 instances.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.list": {
        "description": "Retrieves the list of managed instance groups that are contained within the specified region.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.listErrors": {
        "description": "Lists all errors thrown by actions on instances for a given regional managed instance group. The filter and orderBy query parameters are not supported.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listErrors",
        "httpMethod": "GET",
        "method": "listErrors",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.listManagedInstances": {
        "description": "Lists the instances in the managed instance group and instances that are scheduled to be created. The list includes any current actions that the group has scheduled for its instances. The orderBy query parameter is not supported.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listManagedInstances",
        "httpMethod": "POST",
        "method": "listManagedInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.listPerInstanceConfigs": {
        "description": "Lists all of the per-instance configs defined for the managed instance group. The orderBy query parameter is not supported.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/listPerInstanceConfigs",
        "httpMethod": "POST",
        "method": "listPerInstanceConfigs",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.patch": {
        "description": "Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is patched even if the instances in the group are still in the process of being patched. You must separately verify the status of the individual instances with the listmanagedinstances method. This method supports PATCH semantics and uses the JSON merge patch format and processing rules. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.patchPerInstanceConfigs": {
        "description": "Inserts or patches per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/patchPerInstanceConfigs",
        "httpMethod": "POST",
        "method": "patchPerInstanceConfigs",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.recreateInstances": {
        "description": "Flags the specified VM instances in the managed instance group to be immediately recreated. Each instance is recreated using the group's current configuration. This operation is marked as DONE when the flag is set even if the instances have not yet been recreated. You must separately verify the status of each instance by checking its currentAction field; for more information, see Checking the status of managed instances. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/recreateInstances",
        "httpMethod": "POST",
        "method": "recreateInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.resize": {
        "description": "Changes the intended size of the managed instance group. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances. The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resize",
        "httpMethod": "POST",
        "method": "resize",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.resizeAdvanced": {
        "description": "Resizes the regional managed instance group with advanced configuration options like disabling creation retries. This is an extended version of the resize method. If you increase the size, the group creates new instances using the current instance template. If you decrease the size, the group deletes one or more instances. The resize operation is marked DONE if the resize request is successful. The underlying actions take additional time. You must separately verify the status of the creating or deleting actions with the get or listmanagedinstances method. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is removed or deleted.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resizeAdvanced",
        "httpMethod": "POST",
        "method": "resizeAdvanced",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionInstanceGroupManagers.resumeInstances": {
        "description": "Flags the specified instances in the managed instance group to be resumed. This method increases the targetSize and decreases the targetSuspendedSize of the managed instance group by the number of instances that you resume. The resumeInstances operation is marked DONE if the resumeInstances request is successful. The underlying actions take additional time. You must separately verify the status of the RESUMING action with the listmanagedinstances method. In this request, you can only specify instances that are suspended. For example, if an instance was previously suspended using the suspendInstances method, it can be resumed using the resumeInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are resumed. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/resumeInstances",
        "httpMethod": "POST",
        "method": "resumeInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstanceGroupManagers.setAutoHealingPolicies": {
        "description": "Modifies the autohealing policy for the instances in this managed instance group. [Deprecated] This method is deprecated. Use regionInstanceGroupManagers.patch instead.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setAutoHealingPolicies",
        "httpMethod": "POST",
        "method": "setAutoHealingPolicies",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionInstanceGroupManagers.setInstanceTemplate": {
        "description": "Sets the instance template to use when creating new instances or recreating instances in this group. Existing instances are not affected.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setInstanceTemplate",
        "httpMethod": "POST",
        "method": "setInstanceTemplate",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.setTargetPools": {
        "description": "Modifies the target pools to which all new instances in this group are assigned. Existing instances in the group are not affected.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/setTargetPools",
        "httpMethod": "POST",
        "method": "setTargetPools",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroupManagers.startInstances": {
        "description": "Flags the specified instances in the managed instance group to be started. This method increases the targetSize and decreases the targetStoppedSize of the managed instance group by the number of instances that you start. The startInstances operation is marked DONE if the startInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STARTING action with the listmanagedinstances method. In this request, you can only specify instances that are stopped. For example, if an instance was previously stopped using the stopInstances method, it can be started using the startInstances method. If a health check is attached to the managed instance group, the specified instances will be verified as healthy after they are started. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/startInstances",
        "httpMethod": "POST",
        "method": "startInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstanceGroupManagers.stopInstances": {
        "description": "Flags the specified instances in the managed instance group to be immediately stopped. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetStoppedSize of the managed instance group by the number of instances that you stop. The stopInstances operation is marked DONE if the stopInstances request is successful. The underlying actions take additional time. You must separately verify the status of the STOPPING action with the listmanagedinstances method. If the instanceLifecyclePolicy.metadataBasedReadinessSignal field is set on the Instance Group Manager, each instance will be initialized before it is stopped, to give user programs time to perform necessary tasks. To initialize an instance, the Instance Group Manager sets the metadata key google-compute-initialization-intent to value INITIALIZE_AND_STOP on the instance, and waits for the user program to signal it is ready. This is done by setting the guest attribute path google-compute/initialization-state to value INITIALIZED. If the instance does not signal successful initialization (does not set the guest attribute to INITIALIZED) before timeout, the initialization is considered failed and the instance is not stopped. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is suspended. Stopped instances can be started using the startInstances method. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/stopInstances",
        "httpMethod": "POST",
        "method": "stopInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstanceGroupManagers.suspendInstances": {
        "description": "Flags the specified instances in the managed instance group to be immediately suspended. You can only specify instances that are running in this request. This method reduces the targetSize and increases the targetSuspendedSize of the managed instance group by the number of instances that you suspend. The suspendInstances operation is marked DONE if the suspendInstances request is successful. The underlying actions take additional time. You must separately verify the status of the SUSPENDING action with the listmanagedinstances method. If the instanceLifecyclePolicy.metadataBasedReadinessSignal field is set on the Instance Group Manager, each instance will be initialized before it is suspended, to give user programs time to perform necessary tasks. To initialize an instance, the Instance Group Manager sets the metadata key google-compute-initialization-intent to value INITIALIZE_AND_SUSPEND on the instance, and waits for the user program to signal it is ready. This is done by setting the guest attribute path google-compute/initialization-state to value INITIALIZED. If the instance does not signal successful initialization (does not set the guest attribute to INITIALIZED) before timeout, the initialization is considered failed and the instance is not suspended. If the group is part of a backend service that has enabled connection draining, it can take up to 60 seconds after the connection draining duration has elapsed before the VM instance is suspended. Suspended instances can be resumed using the resumeInstances method. You can specify a maximum of 1000 instances with this method per request.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/suspendInstances",
        "httpMethod": "POST",
        "method": "suspendInstances",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstanceGroupManagers.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionInstanceGroupManagers.update": {
        "description": "Updates a managed instance group using the information that you specify in the request. This operation is marked as DONE when the group is updated even if the instances in the group have not yet been updated. You must separately verify the status of the individual instances with the listmanagedinstances method. If you update your group to specify a new template or instance configuration, it's possible that your intended specification for each VM in the group is different from the current state of that VM. To learn how to apply an updated configuration to the VMs in a MIG, see Updating instances in a MIG.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionInstanceGroupManagers.updatePerInstanceConfigs": {
        "description": "Inserts or updates per-instance configs for the managed instance group. perInstanceConfig.name serves as a key used to distinguish whether to perform insert or patch.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroupManagers/{instanceGroupManager}/updatePerInstanceConfigs",
        "httpMethod": "POST",
        "method": "updatePerInstanceConfigs",
        "resourceType": "regionInstanceGroupManagers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroups.get": {
        "description": "Returns the specified instance group resource.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroups/{instanceGroup}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionInstanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroups.list": {
        "description": "Retrieves the list of instance group resources contained within the specified region.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionInstanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroups.listInstances": {
        "description": "Lists the instances in the specified instance group and displays information about the named ports. Depending on the specified options, this method can list all instances or only the instances that are running. The orderBy query parameter is not supported.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/listInstances",
        "httpMethod": "POST",
        "method": "listInstances",
        "resourceType": "regionInstanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroups.setNamedPorts": {
        "description": "Sets the named ports for the specified regional instance group.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroups/{instanceGroup}/setNamedPorts",
        "httpMethod": "POST",
        "method": "setNamedPorts",
        "resourceType": "regionInstanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstanceGroups.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/instanceGroups/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionInstanceGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionInstances.bulkInsert": {
        "description": "Creates multiple instances in a given region. Count specifies the number of instances to create.",
        "flatPath": "projects/{project}/regions/{region}/instances/bulkInsert",
        "httpMethod": "POST",
        "method": "bulkInsert",
        "resourceType": "regionInstances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionInstantSnapshots.delete": {
        "description": "Deletes the specified InstantSnapshot resource. Keep in mind that deleting a single instantSnapshot might not necessarily delete all the data on that instantSnapshot. If any data on the instantSnapshot that is marked for deletion is needed for subsequent instantSnapshots, the data will be moved to the next corresponding instantSnapshot. For more information, see Deleting instantSnapshots.",
        "flatPath": "projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionInstantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstantSnapshots.export": {
        "description": "Export the changed blocks between two instant snapshots to a customer's bucket in the user specified format.",
        "flatPath": "projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}/export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "regionInstantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstantSnapshots.get": {
        "description": "Returns the specified InstantSnapshot resource in the specified region.",
        "flatPath": "projects/{project}/regions/{region}/instantSnapshots/{instantSnapshot}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionInstantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstantSnapshots.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/regions/{region}/instantSnapshots/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "regionInstantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstantSnapshots.insert": {
        "description": "Creates an instant snapshot in the specified region.",
        "flatPath": "projects/{project}/regions/{region}/instantSnapshots",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionInstantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstantSnapshots.list": {
        "description": "Retrieves the list of InstantSnapshot resources contained within the specified region.",
        "flatPath": "projects/{project}/regions/{region}/instantSnapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionInstantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstantSnapshots.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/regions/{region}/instantSnapshots/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "regionInstantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstantSnapshots.setLabels": {
        "description": "Sets the labels on a instantSnapshot in the given region. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/regions/{region}/instantSnapshots/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "regionInstantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionInstantSnapshots.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/instantSnapshots/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionInstantSnapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkEndpointGroups.delete": {
        "description": "Deletes the specified network endpoint group. Note that the NEG cannot be deleted if it is configured as a backend of a backend service.",
        "flatPath": "projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionNetworkEndpointGroups.get": {
        "description": "Returns the specified network endpoint group. Gets a list of available network endpoint groups by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/networkEndpointGroups/{networkEndpointGroup}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionNetworkEndpointGroups.insert": {
        "description": "Creates a network endpoint group in the specified project using the parameters that are included in the request.",
        "flatPath": "projects/{project}/regions/{region}/networkEndpointGroups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionNetworkEndpointGroups.list": {
        "description": "Retrieves the list of regional network endpoint groups available to the specified project in the given region.",
        "flatPath": "projects/{project}/regions/{region}/networkEndpointGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionNetworkEndpointGroups",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionNetworkFirewallPolicies.addAssociation": {
        "description": "Inserts an association for the specified network firewall policy.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addAssociation",
        "httpMethod": "POST",
        "method": "addAssociation",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.addRule": {
        "description": "Inserts a rule into a network firewall policy.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/addRule",
        "httpMethod": "POST",
        "method": "addRule",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.cloneRules": {
        "description": "Copies rules to the specified network firewall policy.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/cloneRules",
        "httpMethod": "POST",
        "method": "cloneRules",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.delete": {
        "description": "Deletes the specified network firewall policy.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.get": {
        "description": "Returns the specified network firewall policy.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.getAssociation": {
        "description": "Gets an association with the specified name.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getAssociation",
        "httpMethod": "GET",
        "method": "getAssociation",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.getEffectiveFirewalls": {
        "description": "Returns the effective firewalls on a given network.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/getEffectiveFirewalls",
        "httpMethod": "GET",
        "method": "getEffectiveFirewalls",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.getRule": {
        "description": "Gets a rule of the specified priority.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/getRule",
        "httpMethod": "GET",
        "method": "getRule",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.insert": {
        "description": "Creates a new network firewall policy in the specified project and region.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.list": {
        "description": "Lists all the network firewall policies that have been configured for the specified project in the given region.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.patch": {
        "description": "Patches the specified network firewall policy.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.patchRule": {
        "description": "Patches a rule of the specified priority.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/patchRule",
        "httpMethod": "POST",
        "method": "patchRule",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.removeAssociation": {
        "description": "Removes an association for the specified network firewall policy.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeAssociation",
        "httpMethod": "POST",
        "method": "removeAssociation",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.removeRule": {
        "description": "Deletes a rule of the specified priority.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{firewallPolicy}/removeRule",
        "httpMethod": "POST",
        "method": "removeRule",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNetworkFirewallPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/firewallPolicies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionNetworkFirewallPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNotificationEndpoints.aggregatedList": {
        "description": "Retrieves the list of all NotificationEndpoint resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/notificationEndpoints",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "regionNotificationEndpoints",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionNotificationEndpoints.delete": {
        "description": "Deletes the specified NotificationEndpoint in the given region",
        "flatPath": "projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionNotificationEndpoints",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionNotificationEndpoints.get": {
        "description": "Returns the specified NotificationEndpoint resource in the given region.",
        "flatPath": "projects/{project}/regions/{region}/notificationEndpoints/{notificationEndpoint}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionNotificationEndpoints",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionNotificationEndpoints.insert": {
        "description": "Create a NotificationEndpoint in the specified project in the given region using the parameters that are included in the request.",
        "flatPath": "projects/{project}/regions/{region}/notificationEndpoints",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionNotificationEndpoints",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionNotificationEndpoints.list": {
        "description": "Lists the NotificationEndpoints for a project in the given region.",
        "flatPath": "projects/{project}/regions/{region}/notificationEndpoints",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionNotificationEndpoints",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionNotificationEndpoints.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/notificationEndpoints/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionNotificationEndpoints",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionOperations.delete": {
        "description": "Deletes the specified region-specific Operations resource.",
        "flatPath": "projects/{project}/regions/{region}/operations/{operation}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionOperations.get": {
        "description": "Retrieves the specified region-specific Operations resource.",
        "flatPath": "projects/{project}/regions/{region}/operations/{operation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionOperations.list": {
        "description": "Retrieves a list of Operation resources contained within the specified region.",
        "flatPath": "projects/{project}/regions/{region}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionOperations.wait": {
        "description": "Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method differs from the `GET` method in that it waits for no more than the default deadline (2 minutes) and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`. ",
        "flatPath": "projects/{project}/regions/{region}/operations/{operation}/wait",
        "httpMethod": "POST",
        "method": "wait",
        "resourceType": "regionOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionSecurityPolicies.delete": {
        "description": "Deletes the specified policy.",
        "flatPath": "projects/{project}/regions/{region}/securityPolicies/{securityPolicy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionSecurityPolicies.get": {
        "description": "List all of the ordered rules present in a single specified policy.",
        "flatPath": "projects/{project}/regions/{region}/securityPolicies/{securityPolicy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionSecurityPolicies.insert": {
        "description": "Creates a new policy in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/securityPolicies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionSecurityPolicies.list": {
        "description": "List all the policies that have been configured for the specified project and region.",
        "flatPath": "projects/{project}/regions/{region}/securityPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionSecurityPolicies.patch": {
        "description": "Patches the specified policy with the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/securityPolicies/{securityPolicy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "regionSecurityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.regionSslCertificates.delete": {
        "description": "Deletes the specified SslCertificate resource in the region.",
        "flatPath": "projects/{project}/regions/{region}/sslCertificates/{sslCertificate}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionSslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionSslCertificates.get": {
        "description": "Returns the specified SslCertificate resource in the specified region. Get a list of available SSL certificates by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/sslCertificates/{sslCertificate}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionSslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionSslCertificates.insert": {
        "description": "Creates a SslCertificate resource in the specified project and region using the data included in the request",
        "flatPath": "projects/{project}/regions/{region}/sslCertificates",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionSslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionSslCertificates.list": {
        "description": "Retrieves the list of SslCertificate resources available to the specified project in the specified region.",
        "flatPath": "projects/{project}/regions/{region}/sslCertificates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionSslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionSslCertificates.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource and region.",
        "flatPath": "projects/{project}/regions/{region}/sslCertificates/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionSslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionTargetHttpProxies.delete": {
        "description": "Deletes the specified TargetHttpProxy resource.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionTargetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpProxies.get": {
        "description": "Returns the specified TargetHttpProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionTargetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpProxies.insert": {
        "description": "Creates a TargetHttpProxy resource in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpProxies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionTargetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpProxies.list": {
        "description": "Retrieves the list of TargetHttpProxy resources available to the specified project in the specified region.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpProxies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionTargetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpProxies.setUrlMap": {
        "description": "Changes the URL map for TargetHttpProxy.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpProxies/{targetHttpProxy}/setUrlMap",
        "httpMethod": "POST",
        "method": "setUrlMap",
        "resourceType": "regionTargetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpProxies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpProxies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionTargetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionTargetHttpsProxies.delete": {
        "description": "Deletes the specified TargetHttpsProxy resource.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionTargetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpsProxies.get": {
        "description": "Returns the specified TargetHttpsProxy resource in the specified region. Gets a list of available target HTTP proxies by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionTargetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpsProxies.insert": {
        "description": "Creates a TargetHttpsProxy resource in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpsProxies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionTargetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpsProxies.list": {
        "description": "Retrieves the list of TargetHttpsProxy resources available to the specified project in the specified region.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpsProxies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionTargetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpsProxies.setSslCertificates": {
        "description": "Replaces SslCertificates for TargetHttpsProxy.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates",
        "httpMethod": "POST",
        "method": "setSslCertificates",
        "resourceType": "regionTargetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpsProxies.setUrlMap": {
        "description": "Changes the URL map for TargetHttpsProxy.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap",
        "httpMethod": "POST",
        "method": "setUrlMap",
        "resourceType": "regionTargetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionTargetHttpsProxies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/targetHttpsProxies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionTargetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionUrlMaps.delete": {
        "description": "Deletes the specified UrlMap resource.",
        "flatPath": "projects/{project}/regions/{region}/urlMaps/{urlMap}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regionUrlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionUrlMaps.get": {
        "description": "Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/urlMaps/{urlMap}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regionUrlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionUrlMaps.insert": {
        "description": "Creates a UrlMap resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/urlMaps",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionUrlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionUrlMaps.invalidateCache": {
        "description": "Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap. For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).",
        "flatPath": "projects/{project}/regions/{region}/urlMaps/{urlMap}/invalidateCache",
        "httpMethod": "POST",
        "method": "invalidateCache",
        "resourceType": "regionUrlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionUrlMaps.list": {
        "description": "Retrieves the list of UrlMap resources available to the specified project in the specified region.",
        "flatPath": "projects/{project}/regions/{region}/urlMaps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regionUrlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionUrlMaps.patch": {
        "description": "Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/urlMaps/{urlMap}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "regionUrlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionUrlMaps.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/urlMaps/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "regionUrlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.regionUrlMaps.update": {
        "description": "Updates the specified UrlMap resource with the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/urlMaps/{urlMap}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "regionUrlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regionUrlMaps.validate": {
        "description": "Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.",
        "flatPath": "projects/{project}/regions/{region}/urlMaps/{urlMap}/validate",
        "httpMethod": "POST",
        "method": "validate",
        "resourceType": "regionUrlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regions.get": {
        "description": "Returns the specified Region resource. Gets a list of available regions by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regions",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.regions.list": {
        "description": "Retrieves the list of region resources available to the specified project.",
        "flatPath": "projects/{project}/regions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regions",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.aggregatedList": {
        "description": "Retrieves an aggregated list of reservations.",
        "flatPath": "projects/{project}/aggregated/reservations",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.delete": {
        "description": "Deletes the specified reservation.",
        "flatPath": "projects/{project}/zones/{zone}/reservations/{reservation}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.get": {
        "description": "Retrieves information about the specified reservation.",
        "flatPath": "projects/{project}/zones/{zone}/reservations/{reservation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/zones/{zone}/reservations/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.insert": {
        "description": "Creates a new reservation. For more information, read Reserving zonal resources.",
        "flatPath": "projects/{project}/zones/{zone}/reservations",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.list": {
        "description": "A list of all the reservations that have been configured for the specified project in specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/reservations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.resize": {
        "description": "Resizes the reservation (applicable to standalone reservations only). For more information, read Modifying reservations.",
        "flatPath": "projects/{project}/zones/{zone}/reservations/{reservation}/resize",
        "httpMethod": "POST",
        "method": "resize",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/zones/{zone}/reservations/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/reservations/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.reservations.update": {
        "description": "Update share settings of the reservation.",
        "flatPath": "projects/{project}/zones/{zone}/reservations/{reservation}",
        "httpMethod": "PATCH",
        "method": "update",
        "resourceType": "reservations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.resourcePolicies.aggregatedList": {
        "description": "Retrieves an aggregated list of resource policies.",
        "flatPath": "projects/{project}/aggregated/resourcePolicies",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "resourcePolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.resourcePolicies.delete": {
        "description": "Deletes the specified resource policy.",
        "flatPath": "projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "resourcePolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.resourcePolicies.get": {
        "description": "Retrieves all information of the specified resource policy.",
        "flatPath": "projects/{project}/regions/{region}/resourcePolicies/{resourcePolicy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "resourcePolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.resourcePolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/regions/{region}/resourcePolicies/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "resourcePolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.resourcePolicies.insert": {
        "description": "Creates a new resource policy.",
        "flatPath": "projects/{project}/regions/{region}/resourcePolicies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "resourcePolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.resourcePolicies.list": {
        "description": "A list all the resource policies that have been configured for the specified project in specified region.",
        "flatPath": "projects/{project}/regions/{region}/resourcePolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "resourcePolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.resourcePolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/regions/{region}/resourcePolicies/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "resourcePolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.resourcePolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/resourcePolicies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "resourcePolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.aggregatedList": {
        "description": "Retrieves an aggregated list of routers.",
        "flatPath": "projects/{project}/aggregated/routers",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.delete": {
        "description": "Deletes the specified Router resource.",
        "flatPath": "projects/{project}/regions/{region}/routers/{router}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.get": {
        "description": "Returns the specified Router resource. Gets a list of available routers by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/routers/{router}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.getNatMappingInfo": {
        "description": "Retrieves runtime Nat mapping information of VM endpoints.",
        "flatPath": "projects/{project}/regions/{region}/routers/{router}/getNatMappingInfo",
        "httpMethod": "GET",
        "method": "getNatMappingInfo",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.getRouterStatus": {
        "description": "Retrieves runtime information of the specified router.",
        "flatPath": "projects/{project}/regions/{region}/routers/{router}/getRouterStatus",
        "httpMethod": "GET",
        "method": "getRouterStatus",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.insert": {
        "description": "Creates a Router resource in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/routers",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.list": {
        "description": "Retrieves a list of Router resources available to the specified project.",
        "flatPath": "projects/{project}/regions/{region}/routers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.patch": {
        "description": "Patches the specified Router resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/routers/{router}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.preview": {
        "description": "Preview fields auto-generated during router create and update operations. Calling this method does NOT create or update the router.",
        "flatPath": "projects/{project}/regions/{region}/routers/{router}/preview",
        "httpMethod": "POST",
        "method": "preview",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routers.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/routers/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.routers.update": {
        "description": "Updates the specified Router resource with the data included in the request. This method conforms to PUT semantics, which requests that the state of the target resource be created or replaced with the state defined by the representation enclosed in the request message payload.",
        "flatPath": "projects/{project}/regions/{region}/routers/{router}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "routers",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routes.delete": {
        "description": "Deletes the specified Route resource.",
        "flatPath": "projects/{project}/global/routes/{route}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "routes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routes.get": {
        "description": "Returns the specified Route resource. Gets a list of available routes by making a list() request.",
        "flatPath": "projects/{project}/global/routes/{route}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "routes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routes.insert": {
        "description": "Creates a Route resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/routes",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "routes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routes.list": {
        "description": "Retrieves the list of Route resources available to the specified project.",
        "flatPath": "projects/{project}/global/routes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "routes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.routes.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/routes/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "routes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.securityPolicies.addRule": {
        "description": "Inserts a rule into a security policy.",
        "flatPath": "projects/{project}/global/securityPolicies/{securityPolicy}/addRule",
        "httpMethod": "POST",
        "method": "addRule",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.aggregatedList": {
        "description": "Retrieves the list of all SecurityPolicy resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/securityPolicies",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "compute.securityPolicies.delete": {
        "description": "Deletes the specified policy.",
        "flatPath": "projects/{project}/global/securityPolicies/{securityPolicy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.get": {
        "description": "List all of the ordered rules present in a single specified policy.",
        "flatPath": "projects/{project}/global/securityPolicies/{securityPolicy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.getRule": {
        "description": "Gets a rule at the specified priority.",
        "flatPath": "projects/{project}/global/securityPolicies/{securityPolicy}/getRule",
        "httpMethod": "GET",
        "method": "getRule",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.insert": {
        "description": "Creates a new policy in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/securityPolicies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.list": {
        "description": "List all the policies that have been configured for the specified project.",
        "flatPath": "projects/{project}/global/securityPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.listPreconfiguredExpressionSets": {
        "description": "Gets the current list of preconfigured Web Application Firewall (WAF) expressions.",
        "flatPath": "projects/{project}/global/securityPolicies/listPreconfiguredExpressionSets",
        "httpMethod": "GET",
        "method": "listPreconfiguredExpressionSets",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.patch": {
        "description": "Patches the specified policy with the data included in the request. This cannot be used to be update the rules in the policy. Please use the per rule methods like addRule, patchRule, and removeRule instead.",
        "flatPath": "projects/{project}/global/securityPolicies/{securityPolicy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.patchRule": {
        "description": "Patches a rule at the specified priority.",
        "flatPath": "projects/{project}/global/securityPolicies/{securityPolicy}/patchRule",
        "httpMethod": "POST",
        "method": "patchRule",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.removeRule": {
        "description": "Deletes a rule at the specified priority.",
        "flatPath": "projects/{project}/global/securityPolicies/{securityPolicy}/removeRule",
        "httpMethod": "POST",
        "method": "removeRule",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.securityPolicies.setLabels": {
        "description": "Sets the labels on a security policy. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/global/securityPolicies/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.securityPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/securityPolicies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "securityPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.serviceAttachments.aggregatedList": {
        "description": "Retrieves the list of all ServiceAttachment resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/serviceAttachments",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "serviceAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.serviceAttachments.delete": {
        "description": "Deletes the specified ServiceAttachment in the given scope",
        "flatPath": "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "serviceAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.serviceAttachments.get": {
        "description": "Returns the specified ServiceAttachment resource in the given scope.",
        "flatPath": "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "serviceAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.serviceAttachments.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/regions/{region}/serviceAttachments/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "serviceAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.serviceAttachments.insert": {
        "description": "Creates a ServiceAttachment in the specified project in the given scope using the parameters that are included in the request.",
        "flatPath": "projects/{project}/regions/{region}/serviceAttachments",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "serviceAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.serviceAttachments.list": {
        "description": "Lists the ServiceAttachments for a project in the given scope.",
        "flatPath": "projects/{project}/regions/{region}/serviceAttachments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "serviceAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.serviceAttachments.patch": {
        "description": "Patches the specified ServiceAttachment resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/regions/{region}/serviceAttachments/{serviceAttachment}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "serviceAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.serviceAttachments.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/regions/{region}/serviceAttachments/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "serviceAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.serviceAttachments.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/serviceAttachments/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "serviceAttachments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.snapshots.delete": {
        "description": "Deletes the specified Snapshot resource. Keep in mind that deleting a single snapshot might not necessarily delete all the data on that snapshot. If any data on the snapshot that is marked for deletion is needed for subsequent snapshots, the data will be moved to the next corresponding snapshot. For more information, see Deleting snapshots.",
        "flatPath": "projects/{project}/global/snapshots/{snapshot}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.snapshots.get": {
        "description": "Returns the specified Snapshot resource. Gets a list of available snapshots by making a list() request.",
        "flatPath": "projects/{project}/global/snapshots/{snapshot}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.snapshots.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/global/snapshots/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.snapshots.insert": {
        "description": "Creates a snapshot in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/snapshots",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.snapshots.list": {
        "description": "Retrieves the list of Snapshot resources contained within the specified project.",
        "flatPath": "projects/{project}/global/snapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.snapshots.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/global/snapshots/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.snapshots.setLabels": {
        "description": "Sets the labels on a snapshot. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/global/snapshots/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.snapshots.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/snapshots/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslCertificates.aggregatedList": {
        "description": "Retrieves the list of all SslCertificate resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/sslCertificates",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "sslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslCertificates.delete": {
        "description": "Deletes the specified SslCertificate resource.",
        "flatPath": "projects/{project}/global/sslCertificates/{sslCertificate}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslCertificates.get": {
        "description": "Returns the specified SslCertificate resource. Gets a list of available SSL certificates by making a list() request.",
        "flatPath": "projects/{project}/global/sslCertificates/{sslCertificate}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslCertificates.insert": {
        "description": "Creates a SslCertificate resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/sslCertificates",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "sslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslCertificates.list": {
        "description": "Retrieves the list of SslCertificate resources available to the specified project.",
        "flatPath": "projects/{project}/global/sslCertificates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslCertificates.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/sslCertificates/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "sslCertificates",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.sslPolicies.delete": {
        "description": "Deletes the specified SSL policy. The SSL policy resource can be deleted only if it is not in use by any TargetHttpsProxy or TargetSslProxy resources.",
        "flatPath": "projects/{project}/global/sslPolicies/{sslPolicy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sslPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslPolicies.get": {
        "description": "Lists all of the ordered rules present in a single specified policy.",
        "flatPath": "projects/{project}/global/sslPolicies/{sslPolicy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sslPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslPolicies.insert": {
        "description": "Returns the specified SSL policy resource. Gets a list of available SSL policies by making a list() request.",
        "flatPath": "projects/{project}/global/sslPolicies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "sslPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslPolicies.list": {
        "description": "Lists all the SSL policies that have been configured for the specified project.",
        "flatPath": "projects/{project}/global/sslPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sslPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslPolicies.listAvailableFeatures": {
        "description": "Lists all features that can be specified in the SSL policy when using custom profile.",
        "flatPath": "projects/{project}/global/sslPolicies/listAvailableFeatures",
        "httpMethod": "GET",
        "method": "listAvailableFeatures",
        "resourceType": "sslPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslPolicies.patch": {
        "description": "Patches the specified SSL policy with the data included in the request.",
        "flatPath": "projects/{project}/global/sslPolicies/{sslPolicy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sslPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.sslPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/sslPolicies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "sslPolicies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.subnetworks.aggregatedList": {
        "description": "Retrieves an aggregated list of subnetworks.",
        "flatPath": "projects/{project}/aggregated/subnetworks",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.delete": {
        "description": "Deletes the specified subnetwork.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.expandIpCidrRange": {
        "description": "Expands the IP CIDR range of the subnetwork to a specified value.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks/{subnetwork}/expandIpCidrRange",
        "httpMethod": "POST",
        "method": "expandIpCidrRange",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.get": {
        "description": "Returns the specified subnetwork. Gets a list of available subnetworks list() request.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.insert": {
        "description": "Creates a subnetwork in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.list": {
        "description": "Retrieves a list of subnetworks available to the specified project.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.listUsable": {
        "description": "Retrieves an aggregated list of all usable subnetworks in the project.",
        "flatPath": "projects/{project}/aggregated/subnetworks/listUsable",
        "httpMethod": "GET",
        "method": "listUsable",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.patch": {
        "description": "Patches the specified subnetwork with the data included in the request. Only certain fields can be updated with a patch request as indicated in the field descriptions. You must specify the current fingerprint of the subnetwork resource being patched.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks/{subnetwork}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.setPrivateIpGoogleAccess": {
        "description": "Set whether VMs in this subnet can access Google services without assigning external IP addresses through Private Google Access.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks/{subnetwork}/setPrivateIpGoogleAccess",
        "httpMethod": "POST",
        "method": "setPrivateIpGoogleAccess",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.subnetworks.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/subnetworks/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "subnetworks",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetGrpcProxies.delete": {
        "description": "Deletes the specified TargetGrpcProxy in the given scope",
        "flatPath": "projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetGrpcProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetGrpcProxies.get": {
        "description": "Returns the specified TargetGrpcProxy resource in the given scope.",
        "flatPath": "projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetGrpcProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetGrpcProxies.insert": {
        "description": "Creates a TargetGrpcProxy in the specified project in the given scope using the parameters that are included in the request.",
        "flatPath": "projects/{project}/global/targetGrpcProxies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "targetGrpcProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetGrpcProxies.list": {
        "description": "Lists the TargetGrpcProxies for a project in the given scope.",
        "flatPath": "projects/{project}/global/targetGrpcProxies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetGrpcProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetGrpcProxies.patch": {
        "description": "Patches the specified TargetGrpcProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/targetGrpcProxies/{targetGrpcProxy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "targetGrpcProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetGrpcProxies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/targetGrpcProxies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "targetGrpcProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetHttpProxies.aggregatedList": {
        "description": "Retrieves the list of all TargetHttpProxy resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/targetHttpProxies",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "targetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpProxies.delete": {
        "description": "Deletes the specified TargetHttpProxy resource.",
        "flatPath": "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpProxies.get": {
        "description": "Returns the specified TargetHttpProxy resource. Gets a list of available target HTTP proxies by making a list() request.",
        "flatPath": "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpProxies.insert": {
        "description": "Creates a TargetHttpProxy resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/targetHttpProxies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "targetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpProxies.list": {
        "description": "Retrieves the list of TargetHttpProxy resources available to the specified project.",
        "flatPath": "projects/{project}/global/targetHttpProxies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpProxies.patch": {
        "description": "Patches the specified TargetHttpProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/targetHttpProxies/{targetHttpProxy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "targetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpProxies.setUrlMap": {
        "description": "Changes the URL map for TargetHttpProxy.",
        "flatPath": "projects/{project}/targetHttpProxies/{targetHttpProxy}/setUrlMap",
        "httpMethod": "POST",
        "method": "setUrlMap",
        "resourceType": "targetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpProxies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/targetHttpProxies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "targetHttpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetHttpsProxies.aggregatedList": {
        "description": "Retrieves the list of all TargetHttpsProxy resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/targetHttpsProxies",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.delete": {
        "description": "Deletes the specified TargetHttpsProxy resource.",
        "flatPath": "projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.get": {
        "description": "Returns the specified TargetHttpsProxy resource. Gets a list of available target HTTPS proxies by making a list() request.",
        "flatPath": "projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.insert": {
        "description": "Creates a TargetHttpsProxy resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/targetHttpsProxies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.list": {
        "description": "Retrieves the list of TargetHttpsProxy resources available to the specified project.",
        "flatPath": "projects/{project}/global/targetHttpsProxies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.patch": {
        "description": "Patches the specified TargetHttpsProxy resource with the data included in the request. This method supports PATCH semantics and uses JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.setCertificateMap": {
        "description": "Changes the Certificate Map for TargetHttpsProxy.",
        "flatPath": "projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setCertificateMap",
        "httpMethod": "POST",
        "method": "setCertificateMap",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetHttpsProxies.setQuicOverride": {
        "description": "Sets the QUIC override policy for TargetHttpsProxy.",
        "flatPath": "projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setQuicOverride",
        "httpMethod": "POST",
        "method": "setQuicOverride",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.setSslCertificates": {
        "description": "Replaces SslCertificates for TargetHttpsProxy.",
        "flatPath": "projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setSslCertificates",
        "httpMethod": "POST",
        "method": "setSslCertificates",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.setSslPolicy": {
        "description": "Sets the SSL policy for TargetHttpsProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the HTTPS proxy load balancer. They do not affect the connection between the load balancer and the backends.",
        "flatPath": "projects/{project}/global/targetHttpsProxies/{targetHttpsProxy}/setSslPolicy",
        "httpMethod": "POST",
        "method": "setSslPolicy",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.setUrlMap": {
        "description": "Changes the URL map for TargetHttpsProxy.",
        "flatPath": "projects/{project}/targetHttpsProxies/{targetHttpsProxy}/setUrlMap",
        "httpMethod": "POST",
        "method": "setUrlMap",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetHttpsProxies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/targetHttpsProxies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "targetHttpsProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetInstances.aggregatedList": {
        "description": "Retrieves an aggregated list of target instances.",
        "flatPath": "projects/{project}/aggregated/targetInstances",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "targetInstances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetInstances.delete": {
        "description": "Deletes the specified TargetInstance resource.",
        "flatPath": "projects/{project}/zones/{zone}/targetInstances/{targetInstance}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetInstances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetInstances.get": {
        "description": "Returns the specified TargetInstance resource. Gets a list of available target instances by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}/targetInstances/{targetInstance}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetInstances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetInstances.insert": {
        "description": "Creates a TargetInstance resource in the specified project and zone using the data included in the request.",
        "flatPath": "projects/{project}/zones/{zone}/targetInstances",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "targetInstances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetInstances.list": {
        "description": "Retrieves a list of TargetInstance resources available to the specified project and zone.",
        "flatPath": "projects/{project}/zones/{zone}/targetInstances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetInstances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetInstances.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/zones/{zone}/targetInstances/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "targetInstances",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetPools.addHealthCheck": {
        "description": "Adds health check URLs to a target pool.",
        "flatPath": "projects/{project}/regions/{region}/targetPools/{targetPool}/addHealthCheck",
        "httpMethod": "POST",
        "method": "addHealthCheck",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.addInstance": {
        "description": "Adds an instance to a target pool.",
        "flatPath": "projects/{project}/regions/{region}/targetPools/{targetPool}/addInstance",
        "httpMethod": "POST",
        "method": "addInstance",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.aggregatedList": {
        "description": "Retrieves an aggregated list of target pools.",
        "flatPath": "projects/{project}/aggregated/targetPools",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.delete": {
        "description": "Deletes the specified target pool.",
        "flatPath": "projects/{project}/regions/{region}/targetPools/{targetPool}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.get": {
        "description": "Returns the specified target pool. Gets a list of available target pools by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/targetPools/{targetPool}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.getHealth": {
        "description": "Gets the most recent health check results for each IP for the instance that is referenced by the given target pool.",
        "flatPath": "projects/{project}/regions/{region}/targetPools/{targetPool}/getHealth",
        "httpMethod": "POST",
        "method": "getHealth",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.insert": {
        "description": "Creates a target pool in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/targetPools",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.list": {
        "description": "Retrieves a list of target pools available to the specified project and region.",
        "flatPath": "projects/{project}/regions/{region}/targetPools",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.removeHealthCheck": {
        "description": "Removes health check URL from a target pool.",
        "flatPath": "projects/{project}/regions/{region}/targetPools/{targetPool}/removeHealthCheck",
        "httpMethod": "POST",
        "method": "removeHealthCheck",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.removeInstance": {
        "description": "Removes instance URL from a target pool.",
        "flatPath": "projects/{project}/regions/{region}/targetPools/{targetPool}/removeInstance",
        "httpMethod": "POST",
        "method": "removeInstance",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.setBackup": {
        "description": "Changes a backup target pool's configurations.",
        "flatPath": "projects/{project}/regions/{region}/targetPools/{targetPool}/setBackup",
        "httpMethod": "POST",
        "method": "setBackup",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetPools.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/targetPools/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "targetPools",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetSslProxies.delete": {
        "description": "Deletes the specified TargetSslProxy resource.",
        "flatPath": "projects/{project}/global/targetSslProxies/{targetSslProxy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetSslProxies.get": {
        "description": "Returns the specified TargetSslProxy resource. Gets a list of available target SSL proxies by making a list() request.",
        "flatPath": "projects/{project}/global/targetSslProxies/{targetSslProxy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetSslProxies.insert": {
        "description": "Creates a TargetSslProxy resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/targetSslProxies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetSslProxies.list": {
        "description": "Retrieves the list of TargetSslProxy resources available to the specified project.",
        "flatPath": "projects/{project}/global/targetSslProxies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetSslProxies.setBackendService": {
        "description": "Changes the BackendService for TargetSslProxy.",
        "flatPath": "projects/{project}/global/targetSslProxies/{targetSslProxy}/setBackendService",
        "httpMethod": "POST",
        "method": "setBackendService",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetSslProxies.setCertificateMap": {
        "description": "Changes the Certificate Map for TargetSslProxy.",
        "flatPath": "projects/{project}/global/targetSslProxies/{targetSslProxy}/setCertificateMap",
        "httpMethod": "POST",
        "method": "setCertificateMap",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetSslProxies.setProxyHeader": {
        "description": "Changes the ProxyHeaderType for TargetSslProxy.",
        "flatPath": "projects/{project}/global/targetSslProxies/{targetSslProxy}/setProxyHeader",
        "httpMethod": "POST",
        "method": "setProxyHeader",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetSslProxies.setSslCertificates": {
        "description": "Changes SslCertificates for TargetSslProxy.",
        "flatPath": "projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslCertificates",
        "httpMethod": "POST",
        "method": "setSslCertificates",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetSslProxies.setSslPolicy": {
        "description": "Sets the SSL policy for TargetSslProxy. The SSL policy specifies the server-side support for SSL features. This affects connections between clients and the SSL proxy load balancer. They do not affect the connection between the load balancer and the backends.",
        "flatPath": "projects/{project}/global/targetSslProxies/{targetSslProxy}/setSslPolicy",
        "httpMethod": "POST",
        "method": "setSslPolicy",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetSslProxies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/targetSslProxies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "targetSslProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetTcpProxies.delete": {
        "description": "Deletes the specified TargetTcpProxy resource.",
        "flatPath": "projects/{project}/global/targetTcpProxies/{targetTcpProxy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetTcpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetTcpProxies.get": {
        "description": "Returns the specified TargetTcpProxy resource. Gets a list of available target TCP proxies by making a list() request.",
        "flatPath": "projects/{project}/global/targetTcpProxies/{targetTcpProxy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetTcpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetTcpProxies.insert": {
        "description": "Creates a TargetTcpProxy resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/targetTcpProxies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "targetTcpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetTcpProxies.list": {
        "description": "Retrieves the list of TargetTcpProxy resources available to the specified project.",
        "flatPath": "projects/{project}/global/targetTcpProxies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetTcpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetTcpProxies.setBackendService": {
        "description": "Changes the BackendService for TargetTcpProxy.",
        "flatPath": "projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setBackendService",
        "httpMethod": "POST",
        "method": "setBackendService",
        "resourceType": "targetTcpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetTcpProxies.setProxyHeader": {
        "description": "Changes the ProxyHeaderType for TargetTcpProxy.",
        "flatPath": "projects/{project}/global/targetTcpProxies/{targetTcpProxy}/setProxyHeader",
        "httpMethod": "POST",
        "method": "setProxyHeader",
        "resourceType": "targetTcpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetTcpProxies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/targetTcpProxies/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "targetTcpProxies",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetVpnGateways.aggregatedList": {
        "description": "Retrieves an aggregated list of target VPN gateways.",
        "flatPath": "projects/{project}/aggregated/targetVpnGateways",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "targetVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetVpnGateways.delete": {
        "description": "Deletes the specified target VPN gateway.",
        "flatPath": "projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetVpnGateways.get": {
        "description": "Returns the specified target VPN gateway. Gets a list of available target VPN gateways by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/targetVpnGateways/{targetVpnGateway}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetVpnGateways.insert": {
        "description": "Creates a target VPN gateway in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/targetVpnGateways",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "targetVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetVpnGateways.list": {
        "description": "Retrieves a list of target VPN gateways available to the specified project and region.",
        "flatPath": "projects/{project}/regions/{region}/targetVpnGateways",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.targetVpnGateways.setLabels": {
        "description": "Sets the labels on a TargetVpnGateway. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/regions/{region}/targetVpnGateways/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "targetVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.targetVpnGateways.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/targetVpnGateways/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "targetVpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.urlMaps.aggregatedList": {
        "description": "Retrieves the list of all UrlMap resources, regional and global, available to the specified project.",
        "flatPath": "projects/{project}/aggregated/urlMaps",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.urlMaps.delete": {
        "description": "Deletes the specified UrlMap resource.",
        "flatPath": "projects/{project}/global/urlMaps/{urlMap}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.urlMaps.get": {
        "description": "Returns the specified UrlMap resource. Gets a list of available URL maps by making a list() request.",
        "flatPath": "projects/{project}/global/urlMaps/{urlMap}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.urlMaps.insert": {
        "description": "Creates a UrlMap resource in the specified project using the data included in the request.",
        "flatPath": "projects/{project}/global/urlMaps",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.urlMaps.invalidateCache": {
        "description": "Initiates a cache invalidation operation, invalidating the specified path, scoped to the specified UrlMap. For more information, see [Invalidating cached content](/cdn/docs/invalidating-cached-content).",
        "flatPath": "projects/{project}/global/urlMaps/{urlMap}/invalidateCache",
        "httpMethod": "POST",
        "method": "invalidateCache",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.urlMaps.list": {
        "description": "Retrieves the list of UrlMap resources available to the specified project.",
        "flatPath": "projects/{project}/global/urlMaps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.urlMaps.patch": {
        "description": "Patches the specified UrlMap resource with the data included in the request. This method supports PATCH semantics and uses the JSON merge patch format and processing rules.",
        "flatPath": "projects/{project}/global/urlMaps/{urlMap}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.urlMaps.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/global/urlMaps/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.urlMaps.update": {
        "description": "Updates the specified UrlMap resource with the data included in the request.",
        "flatPath": "projects/{project}/global/urlMaps/{urlMap}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.urlMaps.validate": {
        "description": "Runs static validation for the UrlMap. In particular, the tests of the provided UrlMap will be run. Calling this method does NOT create the UrlMap.",
        "flatPath": "projects/{project}/global/urlMaps/{urlMap}/validate",
        "httpMethod": "POST",
        "method": "validate",
        "resourceType": "urlMaps",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnGateways.aggregatedList": {
        "description": "Retrieves an aggregated list of VPN gateways.",
        "flatPath": "projects/{project}/aggregated/vpnGateways",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "vpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnGateways.delete": {
        "description": "Deletes the specified VPN gateway.",
        "flatPath": "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "vpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnGateways.get": {
        "description": "Returns the specified VPN gateway. Gets a list of available VPN gateways by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "vpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnGateways.getStatus": {
        "description": "Returns the status for the specified VPN gateway.",
        "flatPath": "projects/{project}/regions/{region}/vpnGateways/{vpnGateway}/getStatus",
        "httpMethod": "GET",
        "method": "getStatus",
        "resourceType": "vpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnGateways.insert": {
        "description": "Creates a VPN gateway in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/vpnGateways",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "vpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnGateways.list": {
        "description": "Retrieves a list of VPN gateways available to the specified project and region.",
        "flatPath": "projects/{project}/regions/{region}/vpnGateways",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "vpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnGateways.setLabels": {
        "description": "Sets the labels on a VpnGateway. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/regions/{region}/vpnGateways/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "vpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnGateways.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/vpnGateways/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "vpnGateways",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnTunnels.aggregatedList": {
        "description": "Retrieves an aggregated list of VPN tunnels.",
        "flatPath": "projects/{project}/aggregated/vpnTunnels",
        "httpMethod": "GET",
        "method": "aggregatedList",
        "resourceType": "vpnTunnels",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnTunnels.delete": {
        "description": "Deletes the specified VpnTunnel resource.",
        "flatPath": "projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "vpnTunnels",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnTunnels.get": {
        "description": "Returns the specified VpnTunnel resource. Gets a list of available VPN tunnels by making a list() request.",
        "flatPath": "projects/{project}/regions/{region}/vpnTunnels/{vpnTunnel}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "vpnTunnels",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnTunnels.insert": {
        "description": "Creates a VpnTunnel resource in the specified project and region using the data included in the request.",
        "flatPath": "projects/{project}/regions/{region}/vpnTunnels",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "vpnTunnels",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnTunnels.list": {
        "description": "Retrieves a list of VpnTunnel resources contained in the specified project and region.",
        "flatPath": "projects/{project}/regions/{region}/vpnTunnels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "vpnTunnels",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.vpnTunnels.setLabels": {
        "description": "Sets the labels on a VpnTunnel. To learn more about labels, read the Labeling Resources documentation.",
        "flatPath": "projects/{project}/regions/{region}/vpnTunnels/{resource}/setLabels",
        "httpMethod": "POST",
        "method": "setLabels",
        "resourceType": "vpnTunnels",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.vpnTunnels.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "projects/{project}/regions/{region}/vpnTunnels/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "vpnTunnels",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta"
        ]
      },
      "compute.zoneOperations.delete": {
        "description": "Deletes the specified zone-specific Operations resource.",
        "flatPath": "projects/{project}/zones/{zone}/operations/{operation}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "zoneOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.zoneOperations.get": {
        "description": "Retrieves the specified zone-specific Operations resource.",
        "flatPath": "projects/{project}/zones/{zone}/operations/{operation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "zoneOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.zoneOperations.list": {
        "description": "Retrieves a list of Operation resources contained within the specified zone.",
        "flatPath": "projects/{project}/zones/{zone}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "zoneOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.zoneOperations.wait": {
        "description": "Waits for the specified Operation resource to return as `DONE` or for the request to approach the 2 minute deadline, and retrieves the specified Operation resource. This method waits for no more than the 2 minutes and then returns the current state of the operation, which might be `DONE` or still in progress. This method is called on a best-effort basis. Specifically: - In uncommon cases, when the server is overloaded, the request might return before the default deadline is reached, or might return after zero seconds. - If the default deadline is reached, there is no guarantee that the operation is actually done when the method returns. Be prepared to retry if the operation is not `DONE`. ",
        "flatPath": "projects/{project}/zones/{zone}/operations/{operation}/wait",
        "httpMethod": "POST",
        "method": "wait",
        "resourceType": "zoneOperations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.zones.get": {
        "description": "Returns the specified Zone resource. Gets a list of available zones by making a list() request.",
        "flatPath": "projects/{project}/zones/{zone}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "zones",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      },
      "compute.zones.list": {
        "description": "Retrieves the list of Zone resources available to the specified project.",
        "flatPath": "projects/{project}/zones",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "zones",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Compute Engine API"
  },
  "connectors": {
    "description": "",
    "methods": {
      "connectors.projects.locations.connections.create": {
        "description": "Creates a new Connection in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.delete": {
        "description": "Deletes a single Connection.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.get": {
        "description": "Gets details of a single Connection.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.getConnectionSchemaMetadata": {
        "description": "Gets schema metadata of a connection. SchemaMetadata is a singleton resource for each connection.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/connectionSchemaMetadata",
        "httpMethod": "GET",
        "method": "getConnectionSchemaMetadata",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.list": {
        "description": "Lists Connections in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.patch": {
        "description": "Updates the parameters of a single Connection.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.runtimeActionSchemas.list": {
        "description": "List schema of a runtime actions filtered by action name.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/runtimeActionSchemas",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "runtimeActionSchemas",
        "resourceTypePath": "//projects/locations/connections",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.runtimeEntitySchemas.list": {
        "description": "List schema of a runtime entities filtered by entity name.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}/runtimeEntitySchemas",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "runtimeEntitySchemas",
        "resourceTypePath": "//projects/locations/connections",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.connections.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "connections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.getRuntimeConfig": {
        "description": "Gets the runtimeConfig of a location. RuntimeConfig is a singleton resource for each location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimeConfig",
        "httpMethod": "GET",
        "method": "getRuntimeConfig",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.global.providers.connectors.get": {
        "description": "Gets details of a single Connector.",
        "flatPath": "v1/projects/{projectsId}/locations/global/providers/{providersId}/connectors/{connectorsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "connectors",
        "resourceTypePath": "//projects/locations/global/providers",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.global.providers.connectors.list": {
        "description": "Lists Connectors in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/global/providers/{providersId}/connectors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "connectors",
        "resourceTypePath": "//projects/locations/global/providers",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.global.providers.connectors.versions.get": {
        "description": "Gets details of a single connector version.",
        "flatPath": "v1/projects/{projectsId}/locations/global/providers/{providersId}/connectors/{connectorsId}/versions/{versionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/global/providers/connectors",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.global.providers.connectors.versions.list": {
        "description": "Lists Connector Versions in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/global/providers/{providersId}/connectors/{connectorsId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/global/providers/connectors",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.global.providers.get": {
        "description": "Gets details of a single Provider.",
        "flatPath": "v1/projects/{projectsId}/locations/global/providers/{providersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.global.providers.list": {
        "description": "Lists Providers in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/global/providers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.providers.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/providers/{providersId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.providers.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/providers/{providersId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "connectors.projects.locations.providers.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/providers/{providersId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Connectors API"
  },
  "contactcenterinsights": {
    "description": "",
    "methods": {
      "contactcenterinsights.projects.locations.conversations.analyses.create": {
        "description": "Creates an analysis. The long running operation is done when the analysis has completed.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/analyses",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "analyses",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.conversations.analyses.delete": {
        "description": "Deletes an analysis.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/analyses/{analysesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "analyses",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.conversations.analyses.get": {
        "description": "Gets an analysis.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/analyses/{analysesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "analyses",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.conversations.analyses.list": {
        "description": "Lists analyses.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/analyses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "analyses",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.conversations.calculateStats": {
        "description": "Gets conversation statistics.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations:calculateStats",
        "httpMethod": "GET",
        "method": "calculateStats",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.conversations.create": {
        "description": "Creates a conversation.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.conversations.delete": {
        "description": "Deletes a conversation.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.conversations.get": {
        "description": "Gets a conversation.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.conversations.list": {
        "description": "Lists conversations.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.conversations.patch": {
        "description": "Updates a conversation.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.getSettings": {
        "description": "Gets project-level settings.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/settings",
        "httpMethod": "GET",
        "method": "getSettings",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.insightsdata.export": {
        "description": "Export insights data to a destination defined in the request body.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/insightsdata:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "insightsdata",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.calculateIssueModelStats": {
        "description": "Gets an issue model's statistics.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels/{issueModelsId}:calculateIssueModelStats",
        "httpMethod": "GET",
        "method": "calculateIssueModelStats",
        "resourceType": "issueModels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.create": {
        "description": "Creates an issue model.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "issueModels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.delete": {
        "description": "Deletes an issue model.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels/{issueModelsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "issueModels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.deploy": {
        "description": "Deploys an issue model. Returns an error if a model is already deployed. An issue model can only be used in analysis after it has been deployed.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels/{issueModelsId}:deploy",
        "httpMethod": "POST",
        "method": "deploy",
        "resourceType": "issueModels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.get": {
        "description": "Gets an issue model.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels/{issueModelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "issueModels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.issues.get": {
        "description": "Gets an issue.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels/{issueModelsId}/issues/{issuesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "issues",
        "resourceTypePath": "//projects/locations/issueModels",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.issues.list": {
        "description": "Lists issues.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels/{issueModelsId}/issues",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "issues",
        "resourceTypePath": "//projects/locations/issueModels",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.issues.patch": {
        "description": "Updates an issue.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels/{issueModelsId}/issues/{issuesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "issues",
        "resourceTypePath": "//projects/locations/issueModels",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.list": {
        "description": "Lists issue models.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "issueModels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.patch": {
        "description": "Updates an issue model.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels/{issueModelsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "issueModels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.issueModels.undeploy": {
        "description": "Undeploys an issue model. An issue model can not be used in analysis after it has been undeployed.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/issueModels/{issueModelsId}:undeploy",
        "httpMethod": "POST",
        "method": "undeploy",
        "resourceType": "issueModels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.phraseMatchers.create": {
        "description": "Creates a phrase matcher.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/phraseMatchers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "phraseMatchers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.phraseMatchers.delete": {
        "description": "Deletes a phrase matcher.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/phraseMatchers/{phraseMatchersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "phraseMatchers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.phraseMatchers.get": {
        "description": "Gets a phrase matcher.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/phraseMatchers/{phraseMatchersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "phraseMatchers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.phraseMatchers.list": {
        "description": "Lists phrase matchers.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/phraseMatchers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "phraseMatchers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.phraseMatchers.patch": {
        "description": "Updates a phrase matcher.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/phraseMatchers/{phraseMatchersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "phraseMatchers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "contactcenterinsights.projects.locations.updateSettings": {
        "description": "Updates project-level settings.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/settings",
        "httpMethod": "PATCH",
        "method": "updateSettings",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Contact Center AI Insights API"
  },
  "container": {
    "description": "Builds and manages container-based applications, powered by the open source Kubernetes technology.",
    "methods": {
      "container.projects.aggregated.usableSubnetworks.list": {
        "description": "Lists subnetworks that can be used for creating clusters in a project.",
        "flatPath": "v1beta1/projects/{projectsId}/aggregated/usableSubnetworks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "usableSubnetworks",
        "resourceTypePath": "//projects/aggregated",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.completeIpRotation": {
        "description": "Completes master IP rotation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:completeIpRotation",
        "httpMethod": "POST",
        "method": "completeIpRotation",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.create": {
        "description": "Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.delete": {
        "description": "Deletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.get": {
        "description": "Gets the details for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.getJwks": {
        "description": "Gets the public component of the cluster signing keys in JSON Web Key format. This API is not yet intended for general use, and is not available for all clusters.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/jwks",
        "httpMethod": "GET",
        "method": "getJwks",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.list": {
        "description": "Lists all clusters owned by a project in either the specified zone or all zones.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.nodePools.create": {
        "description": "Creates a node pool for a cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/nodePools",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.nodePools.delete": {
        "description": "Deletes a node pool from a cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/nodePools/{nodePoolsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.nodePools.get": {
        "description": "Retrieves the requested node pool.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/nodePools/{nodePoolsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.nodePools.list": {
        "description": "Lists the node pools for a cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/nodePools",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.nodePools.rollback": {
        "description": "Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/nodePools/{nodePoolsId}:rollback",
        "httpMethod": "POST",
        "method": "rollback",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.nodePools.setAutoscaling": {
        "description": "Sets the autoscaling settings of a specific node pool.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/nodePools/{nodePoolsId}:setAutoscaling",
        "httpMethod": "POST",
        "method": "setAutoscaling",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.nodePools.setManagement": {
        "description": "Sets the NodeManagement options for a node pool.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/nodePools/{nodePoolsId}:setManagement",
        "httpMethod": "POST",
        "method": "setManagement",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.nodePools.setSize": {
        "description": "SetNodePoolSizeRequest sets the size of a node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/nodePools/{nodePoolsId}:setSize",
        "httpMethod": "POST",
        "method": "setSize",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.nodePools.update": {
        "description": "Updates the version and/or image type of a specific node pool.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/nodePools/{nodePoolsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.setAddons": {
        "description": "Sets the addons for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:setAddons",
        "httpMethod": "POST",
        "method": "setAddons",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.setLegacyAbac": {
        "description": "Enables or disables the ABAC authorization mechanism on a cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:setLegacyAbac",
        "httpMethod": "POST",
        "method": "setLegacyAbac",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.setLocations": {
        "description": "Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters/update) instead.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:setLocations",
        "httpMethod": "POST",
        "method": "setLocations",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.setLogging": {
        "description": "Sets the logging service for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:setLogging",
        "httpMethod": "POST",
        "method": "setLogging",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.setMaintenancePolicy": {
        "description": "Sets the maintenance policy for a cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:setMaintenancePolicy",
        "httpMethod": "POST",
        "method": "setMaintenancePolicy",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.setMasterAuth": {
        "description": "Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:setMasterAuth",
        "httpMethod": "POST",
        "method": "setMasterAuth",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.setMonitoring": {
        "description": "Sets the monitoring service for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:setMonitoring",
        "httpMethod": "POST",
        "method": "setMonitoring",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.setNetworkPolicy": {
        "description": "Enables or disables Network Policy for a cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:setNetworkPolicy",
        "httpMethod": "POST",
        "method": "setNetworkPolicy",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.setResourceLabels": {
        "description": "Sets labels on a cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:setResourceLabels",
        "httpMethod": "POST",
        "method": "setResourceLabels",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.startIpRotation": {
        "description": "Starts master IP rotation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:startIpRotation",
        "httpMethod": "POST",
        "method": "startIpRotation",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.update": {
        "description": "Updates the settings for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.updateMaster": {
        "description": "Updates the master for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:updateMaster",
        "httpMethod": "POST",
        "method": "updateMaster",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.clusters.well-known.getOpenid-configuration": {
        "description": "Gets the OIDC discovery document for the cluster. See the [OpenID Connect Discovery 1.0 specification](https://openid.net/specs/openid-connect-discovery-1_0.html) for details. This API is not yet intended for general use, and is not available for all clusters.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/.well-known/openid-configuration",
        "httpMethod": "GET",
        "method": "getOpenid-configuration",
        "resourceType": "well-known",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.getServerConfig": {
        "description": "Returns configuration info about the Google Kubernetes Engine service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/serverConfig",
        "httpMethod": "GET",
        "method": "getServerConfig",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.list": {
        "description": "Fetches locations that offer Google Kubernetes Engine.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "container.projects.locations.operations.cancel": {
        "description": "Cancels the specified operation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.operations.get": {
        "description": "Gets the specified operation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.locations.operations.list": {
        "description": "Lists all operations in a project in the specified zone or all zones.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.addons": {
        "description": "Sets the addons for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/addons",
        "httpMethod": "POST",
        "method": "addons",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.completeIpRotation": {
        "description": "Completes master IP rotation.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:completeIpRotation",
        "httpMethod": "POST",
        "method": "completeIpRotation",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.create": {
        "description": "Creates a cluster, consisting of the specified number and type of Google Compute Engine instances. By default, the cluster is created in the project's [default network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks). One firewall is added for the cluster. After cluster creation, the Kubelet creates routes for each node to allow the containers on that node to communicate with all other instances in the cluster. Finally, an entry is added to the project's global metadata indicating which CIDR range the cluster is using.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.delete": {
        "description": "Deletes the cluster, including the Kubernetes endpoint and all worker nodes. Firewalls and routes that were configured during cluster creation are also deleted. Other Google Compute Engine resources that might be in use by the cluster, such as load balancer resources, are not deleted if they weren't present when the cluster was initially created.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.get": {
        "description": "Gets the details for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.legacyAbac": {
        "description": "Enables or disables the ABAC authorization mechanism on a cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/legacyAbac",
        "httpMethod": "POST",
        "method": "legacyAbac",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.list": {
        "description": "Lists all clusters owned by a project in either the specified zone or all zones.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.locations": {
        "description": "Sets the locations for a specific cluster. Deprecated. Use [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1beta1/projects.locations.clusters/update) instead.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/locations",
        "httpMethod": "POST",
        "method": "locations",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.logging": {
        "description": "Sets the logging service for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/logging",
        "httpMethod": "POST",
        "method": "logging",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.master": {
        "description": "Updates the master for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/master",
        "httpMethod": "POST",
        "method": "master",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.monitoring": {
        "description": "Sets the monitoring service for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/monitoring",
        "httpMethod": "POST",
        "method": "monitoring",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.nodePools.autoscaling": {
        "description": "Sets the autoscaling settings of a specific node pool.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/autoscaling",
        "httpMethod": "POST",
        "method": "autoscaling",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/zones/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.nodePools.create": {
        "description": "Creates a node pool for a cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/zones/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.nodePools.delete": {
        "description": "Deletes a node pool from a cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/zones/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.nodePools.get": {
        "description": "Retrieves the requested node pool.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/zones/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.nodePools.list": {
        "description": "Lists the node pools for a cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/zones/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.nodePools.rollback": {
        "description": "Rolls back a previously Aborted or Failed NodePool upgrade. This makes no changes if the last upgrade successfully completed.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}:rollback",
        "httpMethod": "POST",
        "method": "rollback",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/zones/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.nodePools.setManagement": {
        "description": "Sets the NodeManagement options for a node pool.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setManagement",
        "httpMethod": "POST",
        "method": "setManagement",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/zones/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.nodePools.setSize": {
        "description": "SetNodePoolSizeRequest sets the size of a node pool. The new size will be used for all replicas, including future replicas created by modifying NodePool.locations.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/setSize",
        "httpMethod": "POST",
        "method": "setSize",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/zones/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.nodePools.update": {
        "description": "Updates the version and/or image type of a specific node pool.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/nodePools/{nodePoolId}/update",
        "httpMethod": "POST",
        "method": "update",
        "resourceType": "nodePools",
        "resourceTypePath": "//projects/zones/clusters",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.resourceLabels": {
        "description": "Sets labels on a cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}/resourceLabels",
        "httpMethod": "POST",
        "method": "resourceLabels",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.setMaintenancePolicy": {
        "description": "Sets the maintenance policy for a cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMaintenancePolicy",
        "httpMethod": "POST",
        "method": "setMaintenancePolicy",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.setMasterAuth": {
        "description": "Sets master auth materials. Currently supports changing the admin password or a specific cluster, either via password generation or explicitly setting the password.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setMasterAuth",
        "httpMethod": "POST",
        "method": "setMasterAuth",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.setNetworkPolicy": {
        "description": "Enables or disables Network Policy for a cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:setNetworkPolicy",
        "httpMethod": "POST",
        "method": "setNetworkPolicy",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.startIpRotation": {
        "description": "Starts master IP rotation.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}:startIpRotation",
        "httpMethod": "POST",
        "method": "startIpRotation",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.clusters.update": {
        "description": "Updates the settings for a specific cluster.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/clusters/{clusterId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.getServerconfig": {
        "description": "Returns configuration info about the Google Kubernetes Engine service.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/serverconfig",
        "httpMethod": "GET",
        "method": "getServerconfig",
        "resourceType": "zones",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.operations.cancel": {
        "description": "Cancels the specified operation.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.operations.get": {
        "description": "Gets the specified operation.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/operations/{operationId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "container.projects.zones.operations.list": {
        "description": "Lists all operations in a project in the specified zone or all zones.",
        "flatPath": "v1beta1/projects/{projectId}/zones/{zone}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Kubernetes Engine API"
  },
  "containeranalysis": {
    "description": "An implementation of the Grafeas API, which stores, and enables querying and retrieval of critical metadata about all of your software artifacts.",
    "methods": {
      "containeranalysis.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "containeranalysis.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "containeranalysis.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "containeranalysis.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "containeranalysis.projects.notes.batchCreate": {
        "description": "Creates new notes in batch.",
        "flatPath": "v1beta1/projects/{projectsId}/notes:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "notes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.notes.create": {
        "description": "Creates a new `Note`.",
        "flatPath": "v1alpha1/projects/{projectsId}/notes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "notes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.notes.delete": {
        "description": "Deletes the given `Note` from the system.",
        "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "notes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.notes.get": {
        "description": "Returns the requested `Note`.",
        "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "notes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.notes.getIamPolicy": {
        "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
        "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "notes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.notes.list": {
        "description": "Lists all `Notes` for a given project.",
        "flatPath": "v1alpha1/projects/{projectsId}/notes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "notes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.notes.occurrences.list": {
        "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.",
        "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}/occurrences",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects/notes",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.notes.patch": {
        "description": "Updates an existing `Note`.",
        "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "notes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.notes.setIamPolicy": {
        "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
        "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "notes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.notes.testIamPermissions": {
        "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
        "flatPath": "v1alpha1/projects/{projectsId}/notes/{notesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "notes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.batchCreate": {
        "description": "Creates new occurrences in batch.",
        "flatPath": "v1beta1/projects/{projectsId}/occurrences:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.create": {
        "description": "Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.delete": {
        "description": "Deletes the given `Occurrence` from the system. Use this when an `Occurrence` is no longer applicable for the given resource.",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.get": {
        "description": "Returns the requested `Occurrence`.",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.getIamPolicy": {
        "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.getNotes": {
        "description": "Gets the `Note` attached to the given `Occurrence`.",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}/notes",
        "httpMethod": "GET",
        "method": "getNotes",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.getVulnerabilitySummary": {
        "description": "Gets a summary of the number and severity of occurrences.",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences:vulnerabilitySummary",
        "httpMethod": "GET",
        "method": "getVulnerabilitySummary",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.list": {
        "description": "Lists active `Occurrences` for a given project matching the filters.",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.patch": {
        "description": "Updates an existing occurrence.",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.setIamPolicy": {
        "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.occurrences.testIamPermissions": {
        "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
        "flatPath": "v1alpha1/projects/{projectsId}/occurrences/{occurrencesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "occurrences",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "containeranalysis.projects.operations.create": {
        "description": "Creates a new `Operation`.",
        "flatPath": "v1alpha1/projects/{projectsId}/operations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.projects.operations.patch": {
        "description": "Updates an existing operation returns an error if operation does not exist. The only valid operations are to update mark the done bit change the result.",
        "flatPath": "v1alpha1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.projects.scanConfigs.get": {
        "description": "Gets a specific scan configuration for a project.",
        "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "containeranalysis.projects.scanConfigs.list": {
        "description": "Lists scan configurations for a project.",
        "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "containeranalysis.projects.scanConfigs.patch": {
        "description": "Updates the scan configuration to a new value.",
        "flatPath": "v1alpha1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.projects.scanConfigs.update": {
        "description": "Updates the specified scan configuration.",
        "flatPath": "v1beta1/projects/{projectsId}/scanConfigs/{scanConfigsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "containeranalysis.providers.notes.create": {
        "description": "Creates a new `Note`.",
        "flatPath": "v1alpha1/providers/{providersId}/notes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "notes",
        "resourceTypePath": "//providers",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.providers.notes.delete": {
        "description": "Deletes the given `Note` from the system.",
        "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "notes",
        "resourceTypePath": "//providers",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.providers.notes.get": {
        "description": "Returns the requested `Note`.",
        "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "notes",
        "resourceTypePath": "//providers",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.providers.notes.getIamPolicy": {
        "description": "Gets the access control policy for a note or an `Occurrence` resource. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a note or occurrence, respectively. Attempting to call this method on a resource without the required permission will result in a `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for occurrences and projects/{PROJECT_ID}/notes/{NOTE_ID} for notes",
        "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "notes",
        "resourceTypePath": "//providers",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.providers.notes.list": {
        "description": "Lists all `Notes` for a given project.",
        "flatPath": "v1alpha1/providers/{providersId}/notes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "notes",
        "resourceTypePath": "//providers",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.providers.notes.occurrences.list": {
        "description": "Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer projects.",
        "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}/occurrences",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "occurrences",
        "resourceTypePath": "//providers/notes",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.providers.notes.patch": {
        "description": "Updates an existing `Note`.",
        "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "notes",
        "resourceTypePath": "//providers",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.providers.notes.setIamPolicy": {
        "description": "Sets the access control policy on the specified `Note` or `Occurrence`. Requires `containeranalysis.notes.setIamPolicy` or `containeranalysis.occurrences.setIamPolicy` permission if the resource is a `Note` or an `Occurrence`, respectively. Attempting to call this method without these permissions will result in a ` `PERMISSION_DENIED` error. Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has `containeranalysis.notes.list` permission on a `Note` or `containeranalysis.occurrences.list` on an `Occurrence`, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{projectid}/occurrences/{occurrenceid}` for occurrences and projects/{projectid}/notes/{noteid} for notes",
        "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "notes",
        "resourceTypePath": "//providers",
        "versions": [
          "v1alpha1"
        ]
      },
      "containeranalysis.providers.notes.testIamPermissions": {
        "description": "Returns the permissions that a caller has on the specified note or occurrence resource. Requires list permission on the project (for example, \"storage.objects.list\" on the containing bucket for testing permission of an object). Attempting to call this method on a non-existent resource will result in a `NOT_FOUND` error if the user has list permission on the project, or a `PERMISSION_DENIED` error otherwise. The resource takes the following formats: `projects/{PROJECT_ID}/occurrences/{OCCURRENCE_ID}` for `Occurrences` and `projects/{PROJECT_ID}/notes/{NOTE_ID}` for `Notes`",
        "flatPath": "v1alpha1/providers/{providersId}/notes/{notesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "notes",
        "resourceTypePath": "//providers",
        "versions": [
          "v1alpha1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Container Analysis API"
  },
  "content": {
    "description": "Manage your product listings and accounts for Google Shopping",
    "methods": {
      "content.accounts.authinfo": {
        "description": "Returns information about the authenticated user.",
        "flatPath": "accounts/authinfo",
        "httpMethod": "GET",
        "method": "authinfo",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounts.claimwebsite": {
        "description": "Claims the website of a Merchant Center sub-account.",
        "flatPath": "{merchantId}/accounts/{accountId}/claimwebsite",
        "httpMethod": "POST",
        "method": "claimwebsite",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounts.credentials.create": {
        "description": "Uploads credentials for the Merchant Center account. If credentials already exist for this Merchant Center account and purpose, this method updates them.",
        "flatPath": "accounts/{accountId}/credentials",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "credentials",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.custombatch": {
        "description": "Retrieves, inserts, updates, and deletes multiple Merchant Center (sub-)accounts in a single request.",
        "flatPath": "accounts/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounts.delete": {
        "description": "Deletes a Merchant Center sub-account.",
        "flatPath": "{merchantId}/accounts/{accountId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounts.get": {
        "description": "Retrieves a Merchant Center account.",
        "flatPath": "{merchantId}/accounts/{accountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounts.insert": {
        "description": "Creates a Merchant Center sub-account.",
        "flatPath": "{merchantId}/accounts",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounts.labels.create": {
        "description": "Creates a new label, not assigned to any account.",
        "flatPath": "accounts/{accountId}/labels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "labels",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.labels.delete": {
        "description": "Deletes a label and removes it from all accounts to which it was assigned.",
        "flatPath": "accounts/{accountId}/labels/{labelId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "labels",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.labels.list": {
        "description": "Lists the labels assigned to an account.",
        "flatPath": "accounts/{accountId}/labels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "labels",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.labels.patch": {
        "description": "Updates a label.",
        "flatPath": "accounts/{accountId}/labels/{labelId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "labels",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.link": {
        "description": "Performs an action on a link between two Merchant Center accounts, namely accountId and linkedAccountId.",
        "flatPath": "{merchantId}/accounts/{accountId}/link",
        "httpMethod": "POST",
        "method": "link",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounts.list": {
        "description": "Lists the sub-accounts in your Merchant Center account.",
        "flatPath": "{merchantId}/accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounts.listlinks": {
        "description": "Returns the list of accounts linked to your Merchant Center account.",
        "flatPath": "{merchantId}/accounts/{accountId}/listlinks",
        "httpMethod": "GET",
        "method": "listlinks",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.requestphoneverification": {
        "description": "Request verification code to start phone verification.",
        "flatPath": "{merchantId}/accounts/{accountId}/requestphoneverification",
        "httpMethod": "POST",
        "method": "requestphoneverification",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.returncarrier.create": {
        "description": "Links return carrier to a merchant account.",
        "flatPath": "accounts/{accountId}/returncarrier",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "returncarrier",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.returncarrier.delete": {
        "description": "Delete a return carrier in the merchant account.",
        "flatPath": "accounts/{accountId}/returncarrier/{carrierAccountId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "returncarrier",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.returncarrier.list": {
        "description": "Lists available return carriers in the merchant account.",
        "flatPath": "accounts/{accountId}/returncarrier",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "returncarrier",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.returncarrier.patch": {
        "description": "Updates a return carrier in the merchant account.",
        "flatPath": "accounts/{accountId}/returncarrier/{carrierAccountId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "returncarrier",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.update": {
        "description": "Updates a Merchant Center account. Any fields that are not provided are deleted from the resource.",
        "flatPath": "{merchantId}/accounts/{accountId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounts.updatelabels": {
        "description": "Updates labels that are assigned to the Merchant Center account by CSS user.",
        "flatPath": "{merchantId}/accounts/{accountId}/updatelabels",
        "httpMethod": "POST",
        "method": "updatelabels",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.accounts.verifyphonenumber": {
        "description": "Validates verification code to verify phone number for the account. If successful this will overwrite the value of `accounts.businessinformation.phoneNumber`. Only verified phone number will replace an existing verified phone number.",
        "flatPath": "{merchantId}/accounts/{accountId}/verifyphonenumber",
        "httpMethod": "POST",
        "method": "verifyphonenumber",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.accountstatuses.custombatch": {
        "description": "Retrieves multiple Merchant Center account statuses in a single request.",
        "flatPath": "accountstatuses/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "accountstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accountstatuses.get": {
        "description": "Retrieves the status of a Merchant Center account. No itemLevelIssues are returned for multi-client accounts.",
        "flatPath": "{merchantId}/accountstatuses/{accountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accountstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accountstatuses.list": {
        "description": "Lists the statuses of the sub-accounts in your Merchant Center account.",
        "flatPath": "{merchantId}/accountstatuses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accountstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounttax.custombatch": {
        "description": "Retrieves and updates tax settings of multiple accounts in a single request.",
        "flatPath": "accounttax/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "accounttax",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounttax.get": {
        "description": "Retrieves the tax settings of the account.",
        "flatPath": "{merchantId}/accounttax/{accountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accounttax",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounttax.list": {
        "description": "Lists the tax settings of the sub-accounts in your Merchant Center account.",
        "flatPath": "{merchantId}/accounttax",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounttax",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.accounttax.update": {
        "description": "Updates the tax settings of the account. Any fields that are not provided are deleted from the resource.",
        "flatPath": "{merchantId}/accounttax/{accountId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "accounttax",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.buyongoogleprograms.activate": {
        "description": "Reactivates the BoG program in your Merchant Center account. Moves the program to the active state when allowed, e.g. when paused. Important: This method is only whitelisted for selected merchants.",
        "flatPath": "{merchantId}/buyongoogleprograms/{regionCode}/activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "buyongoogleprograms",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.buyongoogleprograms.get": {
        "description": "Retrieves a status of the BoG program for your Merchant Center account.",
        "flatPath": "{merchantId}/buyongoogleprograms/{regionCode}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buyongoogleprograms",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.buyongoogleprograms.onboard": {
        "description": "Onboards the BoG program in your Merchant Center account. By using this method, you agree to the [Terms of Service](https://merchants.google.com/mc/termsofservice/transactions/US/latest). Calling this method is only possible if the authenticated account is the same as the merchant id in the request. Calling this method multiple times will only accept Terms of Service if the latest version is not currently signed.",
        "flatPath": "{merchantId}/buyongoogleprograms/{regionCode}/onboard",
        "httpMethod": "POST",
        "method": "onboard",
        "resourceType": "buyongoogleprograms",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.buyongoogleprograms.patch": {
        "description": "Updates the status of the BoG program for your Merchant Center account.",
        "flatPath": "{merchantId}/buyongoogleprograms/{regionCode}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "buyongoogleprograms",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.buyongoogleprograms.pause": {
        "description": "Pauses the BoG program in your Merchant Center account. Important: This method is only whitelisted for selected merchants.",
        "flatPath": "{merchantId}/buyongoogleprograms/{regionCode}/pause",
        "httpMethod": "POST",
        "method": "pause",
        "resourceType": "buyongoogleprograms",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.buyongoogleprograms.requestreview": {
        "description": "Requests review and then activates the BoG program in your Merchant Center account for the first time. Moves the program to the REVIEW_PENDING state. Important: This method is only whitelisted for selected merchants.",
        "flatPath": "{merchantId}/buyongoogleprograms/{regionCode}/requestreview",
        "httpMethod": "POST",
        "method": "requestreview",
        "resourceType": "buyongoogleprograms",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.collections.create": {
        "description": "Uploads a collection to your Merchant Center account. If a collection with the same collectionId already exists, this method updates that entry. In each update, the collection is completely replaced by the fields in the body of the update request.",
        "flatPath": "{merchantId}/collections",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "collections",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.collections.delete": {
        "description": "Deletes a collection from your Merchant Center account.",
        "flatPath": "{merchantId}/collections/{collectionId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "collections",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.collections.get": {
        "description": "Retrieves a collection from your Merchant Center account.",
        "flatPath": "{merchantId}/collections/{collectionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "collections",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.collections.list": {
        "description": "Lists the collections in your Merchant Center account. The response might contain fewer items than specified by page_size. Rely on next_page_token to determine if there are more items to be requested.",
        "flatPath": "{merchantId}/collections",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "collections",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.collectionstatuses.get": {
        "description": "Gets the status of a collection from your Merchant Center account.",
        "flatPath": "{merchantId}/collectionstatuses/{collectionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "collectionstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.collectionstatuses.list": {
        "description": "Lists the statuses of the collections in your Merchant Center account.",
        "flatPath": "{merchantId}/collectionstatuses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "collectionstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.csses.get": {
        "description": "Retrieves a single CSS domain by ID.",
        "flatPath": "{cssGroupId}/csses/{cssDomainId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "csses",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.csses.list": {
        "description": "Lists CSS domains affiliated with a CSS group.",
        "flatPath": "{cssGroupId}/csses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "csses",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.csses.updatelabels": {
        "description": "Updates labels that are assigned to a CSS domain by its CSS group.",
        "flatPath": "{cssGroupId}/csses/{cssDomainId}/updatelabels",
        "httpMethod": "POST",
        "method": "updatelabels",
        "resourceType": "csses",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.datafeeds.custombatch": {
        "description": "Deletes, fetches, gets, inserts and updates multiple datafeeds in a single request.",
        "flatPath": "datafeeds/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "datafeeds",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.datafeeds.delete": {
        "description": "Deletes a datafeed configuration from your Merchant Center account.",
        "flatPath": "{merchantId}/datafeeds/{datafeedId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "datafeeds",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.datafeeds.fetchnow": {
        "description": "Invokes a fetch for the datafeed in your Merchant Center account. If you need to call this method more than once per day, we recommend you use the Products service to update your product data.",
        "flatPath": "{merchantId}/datafeeds/{datafeedId}/fetchNow",
        "httpMethod": "POST",
        "method": "fetchnow",
        "resourceType": "datafeeds",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.datafeeds.get": {
        "description": "Retrieves a datafeed configuration from your Merchant Center account.",
        "flatPath": "{merchantId}/datafeeds/{datafeedId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datafeeds",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.datafeeds.insert": {
        "description": "Registers a datafeed configuration with your Merchant Center account.",
        "flatPath": "{merchantId}/datafeeds",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "datafeeds",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.datafeeds.list": {
        "description": "Lists the configurations for datafeeds in your Merchant Center account.",
        "flatPath": "{merchantId}/datafeeds",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "datafeeds",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.datafeeds.update": {
        "description": "Updates a datafeed configuration of your Merchant Center account. Any fields that are not provided are deleted from the resource.",
        "flatPath": "{merchantId}/datafeeds/{datafeedId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "datafeeds",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.datafeedstatuses.custombatch": {
        "description": "Gets multiple Merchant Center datafeed statuses in a single request.",
        "flatPath": "datafeedstatuses/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "datafeedstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.datafeedstatuses.get": {
        "description": "Retrieves the status of a datafeed from your Merchant Center account.",
        "flatPath": "{merchantId}/datafeedstatuses/{datafeedId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datafeedstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.datafeedstatuses.list": {
        "description": "Lists the statuses of the datafeeds in your Merchant Center account.",
        "flatPath": "{merchantId}/datafeedstatuses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "datafeedstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.freelistingsprogram.get": {
        "description": "Retrieves the status and review eligibility for the free listing program.",
        "flatPath": "{merchantId}/freelistingsprogram",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "freelistingsprogram",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.freelistingsprogram.requestreview": {
        "description": "Requests a review for Free Listings program in the provided region. Important: This method is only whitelisted for selected merchants.",
        "flatPath": "{merchantId}/freelistingsprogram/requestreview",
        "httpMethod": "POST",
        "method": "requestreview",
        "resourceType": "freelistingsprogram",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.inventory.custombatch": {
        "description": "Updates price and availability for multiple products or stores in a single request. This operation does not update the expiration date of the products.",
        "flatPath": "inventory/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "inventory",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "content.inventory.set": {
        "description": "Updates price and availability of a product in your Merchant Center account.",
        "flatPath": "{merchantId}/inventory/{storeCode}/products/{productId}",
        "httpMethod": "POST",
        "method": "set",
        "resourceType": "inventory",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "content.liasettings.custombatch": {
        "description": "Retrieves and/or updates the LIA settings of multiple accounts in a single request.",
        "flatPath": "liasettings/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.liasettings.get": {
        "description": "Retrieves the LIA settings of the account.",
        "flatPath": "{merchantId}/liasettings/{accountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.liasettings.getaccessiblegmbaccounts": {
        "description": "Retrieves the list of accessible Google My Business accounts.",
        "flatPath": "{merchantId}/liasettings/{accountId}/accessiblegmbaccounts",
        "httpMethod": "GET",
        "method": "getaccessiblegmbaccounts",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.liasettings.list": {
        "description": "Lists the LIA settings of the sub-accounts in your Merchant Center account.",
        "flatPath": "{merchantId}/liasettings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.liasettings.listposdataproviders": {
        "description": "Retrieves the list of POS data providers that have active settings for the all eiligible countries.",
        "flatPath": "liasettings/posdataproviders",
        "httpMethod": "GET",
        "method": "listposdataproviders",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.liasettings.requestgmbaccess": {
        "description": "Requests access to a specified Google My Business account.",
        "flatPath": "{merchantId}/liasettings/{accountId}/requestgmbaccess",
        "httpMethod": "POST",
        "method": "requestgmbaccess",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.liasettings.requestinventoryverification": {
        "description": "Requests inventory validation for the specified country.",
        "flatPath": "{merchantId}/liasettings/{accountId}/requestinventoryverification/{country}",
        "httpMethod": "POST",
        "method": "requestinventoryverification",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.liasettings.setinventoryverificationcontact": {
        "description": "Sets the inventory verification contract for the specified country.",
        "flatPath": "{merchantId}/liasettings/{accountId}/setinventoryverificationcontact",
        "httpMethod": "POST",
        "method": "setinventoryverificationcontact",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.liasettings.setposdataprovider": {
        "description": "Sets the POS data provider for the specified country.",
        "flatPath": "{merchantId}/liasettings/{accountId}/setposdataprovider",
        "httpMethod": "POST",
        "method": "setposdataprovider",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.liasettings.update": {
        "description": "Updates the LIA settings of the account. Any fields that are not provided are deleted from the resource.",
        "flatPath": "{merchantId}/liasettings/{accountId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "liasettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.localinventory.custombatch": {
        "description": "Updates local inventory for multiple products or stores in a single request.",
        "flatPath": "localinventory/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "localinventory",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.localinventory.insert": {
        "description": "Updates the local inventory of a product in your Merchant Center account.",
        "flatPath": "{merchantId}/products/{productId}/localinventory",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "localinventory",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.orderinvoices.createchargeinvoice": {
        "description": "Creates a charge invoice for a shipment group, and triggers a charge capture for orderinvoice enabled orders.",
        "flatPath": "{merchantId}/orderinvoices/{orderId}/createChargeInvoice",
        "httpMethod": "POST",
        "method": "createchargeinvoice",
        "resourceType": "orderinvoices",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orderinvoices.createrefundinvoice": {
        "description": "Creates a refund invoice for one or more shipment groups, and triggers a refund for orderinvoice enabled orders. This can only be used for line items that have previously been charged using `createChargeInvoice`. All amounts (except for the summary) are incremental with respect to the previous invoice.",
        "flatPath": "{merchantId}/orderinvoices/{orderId}/createRefundInvoice",
        "httpMethod": "POST",
        "method": "createrefundinvoice",
        "resourceType": "orderinvoices",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orderreports.listdisbursements": {
        "description": "Retrieves a report for disbursements from your Merchant Center account.",
        "flatPath": "{merchantId}/orderreports/disbursements",
        "httpMethod": "GET",
        "method": "listdisbursements",
        "resourceType": "orderreports",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orderreports.listtransactions": {
        "description": "Retrieves a list of transactions for a disbursement from your Merchant Center account.",
        "flatPath": "{merchantId}/orderreports/disbursements/{disbursementId}/transactions",
        "httpMethod": "GET",
        "method": "listtransactions",
        "resourceType": "orderreports",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orderreturns.acknowledge": {
        "description": "Acks an order return in your Merchant Center account.",
        "flatPath": "{merchantId}/orderreturns/{returnId}/acknowledge",
        "httpMethod": "POST",
        "method": "acknowledge",
        "resourceType": "orderreturns",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.orderreturns.createorderreturn": {
        "description": "Create return in your Merchant Center account.",
        "flatPath": "{merchantId}/orderreturns/createOrderReturn",
        "httpMethod": "POST",
        "method": "createorderreturn",
        "resourceType": "orderreturns",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.orderreturns.get": {
        "description": "Retrieves an order return from your Merchant Center account.",
        "flatPath": "{merchantId}/orderreturns/{returnId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "orderreturns",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orderreturns.labels.create": {
        "description": "Links a return shipping label to a return id. You can only create one return label per return id. Since the label is sent to the buyer, the linked return label cannot be updated or deleted. If you try to create multiple return shipping labels for a single return id, every create request except the first will fail.",
        "flatPath": "{merchantId}/orderreturns/{returnId}/labels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "labels",
        "resourceTypePath": "//orderreturns",
        "versions": [
          "v2.1"
        ]
      },
      "content.orderreturns.list": {
        "description": "Lists order returns in your Merchant Center account.",
        "flatPath": "{merchantId}/orderreturns",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "orderreturns",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orderreturns.process": {
        "description": "Processes return in your Merchant Center account.",
        "flatPath": "{merchantId}/orderreturns/{returnId}/process",
        "httpMethod": "POST",
        "method": "process",
        "resourceType": "orderreturns",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.orders.acknowledge": {
        "description": "Marks an order as acknowledged.",
        "flatPath": "{merchantId}/orders/{orderId}/acknowledge",
        "httpMethod": "POST",
        "method": "acknowledge",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.advancetestorder": {
        "description": "Sandbox only. Moves a test order from state \"`inProgress`\" to state \"`pendingShipment`\".",
        "flatPath": "{merchantId}/testorders/{orderId}/advance",
        "httpMethod": "POST",
        "method": "advancetestorder",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.cancel": {
        "description": "Cancels all line items in an order, making a full refund.",
        "flatPath": "{merchantId}/orders/{orderId}/cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.cancellineitem": {
        "description": "Cancels a line item, making a full refund.",
        "flatPath": "{merchantId}/orders/{orderId}/cancelLineItem",
        "httpMethod": "POST",
        "method": "cancellineitem",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.canceltestorderbycustomer": {
        "description": "Sandbox only. Cancels a test order for customer-initiated cancellation.",
        "flatPath": "{merchantId}/testorders/{orderId}/cancelByCustomer",
        "httpMethod": "POST",
        "method": "canceltestorderbycustomer",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.captureOrder": {
        "description": "Capture funds from the customer for the current order total. This method should be called after the merchant verifies that they are able and ready to start shipping the order. This method blocks until a response is received from the payment processsor. If this method succeeds, the merchant is guaranteed to receive funds for the order after shipment. If the request fails, it can be retried or the order may be cancelled. This method cannot be called after the entire order is already shipped. A rejected error code is returned when the payment service provider has declined the charge. This indicates a problem between the PSP and either the merchant's or customer's account. Sometimes this error will be resolved by the customer. We recommend retrying these errors once per day or cancelling the order with reason `failedToCaptureFunds` if the items cannot be held.",
        "flatPath": "{merchantId}/orders/{orderId}/captureOrder",
        "httpMethod": "POST",
        "method": "captureOrder",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.orders.createtestorder": {
        "description": "Sandbox only. Creates a test order.",
        "flatPath": "{merchantId}/testorders",
        "httpMethod": "POST",
        "method": "createtestorder",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.createtestreturn": {
        "description": "Sandbox only. Creates a test return.",
        "flatPath": "{merchantId}/orders/{orderId}/testreturn",
        "httpMethod": "POST",
        "method": "createtestreturn",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.custombatch": {
        "description": "Retrieves or modifies multiple orders in a single request.",
        "flatPath": "orders/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "content.orders.get": {
        "description": "Retrieves an order from your Merchant Center account.",
        "flatPath": "{merchantId}/orders/{orderId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.getbymerchantorderid": {
        "description": "Retrieves an order using merchant order ID.",
        "flatPath": "{merchantId}/ordersbymerchantid/{merchantOrderId}",
        "httpMethod": "GET",
        "method": "getbymerchantorderid",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.gettestordertemplate": {
        "description": "Sandbox only. Retrieves an order template that can be used to quickly create a new order in sandbox.",
        "flatPath": "{merchantId}/testordertemplates/{templateName}",
        "httpMethod": "GET",
        "method": "gettestordertemplate",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.instorerefundlineitem": {
        "description": "Deprecated. Notifies that item return and refund was handled directly by merchant outside of Google payments processing (e.g. cash refund done in store). Note: We recommend calling the returnrefundlineitem method to refund in-store returns. We will issue the refund directly to the customer. This helps to prevent possible differences arising between merchant and Google transaction records. We also recommend having the point of sale system communicate with Google to ensure that customers do not receive a double refund by first refunding via Google then via an in-store return.",
        "flatPath": "{merchantId}/orders/{orderId}/inStoreRefundLineItem",
        "httpMethod": "POST",
        "method": "instorerefundlineitem",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.list": {
        "description": "Lists the orders in your Merchant Center account.",
        "flatPath": "{merchantId}/orders",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.refund": {
        "description": "Deprecated, please use returnRefundLineItem instead.",
        "flatPath": "{merchantId}/orders/{orderId}/refund",
        "httpMethod": "POST",
        "method": "refund",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "content.orders.refunditem": {
        "description": "Issues a partial or total refund for items and shipment.",
        "flatPath": "{merchantId}/orders/{orderId}/refunditem",
        "httpMethod": "POST",
        "method": "refunditem",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.orders.refundorder": {
        "description": "Issues a partial or total refund for an order.",
        "flatPath": "{merchantId}/orders/{orderId}/refundorder",
        "httpMethod": "POST",
        "method": "refundorder",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.orders.rejectreturnlineitem": {
        "description": "Rejects return on an line item.",
        "flatPath": "{merchantId}/orders/{orderId}/rejectReturnLineItem",
        "httpMethod": "POST",
        "method": "rejectreturnlineitem",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.returnlineitem": {
        "description": "Returns a line item.",
        "flatPath": "{merchantId}/orders/{orderId}/returnLineItem",
        "httpMethod": "POST",
        "method": "returnlineitem",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "content.orders.returnrefundlineitem": {
        "description": "Returns and refunds a line item. Note that this method can only be called on fully shipped orders. Please also note that the Orderreturns API is the preferred way to handle returns after you receive a return from a customer. You can use Orderreturns.list or Orderreturns.get to search for the return, and then use Orderreturns.processreturn to issue the refund. If the return cannot be found, then we recommend using this API to issue a refund.",
        "flatPath": "{merchantId}/orders/{orderId}/returnRefundLineItem",
        "httpMethod": "POST",
        "method": "returnrefundlineitem",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.setlineitemmetadata": {
        "description": "Sets (or overrides if it already exists) merchant provided annotations in the form of key-value pairs. A common use case would be to supply us with additional structured information about a line item that cannot be provided via other methods. Submitted key-value pairs can be retrieved as part of the orders resource.",
        "flatPath": "{merchantId}/orders/{orderId}/setLineItemMetadata",
        "httpMethod": "POST",
        "method": "setlineitemmetadata",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.shiplineitems": {
        "description": "Marks line item(s) as shipped.",
        "flatPath": "{merchantId}/orders/{orderId}/shipLineItems",
        "httpMethod": "POST",
        "method": "shiplineitems",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.updatelineitemshippingdetails": {
        "description": "Updates ship by and delivery by dates for a line item.",
        "flatPath": "{merchantId}/orders/{orderId}/updateLineItemShippingDetails",
        "httpMethod": "POST",
        "method": "updatelineitemshippingdetails",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.updatemerchantorderid": {
        "description": "Updates the merchant order ID for a given order.",
        "flatPath": "{merchantId}/orders/{orderId}/updateMerchantOrderId",
        "httpMethod": "POST",
        "method": "updatemerchantorderid",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.orders.updateshipment": {
        "description": "Updates a shipment's status, carrier, and/or tracking ID.",
        "flatPath": "{merchantId}/orders/{orderId}/updateShipment",
        "httpMethod": "POST",
        "method": "updateshipment",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.ordertrackingsignals.create": {
        "description": "Creates new order tracking signal.",
        "flatPath": "{merchantId}/ordertrackingsignals",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "ordertrackingsignals",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.pos.custombatch": {
        "description": "Batches multiple POS-related calls in a single request.",
        "flatPath": "pos/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "pos",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.pos.delete": {
        "description": "Deletes a store for the given merchant.",
        "flatPath": "{merchantId}/pos/{targetMerchantId}/store/{storeCode}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "pos",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.pos.get": {
        "description": "Retrieves information about the given store.",
        "flatPath": "{merchantId}/pos/{targetMerchantId}/store/{storeCode}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "pos",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.pos.insert": {
        "description": "Creates a store for the given merchant.",
        "flatPath": "{merchantId}/pos/{targetMerchantId}/store",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "pos",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.pos.inventory": {
        "description": "Submit inventory for the given merchant.",
        "flatPath": "{merchantId}/pos/{targetMerchantId}/inventory",
        "httpMethod": "POST",
        "method": "inventory",
        "resourceType": "pos",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.pos.list": {
        "description": "Lists the stores of the target merchant.",
        "flatPath": "{merchantId}/pos/{targetMerchantId}/store",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "pos",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.pos.sale": {
        "description": "Submit a sale event for the given merchant.",
        "flatPath": "{merchantId}/pos/{targetMerchantId}/sale",
        "httpMethod": "POST",
        "method": "sale",
        "resourceType": "pos",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.products.custombatch": {
        "description": "Retrieves, inserts, and deletes multiple products in a single request.",
        "flatPath": "products/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.products.delete": {
        "description": "Deletes a product from your Merchant Center account.",
        "flatPath": "{merchantId}/products/{productId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.products.get": {
        "description": "Retrieves a product from your Merchant Center account.",
        "flatPath": "{merchantId}/products/{productId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.products.insert": {
        "description": "Uploads a product to your Merchant Center account. If an item with the same channel, contentLanguage, offerId, and targetCountry already exists, this method updates that entry.",
        "flatPath": "{merchantId}/products",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.products.list": {
        "description": "Lists the products in your Merchant Center account. The response might contain fewer items than specified by maxResults. Rely on nextPageToken to determine if there are more items to be requested.",
        "flatPath": "{merchantId}/products",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.products.update": {
        "description": "Updates an existing product in your Merchant Center account. Only updates attributes provided in the request.",
        "flatPath": "{merchantId}/products/{productId}",
        "httpMethod": "PATCH",
        "method": "update",
        "resourceType": "products",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.productstatuses.custombatch": {
        "description": "Gets the statuses of multiple products in a single request.",
        "flatPath": "productstatuses/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "productstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.productstatuses.get": {
        "description": "Gets the status of a product from your Merchant Center account.",
        "flatPath": "{merchantId}/productstatuses/{productId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "productstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.productstatuses.list": {
        "description": "Lists the statuses of the products in your Merchant Center account.",
        "flatPath": "{merchantId}/productstatuses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "productstatuses",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.productstatuses.repricingreports.list": {
        "description": "Lists the metrics report for a given Repricing product.",
        "flatPath": "{merchantId}/productstatuses/{productId}/repricingreports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "repricingreports",
        "resourceTypePath": "//productstatuses",
        "versions": [
          "v2.1"
        ]
      },
      "content.promotions.create": {
        "description": "Inserts a promotion for your Merchant Center account. If the promotion already exists, then it will update the promotion instead.",
        "flatPath": "{merchantId}/promotions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "promotions",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.promotions.get": {
        "description": "Retrieves a promotion from your Merchant Center account.",
        "flatPath": "{merchantId}/promotions/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "promotions",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.pubsubnotificationsettings.get": {
        "description": "Retrieves a Merchant Center account's pubsub notification settings.",
        "flatPath": "{merchantId}/pubsubnotificationsettings",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "pubsubnotificationsettings",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.pubsubnotificationsettings.update": {
        "description": "Register a Merchant Center account for pubsub notifications. Note that cloud topic name should not be provided as part of the request.",
        "flatPath": "{merchantId}/pubsubnotificationsettings",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "pubsubnotificationsettings",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.regionalinventory.custombatch": {
        "description": "Updates regional inventory for multiple products or regions in a single request.",
        "flatPath": "regionalinventory/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "regionalinventory",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.regionalinventory.insert": {
        "description": "Update the regional inventory of a product in your Merchant Center account. If a regional inventory with the same region ID already exists, this method updates that entry.",
        "flatPath": "{merchantId}/products/{productId}/regionalinventory",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "regionalinventory",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.regions.create": {
        "description": "Creates a region definition in your Merchant Center account.",
        "flatPath": "{merchantId}/regions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "regions",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.regions.delete": {
        "description": "Deletes a region definition from your Merchant Center account.",
        "flatPath": "{merchantId}/regions/{regionId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "regions",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.regions.get": {
        "description": "Retrieves a region defined in your Merchant Center account.",
        "flatPath": "{merchantId}/regions/{regionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "regions",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.regions.list": {
        "description": "Lists the regions in your Merchant Center account.",
        "flatPath": "{merchantId}/regions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regions",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.regions.patch": {
        "description": "Updates a region definition in your Merchant Center account.",
        "flatPath": "{merchantId}/regions/{regionId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "regions",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.reports.search": {
        "description": "Retrieves merchant performance mertrics matching the search query and optionally segmented by selected dimensions.",
        "flatPath": "{merchantId}/reports/search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.repricingrules.create": {
        "description": "Creates a repricing rule for your Merchant Center account.",
        "flatPath": "{merchantId}/repricingrules",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "repricingrules",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.repricingrules.delete": {
        "description": "Deletes a repricing rule in your Merchant Center account.",
        "flatPath": "{merchantId}/repricingrules/{ruleId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "repricingrules",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.repricingrules.get": {
        "description": "Retrieves a repricing rule from your Merchant Center account.",
        "flatPath": "{merchantId}/repricingrules/{ruleId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "repricingrules",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.repricingrules.list": {
        "description": "Lists the repricing rules in your Merchant Center account.",
        "flatPath": "{merchantId}/repricingrules",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "repricingrules",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.repricingrules.patch": {
        "description": "Updates a repricing rule in your Merchant Center account. All mutable fields will be overwritten in each update request. In each update, you must provide all required mutable fields, or an error will be thrown. If you do not provide an optional field in the update request, if that field currently exists, it will be deleted from the rule.",
        "flatPath": "{merchantId}/repricingrules/{ruleId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "repricingrules",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.repricingrules.repricingreports.list": {
        "description": "Lists the metrics report for a given Repricing rule.",
        "flatPath": "{merchantId}/repricingrules/{ruleId}/repricingreports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "repricingreports",
        "resourceTypePath": "//repricingrules",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnaddress.custombatch": {
        "description": "Batches multiple return address related calls in a single request.",
        "flatPath": "returnaddress/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "returnaddress",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnaddress.delete": {
        "description": "Deletes a return address for the given Merchant Center account.",
        "flatPath": "{merchantId}/returnaddress/{returnAddressId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "returnaddress",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnaddress.get": {
        "description": "Gets a return address of the Merchant Center account.",
        "flatPath": "{merchantId}/returnaddress/{returnAddressId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "returnaddress",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnaddress.insert": {
        "description": "Inserts a return address for the Merchant Center account.",
        "flatPath": "{merchantId}/returnaddress",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "returnaddress",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnaddress.list": {
        "description": "Lists the return addresses of the Merchant Center account.",
        "flatPath": "{merchantId}/returnaddress",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "returnaddress",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicy.custombatch": {
        "description": "Batches multiple return policy related calls in a single request.",
        "flatPath": "returnpolicy/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "returnpolicy",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicy.delete": {
        "description": "Deletes a return policy for the given Merchant Center account.",
        "flatPath": "{merchantId}/returnpolicy/{returnPolicyId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "returnpolicy",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicy.get": {
        "description": "Gets a return policy of the Merchant Center account.",
        "flatPath": "{merchantId}/returnpolicy/{returnPolicyId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "returnpolicy",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicy.insert": {
        "description": "Inserts a return policy for the Merchant Center account.",
        "flatPath": "{merchantId}/returnpolicy",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "returnpolicy",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicy.list": {
        "description": "Lists the return policies of the Merchant Center account.",
        "flatPath": "{merchantId}/returnpolicy",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "returnpolicy",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicyonline.create": {
        "description": "Creates a new return policy.",
        "flatPath": "{merchantId}/returnpolicyonline",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "returnpolicyonline",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicyonline.delete": {
        "description": "Deletes an existing return policy.",
        "flatPath": "{merchantId}/returnpolicyonline/{returnPolicyId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "returnpolicyonline",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicyonline.get": {
        "description": "Gets an existing return policy.",
        "flatPath": "{merchantId}/returnpolicyonline/{returnPolicyId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "returnpolicyonline",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicyonline.list": {
        "description": "Lists all existing return policies.",
        "flatPath": "{merchantId}/returnpolicyonline",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "returnpolicyonline",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.returnpolicyonline.patch": {
        "description": "Updates an existing return policy.",
        "flatPath": "{merchantId}/returnpolicyonline/{returnPolicyId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "returnpolicyonline",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.settlementreports.get": {
        "description": "Retrieves a settlement report from your Merchant Center account.",
        "flatPath": "{merchantId}/settlementreports/{settlementId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "settlementreports",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.settlementreports.list": {
        "description": "Retrieves a list of settlement reports from your Merchant Center account.",
        "flatPath": "{merchantId}/settlementreports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "settlementreports",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.settlementtransactions.list": {
        "description": "Retrieves a list of transactions for the settlement.",
        "flatPath": "{merchantId}/settlementreports/{settlementId}/transactions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "settlementtransactions",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.shippingsettings.custombatch": {
        "description": "Retrieves and updates the shipping settings of multiple accounts in a single request.",
        "flatPath": "shippingsettings/batch",
        "httpMethod": "POST",
        "method": "custombatch",
        "resourceType": "shippingsettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.shippingsettings.get": {
        "description": "Retrieves the shipping settings of the account.",
        "flatPath": "{merchantId}/shippingsettings/{accountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "shippingsettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.shippingsettings.getsupportedcarriers": {
        "description": "Retrieves supported carriers and carrier services for an account.",
        "flatPath": "{merchantId}/supportedCarriers",
        "httpMethod": "GET",
        "method": "getsupportedcarriers",
        "resourceType": "shippingsettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.shippingsettings.getsupportedholidays": {
        "description": "Retrieves supported holidays for an account.",
        "flatPath": "{merchantId}/supportedHolidays",
        "httpMethod": "GET",
        "method": "getsupportedholidays",
        "resourceType": "shippingsettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.shippingsettings.getsupportedpickupservices": {
        "description": "Retrieves supported pickup services for an account.",
        "flatPath": "{merchantId}/supportedPickupServices",
        "httpMethod": "GET",
        "method": "getsupportedpickupservices",
        "resourceType": "shippingsettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.shippingsettings.list": {
        "description": "Lists the shipping settings of the sub-accounts in your Merchant Center account.",
        "flatPath": "{merchantId}/shippingsettings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "shippingsettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.shippingsettings.update": {
        "description": "Updates the shipping settings of the account. Any fields that are not provided are deleted from the resource.",
        "flatPath": "{merchantId}/shippingsettings/{accountId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "shippingsettings",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v2.1"
        ]
      },
      "content.shoppingadsprogram.get": {
        "description": "Retrieves the status and review eligibility for the Shopping Ads program.",
        "flatPath": "{merchantId}/shoppingadsprogram",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "shoppingadsprogram",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      },
      "content.shoppingadsprogram.requestreview": {
        "description": "Requests a review for Shopping Ads program in the provided country.",
        "flatPath": "{merchantId}/shoppingadsprogram/requestreview",
        "httpMethod": "POST",
        "method": "requestreview",
        "resourceType": "shoppingadsprogram",
        "resourceTypePath": "/",
        "versions": [
          "v2.1"
        ]
      }
    },
    "preferredVersion": "v2.1",
    "title": "Content API for Shopping"
  },
  "customsearch": {
    "description": "Searches over a website or collection of websites",
    "methods": {
      "search.cse.list": {
        "description": "Returns metadata about the search performed, metadata about the engine used for the search, and the search results.",
        "flatPath": "customsearch/v1",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "cse",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "search.cse.siterestrict.list": {
        "description": "Returns metadata about the search performed, metadata about the engine used for the search, and the search results. Uses a small set of url patterns.",
        "flatPath": "customsearch/v1/siterestrict",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "siterestrict",
        "resourceTypePath": "//cse",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Custom Search API"
  },
  "datacatalog": {
    "description": "A fully managed and highly scalable data discovery and metadata management service.",
    "methods": {
      "datacatalog.catalog.search": {
        "description": "Searches Data Catalog for multiple resources like entries, tags that match a query. This is a custom method (https://cloud.google.com/apis/design/custom_methods) and does not return the complete resource, only the resource identifier and high level fields. Clients can subsequently call `Get` methods. Note that Data Catalog search queries do not guarantee full recall. Query results that match your query may not be returned, even in subsequent result pages. Also note that results returned (and not returned) can vary across repeated search queries. See [Data Catalog Search Syntax](https://cloud.google.com/data-catalog/docs/how-to/search-reference) for more information.",
        "flatPath": "v1beta1/catalog:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "catalog",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.entries.lookup": {
        "description": "Get an entry by target resource name. This method allows clients to use the resource name from the source Google Cloud Platform service to get the Data Catalog Entry.",
        "flatPath": "v1beta1/entries:lookup",
        "httpMethod": "GET",
        "method": "lookup",
        "resourceType": "entries",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.create": {
        "description": "A maximum of 10,000 entry groups may be created per organization across all locations. Users should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entryGroups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.delete": {
        "description": "Deletes an EntryGroup. Only entry groups that do not contain entries can be deleted. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entryGroups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.create": {
        "description": "Creates an entry. Only entries of 'FILESET' type or user-specified type can be created. Users should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information). A maximum of 100,000 entries may be created per entry group.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entries",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.delete": {
        "description": "Deletes an existing entry. Only entries created through CreateEntry method can be deleted. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entries",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.get": {
        "description": "Gets an entry.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entries",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.getIamPolicy": {
        "description": "Gets the access control policy for a resource. A `NOT_FOUND` error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entries.getIamPolicy` to get policies on entries. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "entries",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.list": {
        "description": "Lists entries.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entries",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.patch": {
        "description": "Updates an existing entry. Users should enable the Data Catalog API in the project identified by the `entry.name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entries",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.tags.create": {
        "description": "Creates a tag on an Entry. Note: The project identified by the `parent` parameter for the [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be from the same organization.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/entryGroups/entries",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.tags.delete": {
        "description": "Deletes a tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags/{tagsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/entryGroups/entries",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.tags.list": {
        "description": "Lists the tags on an Entry.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/entryGroups/entries",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.tags.patch": {
        "description": "Updates an existing tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}/tags/{tagsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/entryGroups/entries",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.entries.testIamPermissions": {
        "description": "Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (We don't return a `NOT_FOUND` error). Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. A caller is not required to have Google IAM permission to make this request.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/entries/{entriesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "entries",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.get": {
        "description": "Gets an EntryGroup.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entryGroups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.getIamPolicy": {
        "description": "Gets the access control policy for a resource. A `NOT_FOUND` error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entries.getIamPolicy` to get policies on entries. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "entryGroups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.list": {
        "description": "Lists entry groups.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entryGroups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.patch": {
        "description": "Updates an EntryGroup. The user should enable the Data Catalog API in the project identified by the `entry_group.name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entryGroups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.setIamPolicy": {
        "description": "Sets the access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entries.setIamPolicy` to set policies on entries. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "entryGroups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.tags.create": {
        "description": "Creates a tag on an Entry. Note: The project identified by the `parent` parameter for the [tag](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.entryGroups.entries.tags/create#path-parameters) and the [tag template](https://cloud.google.com/data-catalog/docs/reference/rest/v1beta1/projects.locations.tagTemplates/create#path-parameters) used to create the tag must be from the same organization.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.tags.delete": {
        "description": "Deletes a tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags/{tagsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.tags.list": {
        "description": "Lists the tags on an Entry.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.tags.patch": {
        "description": "Updates an existing tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}/tags/{tagsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tags",
        "resourceTypePath": "//projects/locations/entryGroups",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.entryGroups.testIamPermissions": {
        "description": "Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (We don't return a `NOT_FOUND` error). Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. A caller is not required to have Google IAM permission to make this request.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/entryGroups/{entryGroupsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "entryGroups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.create": {
        "description": "Creates a tag template. The user should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tagTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.delete": {
        "description": "Deletes a tag template and all tags using the template. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tagTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.fields.create": {
        "description": "Creates a field in a tag template. The user should enable the Data Catalog API in the project identified by the `parent` parameter (see [Data Catalog Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "fields",
        "resourceTypePath": "//projects/locations/tagTemplates",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.fields.delete": {
        "description": "Deletes a field in a tag template and all uses of that field. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "fields",
        "resourceTypePath": "//projects/locations/tagTemplates",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.fields.enumValues.rename": {
        "description": "Renames an enum value in a tag template. The enum values have to be unique within one enum field. Thus, an enum value cannot be renamed with a name used in any other enum value within the same enum field.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}/enumValues/{enumValuesId}:rename",
        "httpMethod": "POST",
        "method": "rename",
        "resourceType": "enumValues",
        "resourceTypePath": "//projects/locations/tagTemplates/fields",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.fields.patch": {
        "description": "Updates a field in a tag template. This method cannot be used to update the field type. Users should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "fields",
        "resourceTypePath": "//projects/locations/tagTemplates",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.fields.rename": {
        "description": "Renames a field in a tag template. The user should enable the Data Catalog API in the project identified by the `name` parameter (see [Data Catalog Resource Project](https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}/fields/{fieldsId}:rename",
        "httpMethod": "POST",
        "method": "rename",
        "resourceType": "fields",
        "resourceTypePath": "//projects/locations/tagTemplates",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.get": {
        "description": "Gets a tag template.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tagTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.getIamPolicy": {
        "description": "Gets the access control policy for a resource. A `NOT_FOUND` error is returned if the resource does not exist. An empty policy is returned if the resource exists but does not have a policy set on it. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag templates. - `datacatalog.entries.getIamPolicy` to get policies on entries. - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "tagTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.patch": {
        "description": "Updates a tag template. This method cannot be used to update the fields of a template. The tag template fields are represented as separate resources and should be updated using their own create/update/delete methods. Users should enable the Data Catalog API in the project identified by the `tag_template.name` parameter (see [Data Catalog Resource Project] (https://cloud.google.com/data-catalog/docs/concepts/resource-project) for more information).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tagTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.setIamPolicy": {
        "description": "Sets the access control policy for a resource. Replaces any existing policy. Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. Callers must have following Google IAM permission - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag templates. - `datacatalog.entries.setIamPolicy` to set policies on entries. - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "tagTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.tagTemplates.testIamPermissions": {
        "description": "Returns the caller's permissions on a resource. If the resource does not exist, an empty set of permissions is returned (We don't return a `NOT_FOUND` error). Supported resources are: - Tag templates. - Entries. - Entry groups. Note, this method cannot be used to manage policies for BigQuery, Pub/Sub and any external Google Cloud Platform resources synced to Data Catalog. A caller is not required to have Google IAM permission to make this request.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/tagTemplates/{tagTemplatesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "tagTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.create": {
        "description": "Creates a taxonomy in the specified project.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.delete": {
        "description": "Deletes a taxonomy. This operation will also delete all policy tags in this taxonomy along with their associated policies.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.export": {
        "description": "Exports all taxonomies and their policy tags in a project. This method generates SerializedTaxonomy protos with nested policy tags that can be used as an input for future ImportTaxonomies calls.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies:export",
        "httpMethod": "GET",
        "method": "export",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.get": {
        "description": "Gets a taxonomy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.getIamPolicy": {
        "description": "Gets the IAM policy for a taxonomy or a policy tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.import": {
        "description": "Imports all taxonomies and their policy tags to a project as new taxonomies. This method provides a bulk taxonomy / policy tag creation using nested proto structure.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.list": {
        "description": "Lists all taxonomies in a project in a particular location that the caller has permission to view.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.patch": {
        "description": "Updates a taxonomy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.policyTags.create": {
        "description": "Creates a policy tag in the specified taxonomy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "policyTags",
        "resourceTypePath": "//projects/locations/taxonomies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.policyTags.delete": {
        "description": "Deletes a policy tag. Also deletes all of its descendant policy tags.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "policyTags",
        "resourceTypePath": "//projects/locations/taxonomies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.policyTags.get": {
        "description": "Gets a policy tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "policyTags",
        "resourceTypePath": "//projects/locations/taxonomies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.policyTags.getIamPolicy": {
        "description": "Gets the IAM policy for a taxonomy or a policy tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "policyTags",
        "resourceTypePath": "//projects/locations/taxonomies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.policyTags.list": {
        "description": "Lists all policy tags in a taxonomy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "policyTags",
        "resourceTypePath": "//projects/locations/taxonomies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.policyTags.patch": {
        "description": "Updates a policy tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "policyTags",
        "resourceTypePath": "//projects/locations/taxonomies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.policyTags.setIamPolicy": {
        "description": "Sets the IAM policy for a taxonomy or a policy tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "policyTags",
        "resourceTypePath": "//projects/locations/taxonomies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.policyTags.testIamPermissions": {
        "description": "Returns the permissions that a caller has on the specified taxonomy or policy tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}/policyTags/{policyTagsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "policyTags",
        "resourceTypePath": "//projects/locations/taxonomies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.replace": {
        "description": "Replaces (updates) a taxonomy and all its policy tags. The taxonomy and its entire hierarchy of policy tags must be represented literally by `SerializedTaxonomy` and the nested `SerializedPolicyTag` messages. This operation automatically does the following: - Deletes the existing policy tags that are missing from the `SerializedPolicyTag`. - Creates policy tags that don't have resource names. They are considered new. - Updates policy tags with valid resources names accordingly.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:replace",
        "httpMethod": "POST",
        "method": "replace",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.setIamPolicy": {
        "description": "Sets the IAM policy for a taxonomy or a policy tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datacatalog.projects.locations.taxonomies.testIamPermissions": {
        "description": "Returns the permissions that a caller has on the specified taxonomy or policy tag.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/taxonomies/{taxonomiesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "taxonomies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Cloud Data Catalog API"
  },
  "dataflow": {
    "description": "Manages Google Cloud Dataflow projects on Google Cloud Platform.",
    "methods": {
      "dataflow.projects.deleteSnapshots": {
        "description": "Deletes a snapshot.",
        "flatPath": "v1b3/projects/{projectId}/snapshots",
        "httpMethod": "DELETE",
        "method": "deleteSnapshots",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.aggregated": {
        "description": "List the jobs of a project across all regions.",
        "flatPath": "v1b3/projects/{projectId}/jobs:aggregated",
        "httpMethod": "GET",
        "method": "aggregated",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.create": {
        "description": "Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/jobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.debug.getConfig": {
        "description": "Get encoded debug configuration for component. Not cacheable.",
        "flatPath": "v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig",
        "httpMethod": "POST",
        "method": "getConfig",
        "resourceType": "debug",
        "resourceTypePath": "//projects/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.debug.sendCapture": {
        "description": "Send encoded debug capture data for component.",
        "flatPath": "v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture",
        "httpMethod": "POST",
        "method": "sendCapture",
        "resourceType": "debug",
        "resourceTypePath": "//projects/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.get": {
        "description": "Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/jobs/{jobId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.getMetrics": {
        "description": "Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/jobs/{jobId}/metrics",
        "httpMethod": "GET",
        "method": "getMetrics",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.list": {
        "description": "List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, as you can only get the list of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.messages.list": {
        "description": "Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/jobs/{jobId}/messages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "messages",
        "resourceTypePath": "//projects/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.snapshot": {
        "description": "Snapshot the state of a streaming job.",
        "flatPath": "v1b3/projects/{projectId}/jobs/{jobId}:snapshot",
        "httpMethod": "POST",
        "method": "snapshot",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.update": {
        "description": "Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/jobs/{jobId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.workItems.lease": {
        "description": "Leases a dataflow WorkItem to run.",
        "flatPath": "v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease",
        "httpMethod": "POST",
        "method": "lease",
        "resourceType": "workItems",
        "resourceTypePath": "//projects/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.jobs.workItems.reportStatus": {
        "description": "Reports the status of dataflow WorkItems leased by a worker.",
        "flatPath": "v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus",
        "httpMethod": "POST",
        "method": "reportStatus",
        "resourceType": "workItems",
        "resourceTypePath": "//projects/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.flexTemplates.launch": {
        "description": "Launch a job with a FlexTemplate.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch",
        "httpMethod": "POST",
        "method": "launch",
        "resourceType": "flexTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.create": {
        "description": "Creates a Cloud Dataflow job. To create a job, we recommend using `projects.locations.jobs.create` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.create` is not recommended, as your job will always start in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.debug.getConfig": {
        "description": "Get encoded debug configuration for component. Not cacheable.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig",
        "httpMethod": "POST",
        "method": "getConfig",
        "resourceType": "debug",
        "resourceTypePath": "//projects/locations/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.debug.sendCapture": {
        "description": "Send encoded debug capture data for component.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture",
        "httpMethod": "POST",
        "method": "sendCapture",
        "resourceType": "debug",
        "resourceTypePath": "//projects/locations/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.get": {
        "description": "Gets the state of the specified Cloud Dataflow job. To get the state of a job, we recommend using `projects.locations.jobs.get` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.get` is not recommended, as you can only get the state of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.getExecutionDetails": {
        "description": "Request detailed information about the execution status of the job. EXPERIMENTAL. This API is subject to change or removal without notice.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/executionDetails",
        "httpMethod": "GET",
        "method": "getExecutionDetails",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.getMetrics": {
        "description": "Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.getMetrics` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.getMetrics` is not recommended, as you can only request the status of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics",
        "httpMethod": "GET",
        "method": "getMetrics",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.list": {
        "description": "List the jobs of a project. To list the jobs of a project in a region, we recommend using `projects.locations.jobs.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). To list the all jobs across all regions, use `projects.jobs.aggregated`. Using `projects.jobs.list` is not recommended, as you can only get the list of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.messages.list": {
        "description": "Request the job status. To request the status of a job, we recommend using `projects.locations.jobs.messages.list` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.messages.list` is not recommended, as you can only request the status of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.snapshot": {
        "description": "Snapshot the state of a streaming job.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot",
        "httpMethod": "POST",
        "method": "snapshot",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.snapshots.list": {
        "description": "Lists snapshots.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/locations/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.stages.getExecutionDetails": {
        "description": "Request detailed information about the execution status of a stage of the job. EXPERIMENTAL. This API is subject to change or removal without notice.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/stages/{stageId}/executionDetails",
        "httpMethod": "GET",
        "method": "getExecutionDetails",
        "resourceType": "stages",
        "resourceTypePath": "//projects/locations/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.update": {
        "description": "Updates the state of an existing Cloud Dataflow job. To update the state of an existing job, we recommend using `projects.locations.jobs.update` with a [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints). Using `projects.jobs.update` is not recommended, as you can only update the state of jobs that are running in `us-central1`.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.workItems.lease": {
        "description": "Leases a dataflow WorkItem to run.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease",
        "httpMethod": "POST",
        "method": "lease",
        "resourceType": "workItems",
        "resourceTypePath": "//projects/locations/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.jobs.workItems.reportStatus": {
        "description": "Reports the status of dataflow WorkItems leased by a worker.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus",
        "httpMethod": "POST",
        "method": "reportStatus",
        "resourceType": "workItems",
        "resourceTypePath": "//projects/locations/jobs",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.snapshots.delete": {
        "description": "Deletes a snapshot.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.snapshots.get": {
        "description": "Gets information about a snapshot.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.snapshots.list": {
        "description": "Lists snapshots.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/snapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.sql.validate": {
        "description": "Validates a GoogleSQL query for Cloud Dataflow syntax. Will always confirm the given query parses correctly, and if able to look up schema information from DataCatalog, will validate that the query analyzes properly as well.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/sql:validate",
        "httpMethod": "GET",
        "method": "validate",
        "resourceType": "sql",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.templates.create": {
        "description": "Creates a Cloud Dataflow job from a template.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/templates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "templates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.templates.get": {
        "description": "Get the template associated with a template.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/templates:get",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "templates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.templates.launch": {
        "description": "Launch a template.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/templates:launch",
        "httpMethod": "POST",
        "method": "launch",
        "resourceType": "templates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.locations.workerMessages": {
        "description": "Send a worker_message to the service.",
        "flatPath": "v1b3/projects/{projectId}/locations/{location}/WorkerMessages",
        "httpMethod": "POST",
        "method": "workerMessages",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.snapshots.get": {
        "description": "Gets information about a snapshot.",
        "flatPath": "v1b3/projects/{projectId}/snapshots/{snapshotId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.snapshots.list": {
        "description": "Lists snapshots.",
        "flatPath": "v1b3/projects/{projectId}/snapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.templates.create": {
        "description": "Creates a Cloud Dataflow job from a template.",
        "flatPath": "v1b3/projects/{projectId}/templates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "templates",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.templates.get": {
        "description": "Get the template associated with a template.",
        "flatPath": "v1b3/projects/{projectId}/templates:get",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "templates",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.templates.launch": {
        "description": "Launch a template.",
        "flatPath": "v1b3/projects/{projectId}/templates:launch",
        "httpMethod": "POST",
        "method": "launch",
        "resourceType": "templates",
        "resourceTypePath": "//projects",
        "versions": [
          "v1b3"
        ]
      },
      "dataflow.projects.workerMessages": {
        "description": "Send a worker_message to the service.",
        "flatPath": "v1b3/projects/{projectId}/WorkerMessages",
        "httpMethod": "POST",
        "method": "workerMessages",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1b3"
        ]
      }
    },
    "preferredVersion": "v1b3",
    "title": "Dataflow API"
  },
  "datafusion": {
    "description": "Cloud Data Fusion is a fully-managed, cloud native, enterprise data integration service for quickly building and managing data pipelines. It provides a graphical interface to increase time efficiency and reduce complexity, and allows business users, developers, and data scientists to easily and reliably build scalable data integration solutions to cleanse, prepare, blend, transfer and transform data without having to wrestle with infrastructure.",
    "methods": {
      "datafusion.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.create": {
        "description": "Creates a new Data Fusion instance in the specified project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.delete": {
        "description": "Deletes a single Data Fusion instance.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.dnsPeerings.add": {
        "description": "Add DNS peering on the given resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/dnsPeerings:add",
        "httpMethod": "POST",
        "method": "add",
        "resourceType": "dnsPeerings",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1"
        ]
      },
      "datafusion.projects.locations.instances.dnsPeerings.list": {
        "description": "List DNS peering for a given resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/dnsPeerings:list",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dnsPeerings",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1"
        ]
      },
      "datafusion.projects.locations.instances.dnsPeerings.remove": {
        "description": "Remove DNS peering on the given resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/dnsPeerings:remove",
        "httpMethod": "POST",
        "method": "remove",
        "resourceType": "dnsPeerings",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1"
        ]
      },
      "datafusion.projects.locations.instances.get": {
        "description": "Gets details of a single Data Fusion instance.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.list": {
        "description": "Lists Data Fusion instances in the specified project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.namespaces.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/namespaces/{namespacesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1"
        ]
      },
      "datafusion.projects.locations.instances.namespaces.list": {
        "description": "List namespaces in a given instance",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/namespaces",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1"
        ]
      },
      "datafusion.projects.locations.instances.namespaces.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/namespaces/{namespacesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1"
        ]
      },
      "datafusion.projects.locations.instances.namespaces.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/namespaces/{namespacesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1"
        ]
      },
      "datafusion.projects.locations.instances.patch": {
        "description": "Updates a single Data Fusion instance.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.restart": {
        "description": "Restart a single Data Fusion instance. At the end of an operation instance is fully restarted.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:restart",
        "httpMethod": "POST",
        "method": "restart",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.instances.upgrade": {
        "description": "Upgrade a single Data Fusion instance. At the end of an operation instance is fully upgraded.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:upgrade",
        "httpMethod": "POST",
        "method": "upgrade",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "datafusion.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datafusion.projects.locations.removeIamPolicy": {
        "description": "Remove IAM policy that is currently set on the given resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/{locationsId1}:removeIamPolicy",
        "httpMethod": "POST",
        "method": "removeIamPolicy",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datafusion.projects.locations.versions.list": {
        "description": "Lists possible versions for Data Fusion instances in the specified project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Data Fusion API"
  },
  "datalabeling": {
    "description": "Public API for Google Cloud AI Data Labeling Service.",
    "methods": {
      "datalabeling.projects.annotationSpecSets.create": {
        "description": "Creates an annotation spec set by providing a set of labels.",
        "flatPath": "v1beta1/projects/{projectsId}/annotationSpecSets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "annotationSpecSets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.annotationSpecSets.delete": {
        "description": "Deletes an annotation spec set by resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/annotationSpecSets/{annotationSpecSetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "annotationSpecSets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.annotationSpecSets.get": {
        "description": "Gets an annotation spec set by resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/annotationSpecSets/{annotationSpecSetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "annotationSpecSets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.annotationSpecSets.list": {
        "description": "Lists annotation spec sets for a project. Pagination is supported.",
        "flatPath": "v1beta1/projects/{projectsId}/annotationSpecSets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "annotationSpecSets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.dataItems.get": {
        "description": "Gets a data item in a dataset by resource name. This API can be called after data are imported into dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/dataItems/{dataItemsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dataItems",
        "resourceTypePath": "//projects/datasets/annotatedDatasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.dataItems.list": {
        "description": "Lists data items in a dataset. This API can be called after data are imported into dataset. Pagination is supported.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/dataItems",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dataItems",
        "resourceTypePath": "//projects/datasets/annotatedDatasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.delete": {
        "description": "Deletes an annotated dataset by resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "annotatedDatasets",
        "resourceTypePath": "//projects/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.examples.get": {
        "description": "Gets an example by resource name, including both data and annotation.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/examples/{examplesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "examples",
        "resourceTypePath": "//projects/datasets/annotatedDatasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.examples.list": {
        "description": "Lists examples in an annotated dataset. Pagination is supported.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/examples",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "examples",
        "resourceTypePath": "//projects/datasets/annotatedDatasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.feedbackThreads.delete": {
        "description": "Delete a FeedbackThread.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/feedbackThreads/{feedbackThreadsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "feedbackThreads",
        "resourceTypePath": "//projects/datasets/annotatedDatasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.feedbackThreads.feedbackMessages.create": {
        "description": "Create a FeedbackMessage object.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/feedbackThreads/{feedbackThreadsId}/feedbackMessages",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "feedbackMessages",
        "resourceTypePath": "//projects/datasets/annotatedDatasets/feedbackThreads",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.feedbackThreads.feedbackMessages.delete": {
        "description": "Delete a FeedbackMessage.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/feedbackThreads/{feedbackThreadsId}/feedbackMessages/{feedbackMessagesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "feedbackMessages",
        "resourceTypePath": "//projects/datasets/annotatedDatasets/feedbackThreads",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.feedbackThreads.feedbackMessages.get": {
        "description": "Get a FeedbackMessage object.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/feedbackThreads/{feedbackThreadsId}/feedbackMessages/{feedbackMessagesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "feedbackMessages",
        "resourceTypePath": "//projects/datasets/annotatedDatasets/feedbackThreads",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.feedbackThreads.feedbackMessages.list": {
        "description": "List FeedbackMessages with pagination.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/feedbackThreads/{feedbackThreadsId}/feedbackMessages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "feedbackMessages",
        "resourceTypePath": "//projects/datasets/annotatedDatasets/feedbackThreads",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.feedbackThreads.get": {
        "description": "Get a FeedbackThread object.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/feedbackThreads/{feedbackThreadsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "feedbackThreads",
        "resourceTypePath": "//projects/datasets/annotatedDatasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.feedbackThreads.list": {
        "description": "List FeedbackThreads with pagination.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}/feedbackThreads",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "feedbackThreads",
        "resourceTypePath": "//projects/datasets/annotatedDatasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.get": {
        "description": "Gets an annotated dataset by resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets/{annotatedDatasetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "annotatedDatasets",
        "resourceTypePath": "//projects/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.annotatedDatasets.list": {
        "description": "Lists annotated datasets for a dataset. Pagination is supported.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/annotatedDatasets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "annotatedDatasets",
        "resourceTypePath": "//projects/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.create": {
        "description": "Creates dataset. If success return a Dataset resource.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "datasets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.dataItems.get": {
        "description": "Gets a data item in a dataset by resource name. This API can be called after data are imported into dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/dataItems/{dataItemsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dataItems",
        "resourceTypePath": "//projects/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.dataItems.list": {
        "description": "Lists data items in a dataset. This API can be called after data are imported into dataset. Pagination is supported.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/dataItems",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dataItems",
        "resourceTypePath": "//projects/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.delete": {
        "description": "Deletes a dataset by resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "datasets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.evaluations.exampleComparisons.search": {
        "description": "Searches example comparisons from an evaluation. The return format is a list of example comparisons that show ground truth and prediction(s) for a single input. Search by providing an evaluation ID.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/evaluations/{evaluationsId}/exampleComparisons:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "exampleComparisons",
        "resourceTypePath": "//projects/datasets/evaluations",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.evaluations.get": {
        "description": "Gets an evaluation by resource name (to search, use projects.evaluations.search).",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/evaluations/{evaluationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "evaluations",
        "resourceTypePath": "//projects/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.exportData": {
        "description": "Exports data and annotations from dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}:exportData",
        "httpMethod": "POST",
        "method": "exportData",
        "resourceType": "datasets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.get": {
        "description": "Gets dataset by resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datasets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.image.label": {
        "description": "Starts a labeling task for image. The type of image labeling task is configured by feature in the request.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/image:label",
        "httpMethod": "POST",
        "method": "label",
        "resourceType": "image",
        "resourceTypePath": "//projects/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.importData": {
        "description": "Imports data into dataset based on source locations defined in request. It can be called multiple times for the same dataset. Each dataset can only have one long running operation running on it. For example, no labeling task (also long running operation) can be started while importing is still ongoing. Vice versa.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}:importData",
        "httpMethod": "POST",
        "method": "importData",
        "resourceType": "datasets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.list": {
        "description": "Lists datasets under a project. Pagination is supported.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "datasets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.text.label": {
        "description": "Starts a labeling task for text. The type of text labeling task is configured by feature in the request.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/text:label",
        "httpMethod": "POST",
        "method": "label",
        "resourceType": "text",
        "resourceTypePath": "//projects/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.datasets.video.label": {
        "description": "Starts a labeling task for video. The type of video labeling task is configured by feature in the request.",
        "flatPath": "v1beta1/projects/{projectsId}/datasets/{datasetsId}/video:label",
        "httpMethod": "POST",
        "method": "label",
        "resourceType": "video",
        "resourceTypePath": "//projects/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.evaluationJobs.create": {
        "description": "Creates an evaluation job.",
        "flatPath": "v1beta1/projects/{projectsId}/evaluationJobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "evaluationJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.evaluationJobs.delete": {
        "description": "Stops and deletes an evaluation job.",
        "flatPath": "v1beta1/projects/{projectsId}/evaluationJobs/{evaluationJobsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "evaluationJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.evaluationJobs.get": {
        "description": "Gets an evaluation job by resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/evaluationJobs/{evaluationJobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "evaluationJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.evaluationJobs.list": {
        "description": "Lists all evaluation jobs within a project with possible filters. Pagination is supported.",
        "flatPath": "v1beta1/projects/{projectsId}/evaluationJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "evaluationJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.evaluationJobs.patch": {
        "description": "Updates an evaluation job. You can only update certain fields of the job's EvaluationJobConfig: `humanAnnotationConfig.instruction`, `exampleCount`, and `exampleSamplePercentage`. If you want to change any other aspect of the evaluation job, you must delete the job and create a new one.",
        "flatPath": "v1beta1/projects/{projectsId}/evaluationJobs/{evaluationJobsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "evaluationJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.evaluationJobs.pause": {
        "description": "Pauses an evaluation job. Pausing an evaluation job that is already in a `PAUSED` state is a no-op.",
        "flatPath": "v1beta1/projects/{projectsId}/evaluationJobs/{evaluationJobsId}:pause",
        "httpMethod": "POST",
        "method": "pause",
        "resourceType": "evaluationJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.evaluationJobs.resume": {
        "description": "Resumes a paused evaluation job. A deleted evaluation job can't be resumed. Resuming a running or scheduled evaluation job is a no-op.",
        "flatPath": "v1beta1/projects/{projectsId}/evaluationJobs/{evaluationJobsId}:resume",
        "httpMethod": "POST",
        "method": "resume",
        "resourceType": "evaluationJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.evaluations.search": {
        "description": "Searches evaluations within a project.",
        "flatPath": "v1beta1/projects/{projectsId}/evaluations:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "evaluations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.instructions.create": {
        "description": "Creates an instruction for how data should be labeled.",
        "flatPath": "v1beta1/projects/{projectsId}/instructions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instructions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.instructions.delete": {
        "description": "Deletes an instruction object by resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/instructions/{instructionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instructions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.instructions.get": {
        "description": "Gets an instruction by resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/instructions/{instructionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instructions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.instructions.list": {
        "description": "Lists instructions for a project. Pagination is supported.",
        "flatPath": "v1beta1/projects/{projectsId}/instructions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instructions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/operations/{operationsId}:cancel",
        "httpMethod": "GET",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "datalabeling.projects.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1beta1",
    "title": "Data Labeling API"
  },
  "datamigration": {
    "description": "Manage Cloud Database Migration Service resources on Google Cloud Platform.",
    "methods": {
      "datamigration.projects.locations.connectionProfiles.create": {
        "description": "Creates a new connection profile in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connectionProfiles",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.connectionProfiles.delete": {
        "description": "Deletes a single Database Migration Service connection profile. A connection profile can only be deleted if it is not in use by any active migration jobs.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.connectionProfiles.get": {
        "description": "Gets details of a single connection profile.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.connectionProfiles.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.connectionProfiles.list": {
        "description": "Retrieve a list of all connection profiles in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connectionProfiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.connectionProfiles.patch": {
        "description": "Update the configuration of a single connection profile.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.connectionProfiles.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.connectionProfiles.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.create": {
        "description": "Creates a new migration job in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.delete": {
        "description": "Deletes a single migration job.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.generateSshScript": {
        "description": "Generate a SSH configuration script to configure the reverse SSH connectivity.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:generateSshScript",
        "httpMethod": "POST",
        "method": "generateSshScript",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.get": {
        "description": "Gets details of a single migration job.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.list": {
        "description": "Lists migration jobs in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.patch": {
        "description": "Updates the parameters of a single migration job.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.promote": {
        "description": "Promote a migration job, stopping replication to the destination and promoting the destination to be a standalone database.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:promote",
        "httpMethod": "POST",
        "method": "promote",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.restart": {
        "description": "Restart a stopped or failed migration job, resetting the destination instance to its original state and starting the migration process from scratch.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:restart",
        "httpMethod": "POST",
        "method": "restart",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.resume": {
        "description": "Resume a migration job that is currently stopped and is resumable (was stopped during CDC phase).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:resume",
        "httpMethod": "POST",
        "method": "resume",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.start": {
        "description": "Start an already created migration job.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:start",
        "httpMethod": "POST",
        "method": "start",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.stop": {
        "description": "Stops a running migration job.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.migrationJobs.verify": {
        "description": "Verify a migration job, making sure the destination can reach the source and that all configuration and prerequisites are met.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/migrationJobs/{migrationJobsId}:verify",
        "httpMethod": "POST",
        "method": "verify",
        "resourceType": "migrationJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datamigration.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Database Migration API"
  },
  "datapipelines": {
    "description": "Data Pipelines provides an interface for creating, updating, and managing recurring Data Analytics jobs.",
    "methods": {
      "datapipelines.projects.locations.listPipelines": {
        "description": "Lists pipelines. Returns a \"NOT_FOUND\" error if the list is empty. Returns a \"FORBIDDEN\" error if the caller doesn't have permission to access it.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "listPipelines",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "datapipelines.projects.locations.pipelines.create": {
        "description": "Creates a pipeline. For a batch pipeline, you can pass scheduler information. Data Pipelines uses the scheduler information to create an internal scheduler that runs jobs periodically. If the internal scheduler is not configured, you can use RunPipeline to run jobs.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/pipelines",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "pipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "datapipelines.projects.locations.pipelines.delete": {
        "description": "Deletes a pipeline. If a scheduler job is attached to the pipeline, it will be deleted.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/pipelines/{pipelinesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "pipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "datapipelines.projects.locations.pipelines.get": {
        "description": "Looks up a single pipeline. Returns a \"NOT_FOUND\" error if no such pipeline exists. Returns a \"FORBIDDEN\" error if the caller doesn't have permission to access it.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/pipelines/{pipelinesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "pipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "datapipelines.projects.locations.pipelines.patch": {
        "description": "Updates a pipeline. If successful, the updated [Pipeline] is returned. Returns `NOT_FOUND` if the pipeline doesn't exist. If UpdatePipeline does not return successfully, you can retry the UpdatePipeline request until you receive a successful response.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/pipelines/{pipelinesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "pipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "datapipelines.projects.locations.pipelines.run": {
        "description": "Creates a job for the specified pipeline directly. You can use this method when the internal scheduler is not configured and you want to trigger the job directly or through an external system. Returns a \"NOT_FOUND\" error if the pipeline doesn't exist. Returns a \"FOBIDDEN\" error if the user doesn't have permission to access the pipeline or run jobs for the pipeline.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/pipelines/{pipelinesId}:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "pipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "datapipelines.projects.locations.pipelines.stop": {
        "description": "Freezes pipeline execution permanently. If there's a corresponding scheduler entry, it's deleted, and the pipeline state is changed to \"ARCHIVED\". However, pipeline metadata is retained. Upon success, the pipeline state is updated to ARCHIVED.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/pipelines/{pipelinesId}:stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "pipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Data pipelines API"
  },
  "dataproc": {
    "description": "Manages Hadoop-based clusters and jobs on Google Cloud Platform.",
    "methods": {
      "dataproc.projects.locations.autoscalingPolicies.create": {
        "description": "Creates new autoscaling policy.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/autoscalingPolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.autoscalingPolicies.delete": {
        "description": "Deletes an autoscaling policy. It is an error to delete an autoscaling policy that is in use by one or more clusters.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/autoscalingPolicies/{autoscalingPoliciesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.autoscalingPolicies.get": {
        "description": "Retrieves autoscaling policy.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/autoscalingPolicies/{autoscalingPoliciesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.autoscalingPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/autoscalingPolicies/{autoscalingPoliciesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.autoscalingPolicies.list": {
        "description": "Lists autoscaling policies in the project.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/autoscalingPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.autoscalingPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/autoscalingPolicies/{autoscalingPoliciesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.autoscalingPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/autoscalingPolicies/{autoscalingPoliciesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.autoscalingPolicies.update": {
        "description": "Updates (replaces) autoscaling policy.Disabled check for update_mask, because all updates will be full replacements.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/autoscalingPolicies/{autoscalingPoliciesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.create": {
        "description": "Creates new workflow template.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.delete": {
        "description": "Deletes a workflow template. It does not cancel in-progress workflows.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates/{workflowTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.get": {
        "description": "Retrieves the latest workflow template.Can retrieve previously instantiated template by specifying optional version parameter.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates/{workflowTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates/{workflowTemplatesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.instantiate": {
        "description": "Instantiates a template and begins execution.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates/{workflowTemplatesId}:instantiate",
        "httpMethod": "POST",
        "method": "instantiate",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.instantiateInline": {
        "description": "Instantiates a template and begins execution.This method is equivalent to executing the sequence CreateWorkflowTemplate, InstantiateWorkflowTemplate, DeleteWorkflowTemplate.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates:instantiateInline",
        "httpMethod": "POST",
        "method": "instantiateInline",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.list": {
        "description": "Lists workflows that match the specified filter in the request.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates/{workflowTemplatesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates/{workflowTemplatesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.locations.workflowTemplates.update": {
        "description": "Updates (replaces) workflow template. The updated template must contain version that matches the current server version.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workflowTemplates/{workflowTemplatesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.autoscalingPolicies.create": {
        "description": "Creates new autoscaling policy.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/autoscalingPolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.autoscalingPolicies.delete": {
        "description": "Deletes an autoscaling policy. It is an error to delete an autoscaling policy that is in use by one or more clusters.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/autoscalingPolicies/{autoscalingPoliciesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.autoscalingPolicies.get": {
        "description": "Retrieves autoscaling policy.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/autoscalingPolicies/{autoscalingPoliciesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.autoscalingPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/autoscalingPolicies/{autoscalingPoliciesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.autoscalingPolicies.list": {
        "description": "Lists autoscaling policies in the project.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/autoscalingPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.autoscalingPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/autoscalingPolicies/{autoscalingPoliciesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.autoscalingPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/autoscalingPolicies/{autoscalingPoliciesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.autoscalingPolicies.update": {
        "description": "Updates (replaces) autoscaling policy.Disabled check for update_mask, because all updates will be full replacements.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/autoscalingPolicies/{autoscalingPoliciesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "autoscalingPolicies",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.create": {
        "description": "Creates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).",
        "flatPath": "v1/projects/{projectId}/regions/{region}/clusters",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.delete": {
        "description": "Deletes a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata).",
        "flatPath": "v1/projects/{projectId}/regions/{region}/clusters/{clusterName}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.diagnose": {
        "description": "Gets cluster diagnostic information. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). After the operation completes, Operation.response contains DiagnoseClusterResults (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#diagnoseclusterresults).",
        "flatPath": "v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:diagnose",
        "httpMethod": "POST",
        "method": "diagnose",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.get": {
        "description": "Gets the resource representation for a cluster in a project.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/clusters/{clusterName}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/clusters/{clustersId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.injectCredentials": {
        "description": "Inject encrypted credentials into all of the VMs in a cluster.The target cluster must be a personal auth cluster assigned to the user who is issuing the RPC.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/clusters/{clustersId}:injectCredentials",
        "httpMethod": "POST",
        "method": "injectCredentials",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.list": {
        "description": "Lists all regions/{region}/clusters in a project alphabetically.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/clusters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.patch": {
        "description": "Updates a cluster in a project. The returned Operation.metadata will be ClusterOperationMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#clusteroperationmetadata). The cluster must be in a RUNNING state or an error is returned.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/clusters/{clusterName}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.repair": {
        "description": "Repairs a cluster.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:repair",
        "httpMethod": "POST",
        "method": "repair",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/clusters/{clustersId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.start": {
        "description": "Starts a cluster in a project.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:start",
        "httpMethod": "POST",
        "method": "start",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.stop": {
        "description": "Stops a cluster in a project.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/clusters/{clusterName}:stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.clusters.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/clusters/{clustersId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.cancel": {
        "description": "Starts a job cancellation request. To access the job resource after cancellation, call regions/{region}/jobs.list (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/list) or regions/{region}/jobs.get (https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.jobs/get).",
        "flatPath": "v1/projects/{projectId}/regions/{region}/jobs/{jobId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.delete": {
        "description": "Deletes the job from the project. If the job is active, the delete fails, and the response returns FAILED_PRECONDITION.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/jobs/{jobId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.get": {
        "description": "Gets the resource representation for a job in a project.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/jobs/{jobId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/jobs/{jobsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.list": {
        "description": "Lists regions/{region}/jobs in a project.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.patch": {
        "description": "Updates a job in a project.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/jobs/{jobId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/jobs/{jobsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.submit": {
        "description": "Submits a job to a cluster.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/jobs:submit",
        "httpMethod": "POST",
        "method": "submit",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.submitAsOperation": {
        "description": "Submits job to a cluster.",
        "flatPath": "v1/projects/{projectId}/regions/{region}/jobs:submitAsOperation",
        "httpMethod": "POST",
        "method": "submitAsOperation",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.jobs.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/jobs/{jobsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.operations.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/operations/{operationsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "operations",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.operations.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/operations/{operationsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "operations",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.operations.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/operations/{operationsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "operations",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.create": {
        "description": "Creates new workflow template.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.delete": {
        "description": "Deletes a workflow template. It does not cancel in-progress workflows.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates/{workflowTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.get": {
        "description": "Retrieves the latest workflow template.Can retrieve previously instantiated template by specifying optional version parameter.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates/{workflowTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates/{workflowTemplatesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.instantiate": {
        "description": "Instantiates a template and begins execution.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates/{workflowTemplatesId}:instantiate",
        "httpMethod": "POST",
        "method": "instantiate",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.instantiateInline": {
        "description": "Instantiates a template and begins execution.This method is equivalent to executing the sequence CreateWorkflowTemplate, InstantiateWorkflowTemplate, DeleteWorkflowTemplate.The returned Operation can be used to track execution of workflow by polling operations.get. The Operation will complete when entire workflow is finished.The running workflow can be aborted via operations.cancel. This will cause any inflight jobs to be cancelled and workflow-owned clusters to be deleted.The Operation.metadata will be WorkflowMetadata (https://cloud.google.com/dataproc/docs/reference/rpc/google.cloud.dataproc.v1#workflowmetadata). Also see Using WorkflowMetadata (https://cloud.google.com/dataproc/docs/concepts/workflows/debugging#using_workflowmetadata).On successful completion, Operation.response will be Empty.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates:instantiateInline",
        "httpMethod": "POST",
        "method": "instantiateInline",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.list": {
        "description": "Lists workflows that match the specified filter in the request.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates/{workflowTemplatesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates/{workflowTemplatesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      },
      "dataproc.projects.regions.workflowTemplates.update": {
        "description": "Updates (replaces) workflow template. The updated template must contain version that matches the current server version.",
        "flatPath": "v1/projects/{projectsId}/regions/{regionsId}/workflowTemplates/{workflowTemplatesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "workflowTemplates",
        "resourceTypePath": "//projects/regions",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Dataproc API"
  },
  "datastore": {
    "description": "Accesses the schemaless NoSQL database to provide fully managed, robust, scalable storage for your application.",
    "methods": {
      "datastore.projects.allocateIds": {
        "description": "Allocates IDs for the given keys, which is useful for referencing an entity before it is inserted.",
        "flatPath": "v1beta3/projects/{projectId}:allocateIds",
        "httpMethod": "POST",
        "method": "allocateIds",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "datastore.projects.beginTransaction": {
        "description": "Begins a new transaction.",
        "flatPath": "v1beta3/projects/{projectId}:beginTransaction",
        "httpMethod": "POST",
        "method": "beginTransaction",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "datastore.projects.commit": {
        "description": "Commits a transaction, optionally creating, deleting or modifying some entities.",
        "flatPath": "v1beta3/projects/{projectId}:commit",
        "httpMethod": "POST",
        "method": "commit",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "datastore.projects.export": {
        "description": "Exports a copy of all or a subset of entities from Google Cloud Datastore to another storage system, such as Google Cloud Storage. Recent updates to entities may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.",
        "flatPath": "v1beta1/projects/{projectId}:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datastore.projects.import": {
        "description": "Imports entities into Google Cloud Datastore. Existing entities with the same key are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportEntities operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Datastore.",
        "flatPath": "v1beta1/projects/{projectId}:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "datastore.projects.indexes.create": {
        "description": "Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During index creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single property cannot be created.",
        "flatPath": "v1/projects/{projectId}/indexes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "indexes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "datastore.projects.indexes.delete": {
        "description": "Deletes an existing index. An index can only be deleted if it is in a `READY` or `ERROR` state. On successful execution of the request, the index will be in a `DELETING` state. And on completion of the returned google.longrunning.Operation, the index will be removed. During index deletion, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, followed by calling delete again.",
        "flatPath": "v1/projects/{projectId}/indexes/{indexId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "indexes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "datastore.projects.indexes.get": {
        "description": "Gets an index.",
        "flatPath": "v1/projects/{projectId}/indexes/{indexId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "indexes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "datastore.projects.indexes.list": {
        "description": "Lists the indexes that match the specified filters. Datastore uses an eventually consistent query to fetch the list of indexes and may occasionally return stale results.",
        "flatPath": "v1/projects/{projectId}/indexes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "indexes",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "datastore.projects.lookup": {
        "description": "Looks up entities by key.",
        "flatPath": "v1beta3/projects/{projectId}:lookup",
        "httpMethod": "POST",
        "method": "lookup",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "datastore.projects.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "datastore.projects.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "datastore.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "datastore.projects.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "datastore.projects.reserveIds": {
        "description": "Prevents the supplied keys' IDs from being auto-allocated by Cloud Datastore.",
        "flatPath": "v1beta3/projects/{projectId}:reserveIds",
        "httpMethod": "POST",
        "method": "reserveIds",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "datastore.projects.rollback": {
        "description": "Rolls back a transaction.",
        "flatPath": "v1beta3/projects/{projectId}:rollback",
        "httpMethod": "POST",
        "method": "rollback",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "datastore.projects.runQuery": {
        "description": "Queries for entities.",
        "flatPath": "v1beta3/projects/{projectId}:runQuery",
        "httpMethod": "POST",
        "method": "runQuery",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta3",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Datastore API"
  },
  "datastream": {
    "description": "",
    "methods": {
      "datastream.projects.locations.connectionProfiles.create": {
        "description": "Use this method to create a connection profile in a project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/connectionProfiles",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.connectionProfiles.delete": {
        "description": "Use this method to delete a connection profile..",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.connectionProfiles.discover": {
        "description": "Use this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects under a parent data object that's optionally supplied in the request.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/connectionProfiles:discover",
        "httpMethod": "POST",
        "method": "discover",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.connectionProfiles.get": {
        "description": "Use this method to get details about a connection profile.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.connectionProfiles.list": {
        "description": "Use this method to list connection profiles created in a project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/connectionProfiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.connectionProfiles.patch": {
        "description": "Use this method to update the parameters of a connection profile.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "connectionProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.fetchStaticIps": {
        "description": "The FetchStaticIps API call exposes the static ips used by Datastream. Typically, a request returns children data objects under a parent data object that's optionally supplied in the request.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}:fetchStaticIps",
        "httpMethod": "GET",
        "method": "fetchStaticIps",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "datastream.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "datastream.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "datastream.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "datastream.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "datastream.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "datastream.projects.locations.privateConnections.create": {
        "description": "Use this method to create a private connectivity configuration.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/privateConnections",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "privateConnections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.privateConnections.delete": {
        "description": "Use this method to delete a private connectivity configuration.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "privateConnections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.privateConnections.get": {
        "description": "Use this method to get details about a private connectivity configuration.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "privateConnections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.privateConnections.list": {
        "description": "Use this method to list private connectivity configurations in a project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/privateConnections",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "privateConnections",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.privateConnections.routes.create": {
        "description": "Use this method to create a route for a private connectivity in a project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "routes",
        "resourceTypePath": "//projects/locations/privateConnections",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.privateConnections.routes.delete": {
        "description": "Use this method to delete a route.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes/{routesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "routes",
        "resourceTypePath": "//projects/locations/privateConnections",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.privateConnections.routes.get": {
        "description": "Use this method to get details about a route.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes/{routesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "routes",
        "resourceTypePath": "//projects/locations/privateConnections",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.privateConnections.routes.list": {
        "description": "Use this method to list routes created for a private connectivity in a project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "routes",
        "resourceTypePath": "//projects/locations/privateConnections",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.streams.create": {
        "description": "Use this method to create a stream.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/streams",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "streams",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.streams.delete": {
        "description": "Use this method to delete a stream.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "streams",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.streams.fetchErrors": {
        "description": "Use this method to fetch any errors associated with a stream.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}:fetchErrors",
        "httpMethod": "POST",
        "method": "fetchErrors",
        "resourceType": "streams",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.streams.get": {
        "description": "Use this method to get details about a stream.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "streams",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.streams.list": {
        "description": "Use this method to list streams in a project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/streams",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "streams",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "datastream.projects.locations.streams.patch": {
        "description": "Use this method to update the configuration of a stream.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "streams",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Datastream API"
  },
  "deploymentmanager": {
    "description": "The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.",
    "methods": {
      "deploymentmanager.compositeTypes.delete": {
        "description": "Deletes a composite type.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/compositeTypes/{compositeType}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "compositeTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.compositeTypes.get": {
        "description": "Gets information about a specific composite type.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/compositeTypes/{compositeType}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "compositeTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.compositeTypes.insert": {
        "description": "Creates a composite type.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/compositeTypes",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "compositeTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.compositeTypes.list": {
        "description": "Lists all composite types for Deployment Manager.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/compositeTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "compositeTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.compositeTypes.patch": {
        "description": "Patches a composite type.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/compositeTypes/{compositeType}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "compositeTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.compositeTypes.update": {
        "description": "Updates a composite type.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/compositeTypes/{compositeType}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "compositeTypes",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.deployments.cancelPreview": {
        "description": "Cancels and removes the preview currently associated with the deployment.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}/cancelPreview",
        "httpMethod": "POST",
        "method": "cancelPreview",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.delete": {
        "description": "Deletes a deployment and all of the resources in the deployment.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.get": {
        "description": "Gets information about a specific deployment.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.getIamPolicy": {
        "description": "Gets the access control policy for a resource. May be empty if no such policy or resource exists.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{resource}/getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.insert": {
        "description": "Creates a deployment and all of the resources described by the deployment manifest.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.list": {
        "description": "Lists all deployments for a given project.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.patch": {
        "description": "Patches a deployment and all of the resources described by the deployment manifest.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{resource}/setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.stop": {
        "description": "Stops an ongoing operation. This does not roll back any work that has already been completed, but prevents any new work from being started.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}/stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{resource}/testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.deployments.update": {
        "description": "Updates a deployment and all of the resources described by the deployment manifest.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.manifests.get": {
        "description": "Gets information about a specific manifest.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}/manifests/{manifest}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "manifests",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.manifests.list": {
        "description": "Lists all manifests for a given deployment.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}/manifests",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "manifests",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.operations.get": {
        "description": "Gets information about a specific operation.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/operations/{operation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.operations.list": {
        "description": "Lists all operations for a project.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.resources.get": {
        "description": "Gets information about a single resource.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}/resources/{resource}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "resources",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.resources.list": {
        "description": "Lists all resources in a given deployment.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/deployments/{deployment}/resources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "resources",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      },
      "deploymentmanager.typeProviders.delete": {
        "description": "Deletes a type provider.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "typeProviders",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.typeProviders.get": {
        "description": "Gets information about a specific type provider.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "typeProviders",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.typeProviders.getType": {
        "description": "Gets a type info for a type provided by a TypeProvider.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}/types/{type}",
        "httpMethod": "GET",
        "method": "getType",
        "resourceType": "typeProviders",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.typeProviders.insert": {
        "description": "Creates a type provider.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/typeProviders",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "typeProviders",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.typeProviders.list": {
        "description": "Lists all resource type providers for Deployment Manager.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/typeProviders",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "typeProviders",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.typeProviders.listTypes": {
        "description": "Lists all the type info for a TypeProvider.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}/types",
        "httpMethod": "GET",
        "method": "listTypes",
        "resourceType": "typeProviders",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.typeProviders.patch": {
        "description": "Patches a type provider.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "typeProviders",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.typeProviders.update": {
        "description": "Updates a type provider.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/typeProviders/{typeProvider}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "typeProviders",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta"
        ]
      },
      "deploymentmanager.types.get": {
        "description": "Gets information about a specific type.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/types/{type}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "types",
        "resourceTypePath": "/",
        "versions": [
          "alpha"
        ]
      },
      "deploymentmanager.types.list": {
        "description": "Lists all resource types for Deployment Manager.",
        "flatPath": "deploymentmanager/alpha/projects/{project}/global/types",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "types",
        "resourceTypePath": "/",
        "versions": [
          "alpha",
          "v2beta",
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Cloud Deployment Manager V2 API"
  },
  "dfareporting": {
    "description": "Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.",
    "methods": {
      "dfareporting.accountActiveAdSummaries.get": {
        "description": "Gets the account's active ad summary by account ID.",
        "flatPath": "userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accountActiveAdSummaries",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accountPermissionGroups.get": {
        "description": "Gets one account permission group by ID.",
        "flatPath": "userprofiles/{profileId}/accountPermissionGroups/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accountPermissionGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accountPermissionGroups.list": {
        "description": "Retrieves the list of account permission groups.",
        "flatPath": "userprofiles/{profileId}/accountPermissionGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accountPermissionGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accountPermissions.get": {
        "description": "Gets one account permission by ID.",
        "flatPath": "userprofiles/{profileId}/accountPermissions/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accountPermissions",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accountPermissions.list": {
        "description": "Retrieves the list of account permissions.",
        "flatPath": "userprofiles/{profileId}/accountPermissions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accountPermissions",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accountUserProfiles.get": {
        "description": "Gets one account user profile by ID.",
        "flatPath": "userprofiles/{profileId}/accountUserProfiles/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accountUserProfiles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accountUserProfiles.insert": {
        "description": "Inserts a new account user profile.",
        "flatPath": "userprofiles/{profileId}/accountUserProfiles",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "accountUserProfiles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accountUserProfiles.list": {
        "description": "Retrieves a list of account user profiles, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/accountUserProfiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accountUserProfiles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accountUserProfiles.patch": {
        "description": "Updates an existing account user profile. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/accountUserProfiles",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "accountUserProfiles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accountUserProfiles.update": {
        "description": "Updates an existing account user profile.",
        "flatPath": "userprofiles/{profileId}/accountUserProfiles",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "accountUserProfiles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accounts.get": {
        "description": "Gets one account by ID.",
        "flatPath": "userprofiles/{profileId}/accounts/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accounts.list": {
        "description": "Retrieves the list of accounts, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accounts.patch": {
        "description": "Updates an existing account. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/accounts",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.accounts.update": {
        "description": "Updates an existing account.",
        "flatPath": "userprofiles/{profileId}/accounts",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.ads.get": {
        "description": "Gets one ad by ID.",
        "flatPath": "userprofiles/{profileId}/ads/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "ads",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.ads.insert": {
        "description": "Inserts a new ad.",
        "flatPath": "userprofiles/{profileId}/ads",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "ads",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.ads.list": {
        "description": "Retrieves a list of ads, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/ads",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "ads",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.ads.patch": {
        "description": "Updates an existing ad. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/ads",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "ads",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.ads.update": {
        "description": "Updates an existing ad.",
        "flatPath": "userprofiles/{profileId}/ads",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "ads",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserGroups.delete": {
        "description": "Deletes an existing advertiser group.",
        "flatPath": "userprofiles/{profileId}/advertiserGroups/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "advertiserGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserGroups.get": {
        "description": "Gets one advertiser group by ID.",
        "flatPath": "userprofiles/{profileId}/advertiserGroups/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "advertiserGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserGroups.insert": {
        "description": "Inserts a new advertiser group.",
        "flatPath": "userprofiles/{profileId}/advertiserGroups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "advertiserGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserGroups.list": {
        "description": "Retrieves a list of advertiser groups, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/advertiserGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "advertiserGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserGroups.patch": {
        "description": "Updates an existing advertiser group. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/advertiserGroups",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "advertiserGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserGroups.update": {
        "description": "Updates an existing advertiser group.",
        "flatPath": "userprofiles/{profileId}/advertiserGroups",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "advertiserGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserLandingPages.get": {
        "description": "Gets one landing page by ID.",
        "flatPath": "userprofiles/{profileId}/advertiserLandingPages/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "advertiserLandingPages",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserLandingPages.insert": {
        "description": "Inserts a new landing page.",
        "flatPath": "userprofiles/{profileId}/advertiserLandingPages",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "advertiserLandingPages",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserLandingPages.list": {
        "description": "Retrieves a list of landing pages.",
        "flatPath": "userprofiles/{profileId}/advertiserLandingPages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "advertiserLandingPages",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserLandingPages.patch": {
        "description": "Updates an existing advertiser landing page. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/advertiserLandingPages",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "advertiserLandingPages",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertiserLandingPages.update": {
        "description": "Updates an existing landing page.",
        "flatPath": "userprofiles/{profileId}/advertiserLandingPages",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "advertiserLandingPages",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertisers.get": {
        "description": "Gets one advertiser by ID.",
        "flatPath": "userprofiles/{profileId}/advertisers/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertisers.insert": {
        "description": "Inserts a new advertiser.",
        "flatPath": "userprofiles/{profileId}/advertisers",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertisers.list": {
        "description": "Retrieves a list of advertisers, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/advertisers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertisers.patch": {
        "description": "Updates an existing advertiser. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/advertisers",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.advertisers.update": {
        "description": "Updates an existing advertiser.",
        "flatPath": "userprofiles/{profileId}/advertisers",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.browsers.list": {
        "description": "Retrieves a list of browsers.",
        "flatPath": "userprofiles/{profileId}/browsers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "browsers",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.campaignCreativeAssociations.insert": {
        "description": "Associates a creative with the specified campaign. This method creates a default ad with dimensions matching the creative in the campaign if such a default ad does not exist already.",
        "flatPath": "userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "campaignCreativeAssociations",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.campaignCreativeAssociations.list": {
        "description": "Retrieves the list of creative IDs associated with the specified campaign. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "campaignCreativeAssociations",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.campaigns.get": {
        "description": "Gets one campaign by ID.",
        "flatPath": "userprofiles/{profileId}/campaigns/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "campaigns",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.campaigns.insert": {
        "description": "Inserts a new campaign.",
        "flatPath": "userprofiles/{profileId}/campaigns",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "campaigns",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.campaigns.list": {
        "description": "Retrieves a list of campaigns, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/campaigns",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "campaigns",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.campaigns.patch": {
        "description": "Updates an existing campaign. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/campaigns",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "campaigns",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.campaigns.update": {
        "description": "Updates an existing campaign.",
        "flatPath": "userprofiles/{profileId}/campaigns",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "campaigns",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.changeLogs.get": {
        "description": "Gets one change log by ID.",
        "flatPath": "userprofiles/{profileId}/changeLogs/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "changeLogs",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.changeLogs.list": {
        "description": "Retrieves a list of change logs. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/changeLogs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "changeLogs",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.cities.list": {
        "description": "Retrieves a list of cities, possibly filtered.",
        "flatPath": "userprofiles/{profileId}/cities",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "cities",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.connectionTypes.get": {
        "description": "Gets one connection type by ID.",
        "flatPath": "userprofiles/{profileId}/connectionTypes/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "connectionTypes",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.connectionTypes.list": {
        "description": "Retrieves a list of connection types.",
        "flatPath": "userprofiles/{profileId}/connectionTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "connectionTypes",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.contentCategories.delete": {
        "description": "Deletes an existing content category.",
        "flatPath": "userprofiles/{profileId}/contentCategories/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "contentCategories",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.contentCategories.get": {
        "description": "Gets one content category by ID.",
        "flatPath": "userprofiles/{profileId}/contentCategories/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "contentCategories",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.contentCategories.insert": {
        "description": "Inserts a new content category.",
        "flatPath": "userprofiles/{profileId}/contentCategories",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "contentCategories",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.contentCategories.list": {
        "description": "Retrieves a list of content categories, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/contentCategories",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "contentCategories",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.contentCategories.patch": {
        "description": "Updates an existing content category. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/contentCategories",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "contentCategories",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.contentCategories.update": {
        "description": "Updates an existing content category.",
        "flatPath": "userprofiles/{profileId}/contentCategories",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "contentCategories",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.conversions.batchinsert": {
        "description": "Inserts conversions.",
        "flatPath": "userprofiles/{profileId}/conversions/batchinsert",
        "httpMethod": "POST",
        "method": "batchinsert",
        "resourceType": "conversions",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.conversions.batchupdate": {
        "description": "Updates existing conversions.",
        "flatPath": "userprofiles/{profileId}/conversions/batchupdate",
        "httpMethod": "POST",
        "method": "batchupdate",
        "resourceType": "conversions",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.countries.get": {
        "description": "Gets one country by ID.",
        "flatPath": "userprofiles/{profileId}/countries/{dartId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "countries",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.countries.list": {
        "description": "Retrieves a list of countries.",
        "flatPath": "userprofiles/{profileId}/countries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "countries",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeAssets.insert": {
        "description": "Inserts a new creative asset.",
        "flatPath": "userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "creativeAssets",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFieldValues.delete": {
        "description": "Deletes an existing creative field value.",
        "flatPath": "userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "creativeFieldValues",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFieldValues.get": {
        "description": "Gets one creative field value by ID.",
        "flatPath": "userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "creativeFieldValues",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFieldValues.insert": {
        "description": "Inserts a new creative field value.",
        "flatPath": "userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "creativeFieldValues",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFieldValues.list": {
        "description": "Retrieves a list of creative field values, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creativeFieldValues",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFieldValues.patch": {
        "description": "Updates an existing creative field value. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "creativeFieldValues",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFieldValues.update": {
        "description": "Updates an existing creative field value.",
        "flatPath": "userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "creativeFieldValues",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFields.delete": {
        "description": "Deletes an existing creative field.",
        "flatPath": "userprofiles/{profileId}/creativeFields/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "creativeFields",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFields.get": {
        "description": "Gets one creative field by ID.",
        "flatPath": "userprofiles/{profileId}/creativeFields/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "creativeFields",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFields.insert": {
        "description": "Inserts a new creative field.",
        "flatPath": "userprofiles/{profileId}/creativeFields",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "creativeFields",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFields.list": {
        "description": "Retrieves a list of creative fields, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/creativeFields",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creativeFields",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFields.patch": {
        "description": "Updates an existing creative field. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/creativeFields",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "creativeFields",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeFields.update": {
        "description": "Updates an existing creative field.",
        "flatPath": "userprofiles/{profileId}/creativeFields",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "creativeFields",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeGroups.get": {
        "description": "Gets one creative group by ID.",
        "flatPath": "userprofiles/{profileId}/creativeGroups/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "creativeGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeGroups.insert": {
        "description": "Inserts a new creative group.",
        "flatPath": "userprofiles/{profileId}/creativeGroups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "creativeGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeGroups.list": {
        "description": "Retrieves a list of creative groups, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/creativeGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creativeGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeGroups.patch": {
        "description": "Updates an existing creative group. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/creativeGroups",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "creativeGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creativeGroups.update": {
        "description": "Updates an existing creative group.",
        "flatPath": "userprofiles/{profileId}/creativeGroups",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "creativeGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creatives.get": {
        "description": "Gets one creative by ID.",
        "flatPath": "userprofiles/{profileId}/creatives/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "creatives",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creatives.insert": {
        "description": "Inserts a new creative.",
        "flatPath": "userprofiles/{profileId}/creatives",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "creatives",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creatives.list": {
        "description": "Retrieves a list of creatives, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/creatives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creatives",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creatives.patch": {
        "description": "Updates an existing creative. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/creatives",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "creatives",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.creatives.update": {
        "description": "Updates an existing creative.",
        "flatPath": "userprofiles/{profileId}/creatives",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "creatives",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.customEvents.batchinsert": {
        "description": "Inserts custom events.",
        "flatPath": "userprofiles/{profileId}/customEvents/batchinsert",
        "httpMethod": "POST",
        "method": "batchinsert",
        "resourceType": "customEvents",
        "resourceTypePath": "/",
        "versions": [
          "v3.4"
        ]
      },
      "dfareporting.dimensionValues.query": {
        "description": "Retrieves list of report dimension values for a list of filters.",
        "flatPath": "userprofiles/{profileId}/dimensionvalues/query",
        "httpMethod": "POST",
        "method": "query",
        "resourceType": "dimensionValues",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.directorySites.get": {
        "description": "Gets one directory site by ID.",
        "flatPath": "userprofiles/{profileId}/directorySites/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "directorySites",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.directorySites.insert": {
        "description": "Inserts a new directory site.",
        "flatPath": "userprofiles/{profileId}/directorySites",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "directorySites",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.directorySites.list": {
        "description": "Retrieves a list of directory sites, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/directorySites",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "directorySites",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.dynamicTargetingKeys.delete": {
        "description": "Deletes an existing dynamic targeting key.",
        "flatPath": "userprofiles/{profileId}/dynamicTargetingKeys/{objectId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "dynamicTargetingKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.dynamicTargetingKeys.insert": {
        "description": "Inserts a new dynamic targeting key. Keys must be created at the advertiser level before being assigned to the advertiser's ads, creatives, or placements. There is a maximum of 1000 keys per advertiser, out of which a maximum of 20 keys can be assigned per ad, creative, or placement.",
        "flatPath": "userprofiles/{profileId}/dynamicTargetingKeys",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "dynamicTargetingKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.dynamicTargetingKeys.list": {
        "description": "Retrieves a list of dynamic targeting keys.",
        "flatPath": "userprofiles/{profileId}/dynamicTargetingKeys",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dynamicTargetingKeys",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.eventTags.delete": {
        "description": "Deletes an existing event tag.",
        "flatPath": "userprofiles/{profileId}/eventTags/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "eventTags",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.eventTags.get": {
        "description": "Gets one event tag by ID.",
        "flatPath": "userprofiles/{profileId}/eventTags/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "eventTags",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.eventTags.insert": {
        "description": "Inserts a new event tag.",
        "flatPath": "userprofiles/{profileId}/eventTags",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "eventTags",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.eventTags.list": {
        "description": "Retrieves a list of event tags, possibly filtered.",
        "flatPath": "userprofiles/{profileId}/eventTags",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "eventTags",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.eventTags.patch": {
        "description": "Updates an existing event tag. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/eventTags",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "eventTags",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.eventTags.update": {
        "description": "Updates an existing event tag.",
        "flatPath": "userprofiles/{profileId}/eventTags",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "eventTags",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.files.get": {
        "description": "Retrieves a report file by its report ID and file ID. This method supports media download.",
        "flatPath": "reports/{reportId}/files/{fileId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.files.list": {
        "description": "Lists files for a user profile.",
        "flatPath": "userprofiles/{profileId}/files",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivities.delete": {
        "description": "Deletes an existing floodlight activity.",
        "flatPath": "userprofiles/{profileId}/floodlightActivities/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "floodlightActivities",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivities.generatetag": {
        "description": "Generates a tag for a floodlight activity.",
        "flatPath": "userprofiles/{profileId}/floodlightActivities/generatetag",
        "httpMethod": "POST",
        "method": "generatetag",
        "resourceType": "floodlightActivities",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivities.get": {
        "description": "Gets one floodlight activity by ID.",
        "flatPath": "userprofiles/{profileId}/floodlightActivities/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "floodlightActivities",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivities.insert": {
        "description": "Inserts a new floodlight activity.",
        "flatPath": "userprofiles/{profileId}/floodlightActivities",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "floodlightActivities",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivities.list": {
        "description": "Retrieves a list of floodlight activities, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/floodlightActivities",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "floodlightActivities",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivities.patch": {
        "description": "Updates an existing floodlight activity. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/floodlightActivities",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "floodlightActivities",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivities.update": {
        "description": "Updates an existing floodlight activity.",
        "flatPath": "userprofiles/{profileId}/floodlightActivities",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "floodlightActivities",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivityGroups.get": {
        "description": "Gets one floodlight activity group by ID.",
        "flatPath": "userprofiles/{profileId}/floodlightActivityGroups/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "floodlightActivityGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivityGroups.insert": {
        "description": "Inserts a new floodlight activity group.",
        "flatPath": "userprofiles/{profileId}/floodlightActivityGroups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "floodlightActivityGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivityGroups.list": {
        "description": "Retrieves a list of floodlight activity groups, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/floodlightActivityGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "floodlightActivityGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivityGroups.patch": {
        "description": "Updates an existing floodlight activity group. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/floodlightActivityGroups",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "floodlightActivityGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightActivityGroups.update": {
        "description": "Updates an existing floodlight activity group.",
        "flatPath": "userprofiles/{profileId}/floodlightActivityGroups",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "floodlightActivityGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightConfigurations.get": {
        "description": "Gets one floodlight configuration by ID.",
        "flatPath": "userprofiles/{profileId}/floodlightConfigurations/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "floodlightConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightConfigurations.list": {
        "description": "Retrieves a list of floodlight configurations, possibly filtered.",
        "flatPath": "userprofiles/{profileId}/floodlightConfigurations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "floodlightConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightConfigurations.patch": {
        "description": "Updates an existing floodlight configuration. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/floodlightConfigurations",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "floodlightConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.floodlightConfigurations.update": {
        "description": "Updates an existing floodlight configuration.",
        "flatPath": "userprofiles/{profileId}/floodlightConfigurations",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "floodlightConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.inventoryItems.get": {
        "description": "Gets one inventory item by ID.",
        "flatPath": "userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "inventoryItems",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.inventoryItems.list": {
        "description": "Retrieves a list of inventory items, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/projects/{projectId}/inventoryItems",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "inventoryItems",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.languages.list": {
        "description": "Retrieves a list of languages.",
        "flatPath": "userprofiles/{profileId}/languages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "languages",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.metros.list": {
        "description": "Retrieves a list of metros.",
        "flatPath": "userprofiles/{profileId}/metros",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "metros",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.mobileApps.get": {
        "description": "Gets one mobile app by ID.",
        "flatPath": "userprofiles/{profileId}/mobileApps/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "mobileApps",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.mobileApps.list": {
        "description": "Retrieves list of available mobile apps.",
        "flatPath": "userprofiles/{profileId}/mobileApps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "mobileApps",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.mobileCarriers.get": {
        "description": "Gets one mobile carrier by ID.",
        "flatPath": "userprofiles/{profileId}/mobileCarriers/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "mobileCarriers",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.mobileCarriers.list": {
        "description": "Retrieves a list of mobile carriers.",
        "flatPath": "userprofiles/{profileId}/mobileCarriers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "mobileCarriers",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.operatingSystemVersions.get": {
        "description": "Gets one operating system version by ID.",
        "flatPath": "userprofiles/{profileId}/operatingSystemVersions/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operatingSystemVersions",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.operatingSystemVersions.list": {
        "description": "Retrieves a list of operating system versions.",
        "flatPath": "userprofiles/{profileId}/operatingSystemVersions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operatingSystemVersions",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.operatingSystems.get": {
        "description": "Gets one operating system by DART ID.",
        "flatPath": "userprofiles/{profileId}/operatingSystems/{dartId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operatingSystems",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.operatingSystems.list": {
        "description": "Retrieves a list of operating systems.",
        "flatPath": "userprofiles/{profileId}/operatingSystems",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operatingSystems",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.orderDocuments.get": {
        "description": "Gets one order document by ID.",
        "flatPath": "userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "orderDocuments",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.orderDocuments.list": {
        "description": "Retrieves a list of order documents, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/projects/{projectId}/orderDocuments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "orderDocuments",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.orders.get": {
        "description": "Gets one order by ID.",
        "flatPath": "userprofiles/{profileId}/projects/{projectId}/orders/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.orders.list": {
        "description": "Retrieves a list of orders, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/projects/{projectId}/orders",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "orders",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementGroups.get": {
        "description": "Gets one placement group by ID.",
        "flatPath": "userprofiles/{profileId}/placementGroups/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "placementGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementGroups.insert": {
        "description": "Inserts a new placement group.",
        "flatPath": "userprofiles/{profileId}/placementGroups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "placementGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementGroups.list": {
        "description": "Retrieves a list of placement groups, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/placementGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "placementGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementGroups.patch": {
        "description": "Updates an existing placement group. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/placementGroups",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "placementGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementGroups.update": {
        "description": "Updates an existing placement group.",
        "flatPath": "userprofiles/{profileId}/placementGroups",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "placementGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementStrategies.delete": {
        "description": "Deletes an existing placement strategy.",
        "flatPath": "userprofiles/{profileId}/placementStrategies/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "placementStrategies",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementStrategies.get": {
        "description": "Gets one placement strategy by ID.",
        "flatPath": "userprofiles/{profileId}/placementStrategies/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "placementStrategies",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementStrategies.insert": {
        "description": "Inserts a new placement strategy.",
        "flatPath": "userprofiles/{profileId}/placementStrategies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "placementStrategies",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementStrategies.list": {
        "description": "Retrieves a list of placement strategies, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/placementStrategies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "placementStrategies",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementStrategies.patch": {
        "description": "Updates an existing placement strategy. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/placementStrategies",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "placementStrategies",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placementStrategies.update": {
        "description": "Updates an existing placement strategy.",
        "flatPath": "userprofiles/{profileId}/placementStrategies",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "placementStrategies",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placements.generatetags": {
        "description": "Generates tags for a placement.",
        "flatPath": "userprofiles/{profileId}/placements/generatetags",
        "httpMethod": "POST",
        "method": "generatetags",
        "resourceType": "placements",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placements.get": {
        "description": "Gets one placement by ID.",
        "flatPath": "userprofiles/{profileId}/placements/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "placements",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placements.insert": {
        "description": "Inserts a new placement.",
        "flatPath": "userprofiles/{profileId}/placements",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "placements",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placements.list": {
        "description": "Retrieves a list of placements, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/placements",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "placements",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placements.patch": {
        "description": "Updates an existing placement. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/placements",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "placements",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.placements.update": {
        "description": "Updates an existing placement.",
        "flatPath": "userprofiles/{profileId}/placements",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "placements",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.platformTypes.get": {
        "description": "Gets one platform type by ID.",
        "flatPath": "userprofiles/{profileId}/platformTypes/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "platformTypes",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.platformTypes.list": {
        "description": "Retrieves a list of platform types.",
        "flatPath": "userprofiles/{profileId}/platformTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "platformTypes",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.postalCodes.get": {
        "description": "Gets one postal code by ID.",
        "flatPath": "userprofiles/{profileId}/postalCodes/{code}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "postalCodes",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.postalCodes.list": {
        "description": "Retrieves a list of postal codes.",
        "flatPath": "userprofiles/{profileId}/postalCodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "postalCodes",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.projects.get": {
        "description": "Gets one project by ID.",
        "flatPath": "userprofiles/{profileId}/projects/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.projects.list": {
        "description": "Retrieves a list of projects, possibly filtered. This method supports paging .",
        "flatPath": "userprofiles/{profileId}/projects",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.regions.list": {
        "description": "Retrieves a list of regions.",
        "flatPath": "userprofiles/{profileId}/regions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "regions",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.remarketingListShares.get": {
        "description": "Gets one remarketing list share by remarketing list ID.",
        "flatPath": "userprofiles/{profileId}/remarketingListShares/{remarketingListId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "remarketingListShares",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.remarketingListShares.patch": {
        "description": "Updates an existing remarketing list share. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/remarketingListShares",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "remarketingListShares",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.remarketingListShares.update": {
        "description": "Updates an existing remarketing list share.",
        "flatPath": "userprofiles/{profileId}/remarketingListShares",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "remarketingListShares",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.remarketingLists.get": {
        "description": "Gets one remarketing list by ID.",
        "flatPath": "userprofiles/{profileId}/remarketingLists/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "remarketingLists",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.remarketingLists.insert": {
        "description": "Inserts a new remarketing list.",
        "flatPath": "userprofiles/{profileId}/remarketingLists",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "remarketingLists",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.remarketingLists.list": {
        "description": "Retrieves a list of remarketing lists, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/remarketingLists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "remarketingLists",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.remarketingLists.patch": {
        "description": "Updates an existing remarketing list. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/remarketingLists",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "remarketingLists",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.remarketingLists.update": {
        "description": "Updates an existing remarketing list.",
        "flatPath": "userprofiles/{profileId}/remarketingLists",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "remarketingLists",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.compatibleFields.query": {
        "description": "Returns the fields that are compatible to be selected in the respective sections of a report criteria, given the fields already selected in the input report and user permissions.",
        "flatPath": "userprofiles/{profileId}/reports/compatiblefields/query",
        "httpMethod": "POST",
        "method": "query",
        "resourceType": "compatibleFields",
        "resourceTypePath": "//reports",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.delete": {
        "description": "Deletes a report by its ID.",
        "flatPath": "userprofiles/{profileId}/reports/{reportId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.files.get": {
        "description": "Retrieves a report file by its report ID and file ID. This method supports media download.",
        "flatPath": "userprofiles/{profileId}/reports/{reportId}/files/{fileId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "files",
        "resourceTypePath": "//reports",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.files.list": {
        "description": "Lists files for a report.",
        "flatPath": "userprofiles/{profileId}/reports/{reportId}/files",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "files",
        "resourceTypePath": "//reports",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.get": {
        "description": "Retrieves a report by its ID.",
        "flatPath": "userprofiles/{profileId}/reports/{reportId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.insert": {
        "description": "Creates a report.",
        "flatPath": "userprofiles/{profileId}/reports",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.list": {
        "description": "Retrieves list of reports.",
        "flatPath": "userprofiles/{profileId}/reports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.patch": {
        "description": "Updates an existing report. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/reports/{reportId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.run": {
        "description": "Runs a report.",
        "flatPath": "userprofiles/{profileId}/reports/{reportId}/run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.reports.update": {
        "description": "Updates a report.",
        "flatPath": "userprofiles/{profileId}/reports/{reportId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.sites.get": {
        "description": "Gets one site by ID.",
        "flatPath": "userprofiles/{profileId}/sites/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.sites.insert": {
        "description": "Inserts a new site.",
        "flatPath": "userprofiles/{profileId}/sites",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.sites.list": {
        "description": "Retrieves a list of sites, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/sites",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.sites.patch": {
        "description": "Updates an existing site. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/sites",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.sites.update": {
        "description": "Updates an existing site.",
        "flatPath": "userprofiles/{profileId}/sites",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.sizes.get": {
        "description": "Gets one size by ID.",
        "flatPath": "userprofiles/{profileId}/sizes/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sizes",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.sizes.insert": {
        "description": "Inserts a new size.",
        "flatPath": "userprofiles/{profileId}/sizes",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "sizes",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.sizes.list": {
        "description": "Retrieves a list of sizes, possibly filtered. Retrieved sizes are globally unique and may include values not currently in use by your account. Due to this, the list of sizes returned by this method may differ from the list seen in the Trafficking UI.",
        "flatPath": "userprofiles/{profileId}/sizes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sizes",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.subaccounts.get": {
        "description": "Gets one subaccount by ID.",
        "flatPath": "userprofiles/{profileId}/subaccounts/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "subaccounts",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.subaccounts.insert": {
        "description": "Inserts a new subaccount.",
        "flatPath": "userprofiles/{profileId}/subaccounts",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "subaccounts",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.subaccounts.list": {
        "description": "Gets a list of subaccounts, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/subaccounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subaccounts",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.subaccounts.patch": {
        "description": "Updates an existing subaccount. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/subaccounts",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "subaccounts",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.subaccounts.update": {
        "description": "Updates an existing subaccount.",
        "flatPath": "userprofiles/{profileId}/subaccounts",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "subaccounts",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.targetableRemarketingLists.get": {
        "description": "Gets one remarketing list by ID.",
        "flatPath": "userprofiles/{profileId}/targetableRemarketingLists/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetableRemarketingLists",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.targetableRemarketingLists.list": {
        "description": "Retrieves a list of targetable remarketing lists, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/targetableRemarketingLists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetableRemarketingLists",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.targetingTemplates.get": {
        "description": "Gets one targeting template by ID.",
        "flatPath": "userprofiles/{profileId}/targetingTemplates/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetingTemplates",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.targetingTemplates.insert": {
        "description": "Inserts a new targeting template.",
        "flatPath": "userprofiles/{profileId}/targetingTemplates",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "targetingTemplates",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.targetingTemplates.list": {
        "description": "Retrieves a list of targeting templates, optionally filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/targetingTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetingTemplates",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.targetingTemplates.patch": {
        "description": "Updates an existing targeting template. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/targetingTemplates",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "targetingTemplates",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.targetingTemplates.update": {
        "description": "Updates an existing targeting template.",
        "flatPath": "userprofiles/{profileId}/targetingTemplates",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "targetingTemplates",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userProfiles.get": {
        "description": "Gets one user profile by ID.",
        "flatPath": "userprofiles/{profileId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userProfiles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userProfiles.list": {
        "description": "Retrieves list of user profiles for a user.",
        "flatPath": "userprofiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userProfiles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRolePermissionGroups.get": {
        "description": "Gets one user role permission group by ID.",
        "flatPath": "userprofiles/{profileId}/userRolePermissionGroups/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userRolePermissionGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRolePermissionGroups.list": {
        "description": "Gets a list of all supported user role permission groups.",
        "flatPath": "userprofiles/{profileId}/userRolePermissionGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userRolePermissionGroups",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRolePermissions.get": {
        "description": "Gets one user role permission by ID.",
        "flatPath": "userprofiles/{profileId}/userRolePermissions/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userRolePermissions",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRolePermissions.list": {
        "description": "Gets a list of user role permissions, possibly filtered.",
        "flatPath": "userprofiles/{profileId}/userRolePermissions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userRolePermissions",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRoles.delete": {
        "description": "Deletes an existing user role.",
        "flatPath": "userprofiles/{profileId}/userRoles/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "userRoles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRoles.get": {
        "description": "Gets one user role by ID.",
        "flatPath": "userprofiles/{profileId}/userRoles/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userRoles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRoles.insert": {
        "description": "Inserts a new user role.",
        "flatPath": "userprofiles/{profileId}/userRoles",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "userRoles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRoles.list": {
        "description": "Retrieves a list of user roles, possibly filtered. This method supports paging.",
        "flatPath": "userprofiles/{profileId}/userRoles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userRoles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRoles.patch": {
        "description": "Updates an existing user role. This method supports patch semantics.",
        "flatPath": "userprofiles/{profileId}/userRoles",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "userRoles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.userRoles.update": {
        "description": "Updates an existing user role.",
        "flatPath": "userprofiles/{profileId}/userRoles",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "userRoles",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.videoFormats.get": {
        "description": "Gets one video format by ID.",
        "flatPath": "userprofiles/{profileId}/videoFormats/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "videoFormats",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      },
      "dfareporting.videoFormats.list": {
        "description": "Lists available video formats.",
        "flatPath": "userprofiles/{profileId}/videoFormats",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "videoFormats",
        "resourceTypePath": "/",
        "versions": [
          "v3.3",
          "v3.4",
          "v3.5"
        ]
      }
    },
    "preferredVersion": "v3.5",
    "title": "Campaign Manager 360 API"
  },
  "dialogflow": {
    "description": "Builds conversational interfaces (for example, chatbots, and voice-powered apps and devices).",
    "methods": {
      "dialogflow.projects.agent.entityTypes.batchDelete": {
        "description": "Deletes entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.entityTypes.batchUpdate": {
        "description": "Updates/Creates multiple entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateEntityTypesResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.entityTypes.create": {
        "description": "Creates an entity type in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.entityTypes.delete": {
        "description": "Deletes the specified entity type. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes/{entityTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.entityTypes.entities.batchCreate": {
        "description": "Creates multiple new entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes/{entityTypesId}/entities:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "entities",
        "resourceTypePath": "//projects/agent/entityTypes",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.entityTypes.entities.batchDelete": {
        "description": "Deletes entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes/{entityTypesId}/entities:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "entities",
        "resourceTypePath": "//projects/agent/entityTypes",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.entityTypes.entities.batchUpdate": {
        "description": "Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes/{entityTypesId}/entities:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "entities",
        "resourceTypePath": "//projects/agent/entityTypes",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.entityTypes.get": {
        "description": "Retrieves the specified entity type.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes/{entityTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.entityTypes.list": {
        "description": "Returns the list of all entity types in the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.entityTypes.patch": {
        "description": "Updates the specified entity type. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/entityTypes/{entityTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.create": {
        "description": "Creates an agent environment.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "environments",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.delete": {
        "description": "Deletes the specified agent environment.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "environments",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.get": {
        "description": "Retrieves the specified agent environment.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "environments",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.getHistory": {
        "description": "Gets the history of the specified environment.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/history",
        "httpMethod": "GET",
        "method": "getHistory",
        "resourceType": "environments",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.intents.list": {
        "description": "Returns the list of all intents in the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/intents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "intents",
        "resourceTypePath": "//projects/agent/environments",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.list": {
        "description": "Returns the list of all non-draft environments of the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "environments",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.patch": {
        "description": "Updates the specified agent environment. This method allows you to deploy new agent versions into the environment. When an environment is pointed to a new agent version by setting `environment.agent_version`, the environment is temporarily set to the `LOADING` state. During that time, the environment keeps on serving the previous version of the agent. After the new agent version is done loading, the environment is set back to the `RUNNING` state. You can use \"-\" as Environment ID in environment name to update version in \"draft\" environment. WARNING: this will negate all recent changes to draft and can't be undone. You may want to save the draft to a version before calling this function.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "environments",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.contexts.create": {
        "description": "Creates a context. If the specified context already exists, overrides the context.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.contexts.delete": {
        "description": "Deletes the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.contexts.get": {
        "description": "Retrieves the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.contexts.list": {
        "description": "Returns the list of all contexts in the specified session.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.contexts.patch": {
        "description": "Updates the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.deleteContexts": {
        "description": "Deletes all active contexts in the specified session.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts",
        "httpMethod": "DELETE",
        "method": "deleteContexts",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/agent/environments/users",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.detectIntent": {
        "description": "Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}:detectIntent",
        "httpMethod": "POST",
        "method": "detectIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/agent/environments/users",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.entityTypes.create": {
        "description": "Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.entityTypes.delete": {
        "description": "Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.entityTypes.get": {
        "description": "Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.entityTypes.list": {
        "description": "Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.environments.users.sessions.entityTypes.patch": {
        "description": "Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.export": {
        "description": "Exports the specified agent to a ZIP file. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportAgentResponse",
        "flatPath": "v2beta1/projects/{projectsId}/agent:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "agent",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.getFulfillment": {
        "description": "Retrieves the fulfillment.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/fulfillment",
        "httpMethod": "GET",
        "method": "getFulfillment",
        "resourceType": "agent",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.getValidationResult": {
        "description": "Gets agent validation result. Agent validation is performed during training time and is updated automatically when training is completed.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/validationResult",
        "httpMethod": "GET",
        "method": "getValidationResult",
        "resourceType": "agent",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.import": {
        "description": "Imports the specified agent from a ZIP file. Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the new versions from ImportAgentRequest. After the import, the imported draft agent will be trained automatically (unless disabled in agent settings). However, once the import is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when importing is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "agent",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.intents.batchDelete": {
        "description": "Deletes intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/intents:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "intents",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.intents.batchUpdate": {
        "description": "Updates/Creates multiple intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateIntentsResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/intents:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "intents",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.intents.create": {
        "description": "Creates an intent in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/intents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "intents",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.intents.delete": {
        "description": "Deletes the specified intent and its direct or indirect followup intents. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/intents/{intentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "intents",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.intents.get": {
        "description": "Retrieves the specified intent.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/intents/{intentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "intents",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.intents.list": {
        "description": "Returns the list of all intents in the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/intents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "intents",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.intents.patch": {
        "description": "Updates the specified intent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/intents/{intentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "intents",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.create": {
        "description": "Creates a knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.delete": {
        "description": "Deletes the specified knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases/{knowledgeBasesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.documents.create": {
        "description": "Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases/{knowledgeBasesId}/documents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "documents",
        "resourceTypePath": "//projects/agent/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.documents.delete": {
        "description": "Deletes the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "documents",
        "resourceTypePath": "//projects/agent/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.documents.get": {
        "description": "Retrieves the specified document. Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "documents",
        "resourceTypePath": "//projects/agent/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.documents.list": {
        "description": "Returns the list of all documents of the knowledge base. Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases/{knowledgeBasesId}/documents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "documents",
        "resourceTypePath": "//projects/agent/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.documents.patch": {
        "description": "Updates the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "documents",
        "resourceTypePath": "//projects/agent/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.documents.reload": {
        "description": "Reloads the specified document from its specified source, content_uri or content. The previously loaded content of the document will be deleted. Note: Even when the content of the document has not changed, there still may be side effects because of internal implementation changes. Note: If the document source is Google Cloud Storage URI, its metadata will be replaced with the custom metadata from Google Cloud Storage if the `import_gcs_custom_metadata` field is set to true in the request. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}:reload",
        "httpMethod": "POST",
        "method": "reload",
        "resourceType": "documents",
        "resourceTypePath": "//projects/agent/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.get": {
        "description": "Retrieves the specified knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases/{knowledgeBasesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.list": {
        "description": "Returns the list of all knowledge bases of the specified agent. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.knowledgeBases.patch": {
        "description": "Updates the specified knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/knowledgeBases/{knowledgeBasesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.restore": {
        "description": "Restores the specified agent from a ZIP file. Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted. After the restore, the restored draft agent will be trained automatically (unless disabled in agent settings). However, once the restore is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when restoring is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "agent",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.search": {
        "description": "Returns the list of agents. Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to. One can achieve that with a wildcard project collection id \"-\". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).",
        "flatPath": "v2beta1/projects/{projectsId}/agent:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "agent",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.contexts.create": {
        "description": "Creates a context. If the specified context already exists, overrides the context.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/contexts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.contexts.delete": {
        "description": "Deletes the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.contexts.get": {
        "description": "Retrieves the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.contexts.list": {
        "description": "Returns the list of all contexts in the specified session.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/contexts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.contexts.patch": {
        "description": "Updates the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.deleteContexts": {
        "description": "Deletes all active contexts in the specified session.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/contexts",
        "httpMethod": "DELETE",
        "method": "deleteContexts",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.detectIntent": {
        "description": "Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}:detectIntent",
        "httpMethod": "POST",
        "method": "detectIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.entityTypes.create": {
        "description": "Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/entityTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.entityTypes.delete": {
        "description": "Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.entityTypes.get": {
        "description": "Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.entityTypes.list": {
        "description": "Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/entityTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.sessions.entityTypes.patch": {
        "description": "Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.train": {
        "description": "Trains the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent:train",
        "httpMethod": "POST",
        "method": "train",
        "resourceType": "agent",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.updateFulfillment": {
        "description": "Updates the fulfillment.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/fulfillment",
        "httpMethod": "PATCH",
        "method": "updateFulfillment",
        "resourceType": "agent",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.versions.create": {
        "description": "Creates an agent version. The new version points to the agent instance in the \"default\" environment.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/versions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "versions",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.versions.delete": {
        "description": "Delete the specified agent version.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/versions/{versionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "versions",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.versions.get": {
        "description": "Retrieves the specified agent version.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/versions/{versionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.versions.list": {
        "description": "Returns the list of all versions of the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.agent.versions.patch": {
        "description": "Updates the specified agent version. Note that this method does not allow you to update the state of the agent the given version points to. It allows you to update only mutable properties of the version resource.",
        "flatPath": "v2beta1/projects/{projectsId}/agent/versions/{versionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "versions",
        "resourceTypePath": "//projects/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.answerRecords.get": {
        "description": "Deprecated. Retrieves a specific answer record.",
        "flatPath": "v2beta1/projects/{projectsId}/answerRecords/{answerRecordsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "answerRecords",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.answerRecords.list": {
        "description": "Returns the list of all answer records in the specified project in reverse chronological order.",
        "flatPath": "v2beta1/projects/{projectsId}/answerRecords",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "answerRecords",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.answerRecords.patch": {
        "description": "Updates the specified answer record.",
        "flatPath": "v2beta1/projects/{projectsId}/answerRecords/{answerRecordsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "answerRecords",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversationProfiles.create": {
        "description": "Creates a conversation profile in the specified project. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API.",
        "flatPath": "v2beta1/projects/{projectsId}/conversationProfiles",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversationProfiles.delete": {
        "description": "Deletes the specified conversation profile.",
        "flatPath": "v2beta1/projects/{projectsId}/conversationProfiles/{conversationProfilesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversationProfiles.get": {
        "description": "Retrieves the specified conversation profile.",
        "flatPath": "v2beta1/projects/{projectsId}/conversationProfiles/{conversationProfilesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversationProfiles.list": {
        "description": "Returns the list of all conversation profiles in the specified project.",
        "flatPath": "v2beta1/projects/{projectsId}/conversationProfiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversationProfiles.patch": {
        "description": "Updates the specified conversation profile. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API.",
        "flatPath": "v2beta1/projects/{projectsId}/conversationProfiles/{conversationProfilesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.complete": {
        "description": "Completes the specified conversation. Finished conversations are purged from the database after 30 days.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}:complete",
        "httpMethod": "POST",
        "method": "complete",
        "resourceType": "conversations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.create": {
        "description": "Creates a new conversation. Conversations are auto-completed after 24 hours. Conversation Lifecycle: There are two stages during a conversation: Automated Agent Stage and Assist Stage. For Automated Agent Stage, there will be a dialogflow agent responding to user queries. For Assist Stage, there's no dialogflow agent responding to user queries. But we will provide suggestions which are generated from conversation. If Conversation.conversation_profile is configured for a dialogflow agent, conversation will start from `Automated Agent Stage`, otherwise, it will start from `Assist Stage`. And during `Automated Agent Stage`, once an Intent with Intent.live_agent_handoff is triggered, conversation will transfer to Assist Stage.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "conversations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.get": {
        "description": "Retrieves the specific conversation.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "conversations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.list": {
        "description": "Returns the list of all conversations in the specified project.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "conversations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.messages.batchCreate": {
        "description": "Batch ingests messages to conversation. Customers can use this RPC to ingest historical messages to conversation.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/messages:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "messages",
        "resourceTypePath": "//projects/conversations",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.conversations.messages.list": {
        "description": "Lists messages that belong to a given conversation. `messages` are ordered by `create_time` in descending order. To fetch updates without duplication, send request with filter `create_time_epoch_microseconds > [first item's create_time of previous request]` and empty page_token.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/messages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "messages",
        "resourceTypePath": "//projects/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.participants.analyzeContent": {
        "description": "Adds a text (chat, for example), or audio (phone recording, for example) message from a participant into the conversation. Note: Always use agent versions for production traffic sent to virtual agents. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants/{participantsId}:analyzeContent",
        "httpMethod": "POST",
        "method": "analyzeContent",
        "resourceType": "participants",
        "resourceTypePath": "//projects/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.participants.create": {
        "description": "Creates a new participant in a conversation.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "participants",
        "resourceTypePath": "//projects/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.participants.get": {
        "description": "Retrieves a conversation participant.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants/{participantsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "participants",
        "resourceTypePath": "//projects/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.participants.list": {
        "description": "Returns the list of all participants in the specified conversation.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "participants",
        "resourceTypePath": "//projects/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.participants.patch": {
        "description": "Updates the specified participant.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants/{participantsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "participants",
        "resourceTypePath": "//projects/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.participants.suggestions.compile": {
        "description": "Deprecated. use SuggestArticles and SuggestFaqAnswers instead. Gets suggestions for a participant based on specific historical messages. Note that ListSuggestions will only list the auto-generated suggestions, while CompileSuggestion will try to compile suggestion based on the provided conversation context in the real time.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants/{participantsId}/suggestions:compile",
        "httpMethod": "POST",
        "method": "compile",
        "resourceType": "suggestions",
        "resourceTypePath": "//projects/conversations/participants",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.conversations.participants.suggestions.list": {
        "description": "Deprecated: Use inline suggestion, event based suggestion or Suggestion* API instead. See HumanAgentAssistantConfig.name for more details. Removal Date: 2020-09-01. Retrieves suggestions for live agents. This method should be used by human agent client software to fetch auto generated suggestions in real-time, while the conversation with an end user is in progress. The functionality is implemented in terms of the [list pagination](https://cloud.google.com/apis/design/design_patterns#list_pagination) design pattern. The client app should use the `next_page_token` field to fetch the next batch of suggestions. `suggestions` are sorted by `create_time` in descending order. To fetch latest suggestion, just set `page_size` to 1. To fetch new suggestions without duplication, send request with filter `create_time_epoch_microseconds > [first item's create_time of previous request]` and empty page_token.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants/{participantsId}/suggestions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "suggestions",
        "resourceTypePath": "//projects/conversations/participants",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.conversations.participants.suggestions.suggestArticles": {
        "description": "Gets suggested articles for a participant based on specific historical messages. Note that ListSuggestions will only list the auto-generated suggestions, while CompileSuggestion will try to compile suggestion based on the provided conversation context in the real time.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants/{participantsId}/suggestions:suggestArticles",
        "httpMethod": "POST",
        "method": "suggestArticles",
        "resourceType": "suggestions",
        "resourceTypePath": "//projects/conversations/participants",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.participants.suggestions.suggestFaqAnswers": {
        "description": "Gets suggested faq answers for a participant based on specific historical messages.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants/{participantsId}/suggestions:suggestFaqAnswers",
        "httpMethod": "POST",
        "method": "suggestFaqAnswers",
        "resourceType": "suggestions",
        "resourceTypePath": "//projects/conversations/participants",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.conversations.participants.suggestions.suggestSmartReplies": {
        "description": "Gets smart replies for a participant based on specific historical messages.",
        "flatPath": "v2beta1/projects/{projectsId}/conversations/{conversationsId}/participants/{participantsId}/suggestions:suggestSmartReplies",
        "httpMethod": "POST",
        "method": "suggestSmartReplies",
        "resourceType": "suggestions",
        "resourceTypePath": "//projects/conversations/participants",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.deleteAgent": {
        "description": "Deletes the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/agent",
        "httpMethod": "DELETE",
        "method": "deleteAgent",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.getAgent": {
        "description": "Retrieves the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/agent",
        "httpMethod": "GET",
        "method": "getAgent",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.create": {
        "description": "Creates a knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.delete": {
        "description": "Deletes the specified knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.documents.create": {
        "description": "Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}/documents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "documents",
        "resourceTypePath": "//projects/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.documents.delete": {
        "description": "Deletes the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "documents",
        "resourceTypePath": "//projects/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.documents.get": {
        "description": "Retrieves the specified document. Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "documents",
        "resourceTypePath": "//projects/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.documents.import": {
        "description": "Create documents by importing data from external sources. Dialogflow supports up to 350 documents in each request. If you try to import more, Dialogflow will return an error. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: ImportDocumentsResponse",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}/documents:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "documents",
        "resourceTypePath": "//projects/knowledgeBases",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.knowledgeBases.documents.list": {
        "description": "Returns the list of all documents of the knowledge base. Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}/documents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "documents",
        "resourceTypePath": "//projects/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.documents.patch": {
        "description": "Updates the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "documents",
        "resourceTypePath": "//projects/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.documents.reload": {
        "description": "Reloads the specified document from its specified source, content_uri or content. The previously loaded content of the document will be deleted. Note: Even when the content of the document has not changed, there still may be side effects because of internal implementation changes. Note: If the document source is Google Cloud Storage URI, its metadata will be replaced with the custom metadata from Google Cloud Storage if the `import_gcs_custom_metadata` field is set to true in the request. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}:reload",
        "httpMethod": "POST",
        "method": "reload",
        "resourceType": "documents",
        "resourceTypePath": "//projects/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.get": {
        "description": "Retrieves the specified knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.list": {
        "description": "Returns the list of all knowledge bases of the specified agent. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.knowledgeBases.patch": {
        "description": "Updates the specified knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/knowledgeBases/{knowledgeBasesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.batchDelete": {
        "description": "Deletes entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.batchUpdate": {
        "description": "Updates/Creates multiple entity types in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateEntityTypesResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.create": {
        "description": "Creates an entity type in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.delete": {
        "description": "Deletes the specified entity type. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes/{entityTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.entities.batchCreate": {
        "description": "Creates multiple new entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes/{entityTypesId}/entities:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "entities",
        "resourceTypePath": "//projects/locations/agent/entityTypes",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.entities.batchDelete": {
        "description": "Deletes entities in the specified entity type. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes/{entityTypesId}/entities:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "entities",
        "resourceTypePath": "//projects/locations/agent/entityTypes",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.entities.batchUpdate": {
        "description": "Updates or creates multiple entities in the specified entity type. This method does not affect entities in the entity type that aren't explicitly specified in the request. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training). This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes/{entityTypesId}/entities:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "entities",
        "resourceTypePath": "//projects/locations/agent/entityTypes",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.get": {
        "description": "Retrieves the specified entity type.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes/{entityTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.list": {
        "description": "Returns the list of all entity types in the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.entityTypes.patch": {
        "description": "Updates the specified entity type. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/entityTypes/{entityTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.create": {
        "description": "Creates an agent environment.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.delete": {
        "description": "Deletes the specified agent environment.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.get": {
        "description": "Retrieves the specified agent environment.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.getHistory": {
        "description": "Gets the history of the specified environment.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/history",
        "httpMethod": "GET",
        "method": "getHistory",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.intents.list": {
        "description": "Returns the list of all intents in the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/intents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agent/environments",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.list": {
        "description": "Returns the list of all non-draft environments of the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.patch": {
        "description": "Updates the specified agent environment. This method allows you to deploy new agent versions into the environment. When an environment is pointed to a new agent version by setting `environment.agent_version`, the environment is temporarily set to the `LOADING` state. During that time, the environment keeps on serving the previous version of the agent. After the new agent version is done loading, the environment is set back to the `RUNNING` state. You can use \"-\" as Environment ID in environment name to update version in \"draft\" environment. WARNING: this will negate all recent changes to draft and can't be undone. You may want to save the draft to a version before calling this function.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.contexts.create": {
        "description": "Creates a context. If the specified context already exists, overrides the context.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.contexts.delete": {
        "description": "Deletes the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.contexts.get": {
        "description": "Retrieves the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.contexts.list": {
        "description": "Returns the list of all contexts in the specified session.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.contexts.patch": {
        "description": "Updates the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.deleteContexts": {
        "description": "Deletes all active contexts in the specified session.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/contexts",
        "httpMethod": "DELETE",
        "method": "deleteContexts",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agent/environments/users",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.detectIntent": {
        "description": "Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}:detectIntent",
        "httpMethod": "POST",
        "method": "detectIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agent/environments/users",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.create": {
        "description": "Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.delete": {
        "description": "Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.get": {
        "description": "Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.list": {
        "description": "Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.environments.users.sessions.entityTypes.patch": {
        "description": "Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/environments/{environmentsId}/users/{usersId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/environments/users/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.export": {
        "description": "Exports the specified agent to a ZIP file. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportAgentResponse",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "agent",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.getFulfillment": {
        "description": "Retrieves the fulfillment.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/fulfillment",
        "httpMethod": "GET",
        "method": "getFulfillment",
        "resourceType": "agent",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.getValidationResult": {
        "description": "Gets agent validation result. Agent validation is performed during training time and is updated automatically when training is completed.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/validationResult",
        "httpMethod": "GET",
        "method": "getValidationResult",
        "resourceType": "agent",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.import": {
        "description": "Imports the specified agent from a ZIP file. Uploads new intents and entity types without deleting the existing ones. Intents and entity types with the same name are replaced with the new versions from ImportAgentRequest. After the import, the imported draft agent will be trained automatically (unless disabled in agent settings). However, once the import is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when importing is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "agent",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.intents.batchDelete": {
        "description": "Deletes intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/intents:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.intents.batchUpdate": {
        "description": "Updates/Creates multiple intents in the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: BatchUpdateIntentsResponse Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/intents:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.intents.create": {
        "description": "Creates an intent in the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/intents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.intents.delete": {
        "description": "Deletes the specified intent and its direct or indirect followup intents. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/intents/{intentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.intents.get": {
        "description": "Retrieves the specified intent.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/intents/{intentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.intents.list": {
        "description": "Returns the list of all intents in the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/intents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.intents.patch": {
        "description": "Updates the specified intent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/intents/{intentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.restore": {
        "description": "Restores the specified agent from a ZIP file. Replaces the current agent version with a new one. All the intents and entity types in the older version are deleted. After the restore, the restored draft agent will be trained automatically (unless disabled in agent settings). However, once the restore is done, training may not be completed yet. Please call TrainAgent and wait for the operation it returns in order to train explicitly. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) The operation only tracks when restoring is complete, not when it is done training. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "agent",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.search": {
        "description": "Returns the list of agents. Since there is at most one conversational agent per project, this method is useful primarily for listing all agents across projects the caller has access to. One can achieve that with a wildcard project collection id \"-\". Refer to [List Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "agent",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.contexts.create": {
        "description": "Creates a context. If the specified context already exists, overrides the context.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/contexts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.contexts.delete": {
        "description": "Deletes the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.contexts.get": {
        "description": "Retrieves the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.contexts.list": {
        "description": "Returns the list of all contexts in the specified session.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/contexts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.contexts.patch": {
        "description": "Updates the specified context.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/contexts/{contextsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "contexts",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.deleteContexts": {
        "description": "Deletes all active contexts in the specified session.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/contexts",
        "httpMethod": "DELETE",
        "method": "deleteContexts",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.detectIntent": {
        "description": "Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause contexts and session entity types to be updated, which in turn might affect results of future queries. If you might use [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa) or other CCAI products now or in the future, consider using AnalyzeContent instead of `DetectIntent`. `AnalyzeContent` has additional functionality for Agent Assist and other CCAI products. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}:detectIntent",
        "httpMethod": "POST",
        "method": "detectIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.entityTypes.create": {
        "description": "Creates a session entity type. If the specified session entity type already exists, overrides the session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/entityTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.entityTypes.delete": {
        "description": "Deletes the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.entityTypes.get": {
        "description": "Retrieves the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.entityTypes.list": {
        "description": "Returns the list of all session entity types in the specified session. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/entityTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.sessions.entityTypes.patch": {
        "description": "Updates the specified session entity type. This method doesn't work with Google Assistant integration. Contact Dialogflow support if you need to use session entities with Google Assistant integration.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agent/sessions",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.train": {
        "description": "Trains the specified agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent:train",
        "httpMethod": "POST",
        "method": "train",
        "resourceType": "agent",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.updateFulfillment": {
        "description": "Updates the fulfillment.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/fulfillment",
        "httpMethod": "PATCH",
        "method": "updateFulfillment",
        "resourceType": "agent",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.versions.create": {
        "description": "Creates an agent version. The new version points to the agent instance in the \"default\" environment.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/versions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.versions.delete": {
        "description": "Delete the specified agent version.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/versions/{versionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.versions.get": {
        "description": "Retrieves the specified agent version.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/versions/{versionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.versions.list": {
        "description": "Returns the list of all versions of the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agent.versions.patch": {
        "description": "Updates the specified agent version. Note that this method does not allow you to update the state of the agent the given version points to. It allows you to update only mutable properties of the version resource.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent/versions/{versionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agent",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.agents.changelogs.get": {
        "description": "Retrieves the specified Changelog.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/changelogs/{changelogsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "changelogs",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.changelogs.list": {
        "description": "Returns the list of Changelogs.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/changelogs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "changelogs",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.create": {
        "description": "Creates an agent in the specified location. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "agents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.delete": {
        "description": "Deletes the specified agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "agents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.entityTypes.create": {
        "description": "Creates an entity type in the specified agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/entityTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.entityTypes.delete": {
        "description": "Deletes the specified entity type. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/entityTypes/{entityTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.entityTypes.get": {
        "description": "Retrieves the specified entity type.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/entityTypes/{entityTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.entityTypes.list": {
        "description": "Returns the list of all entity types in the specified agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/entityTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.entityTypes.patch": {
        "description": "Updates the specified entity type. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/entityTypes/{entityTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.continuousTestResults.list": {
        "description": "Fetches a list of continuous test results for a given environment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/continuousTestResults",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "continuousTestResults",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.create": {
        "description": "Creates an Environment in the specified Agent. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: Environment",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.delete": {
        "description": "Deletes the specified Environment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.deployFlow": {
        "description": "Deploys a flow to the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: DeployFlowMetadata - `response`: DeployFlowResponse",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}:deployFlow",
        "httpMethod": "POST",
        "method": "deployFlow",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.deployments.get": {
        "description": "Retrieves the specified Deployment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/deployments/{deploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deployments",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.deployments.list": {
        "description": "Returns the list of all deployments in the specified Environment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.experiments.create": {
        "description": "Creates an Experiment in the specified Environment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/experiments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "experiments",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.experiments.delete": {
        "description": "Deletes the specified Experiment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/experiments/{experimentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "experiments",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.experiments.get": {
        "description": "Retrieves the specified Experiment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/experiments/{experimentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "experiments",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.experiments.list": {
        "description": "Returns the list of all experiments in the specified Environment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/experiments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "experiments",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.experiments.patch": {
        "description": "Updates the specified Experiment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/experiments/{experimentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "experiments",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.experiments.start": {
        "description": "Starts the specified Experiment. This rpc only changes the state of experiment from PENDING to RUNNING.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/experiments/{experimentsId}:start",
        "httpMethod": "POST",
        "method": "start",
        "resourceType": "experiments",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.experiments.stop": {
        "description": "Stops the specified Experiment. This rpc only changes the state of experiment from RUNNING to DONE.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/experiments/{experimentsId}:stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "experiments",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.get": {
        "description": "Retrieves the specified Environment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.list": {
        "description": "Returns the list of all environments in the specified Agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.lookupEnvironmentHistory": {
        "description": "Looks up the history of the specified Environment.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}:lookupEnvironmentHistory",
        "httpMethod": "GET",
        "method": "lookupEnvironmentHistory",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.patch": {
        "description": "Updates the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: Environment",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.runContinuousTest": {
        "description": "Kicks off a continuous test under the specified Environment. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunContinuousTestMetadata - `response`: RunContinuousTestResponse",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}:runContinuousTest",
        "httpMethod": "POST",
        "method": "runContinuousTest",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.sessions.detectIntent": {
        "description": "Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause session entity types to be updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/cx/docs/concept/version).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/sessions/{sessionsId}:detectIntent",
        "httpMethod": "POST",
        "method": "detectIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.sessions.entityTypes.create": {
        "description": "Creates a session entity type.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/sessions/{sessionsId}/entityTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/environments/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.sessions.entityTypes.delete": {
        "description": "Deletes the specified session entity type.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/environments/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.sessions.entityTypes.get": {
        "description": "Retrieves the specified session entity type.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/environments/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.sessions.entityTypes.list": {
        "description": "Returns the list of all session entity types in the specified session.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/sessions/{sessionsId}/entityTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/environments/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.sessions.entityTypes.patch": {
        "description": "Updates the specified session entity type.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/environments/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.sessions.fulfillIntent": {
        "description": "Fulfills a matched intent returned by MatchIntent. Must be called after MatchIntent, with input from MatchIntentResponse. Otherwise, the behavior is undefined.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/sessions/{sessionsId}:fulfillIntent",
        "httpMethod": "POST",
        "method": "fulfillIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.environments.sessions.matchIntent": {
        "description": "Returns preliminary intent match results, doesn't change the session status.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/environments/{environmentsId}/sessions/{sessionsId}:matchIntent",
        "httpMethod": "POST",
        "method": "matchIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agents/environments",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.export": {
        "description": "Exports the specified agent to a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportAgentResponse",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "agents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.create": {
        "description": "Creates a flow in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.delete": {
        "description": "Deletes a specified flow.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.export": {
        "description": "Exports the specified flow to a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ExportFlowResponse Note that resources (e.g. intents, entities, webhooks) that the flow references will also be exported.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.get": {
        "description": "Retrieves the specified flow.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.getValidationResult": {
        "description": "Gets the latest flow validation result. Flow validation is performed when ValidateFlow is called.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/validationResult",
        "httpMethod": "GET",
        "method": "getValidationResult",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.import": {
        "description": "Imports the specified flow to the specified agent from a binary file. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: ImportFlowResponse Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.list": {
        "description": "Returns the list of all flows in the specified agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.pages.create": {
        "description": "Creates a page in the specified flow.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/pages",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "pages",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.pages.delete": {
        "description": "Deletes the specified page.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/pages/{pagesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "pages",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.pages.get": {
        "description": "Retrieves the specified page.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/pages/{pagesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "pages",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.pages.list": {
        "description": "Returns the list of all pages in the specified flow.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/pages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "pages",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.pages.patch": {
        "description": "Updates the specified page.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/pages/{pagesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "pages",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.patch": {
        "description": "Updates the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.train": {
        "description": "Trains the specified flow. Note that only the flow in 'draft' environment is trained. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}:train",
        "httpMethod": "POST",
        "method": "train",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.transitionRouteGroups.create": {
        "description": "Creates an TransitionRouteGroup in the specified flow. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/transitionRouteGroups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "transitionRouteGroups",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.transitionRouteGroups.delete": {
        "description": "Deletes the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/transitionRouteGroups/{transitionRouteGroupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "transitionRouteGroups",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.transitionRouteGroups.get": {
        "description": "Retrieves the specified TransitionRouteGroup.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/transitionRouteGroups/{transitionRouteGroupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "transitionRouteGroups",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.transitionRouteGroups.list": {
        "description": "Returns the list of all transition route groups in the specified flow.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/transitionRouteGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "transitionRouteGroups",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.transitionRouteGroups.patch": {
        "description": "Updates the specified TransitionRouteGroup. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/transitionRouteGroups/{transitionRouteGroupsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "transitionRouteGroups",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.validate": {
        "description": "Validates the specified flow and creates or updates validation results. Please call this API after the training is completed to get the complete validation results.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}:validate",
        "httpMethod": "POST",
        "method": "validate",
        "resourceType": "flows",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.versions.compareVersions": {
        "description": "Compares the specified base version with target version.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/versions/{versionsId}:compareVersions",
        "httpMethod": "POST",
        "method": "compareVersions",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.versions.create": {
        "description": "Creates a Version in the specified Flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: CreateVersionOperationMetadata - `response`: Version",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/versions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.versions.delete": {
        "description": "Deletes the specified Version.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/versions/{versionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.versions.get": {
        "description": "Retrieves the specified Version.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/versions/{versionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.versions.list": {
        "description": "Returns the list of all versions in the specified Flow.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.versions.load": {
        "description": "Loads resources in the specified version to the draft flow. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/versions/{versionsId}:load",
        "httpMethod": "POST",
        "method": "load",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.flows.versions.patch": {
        "description": "Updates the specified Version.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/flows/{flowsId}/versions/{versionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "versions",
        "resourceTypePath": "//projects/locations/agents/flows",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.get": {
        "description": "Retrieves the specified agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "agents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.getValidationResult": {
        "description": "Gets the latest agent validation result. Agent validation is performed when ValidateAgent is called.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/validationResult",
        "httpMethod": "GET",
        "method": "getValidationResult",
        "resourceType": "agents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.intents.create": {
        "description": "Creates an intent in the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/intents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.intents.delete": {
        "description": "Deletes the specified intent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/intents/{intentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.intents.get": {
        "description": "Retrieves the specified intent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/intents/{intentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.intents.list": {
        "description": "Returns the list of all intents in the specified agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/intents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.intents.patch": {
        "description": "Updates the specified intent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/intents/{intentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "intents",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.list": {
        "description": "Returns the list of all agents in the specified location.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "agents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.patch": {
        "description": "Updates the specified agent. Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "agents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.restore": {
        "description": "Restores the specified agent from a binary file. Replaces the current agent with a new one. Note that all existing resources in agent (e.g. intents, entity types, flows) will be removed. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: An empty [Struct message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct) - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: You should always train a flow prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "agents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.sessions.detectIntent": {
        "description": "Processes a natural language query and returns structured, actionable data as a result. This method is not idempotent, because it may cause session entity types to be updated, which in turn might affect results of future queries. Note: Always use agent versions for production traffic. See [Versions and environments](https://cloud.google.com/dialogflow/cx/docs/concept/version).",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/sessions/{sessionsId}:detectIntent",
        "httpMethod": "POST",
        "method": "detectIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.sessions.entityTypes.create": {
        "description": "Creates a session entity type.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/sessions/{sessionsId}/entityTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.sessions.entityTypes.delete": {
        "description": "Deletes the specified session entity type.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.sessions.entityTypes.get": {
        "description": "Retrieves the specified session entity type.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.sessions.entityTypes.list": {
        "description": "Returns the list of all session entity types in the specified session.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/sessions/{sessionsId}/entityTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.sessions.entityTypes.patch": {
        "description": "Updates the specified session entity type.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/sessions/{sessionsId}/entityTypes/{entityTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "entityTypes",
        "resourceTypePath": "//projects/locations/agents/sessions",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.sessions.fulfillIntent": {
        "description": "Fulfills a matched intent returned by MatchIntent. Must be called after MatchIntent, with input from MatchIntentResponse. Otherwise, the behavior is undefined.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/sessions/{sessionsId}:fulfillIntent",
        "httpMethod": "POST",
        "method": "fulfillIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.sessions.matchIntent": {
        "description": "Returns preliminary intent match results, doesn't change the session status.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/sessions/{sessionsId}:matchIntent",
        "httpMethod": "POST",
        "method": "matchIntent",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.batchDelete": {
        "description": "Batch deletes test cases.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.batchRun": {
        "description": "Kicks off a batch run of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: BatchRunTestCasesMetadata - `response`: BatchRunTestCasesResponse",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases:batchRun",
        "httpMethod": "POST",
        "method": "batchRun",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.calculateCoverage": {
        "description": "Calculates the test coverage for an agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases:calculateCoverage",
        "httpMethod": "GET",
        "method": "calculateCoverage",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.create": {
        "description": "Creates a test case for the given agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.export": {
        "description": "Exports the test cases under the agent to a Cloud Storage bucket or a local file. Filter can be applied to export a subset of test cases. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ExportTestCasesMetadata - `response`: ExportTestCasesResponse",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.get": {
        "description": "Gets a test case.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases/{testCasesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.import": {
        "description": "Imports the test cases from a Cloud Storage bucket or a local file. It always creates new test cases and won't overwite any existing ones. The provided ID in the imported test case is neglected. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: ImportTestCasesMetadata - `response`: ImportTestCasesResponse",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.list": {
        "description": "Fetches a list of test cases for a given agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.patch": {
        "description": "Updates the specified test case.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases/{testCasesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.results.get": {
        "description": "Gets a test case result.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases/{testCasesId}/results/{resultsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "results",
        "resourceTypePath": "//projects/locations/agents/testCases",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.results.list": {
        "description": "Fetches a list of results for a given test case.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases/{testCasesId}/results",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "results",
        "resourceTypePath": "//projects/locations/agents/testCases",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.testCases.run": {
        "description": "Kicks off a test case run. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: RunTestCaseMetadata - `response`: RunTestCaseResponse",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/testCases/{testCasesId}:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.validate": {
        "description": "Validates the specified agent and creates or updates validation results. The agent in draft version is validated. Please call this API after the training is completed to get the complete validation results.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}:validate",
        "httpMethod": "POST",
        "method": "validate",
        "resourceType": "agents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.webhooks.create": {
        "description": "Creates a webhook in the specified agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/webhooks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "webhooks",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.webhooks.delete": {
        "description": "Deletes the specified webhook.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/webhooks/{webhooksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "webhooks",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.webhooks.get": {
        "description": "Retrieves the specified webhook.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/webhooks/{webhooksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "webhooks",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.webhooks.list": {
        "description": "Returns the list of all webhooks in the specified agent.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/webhooks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webhooks",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.agents.webhooks.patch": {
        "description": "Updates the specified webhook.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/agents/{agentsId}/webhooks/{webhooksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "webhooks",
        "resourceTypePath": "//projects/locations/agents",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.answerRecords.get": {
        "description": "Deprecated. Retrieves a specific answer record.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/answerRecords/{answerRecordsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "answerRecords",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.locations.answerRecords.list": {
        "description": "Returns the list of all answer records in the specified project in reverse chronological order.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/answerRecords",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "answerRecords",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.answerRecords.patch": {
        "description": "Updates the specified answer record.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/answerRecords/{answerRecordsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "answerRecords",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversationProfiles.create": {
        "description": "Creates a conversation profile in the specified project. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversationProfiles",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversationProfiles.delete": {
        "description": "Deletes the specified conversation profile.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversationProfiles/{conversationProfilesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversationProfiles.get": {
        "description": "Retrieves the specified conversation profile.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversationProfiles/{conversationProfilesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversationProfiles.list": {
        "description": "Returns the list of all conversation profiles in the specified project.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversationProfiles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversationProfiles.patch": {
        "description": "Updates the specified conversation profile. ConversationProfile.CreateTime and ConversationProfile.UpdateTime aren't populated in the response. You can retrieve them via GetConversationProfile API.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversationProfiles/{conversationProfilesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "conversationProfiles",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.complete": {
        "description": "Completes the specified conversation. Finished conversations are purged from the database after 30 days.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}:complete",
        "httpMethod": "POST",
        "method": "complete",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.create": {
        "description": "Creates a new conversation. Conversations are auto-completed after 24 hours. Conversation Lifecycle: There are two stages during a conversation: Automated Agent Stage and Assist Stage. For Automated Agent Stage, there will be a dialogflow agent responding to user queries. For Assist Stage, there's no dialogflow agent responding to user queries. But we will provide suggestions which are generated from conversation. If Conversation.conversation_profile is configured for a dialogflow agent, conversation will start from `Automated Agent Stage`, otherwise, it will start from `Assist Stage`. And during `Automated Agent Stage`, once an Intent with Intent.live_agent_handoff is triggered, conversation will transfer to Assist Stage.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.get": {
        "description": "Retrieves the specific conversation.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.list": {
        "description": "Returns the list of all conversations in the specified project.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "conversations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.messages.batchCreate": {
        "description": "Batch ingests messages to conversation. Customers can use this RPC to ingest historical messages to conversation.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/messages:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.locations.conversations.messages.list": {
        "description": "Lists messages that belong to a given conversation. `messages` are ordered by `create_time` in descending order. To fetch updates without duplication, send request with filter `create_time_epoch_microseconds > [first item's create_time of previous request]` and empty page_token.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/messages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.participants.analyzeContent": {
        "description": "Adds a text (chat, for example), or audio (phone recording, for example) message from a participant into the conversation. Note: Always use agent versions for production traffic sent to virtual agents. See [Versions and environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/participants/{participantsId}:analyzeContent",
        "httpMethod": "POST",
        "method": "analyzeContent",
        "resourceType": "participants",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.participants.create": {
        "description": "Creates a new participant in a conversation.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/participants",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "participants",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.participants.get": {
        "description": "Retrieves a conversation participant.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/participants/{participantsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "participants",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.participants.list": {
        "description": "Returns the list of all participants in the specified conversation.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/participants",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "participants",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.participants.patch": {
        "description": "Updates the specified participant.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/participants/{participantsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "participants",
        "resourceTypePath": "//projects/locations/conversations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.participants.suggestions.suggestArticles": {
        "description": "Gets suggested articles for a participant based on specific historical messages. Note that ListSuggestions will only list the auto-generated suggestions, while CompileSuggestion will try to compile suggestion based on the provided conversation context in the real time.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/participants/{participantsId}/suggestions:suggestArticles",
        "httpMethod": "POST",
        "method": "suggestArticles",
        "resourceType": "suggestions",
        "resourceTypePath": "//projects/locations/conversations/participants",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.participants.suggestions.suggestFaqAnswers": {
        "description": "Gets suggested faq answers for a participant based on specific historical messages.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/participants/{participantsId}/suggestions:suggestFaqAnswers",
        "httpMethod": "POST",
        "method": "suggestFaqAnswers",
        "resourceType": "suggestions",
        "resourceTypePath": "//projects/locations/conversations/participants",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.conversations.participants.suggestions.suggestSmartReplies": {
        "description": "Gets smart replies for a participant based on specific historical messages.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/conversations/{conversationsId}/participants/{participantsId}/suggestions:suggestSmartReplies",
        "httpMethod": "POST",
        "method": "suggestSmartReplies",
        "resourceType": "suggestions",
        "resourceTypePath": "//projects/locations/conversations/participants",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.locations.deleteAgent": {
        "description": "Deletes the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent",
        "httpMethod": "DELETE",
        "method": "deleteAgent",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v3beta1",
          "v2",
          "v3"
        ]
      },
      "dialogflow.projects.locations.getAgent": {
        "description": "Retrieves the specified agent.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent",
        "httpMethod": "GET",
        "method": "getAgent",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.create": {
        "description": "Creates a knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.delete": {
        "description": "Deletes the specified knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.documents.create": {
        "description": "Creates a new document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}/documents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "documents",
        "resourceTypePath": "//projects/locations/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.documents.delete": {
        "description": "Deletes the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: An [Empty message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty) Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "documents",
        "resourceTypePath": "//projects/locations/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.documents.get": {
        "description": "Retrieves the specified document. Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "documents",
        "resourceTypePath": "//projects/locations/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.documents.import": {
        "description": "Create documents by importing data from external sources. Dialogflow supports up to 350 documents in each request. If you try to import more, Dialogflow will return an error. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: ImportDocumentsResponse",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}/documents:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "documents",
        "resourceTypePath": "//projects/locations/knowledgeBases",
        "versions": [
          "v2beta1"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.documents.list": {
        "description": "Returns the list of all documents of the knowledge base. Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}/documents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "documents",
        "resourceTypePath": "//projects/locations/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.documents.patch": {
        "description": "Updates the specified document. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "documents",
        "resourceTypePath": "//projects/locations/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.documents.reload": {
        "description": "Reloads the specified document from its specified source, content_uri or content. The previously loaded content of the document will be deleted. Note: Even when the content of the document has not changed, there still may be side effects because of internal implementation changes. Note: If the document source is Google Cloud Storage URI, its metadata will be replaced with the custom metadata from Google Cloud Storage if the `import_gcs_custom_metadata` field is set to true in the request. This method is a [long-running operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation). The returned `Operation` type has the following method-specific fields: - `metadata`: KnowledgeOperationMetadata - `response`: Document Note: The `projects.agent.knowledgeBases.documents` resource is deprecated; only use `projects.knowledgeBases.documents`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}/documents/{documentsId}:reload",
        "httpMethod": "POST",
        "method": "reload",
        "resourceType": "documents",
        "resourceTypePath": "//projects/locations/knowledgeBases",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.get": {
        "description": "Retrieves the specified knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.list": {
        "description": "Returns the list of all knowledge bases of the specified agent. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.knowledgeBases.patch": {
        "description": "Updates the specified knowledge base. Note: The `projects.agent.knowledgeBases` resource is deprecated; only use `projects.knowledgeBases`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/knowledgeBases/{knowledgeBasesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "knowledgeBases",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v2beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v3beta1",
          "v2",
          "v3"
        ]
      },
      "dialogflow.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v3beta1",
          "v2",
          "v3"
        ]
      },
      "dialogflow.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v3beta1",
          "v2",
          "v3"
        ]
      },
      "dialogflow.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1",
          "v3beta1",
          "v2",
          "v3"
        ]
      },
      "dialogflow.projects.locations.securitySettings.create": {
        "description": "Create security settings in the specified location.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/securitySettings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "securitySettings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.securitySettings.delete": {
        "description": "Deletes the specified SecuritySettings.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/securitySettings/{securitySettingsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "securitySettings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.securitySettings.get": {
        "description": "Retrieves the specified SecuritySettings. The returned settings may be stale by up to 1 minute.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/securitySettings/{securitySettingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "securitySettings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.securitySettings.list": {
        "description": "Returns the list of all security settings in the specified location.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/securitySettings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "securitySettings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.securitySettings.patch": {
        "description": "Updates the specified SecuritySettings.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/securitySettings/{securitySettingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "securitySettings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "dialogflow.projects.locations.setAgent": {
        "description": "Creates/updates the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/agent",
        "httpMethod": "POST",
        "method": "setAgent",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v2"
        ]
      },
      "dialogflow.projects.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v2beta1/projects/{projectsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v3beta1",
          "v2",
          "v3"
        ]
      },
      "dialogflow.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2beta1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v3beta1",
          "v2",
          "v3"
        ]
      },
      "dialogflow.projects.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2beta1/projects/{projectsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta1",
          "v3beta1",
          "v2",
          "v3"
        ]
      },
      "dialogflow.projects.setAgent": {
        "description": "Creates/updates the specified agent. Note: You should always train an agent prior to sending it queries. See the [training documentation](https://cloud.google.com/dialogflow/es/docs/training).",
        "flatPath": "v2beta1/projects/{projectsId}/agent",
        "httpMethod": "POST",
        "method": "setAgent",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v2beta1",
          "v2"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Dialogflow API"
  },
  "digitalassetlinks": {
    "description": "Discovers relationships between online assets such as websites or mobile apps.",
    "methods": {
      "digitalassetlinks.assetlinks.check": {
        "description": "Determines whether the specified (directional) relationship exists between the specified source and target assets. The relation describes the intent of the link between the two assets as claimed by the source asset. An example for such relationships is the delegation of privileges or permissions. This command is most often used by infrastructure systems to check preconditions for an action. For example, a client may want to know if it is OK to send a web URL to a particular mobile app instead. The client can check for the relevant asset link from the website to the mobile app to decide if the operation should be allowed. A note about security: if you specify a secure asset as the source, such as an HTTPS website or an Android app, the API will ensure that any statements used to generate the response have been made in a secure way by the owner of that asset. Conversely, if the source asset is an insecure HTTP website (that is, the URL starts with `http://` instead of `https://`), the API cannot verify its statements securely, and it is not possible to ensure that the website's statements have not been altered by a third party. For more information, see the [Digital Asset Links technical design specification](https://github.com/google/digitalassetlinks/blob/master/well-known/details.md).",
        "flatPath": "v1/assetlinks:check",
        "httpMethod": "GET",
        "method": "check",
        "resourceType": "assetlinks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "digitalassetlinks.statements.list": {
        "description": "Retrieves a list of all statements from a given source that match the specified target and statement string. The API guarantees that all statements with secure source assets, such as HTTPS websites or Android apps, have been made in a secure way by the owner of those assets, as described in the [Digital Asset Links technical design specification](https://github.com/google/digitalassetlinks/blob/master/well-known/details.md). Specifically, you should consider that for insecure websites (that is, where the URL starts with `http://` instead of `https://`), this guarantee cannot be made. The `List` command is most useful in cases where the API client wants to know all the ways in which two assets are related, or enumerate all the relationships from a particular source asset. Example: a feature that helps users navigate to related items. When a mobile app is running on a device, the feature would make it easy to navigate to the corresponding web site or Google+ profile.",
        "flatPath": "v1/statements:list",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "statements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Digital Asset Links API"
  },
  "discovery": {
    "description": "Google API Discovery Service allows service consumers to list the discovery metadata of all public APIs managed by the API Platform.",
    "methods": {
      "discovery.apis.getRest": {
        "description": "Retrieve the description of a particular version of an api.",
        "flatPath": "apis/{api}/{version}/rest",
        "httpMethod": "GET",
        "method": "getRest",
        "resourceType": "apis",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "discovery.apis.list": {
        "description": "Retrieve the list of APIs supported at this endpoint.",
        "flatPath": "apis",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apis",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "API Discovery Service"
  },
  "displayvideo": {
    "description": "Display & Video 360 API allows users to automate complex Display & Video 360 workflows, such as creating insertion orders and setting targeting options for individual line items.",
    "methods": {
      "displayvideo.advertisers.assets.upload": {
        "description": "Uploads an asset. Returns the ID of the newly uploaded asset if successful. The asset file size should be no more than 10 MB for images, 200 MB for ZIP files, and 1 GB for videos.",
        "flatPath": "v1/advertisers/{advertisersId}/assets",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "assets",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.audit": {
        "description": "Audits an advertiser. Returns the counts of used entities per resource type under the advertiser provided. Used entities count towards their respective resource limit. See https://support.google.com/displayvideo/answer/6071450.",
        "flatPath": "v1/advertisers/{advertisersId}:audit",
        "httpMethod": "GET",
        "method": "audit",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.bulkEditAdvertiserAssignedTargetingOptions": {
        "description": "Bulk edits targeting options under a single advertiser. The operation will delete the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.create_requests .",
        "flatPath": "v1/advertisers/{advertisersId}:bulkEditAdvertiserAssignedTargetingOptions",
        "httpMethod": "POST",
        "method": "bulkEditAdvertiserAssignedTargetingOptions",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.bulkListAdvertiserAssignedTargetingOptions": {
        "description": "Lists assigned targeting options of an advertiser across targeting types.",
        "flatPath": "v1/advertisers/{advertisersId}:bulkListAdvertiserAssignedTargetingOptions",
        "httpMethod": "GET",
        "method": "bulkListAdvertiserAssignedTargetingOptions",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.campaigns.bulkListCampaignAssignedTargetingOptions": {
        "description": "Lists assigned targeting options of a campaign across targeting types.",
        "flatPath": "v1/advertisers/{advertisersId}/campaigns/{campaignsId}:bulkListCampaignAssignedTargetingOptions",
        "httpMethod": "GET",
        "method": "bulkListCampaignAssignedTargetingOptions",
        "resourceType": "campaigns",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.campaigns.create": {
        "description": "Creates a new campaign. Returns the newly created campaign if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/campaigns",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "campaigns",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.campaigns.delete": {
        "description": "Permanently deletes a campaign. A deleted campaign cannot be recovered. The campaign should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it.",
        "flatPath": "v1/advertisers/{advertisersId}/campaigns/{campaignsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "campaigns",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.campaigns.get": {
        "description": "Gets a campaign.",
        "flatPath": "v1/advertisers/{advertisersId}/campaigns/{campaignsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "campaigns",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.campaigns.list": {
        "description": "Lists campaigns in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, campaigns with `ENTITY_STATUS_ARCHIVED` will not be included in the results.",
        "flatPath": "v1/advertisers/{advertisersId}/campaigns",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "campaigns",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.campaigns.patch": {
        "description": "Updates an existing campaign. Returns the updated campaign if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/campaigns/{campaignsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "campaigns",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.campaigns.targetingTypes.assignedTargetingOptions.get": {
        "description": "Gets a single targeting option assigned to a campaign.",
        "flatPath": "v1/advertisers/{advertisersId}/campaigns/{campaignsId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions/{assignedTargetingOptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/campaigns/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.campaigns.targetingTypes.assignedTargetingOptions.list": {
        "description": "Lists the targeting options assigned to a campaign for a specified targeting type.",
        "flatPath": "v1/advertisers/{advertisersId}/campaigns/{campaignsId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/campaigns/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.channels.create": {
        "description": "Creates a new channel. Returns the newly created channel if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/channels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "channels",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.channels.get": {
        "description": "Gets a channel for a partner or advertiser.",
        "flatPath": "v1/advertisers/{advertisersId}/channels/{channelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "channels",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.channels.list": {
        "description": "Lists channels for a partner or advertiser.",
        "flatPath": "v1/advertisers/{advertisersId}/channels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "channels",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.channels.patch": {
        "description": "Updates a channel. Returns the updated channel if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/channels/{channelId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "channels",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.channels.sites.bulkEdit": {
        "description": "Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.",
        "flatPath": "v1/advertisers/{advertiserId}/channels/{channelsId}/sites:bulkEdit",
        "httpMethod": "POST",
        "method": "bulkEdit",
        "resourceType": "sites",
        "resourceTypePath": "//advertisers/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.channels.sites.create": {
        "description": "Creates a site in a channel.",
        "flatPath": "v1/advertisers/{advertiserId}/channels/{channelsId}/sites",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sites",
        "resourceTypePath": "//advertisers/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.channels.sites.delete": {
        "description": "Deletes a site from a channel.",
        "flatPath": "v1/advertisers/{advertiserId}/channels/{channelsId}/sites/{sitesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sites",
        "resourceTypePath": "//advertisers/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.channels.sites.list": {
        "description": "Lists sites in a channel.",
        "flatPath": "v1/advertisers/{advertisersId}/channels/{channelsId}/sites",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sites",
        "resourceTypePath": "//advertisers/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.channels.sites.replace": {
        "description": "Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites.",
        "flatPath": "v1/advertisers/{advertiserId}/channels/{channelsId}/sites:replace",
        "httpMethod": "POST",
        "method": "replace",
        "resourceType": "sites",
        "resourceTypePath": "//advertisers/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.create": {
        "description": "Creates a new advertiser. Returns the newly created advertiser if successful. This method can take up to 180 seconds to complete.",
        "flatPath": "v1/advertisers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.creatives.create": {
        "description": "Creates a new creative. Returns the newly created creative if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/creatives",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "creatives",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.creatives.delete": {
        "description": "Deletes a creative. Returns error code `NOT_FOUND` if the creative does not exist. The creative should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, before it can be deleted.",
        "flatPath": "v1/advertisers/{advertisersId}/creatives/{creativesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "creatives",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.creatives.get": {
        "description": "Gets a creative.",
        "flatPath": "v1/advertisers/{advertisersId}/creatives/{creativesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "creatives",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.creatives.list": {
        "description": "Lists creatives in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, creatives with `ENTITY_STATUS_ARCHIVED` will not be included in the results.",
        "flatPath": "v1/advertisers/{advertisersId}/creatives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creatives",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.creatives.patch": {
        "description": "Updates an existing creative. Returns the updated creative if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/creatives/{creativesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "creatives",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.delete": {
        "description": "Deletes an advertiser. Deleting an advertiser will delete all of its child resources, for example, campaigns, insertion orders and line items. A deleted advertiser cannot be recovered.",
        "flatPath": "v1/advertisers/{advertisersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.get": {
        "description": "Gets an advertiser.",
        "flatPath": "v1/advertisers/{advertisersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.insertionOrders.bulkListInsertionOrderAssignedTargetingOptions": {
        "description": "Lists assigned targeting options of an insertion order across targeting types.",
        "flatPath": "v1/advertisers/{advertisersId}/insertionOrders/{insertionOrdersId}:bulkListInsertionOrderAssignedTargetingOptions",
        "httpMethod": "GET",
        "method": "bulkListInsertionOrderAssignedTargetingOptions",
        "resourceType": "insertionOrders",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.insertionOrders.create": {
        "description": "Creates a new insertion order. Returns the newly created insertion order if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/insertionOrders",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "insertionOrders",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.insertionOrders.delete": {
        "description": "Deletes an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist. The insertion order should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it.",
        "flatPath": "v1/advertisers/{advertisersId}/insertionOrders/{insertionOrdersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "insertionOrders",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.insertionOrders.get": {
        "description": "Gets an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist.",
        "flatPath": "v1/advertisers/{advertisersId}/insertionOrders/{insertionOrdersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "insertionOrders",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.insertionOrders.list": {
        "description": "Lists insertion orders in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, insertion orders with `ENTITY_STATUS_ARCHIVED` will not be included in the results.",
        "flatPath": "v1/advertisers/{advertisersId}/insertionOrders",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "insertionOrders",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.insertionOrders.patch": {
        "description": "Updates an existing insertion order. Returns the updated insertion order if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/insertionOrders/{insertionOrdersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "insertionOrders",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.insertionOrders.targetingTypes.assignedTargetingOptions.get": {
        "description": "Gets a single targeting option assigned to an insertion order.",
        "flatPath": "v1/advertisers/{advertisersId}/insertionOrders/{insertionOrdersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions/{assignedTargetingOptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/insertionOrders/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.insertionOrders.targetingTypes.assignedTargetingOptions.list": {
        "description": "Lists the targeting options assigned to an insertion order.",
        "flatPath": "v1/advertisers/{advertisersId}/insertionOrders/{insertionOrdersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/insertionOrders/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.invoices.list": {
        "description": "Lists invoices posted for an advertiser in a given month. Invoices generated by billing profiles with a \"Partner\" invoice level are not retrievable through this method.",
        "flatPath": "v1/advertisers/{advertisersId}/invoices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "invoices",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.invoices.lookupInvoiceCurrency": {
        "description": "Retrieves the invoice currency used by an advertiser in a given month.",
        "flatPath": "v1/advertisers/{advertisersId}/invoices:lookupInvoiceCurrency",
        "httpMethod": "GET",
        "method": "lookupInvoiceCurrency",
        "resourceType": "invoices",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.bulkEditLineItemAssignedTargetingOptions": {
        "description": "Bulk edits targeting options under a single line item. The operation will delete the assigned targeting options provided in BulkEditLineItemAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditLineItemAssignedTargetingOptionsRequest.create_requests .",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems/{lineItemsId}:bulkEditLineItemAssignedTargetingOptions",
        "httpMethod": "POST",
        "method": "bulkEditLineItemAssignedTargetingOptions",
        "resourceType": "lineItems",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.bulkListLineItemAssignedTargetingOptions": {
        "description": "Lists assigned targeting options of a line item across targeting types.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems/{lineItemsId}:bulkListLineItemAssignedTargetingOptions",
        "httpMethod": "GET",
        "method": "bulkListLineItemAssignedTargetingOptions",
        "resourceType": "lineItems",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.create": {
        "description": "Creates a new line item. Returns the newly created line item if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "lineItems",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.delete": {
        "description": "Deletes a line item. Returns error code `NOT_FOUND` if the line item does not exist. The line item should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems/{lineItemsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "lineItems",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.generateDefault": {
        "description": "Creates a new line item with settings (including targeting) inherited from the insertion order and an `ENTITY_STATUS_DRAFT` entity_status. Returns the newly created line item if successful. There are default values based on the three fields: * The insertion order's insertion_order_type * The insertion order's automation_type * The given line_item_type",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems:generateDefault",
        "httpMethod": "POST",
        "method": "generateDefault",
        "resourceType": "lineItems",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.get": {
        "description": "Gets a line item.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems/{lineItemsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "lineItems",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.list": {
        "description": "Lists line items in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, line items with `ENTITY_STATUS_ARCHIVED` will not be included in the results.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "lineItems",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.patch": {
        "description": "Updates an existing line item. Returns the updated line item if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems/{lineItemsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "lineItems",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.targetingTypes.assignedTargetingOptions.create": {
        "description": "Assigns a targeting option to a line item. Returns the assigned targeting option if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems/{lineItemsId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/lineItems/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.targetingTypes.assignedTargetingOptions.delete": {
        "description": "Deletes an assigned targeting option from a line item.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems/{lineItemsId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions/{assignedTargetingOptionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/lineItems/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.targetingTypes.assignedTargetingOptions.get": {
        "description": "Gets a single targeting option assigned to a line item.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems/{lineItemsId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions/{assignedTargetingOptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/lineItems/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.lineItems.targetingTypes.assignedTargetingOptions.list": {
        "description": "Lists the targeting options assigned to a line item.",
        "flatPath": "v1/advertisers/{advertisersId}/lineItems/{lineItemsId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/lineItems/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.list": {
        "description": "Lists advertisers that are accessible to the current user. The order is defined by the order_by parameter. A single partner_id is required. Cross-partner listing is not supported.",
        "flatPath": "v1/advertisers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.locationLists.assignedLocations.bulkEdit": {
        "description": "Bulk edits multiple assignments between locations and a single location list. The operation will delete the assigned locations provided in BulkEditAssignedLocationsRequest.deleted_assigned_locations and then create the assigned locations provided in BulkEditAssignedLocationsRequest.created_assigned_locations.",
        "flatPath": "v1/advertisers/{advertiserId}/locationLists/{locationListsId}/assignedLocations:bulkEdit",
        "httpMethod": "POST",
        "method": "bulkEdit",
        "resourceType": "assignedLocations",
        "resourceTypePath": "//advertisers/locationLists",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.locationLists.assignedLocations.create": {
        "description": "Creates an assignment between a location and a location list.",
        "flatPath": "v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "assignedLocations",
        "resourceTypePath": "//advertisers/locationLists",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.locationLists.assignedLocations.delete": {
        "description": "Deletes the assignment between a location and a location list.",
        "flatPath": "v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{assignedLocationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "assignedLocations",
        "resourceTypePath": "//advertisers/locationLists",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.locationLists.assignedLocations.list": {
        "description": "Lists locations assigned to a location list.",
        "flatPath": "v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assignedLocations",
        "resourceTypePath": "//advertisers/locationLists",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.locationLists.create": {
        "description": "Creates a new location list. Returns the newly created location list if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/locationLists",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "locationLists",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.locationLists.get": {
        "description": "Gets a location list.",
        "flatPath": "v1/advertisers/{advertisersId}/locationLists/{locationListsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locationLists",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.locationLists.list": {
        "description": "Lists location lists based on a given advertiser id.",
        "flatPath": "v1/advertisers/{advertisersId}/locationLists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locationLists",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.locationLists.patch": {
        "description": "Updates a location list. Returns the updated location list if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/locationLists/{locationListId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "locationLists",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.manualTriggers.activate": {
        "description": "Activates a manual trigger. Each activation of the manual trigger must be at least 5 minutes apart, otherwise an error will be returned.",
        "flatPath": "v1/advertisers/{advertisersId}/manualTriggers/{manualTriggersId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "manualTriggers",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.manualTriggers.create": {
        "description": "Creates a new manual trigger. Returns the newly created manual trigger if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/manualTriggers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "manualTriggers",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.manualTriggers.deactivate": {
        "description": "Deactivates a manual trigger.",
        "flatPath": "v1/advertisers/{advertisersId}/manualTriggers/{manualTriggersId}:deactivate",
        "httpMethod": "POST",
        "method": "deactivate",
        "resourceType": "manualTriggers",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.manualTriggers.get": {
        "description": "Gets a manual trigger.",
        "flatPath": "v1/advertisers/{advertisersId}/manualTriggers/{manualTriggersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "manualTriggers",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.manualTriggers.list": {
        "description": "Lists manual triggers that are accessible to the current user for a given advertiser ID. The order is defined by the order_by parameter. A single advertiser_id is required.",
        "flatPath": "v1/advertisers/{advertisersId}/manualTriggers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "manualTriggers",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.manualTriggers.patch": {
        "description": "Updates a manual trigger. Returns the updated manual trigger if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/manualTriggers/{manualTriggersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "manualTriggers",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.create": {
        "description": "Creates a new negative keyword list. Returns the newly created negative keyword list if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/negativeKeywordLists",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "negativeKeywordLists",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.delete": {
        "description": "Deletes a negative keyword list given an advertiser ID and a negative keyword list ID.",
        "flatPath": "v1/advertisers/{advertisersId}/negativeKeywordLists/{negativeKeywordListsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "negativeKeywordLists",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.get": {
        "description": "Gets a negative keyword list given an advertiser ID and a negative keyword list ID.",
        "flatPath": "v1/advertisers/{advertisersId}/negativeKeywordLists/{negativeKeywordListsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "negativeKeywordLists",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.list": {
        "description": "Lists negative keyword lists based on a given advertiser id.",
        "flatPath": "v1/advertisers/{advertisersId}/negativeKeywordLists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "negativeKeywordLists",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.negativeKeywords.bulkEdit": {
        "description": "Bulk edits negative keywords in a single negative keyword list. The operation will delete the negative keywords provided in BulkEditNegativeKeywordsRequest.deleted_negative_keywords and then create the negative keywords provided in BulkEditNegativeKeywordsRequest.created_negative_keywords. This operation is guaranteed to be atomic and will never result in a partial success or partial failure.",
        "flatPath": "v1/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListsId}/negativeKeywords:bulkEdit",
        "httpMethod": "POST",
        "method": "bulkEdit",
        "resourceType": "negativeKeywords",
        "resourceTypePath": "//advertisers/negativeKeywordLists",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.negativeKeywords.create": {
        "description": "Creates a negative keyword in a negative keyword list.",
        "flatPath": "v1/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListsId}/negativeKeywords",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "negativeKeywords",
        "resourceTypePath": "//advertisers/negativeKeywordLists",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.negativeKeywords.delete": {
        "description": "Deletes a negative keyword from a negative keyword list.",
        "flatPath": "v1/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListsId}/negativeKeywords/{negativeKeywordsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "negativeKeywords",
        "resourceTypePath": "//advertisers/negativeKeywordLists",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.negativeKeywords.list": {
        "description": "Lists negative keywords in a negative keyword list.",
        "flatPath": "v1/advertisers/{advertisersId}/negativeKeywordLists/{negativeKeywordListsId}/negativeKeywords",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "negativeKeywords",
        "resourceTypePath": "//advertisers/negativeKeywordLists",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.negativeKeywords.replace": {
        "description": "Replaces all negative keywords in a single negative keyword list. The operation will replace the keywords in a negative keyword list with keywords provided in ReplaceNegativeKeywordsRequest.new_negative_keywords.",
        "flatPath": "v1/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListsId}/negativeKeywords:replace",
        "httpMethod": "POST",
        "method": "replace",
        "resourceType": "negativeKeywords",
        "resourceTypePath": "//advertisers/negativeKeywordLists",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.negativeKeywordLists.patch": {
        "description": "Updates a negative keyword list. Returns the updated negative keyword list if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/negativeKeywordLists/{negativeKeywordListId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "negativeKeywordLists",
        "resourceTypePath": "//advertisers",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.patch": {
        "description": "Updates an existing advertiser. Returns the updated advertiser if successful.",
        "flatPath": "v1/advertisers/{advertisersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "advertisers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.targetingTypes.assignedTargetingOptions.create": {
        "description": "Assigns a targeting option to an advertiser. Returns the assigned targeting option if successful.",
        "flatPath": "v1/advertisers/{advertisersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.targetingTypes.assignedTargetingOptions.delete": {
        "description": "Deletes an assigned targeting option from an advertiser.",
        "flatPath": "v1/advertisers/{advertisersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions/{assignedTargetingOptionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.targetingTypes.assignedTargetingOptions.get": {
        "description": "Gets a single targeting option assigned to an advertiser.",
        "flatPath": "v1/advertisers/{advertisersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions/{assignedTargetingOptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.advertisers.targetingTypes.assignedTargetingOptions.list": {
        "description": "Lists the targeting options assigned to an advertiser.",
        "flatPath": "v1/advertisers/{advertisersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//advertisers/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.combinedAudiences.get": {
        "description": "Gets a combined audience.",
        "flatPath": "v1/combinedAudiences/{combinedAudiencesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "combinedAudiences",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.combinedAudiences.list": {
        "description": "Lists combined audiences. The order is defined by the order_by parameter.",
        "flatPath": "v1/combinedAudiences",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "combinedAudiences",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customBiddingAlgorithms.create": {
        "description": "Creates a new custom bidding algorithm. Returns the newly created custom bidding algorithm if successful.",
        "flatPath": "v1/customBiddingAlgorithms",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "customBiddingAlgorithms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customBiddingAlgorithms.get": {
        "description": "Gets a custom bidding algorithm.",
        "flatPath": "v1/customBiddingAlgorithms/{customBiddingAlgorithmsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customBiddingAlgorithms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customBiddingAlgorithms.list": {
        "description": "Lists custom bidding algorithms that are accessible to the current user and can be used in bidding stratgies. The order is defined by the order_by parameter.",
        "flatPath": "v1/customBiddingAlgorithms",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customBiddingAlgorithms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customBiddingAlgorithms.patch": {
        "description": "Updates an existing custom bidding algorithm. Returns the updated custom bidding algorithm if successful.",
        "flatPath": "v1/customBiddingAlgorithms/{customBiddingAlgorithmsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customBiddingAlgorithms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customBiddingAlgorithms.scripts.create": {
        "description": "Creates a new custom bidding script. Returns the newly created script if successful.",
        "flatPath": "v1/customBiddingAlgorithms/{customBiddingAlgorithmsId}/scripts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "scripts",
        "resourceTypePath": "//customBiddingAlgorithms",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customBiddingAlgorithms.scripts.get": {
        "description": "Gets a custom bidding script.",
        "flatPath": "v1/customBiddingAlgorithms/{customBiddingAlgorithmsId}/scripts/{scriptsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "scripts",
        "resourceTypePath": "//customBiddingAlgorithms",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customBiddingAlgorithms.scripts.list": {
        "description": "Lists custom bidding scripts that belong to the given algorithm. The order is defined by the order_by parameter.",
        "flatPath": "v1/customBiddingAlgorithms/{customBiddingAlgorithmsId}/scripts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "scripts",
        "resourceTypePath": "//customBiddingAlgorithms",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customBiddingAlgorithms.uploadScript": {
        "description": "Creates a custom bidding script reference object for a script file. The resulting reference object provides a resource path to which the script file should be uploaded. This reference object should be included in when creating a new custom bidding script object.",
        "flatPath": "v1/customBiddingAlgorithms/{customBiddingAlgorithmsId}:uploadScript",
        "httpMethod": "GET",
        "method": "uploadScript",
        "resourceType": "customBiddingAlgorithms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customLists.get": {
        "description": "Gets a custom list.",
        "flatPath": "v1/customLists/{customListsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customLists",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.customLists.list": {
        "description": "Lists custom lists. The order is defined by the order_by parameter.",
        "flatPath": "v1/customLists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customLists",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.firstAndThirdPartyAudiences.get": {
        "description": "Gets a first and third party audience.",
        "flatPath": "v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudiencesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "firstAndThirdPartyAudiences",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.firstAndThirdPartyAudiences.list": {
        "description": "Lists first and third party audiences. The order is defined by the order_by parameter.",
        "flatPath": "v1/firstAndThirdPartyAudiences",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "firstAndThirdPartyAudiences",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.floodlightGroups.get": {
        "description": "Gets a Floodlight group.",
        "flatPath": "v1/floodlightGroups/{floodlightGroupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "floodlightGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.floodlightGroups.patch": {
        "description": "Updates an existing Floodlight group. Returns the updated Floodlight group if successful.",
        "flatPath": "v1/floodlightGroups/{floodlightGroupId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "floodlightGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.googleAudiences.get": {
        "description": "Gets a Google audience.",
        "flatPath": "v1/googleAudiences/{googleAudiencesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "googleAudiences",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.googleAudiences.list": {
        "description": "Lists Google audiences. The order is defined by the order_by parameter.",
        "flatPath": "v1/googleAudiences",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "googleAudiences",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySourceGroups.assignedInventorySources.bulkEdit": {
        "description": "Bulk edits multiple assignments between inventory sources and a single inventory source group. The operation will delete the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.deleted_assigned_inventory_sources and then create the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.created_assigned_inventory_sources.",
        "flatPath": "v1/inventorySourceGroups/{inventorySourceGroupsId}/assignedInventorySources:bulkEdit",
        "httpMethod": "POST",
        "method": "bulkEdit",
        "resourceType": "assignedInventorySources",
        "resourceTypePath": "//inventorySourceGroups",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySourceGroups.assignedInventorySources.create": {
        "description": "Creates an assignment between an inventory source and an inventory source group.",
        "flatPath": "v1/inventorySourceGroups/{inventorySourceGroupsId}/assignedInventorySources",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "assignedInventorySources",
        "resourceTypePath": "//inventorySourceGroups",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySourceGroups.assignedInventorySources.delete": {
        "description": "Deletes the assignment between an inventory source and an inventory source group.",
        "flatPath": "v1/inventorySourceGroups/{inventorySourceGroupsId}/assignedInventorySources/{assignedInventorySourcesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "assignedInventorySources",
        "resourceTypePath": "//inventorySourceGroups",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySourceGroups.assignedInventorySources.list": {
        "description": "Lists inventory sources assigned to an inventory source group.",
        "flatPath": "v1/inventorySourceGroups/{inventorySourceGroupsId}/assignedInventorySources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assignedInventorySources",
        "resourceTypePath": "//inventorySourceGroups",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySourceGroups.create": {
        "description": "Creates a new inventory source group. Returns the newly created inventory source group if successful.",
        "flatPath": "v1/inventorySourceGroups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "inventorySourceGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySourceGroups.delete": {
        "description": "Deletes an inventory source group.",
        "flatPath": "v1/inventorySourceGroups/{inventorySourceGroupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "inventorySourceGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySourceGroups.get": {
        "description": "Gets an inventory source group.",
        "flatPath": "v1/inventorySourceGroups/{inventorySourceGroupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "inventorySourceGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySourceGroups.list": {
        "description": "Lists inventory source groups that are accessible to the current user. The order is defined by the order_by parameter.",
        "flatPath": "v1/inventorySourceGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "inventorySourceGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySourceGroups.patch": {
        "description": "Updates an inventory source group. Returns the updated inventory source group if successful.",
        "flatPath": "v1/inventorySourceGroups/{inventorySourceGroupId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "inventorySourceGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySources.get": {
        "description": "Gets an inventory source.",
        "flatPath": "v1/inventorySources/{inventorySourcesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "inventorySources",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.inventorySources.list": {
        "description": "Lists inventory sources that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, inventory sources with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results.",
        "flatPath": "v1/inventorySources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "inventorySources",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.media.download": {
        "description": "Downloads media. Download is supported on the URI `/download/{resource_name=**}?alt=media.` **Note**: Download requests will not be successful without including `alt=media` query string.",
        "flatPath": "download/{downloadId}",
        "httpMethod": "GET",
        "method": "download",
        "resourceType": "media",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.media.upload": {
        "description": "Uploads media. Upload is supported on the URI `/upload/media/{resource_name=**}?upload_type=media.` **Note**: Upload requests will not be successful without including `upload_type=media` query string.",
        "flatPath": "media/{mediaId}",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "media",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.bulkEditPartnerAssignedTargetingOptions": {
        "description": "Bulk edits targeting options under a single partner. The operation will delete the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.deleteRequests and then create the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.createRequests .",
        "flatPath": "v1/partners/{partnersId}:bulkEditPartnerAssignedTargetingOptions",
        "httpMethod": "POST",
        "method": "bulkEditPartnerAssignedTargetingOptions",
        "resourceType": "partners",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.channels.create": {
        "description": "Creates a new channel. Returns the newly created channel if successful.",
        "flatPath": "v1/partners/{partnersId}/channels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "channels",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.channels.get": {
        "description": "Gets a channel for a partner or advertiser.",
        "flatPath": "v1/partners/{partnersId}/channels/{channelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "channels",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.channels.list": {
        "description": "Lists channels for a partner or advertiser.",
        "flatPath": "v1/partners/{partnersId}/channels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "channels",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.channels.patch": {
        "description": "Updates a channel. Returns the updated channel if successful.",
        "flatPath": "v1/partners/{partnersId}/channels/{channelId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "channels",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.channels.sites.bulkEdit": {
        "description": "Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.",
        "flatPath": "v1/partners/{partnerId}/channels/{channelsId}/sites:bulkEdit",
        "httpMethod": "POST",
        "method": "bulkEdit",
        "resourceType": "sites",
        "resourceTypePath": "//partners/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.channels.sites.create": {
        "description": "Creates a site in a channel.",
        "flatPath": "v1/partners/{partnerId}/channels/{channelsId}/sites",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sites",
        "resourceTypePath": "//partners/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.channels.sites.delete": {
        "description": "Deletes a site from a channel.",
        "flatPath": "v1/partners/{partnerId}/channels/{channelsId}/sites/{sitesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sites",
        "resourceTypePath": "//partners/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.channels.sites.list": {
        "description": "Lists sites in a channel.",
        "flatPath": "v1/partners/{partnersId}/channels/{channelsId}/sites",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sites",
        "resourceTypePath": "//partners/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.channels.sites.replace": {
        "description": "Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites.",
        "flatPath": "v1/partners/{partnerId}/channels/{channelsId}/sites:replace",
        "httpMethod": "POST",
        "method": "replace",
        "resourceType": "sites",
        "resourceTypePath": "//partners/channels",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.get": {
        "description": "Gets a partner.",
        "flatPath": "v1/partners/{partnersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "partners",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.list": {
        "description": "Lists partners that are accessible to the current user. The order is defined by the order_by parameter.",
        "flatPath": "v1/partners",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "partners",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.targetingTypes.assignedTargetingOptions.create": {
        "description": "Assigns a targeting option to a partner. Returns the assigned targeting option if successful.",
        "flatPath": "v1/partners/{partnersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//partners/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.targetingTypes.assignedTargetingOptions.delete": {
        "description": "Deletes an assigned targeting option from a partner.",
        "flatPath": "v1/partners/{partnersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions/{assignedTargetingOptionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//partners/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.targetingTypes.assignedTargetingOptions.get": {
        "description": "Gets a single targeting option assigned to a partner.",
        "flatPath": "v1/partners/{partnersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions/{assignedTargetingOptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//partners/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.partners.targetingTypes.assignedTargetingOptions.list": {
        "description": "Lists the targeting options assigned to a partner.",
        "flatPath": "v1/partners/{partnersId}/targetingTypes/{targetingTypesId}/assignedTargetingOptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assignedTargetingOptions",
        "resourceTypePath": "//partners/targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.sdfdownloadtasks.create": {
        "description": "Creates an SDF Download Task. Returns an Operation. An SDF Download Task is a long-running, asynchronous operation. The metadata type of this operation is SdfDownloadTaskMetadata. If the request is successful, the response type of the operation is SdfDownloadTask. The response will not include the download files, which must be retrieved with media.download. The state of operation can be retrieved with sdfdownloadtask.operations.get. Any errors can be found in the error.message. Note that error.details is expected to be empty.",
        "flatPath": "v1/sdfdownloadtasks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sdfdownloadtasks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.sdfdownloadtasks.operations.get": {
        "description": "Gets the latest state of an asynchronous SDF download task operation. Clients should poll this method at intervals of 30 seconds.",
        "flatPath": "v1/sdfdownloadtasks/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//sdfdownloadtasks",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.targetingTypes.targetingOptions.get": {
        "description": "Gets a single targeting option.",
        "flatPath": "v1/targetingTypes/{targetingTypesId}/targetingOptions/{targetingOptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetingOptions",
        "resourceTypePath": "//targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.targetingTypes.targetingOptions.list": {
        "description": "Lists targeting options of a given type.",
        "flatPath": "v1/targetingTypes/{targetingTypesId}/targetingOptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetingOptions",
        "resourceTypePath": "//targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.targetingTypes.targetingOptions.search": {
        "description": "Searches for targeting options of a given type based on the given search terms.",
        "flatPath": "v1/targetingTypes/{targetingTypesId}/targetingOptions:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "targetingOptions",
        "resourceTypePath": "//targetingTypes",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.users.bulkEditAssignedUserRoles": {
        "description": "Bulk edits user roles for a user. The operation will delete the assigned user roles provided in BulkEditAssignedUserRolesRequest.deletedAssignedUserRoles and then assign the user roles provided in BulkEditAssignedUserRolesRequest.createdAssignedUserRoles.",
        "flatPath": "v1/users/{usersId}:bulkEditAssignedUserRoles",
        "httpMethod": "POST",
        "method": "bulkEditAssignedUserRoles",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.users.create": {
        "description": "Creates a new user. Returns the newly created user if successful.",
        "flatPath": "v1/users",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.users.delete": {
        "description": "Deletes a user.",
        "flatPath": "v1/users/{usersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.users.get": {
        "description": "Gets a user.",
        "flatPath": "v1/users/{usersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.users.list": {
        "description": "Lists users that are accessible to the current user. If two users have user roles on the same partner or advertiser, they can access each other.",
        "flatPath": "v1/users",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "displayvideo.users.patch": {
        "description": "Updates an existing user. Returns the updated user if successful.",
        "flatPath": "v1/users/{usersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Display & Video 360 API"
  },
  "dlp": {
    "description": "Provides methods for detection, risk analysis, and de-identification of privacy-sensitive fragments in text, images, and Google Cloud Platform storage repositories.",
    "methods": {
      "dlp.infoTypes.list": {
        "description": "Returns a list of the sensitive information types that the DLP API supports. See https://cloud.google.com/dlp/docs/infotypes-reference to learn more.",
        "flatPath": "v2/infoTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "infoTypes",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "dlp.locations.infoTypes.list": {
        "description": "Returns a list of the sensitive information types that the DLP API supports. See https://cloud.google.com/dlp/docs/infotypes-reference to learn more.",
        "flatPath": "v2/locations/{locationsId}/infoTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "infoTypes",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.deidentifyTemplates.create": {
        "description": "Creates a DeidentifyTemplate for re-using frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/deidentifyTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.deidentifyTemplates.delete": {
        "description": "Deletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.deidentifyTemplates.get": {
        "description": "Gets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.deidentifyTemplates.list": {
        "description": "Lists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/deidentifyTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.deidentifyTemplates.patch": {
        "description": "Updates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.inspectTemplates.create": {
        "description": "Creates an InspectTemplate for re-using frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/inspectTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.inspectTemplates.delete": {
        "description": "Deletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.inspectTemplates.get": {
        "description": "Gets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.inspectTemplates.list": {
        "description": "Lists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/inspectTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.inspectTemplates.patch": {
        "description": "Updates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.deidentifyTemplates.create": {
        "description": "Creates a DeidentifyTemplate for re-using frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/deidentifyTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.deidentifyTemplates.delete": {
        "description": "Deletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.deidentifyTemplates.get": {
        "description": "Gets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.deidentifyTemplates.list": {
        "description": "Lists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/deidentifyTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.deidentifyTemplates.patch": {
        "description": "Updates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.dlpJobs.list": {
        "description": "Lists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/dlpJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.inspectTemplates.create": {
        "description": "Creates an InspectTemplate for re-using frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/inspectTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.inspectTemplates.delete": {
        "description": "Deletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.inspectTemplates.get": {
        "description": "Gets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.inspectTemplates.list": {
        "description": "Lists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/inspectTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.inspectTemplates.patch": {
        "description": "Updates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.jobTriggers.create": {
        "description": "Creates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/jobTriggers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.jobTriggers.delete": {
        "description": "Deletes a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/jobTriggers/{jobTriggersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.jobTriggers.get": {
        "description": "Gets a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/jobTriggers/{jobTriggersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.jobTriggers.list": {
        "description": "Lists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/jobTriggers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.jobTriggers.patch": {
        "description": "Updates a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/jobTriggers/{jobTriggersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.storedInfoTypes.create": {
        "description": "Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/storedInfoTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.storedInfoTypes.delete": {
        "description": "Deletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.storedInfoTypes.get": {
        "description": "Gets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.storedInfoTypes.list": {
        "description": "Lists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/storedInfoTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.locations.storedInfoTypes.patch": {
        "description": "Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.storedInfoTypes.create": {
        "description": "Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/storedInfoTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.storedInfoTypes.delete": {
        "description": "Deletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.storedInfoTypes.get": {
        "description": "Gets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.storedInfoTypes.list": {
        "description": "Lists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/storedInfoTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.organizations.storedInfoTypes.patch": {
        "description": "Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/organizations/{organizationsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.content.deidentify": {
        "description": "De-identifies potentially sensitive info from a ContentItem. This method has limits on input size and output size. See https://cloud.google.com/dlp/docs/deidentify-sensitive-data to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.",
        "flatPath": "v2/projects/{projectsId}/content:deidentify",
        "httpMethod": "POST",
        "method": "deidentify",
        "resourceType": "content",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.content.inspect": {
        "description": "Finds potentially sensitive info in content. This method has limits on input size, processing time, and output size. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. For how to guides, see https://cloud.google.com/dlp/docs/inspecting-images and https://cloud.google.com/dlp/docs/inspecting-text,",
        "flatPath": "v2/projects/{projectsId}/content:inspect",
        "httpMethod": "POST",
        "method": "inspect",
        "resourceType": "content",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.content.reidentify": {
        "description": "Re-identifies content that has been de-identified. See https://cloud.google.com/dlp/docs/pseudonymization#re-identification_in_free_text_code_example to learn more.",
        "flatPath": "v2/projects/{projectsId}/content:reidentify",
        "httpMethod": "POST",
        "method": "reidentify",
        "resourceType": "content",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.deidentifyTemplates.create": {
        "description": "Creates a DeidentifyTemplate for re-using frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/deidentifyTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.deidentifyTemplates.delete": {
        "description": "Deletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.deidentifyTemplates.get": {
        "description": "Gets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.deidentifyTemplates.list": {
        "description": "Lists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/deidentifyTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.deidentifyTemplates.patch": {
        "description": "Updates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.dlpJobs.cancel": {
        "description": "Starts asynchronous cancellation on a long-running DlpJob. The server makes a best effort to cancel the DlpJob, but success is not guaranteed. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.",
        "flatPath": "v2/projects/{projectsId}/dlpJobs/{dlpJobsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.dlpJobs.create": {
        "description": "Creates a new job to inspect storage or calculate risk metrics. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more. When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.",
        "flatPath": "v2/projects/{projectsId}/dlpJobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.dlpJobs.delete": {
        "description": "Deletes a long-running DlpJob. This method indicates that the client is no longer interested in the DlpJob result. The job will be cancelled if possible. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.",
        "flatPath": "v2/projects/{projectsId}/dlpJobs/{dlpJobsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.dlpJobs.get": {
        "description": "Gets the latest state of a long-running DlpJob. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.",
        "flatPath": "v2/projects/{projectsId}/dlpJobs/{dlpJobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.dlpJobs.list": {
        "description": "Lists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.",
        "flatPath": "v2/projects/{projectsId}/dlpJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.image.redact": {
        "description": "Redacts potentially sensitive info from an image. This method has limits on input size, processing time, and output size. See https://cloud.google.com/dlp/docs/redacting-sensitive-data-images to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.",
        "flatPath": "v2/projects/{projectsId}/image:redact",
        "httpMethod": "POST",
        "method": "redact",
        "resourceType": "image",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.inspectTemplates.create": {
        "description": "Creates an InspectTemplate for re-using frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/inspectTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.inspectTemplates.delete": {
        "description": "Deletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.inspectTemplates.get": {
        "description": "Gets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.inspectTemplates.list": {
        "description": "Lists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/inspectTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.inspectTemplates.patch": {
        "description": "Updates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.jobTriggers.activate": {
        "description": "Activate a job trigger. Causes the immediate execute of a trigger instead of waiting on the trigger event to occur.",
        "flatPath": "v2/projects/{projectsId}/jobTriggers/{jobTriggersId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.jobTriggers.create": {
        "description": "Creates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/jobTriggers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.jobTriggers.delete": {
        "description": "Deletes a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/jobTriggers/{jobTriggersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.jobTriggers.get": {
        "description": "Gets a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/jobTriggers/{jobTriggersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.jobTriggers.list": {
        "description": "Lists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/jobTriggers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.jobTriggers.patch": {
        "description": "Updates a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/jobTriggers/{jobTriggersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.content.deidentify": {
        "description": "De-identifies potentially sensitive info from a ContentItem. This method has limits on input size and output size. See https://cloud.google.com/dlp/docs/deidentify-sensitive-data to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/content:deidentify",
        "httpMethod": "POST",
        "method": "deidentify",
        "resourceType": "content",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.content.inspect": {
        "description": "Finds potentially sensitive info in content. This method has limits on input size, processing time, and output size. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. For how to guides, see https://cloud.google.com/dlp/docs/inspecting-images and https://cloud.google.com/dlp/docs/inspecting-text,",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/content:inspect",
        "httpMethod": "POST",
        "method": "inspect",
        "resourceType": "content",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.content.reidentify": {
        "description": "Re-identifies content that has been de-identified. See https://cloud.google.com/dlp/docs/pseudonymization#re-identification_in_free_text_code_example to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/content:reidentify",
        "httpMethod": "POST",
        "method": "reidentify",
        "resourceType": "content",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.deidentifyTemplates.create": {
        "description": "Creates a DeidentifyTemplate for re-using frequently used configuration for de-identifying content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/deidentifyTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.deidentifyTemplates.delete": {
        "description": "Deletes a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.deidentifyTemplates.get": {
        "description": "Gets a DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.deidentifyTemplates.list": {
        "description": "Lists DeidentifyTemplates. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/deidentifyTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.deidentifyTemplates.patch": {
        "description": "Updates the DeidentifyTemplate. See https://cloud.google.com/dlp/docs/creating-templates-deid to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/deidentifyTemplates/{deidentifyTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deidentifyTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.dlpJobs.cancel": {
        "description": "Starts asynchronous cancellation on a long-running DlpJob. The server makes a best effort to cancel the DlpJob, but success is not guaranteed. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/dlpJobs/{dlpJobsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.dlpJobs.create": {
        "description": "Creates a new job to inspect storage or calculate risk metrics. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more. When no InfoTypes or CustomInfoTypes are specified in inspect jobs, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/dlpJobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.dlpJobs.delete": {
        "description": "Deletes a long-running DlpJob. This method indicates that the client is no longer interested in the DlpJob result. The job will be cancelled if possible. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/dlpJobs/{dlpJobsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.dlpJobs.finish": {
        "description": "Finish a running hybrid DlpJob. Triggers the finalization steps and running of any enabled actions that have not yet run.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/dlpJobs/{dlpJobsId}:finish",
        "httpMethod": "POST",
        "method": "finish",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.dlpJobs.get": {
        "description": "Gets the latest state of a long-running DlpJob. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/dlpJobs/{dlpJobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.dlpJobs.hybridInspect": {
        "description": "Inspect hybrid content and store findings to a job. To review the findings, inspect the job. Inspection will occur asynchronously.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/dlpJobs/{dlpJobsId}:hybridInspect",
        "httpMethod": "POST",
        "method": "hybridInspect",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.dlpJobs.list": {
        "description": "Lists DlpJobs that match the specified filter in the request. See https://cloud.google.com/dlp/docs/inspecting-storage and https://cloud.google.com/dlp/docs/compute-risk-analysis to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/dlpJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dlpJobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.image.redact": {
        "description": "Redacts potentially sensitive info from an image. This method has limits on input size, processing time, and output size. See https://cloud.google.com/dlp/docs/redacting-sensitive-data-images to learn more. When no InfoTypes or CustomInfoTypes are specified in this request, the system will automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/image:redact",
        "httpMethod": "POST",
        "method": "redact",
        "resourceType": "image",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.inspectTemplates.create": {
        "description": "Creates an InspectTemplate for re-using frequently used configuration for inspecting content, images, and storage. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/inspectTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.inspectTemplates.delete": {
        "description": "Deletes an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.inspectTemplates.get": {
        "description": "Gets an InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.inspectTemplates.list": {
        "description": "Lists InspectTemplates. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/inspectTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.inspectTemplates.patch": {
        "description": "Updates the InspectTemplate. See https://cloud.google.com/dlp/docs/creating-templates to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/inspectTemplates/{inspectTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "inspectTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.jobTriggers.activate": {
        "description": "Activate a job trigger. Causes the immediate execute of a trigger instead of waiting on the trigger event to occur.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/jobTriggers/{jobTriggersId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.jobTriggers.create": {
        "description": "Creates a job trigger to run DLP actions such as scanning storage for sensitive information on a set schedule. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/jobTriggers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.jobTriggers.delete": {
        "description": "Deletes a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/jobTriggers/{jobTriggersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.jobTriggers.get": {
        "description": "Gets a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/jobTriggers/{jobTriggersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.jobTriggers.hybridInspect": {
        "description": "Inspect hybrid content and store findings to a trigger. The inspection will be processed asynchronously. To review the findings monitor the jobs within the trigger.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/jobTriggers/{jobTriggersId}:hybridInspect",
        "httpMethod": "POST",
        "method": "hybridInspect",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.jobTriggers.list": {
        "description": "Lists job triggers. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/jobTriggers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.jobTriggers.patch": {
        "description": "Updates a job trigger. See https://cloud.google.com/dlp/docs/creating-job-triggers to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/jobTriggers/{jobTriggersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "jobTriggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.storedInfoTypes.create": {
        "description": "Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/storedInfoTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.storedInfoTypes.delete": {
        "description": "Deletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.storedInfoTypes.get": {
        "description": "Gets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.storedInfoTypes.list": {
        "description": "Lists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/storedInfoTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.locations.storedInfoTypes.patch": {
        "description": "Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.storedInfoTypes.create": {
        "description": "Creates a pre-built stored infoType to be used for inspection. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/storedInfoTypes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.storedInfoTypes.delete": {
        "description": "Deletes a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.storedInfoTypes.get": {
        "description": "Gets a stored infoType. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.storedInfoTypes.list": {
        "description": "Lists stored infoTypes. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/storedInfoTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "dlp.projects.storedInfoTypes.patch": {
        "description": "Updates the stored infoType by creating a new version. The existing version will continue to be used until the new version is ready. See https://cloud.google.com/dlp/docs/creating-stored-infotypes to learn more.",
        "flatPath": "v2/projects/{projectsId}/storedInfoTypes/{storedInfoTypesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "storedInfoTypes",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Cloud Data Loss Prevention (DLP) API"
  },
  "dns": {
    "description": "",
    "methods": {
      "dns.changes.create": {
        "description": "Atomically updates the ResourceRecordSet collection.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "changes",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.changes.get": {
        "description": "Fetches the representation of an existing Change.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes/{changeId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "changes",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.changes.list": {
        "description": "Enumerates Changes to a ResourceRecordSet collection.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "changes",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.dnsKeys.get": {
        "description": "Fetches the representation of an existing DnsKey.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dnsKeys",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.dnsKeys.list": {
        "description": "Enumerates DnsKeys to a ResourceRecordSet collection.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/dnsKeys",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dnsKeys",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.managedZoneOperations.get": {
        "description": "Fetches the representation of an existing Operation.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/operations/{operation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "managedZoneOperations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.managedZoneOperations.list": {
        "description": "Enumerates Operations for the given ManagedZone.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "managedZoneOperations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.managedZones.create": {
        "description": "Creates a new ManagedZone.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "managedZones",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.managedZones.delete": {
        "description": "Deletes a previously created ManagedZone.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "managedZones",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.managedZones.get": {
        "description": "Fetches the representation of an existing ManagedZone.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "managedZones",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.managedZones.list": {
        "description": "Enumerates ManagedZones that have been created but not yet deleted.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "managedZones",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.managedZones.patch": {
        "description": "Applies a partial update to an existing ManagedZone.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "managedZones",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.managedZones.update": {
        "description": "Updates an existing ManagedZone.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "managedZones",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.policies.create": {
        "description": "Creates a new Policy.",
        "flatPath": "dns/v1beta2/projects/{project}/policies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.policies.delete": {
        "description": "Deletes a previously created Policy. Fails if the policy is still being referenced by a network.",
        "flatPath": "dns/v1beta2/projects/{project}/policies/{policy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.policies.get": {
        "description": "Fetches the representation of an existing Policy.",
        "flatPath": "dns/v1beta2/projects/{project}/policies/{policy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.policies.list": {
        "description": "Enumerates all Policies associated with a project.",
        "flatPath": "dns/v1beta2/projects/{project}/policies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.policies.patch": {
        "description": "Applies a partial update to an existing Policy.",
        "flatPath": "dns/v1beta2/projects/{project}/policies/{policy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.policies.update": {
        "description": "Updates an existing Policy.",
        "flatPath": "dns/v1beta2/projects/{project}/policies/{policy}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.projects.get": {
        "description": "Fetches the representation of an existing Project.",
        "flatPath": "dns/v1beta2/projects/{project}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.resourceRecordSets.create": {
        "description": "Creates a new ResourceRecordSet.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "resourceRecordSets",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.resourceRecordSets.delete": {
        "description": "Deletes a previously created ResourceRecordSet.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets/{name}/{type}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "resourceRecordSets",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.resourceRecordSets.get": {
        "description": "Fetches the representation of an existing ResourceRecordSet.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets/{name}/{type}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "resourceRecordSets",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.resourceRecordSets.list": {
        "description": "Enumerates ResourceRecordSets that you have created but not yet deleted.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "resourceRecordSets",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.resourceRecordSets.patch": {
        "description": "Applies a partial update to an existing ResourceRecordSet.",
        "flatPath": "dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets/{name}/{type}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "resourceRecordSets",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "dns.responsePolicies.create": {
        "description": "Creates a new Response Policy",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "responsePolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicies.delete": {
        "description": "Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "responsePolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicies.get": {
        "description": "Fetches the representation of an existing Response Policy.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "responsePolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicies.list": {
        "description": "Enumerates all Response Policies associated with a project.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "responsePolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicies.patch": {
        "description": "Applies a partial update to an existing Response Policy.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "responsePolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicies.update": {
        "description": "Updates an existing Response Policy.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "responsePolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicyRules.create": {
        "description": "Creates a new Response Policy Rule.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "responsePolicyRules",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicyRules.delete": {
        "description": "Deletes a previously created Response Policy Rule.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "responsePolicyRules",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicyRules.get": {
        "description": "Fetches the representation of an existing Response Policy Rule.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "responsePolicyRules",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicyRules.list": {
        "description": "Enumerates all Response Policy Rules associated with a project.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "responsePolicyRules",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicyRules.patch": {
        "description": "Applies a partial update to an existing Response Policy Rule.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "responsePolicyRules",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "dns.responsePolicyRules.update": {
        "description": "Updates an existing Response Policy Rule.",
        "flatPath": "dns/v1beta2/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "responsePolicyRules",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud DNS API"
  },
  "docs": {
    "description": "Reads and writes Google Docs documents.",
    "methods": {
      "docs.documents.batchUpdate": {
        "description": "Applies one or more updates to the document. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies, the reply to the third request, and another empty reply, in that order. Because other users may be editing the document, the document might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the document should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.",
        "flatPath": "v1/documents/{documentId}:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "documents",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "docs.documents.create": {
        "description": "Creates a blank document using the title given in the request. Other fields in the request, including any provided content, are ignored. Returns the created document.",
        "flatPath": "v1/documents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "documents",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "docs.documents.get": {
        "description": "Gets the latest version of the specified document.",
        "flatPath": "v1/documents/{documentId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "documents",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Docs API"
  },
  "documentai": {
    "description": "Service to parse structured information from unstructured or semi-structured documents using state-of-the-art Google AI such as natural language, computer vision, translation, and AutoML.",
    "methods": {
      "documentai.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "documentai.projects.documents.batchProcess": {
        "description": "LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.",
        "flatPath": "v1beta2/projects/{projectsId}/documents:batchProcess",
        "httpMethod": "POST",
        "method": "batchProcess",
        "resourceType": "documents",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "documentai.projects.documents.process": {
        "description": "Processes a single document.",
        "flatPath": "v1beta2/projects/{projectsId}/documents:process",
        "httpMethod": "POST",
        "method": "process",
        "resourceType": "documents",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "documentai.projects.locations.documents.batchProcess": {
        "description": "LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/documents:batchProcess",
        "httpMethod": "POST",
        "method": "batchProcess",
        "resourceType": "documents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2"
        ]
      },
      "documentai.projects.locations.documents.process": {
        "description": "Processes a single document.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/documents:process",
        "httpMethod": "POST",
        "method": "process",
        "resourceType": "documents",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2"
        ]
      },
      "documentai.projects.locations.fetchProcessorTypes": {
        "description": "Fetches processor types.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}:fetchProcessorTypes",
        "httpMethod": "GET",
        "method": "fetchProcessorTypes",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta3/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.batchProcess": {
        "description": "LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}:batchProcess",
        "httpMethod": "POST",
        "method": "batchProcess",
        "resourceType": "processors",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.create": {
        "description": "Creates a processor from the type processor that the user chose. The processor will be at \"ENABLED\" state by default after its creation.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "processors",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.delete": {
        "description": "Deletes the processor, unloads all deployed model artifacts if it was enabled and then deletes all artifacts associated with this processor.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "processors",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.disable": {
        "description": "Disables a processor",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}:disable",
        "httpMethod": "POST",
        "method": "disable",
        "resourceType": "processors",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.enable": {
        "description": "Enables a processor",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}:enable",
        "httpMethod": "POST",
        "method": "enable",
        "resourceType": "processors",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.get": {
        "description": "Gets a processor detail.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "processors",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.humanReviewConfig.reviewDocument": {
        "description": "Send a document for Human Review. The input document should be processed by the specified processor.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}/humanReviewConfig:reviewDocument",
        "httpMethod": "POST",
        "method": "reviewDocument",
        "resourceType": "humanReviewConfig",
        "resourceTypePath": "//projects/locations/processors",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.list": {
        "description": "Lists all processors which belong to this project.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "processors",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.process": {
        "description": "Processes a single document.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}:process",
        "httpMethod": "POST",
        "method": "process",
        "resourceType": "processors",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.processorVersions.batchProcess": {
        "description": "LRO endpoint to batch process many documents. The output is written to Cloud Storage as JSON in the [Document] format.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}/processorVersions/{processorVersionsId}:batchProcess",
        "httpMethod": "POST",
        "method": "batchProcess",
        "resourceType": "processorVersions",
        "resourceTypePath": "//projects/locations/processors",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.processorVersions.delete": {
        "description": "Deletes the processor version, all artifacts under the processor version will be deleted.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}/processorVersions/{processorVersionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "processorVersions",
        "resourceTypePath": "//projects/locations/processors",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.processorVersions.deploy": {
        "description": "Deploys the processor version.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}/processorVersions/{processorVersionsId}:deploy",
        "httpMethod": "POST",
        "method": "deploy",
        "resourceType": "processorVersions",
        "resourceTypePath": "//projects/locations/processors",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.processorVersions.get": {
        "description": "Gets a processor version detail.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}/processorVersions/{processorVersionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "processorVersions",
        "resourceTypePath": "//projects/locations/processors",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.processorVersions.list": {
        "description": "Lists all versions of a processor.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}/processorVersions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "processorVersions",
        "resourceTypePath": "//projects/locations/processors",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.processorVersions.process": {
        "description": "Processes a single document.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}/processorVersions/{processorVersionsId}:process",
        "httpMethod": "POST",
        "method": "process",
        "resourceType": "processorVersions",
        "resourceTypePath": "//projects/locations/processors",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.processorVersions.undeploy": {
        "description": "Undeploys the processor version.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}/processorVersions/{processorVersionsId}:undeploy",
        "httpMethod": "POST",
        "method": "undeploy",
        "resourceType": "processorVersions",
        "resourceTypePath": "//projects/locations/processors",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.locations.processors.setDefaultProcessorVersion": {
        "description": "Set the default (active) version of a Processor that will be used in ProcessDocument and BatchProcessDocuments.",
        "flatPath": "v1beta3/projects/{projectsId}/locations/{locationsId}/processors/{processorsId}:setDefaultProcessorVersion",
        "httpMethod": "POST",
        "method": "setDefaultProcessorVersion",
        "resourceType": "processors",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta3",
          "v1"
        ]
      },
      "documentai.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta2/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "documentai.uiv1beta3.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "uiv1beta3/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//uiv1beta3/projects",
        "versions": [
          "v1"
        ]
      },
      "documentai.uiv1beta3.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "uiv1beta3/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//uiv1beta3/projects",
        "versions": [
          "v1"
        ]
      },
      "documentai.uiv1beta3.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "uiv1beta3/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//uiv1beta3/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "documentai.uiv1beta3.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "uiv1beta3/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//uiv1beta3/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "documentai.uiv1beta3.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "uiv1beta3/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//uiv1beta3/projects/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Document AI API"
  },
  "domains": {
    "description": "Enables management and configuration of domain names.",
    "methods": {
      "domains.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.configureContactSettings": {
        "description": "Updates a `Registration`'s contact settings. Some changes require confirmation by the domain's registrant contact .",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}:configureContactSettings",
        "httpMethod": "POST",
        "method": "configureContactSettings",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.configureDnsSettings": {
        "description": "Updates a `Registration`'s DNS settings.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}:configureDnsSettings",
        "httpMethod": "POST",
        "method": "configureDnsSettings",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.configureManagementSettings": {
        "description": "Updates a `Registration`'s management settings.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}:configureManagementSettings",
        "httpMethod": "POST",
        "method": "configureManagementSettings",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.delete": {
        "description": "Deletes a `Registration` resource. This method works on any `Registration` resource using [Subscription or Commitment billing](/domains/pricing#billing-models), provided that the resource was created at least 1 day in the past. For `Registration` resources using [Monthly billing](/domains/pricing#billing-models), this method works if: * `state` is `EXPORTED` with `expire_time` in the past * `state` is `REGISTRATION_FAILED` * `state` is `TRANSFER_FAILED` When an active registration is successfully deleted, you can continue to use the domain in [Google Domains](https://domains.google/) until it expires. The calling user becomes the domain's sole owner in Google Domains, and permissions for the domain are subsequently managed there. The domain does not renew automatically unless the new owner sets up billing in Google Domains.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.export": {
        "description": "Exports a `Registration` resource, such that it is no longer managed by Cloud Domains. When an active domain is successfully exported, you can continue to use the domain in [Google Domains](https://domains.google/) until it expires. The calling user becomes the domain's sole owner in Google Domains, and permissions for the domain are subsequently managed there. The domain does not renew automatically unless the new owner sets up billing in Google Domains.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.get": {
        "description": "Gets the details of a `Registration` resource.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.list": {
        "description": "Lists the `Registration` resources in a project.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.patch": {
        "description": "Updates select fields of a `Registration` resource, notably `labels`. To update other fields, use the appropriate custom update method: * To update management settings, see `ConfigureManagementSettings` * To update DNS configuration, see `ConfigureDnsSettings` * To update contact information, see `ConfigureContactSettings`",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.register": {
        "description": "Registers a new domain name and creates a corresponding `Registration` resource. Call `RetrieveRegisterParameters` first to check availability of the domain name and determine parameters like price that are needed to build a call to this method. A successful call creates a `Registration` resource in state `REGISTRATION_PENDING`, which resolves to `ACTIVE` within 1-2 minutes, indicating that the domain was successfully registered. If the resource ends up in state `REGISTRATION_FAILED`, it indicates that the domain was not registered successfully, and you can safely delete the resource and retry registration.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations:register",
        "httpMethod": "POST",
        "method": "register",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.resetAuthorizationCode": {
        "description": "Resets the authorization code of the `Registration` to a new random string. You can call this method only after 60 days have elapsed since the initial domain registration.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}:resetAuthorizationCode",
        "httpMethod": "POST",
        "method": "resetAuthorizationCode",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.retrieveAuthorizationCode": {
        "description": "Gets the authorization code of the `Registration` for the purpose of transferring the domain to another registrar. You can call this method only after 60 days have elapsed since the initial domain registration.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}:retrieveAuthorizationCode",
        "httpMethod": "GET",
        "method": "retrieveAuthorizationCode",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.retrieveRegisterParameters": {
        "description": "Gets parameters needed to register a new domain name, including price and up-to-date availability. Use the returned values to call `RegisterDomain`.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations:retrieveRegisterParameters",
        "httpMethod": "GET",
        "method": "retrieveRegisterParameters",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.retrieveTransferParameters": {
        "description": "Gets parameters needed to transfer a domain name from another registrar to Cloud Domains. For domains managed by Google Domains, transferring to Cloud Domains is not supported. Use the returned values to call `TransferDomain`.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations:retrieveTransferParameters",
        "httpMethod": "GET",
        "method": "retrieveTransferParameters",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.searchDomains": {
        "description": "Searches for available domain names similar to the provided query. Availability results from this method are approximate; call `RetrieveRegisterParameters` on a domain before registering to confirm availability.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations:searchDomains",
        "httpMethod": "GET",
        "method": "searchDomains",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations/{registrationsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "domains.projects.locations.registrations.transfer": {
        "description": "Transfers a domain name from another registrar to Cloud Domains. For domains managed by Google Domains, transferring to Cloud Domains is not supported. Before calling this method, go to the domain's current registrar to unlock the domain for transfer and retrieve the domain's transfer authorization code. Then call `RetrieveTransferParameters` to confirm that the domain is unlocked and to get values needed to build a call to this method. A successful call creates a `Registration` resource in state `TRANSFER_PENDING`. It can take several days to complete the transfer process. The registrant can often speed up this process by approving the transfer through the current registrar, either by clicking a link in an email from the registrar or by visiting the registrar's website. A few minutes after transfer approval, the resource transitions to state `ACTIVE`, indicating that the transfer was successful. If the transfer is rejected or the request expires without being approved, the resource can end up in state `TRANSFER_FAILED`. If transfer fails, you can safely delete the resource and retry the transfer.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/registrations:transfer",
        "httpMethod": "POST",
        "method": "transfer",
        "resourceType": "registrations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Domains API"
  },
  "domainsrdap": {
    "description": "Read-only public API that lets users search for information about domain names.",
    "methods": {
      "domainsrdap.autnum.get": {
        "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
        "flatPath": "v1/autnum/{autnumId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "autnum",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "domainsrdap.domain.get": {
        "description": "Look up RDAP information for a domain by name.",
        "flatPath": "v1/domain/{domainId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domain",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "domainsrdap.entity.get": {
        "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
        "flatPath": "v1/entity/{entityId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "entity",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "domainsrdap.getDomains": {
        "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
        "flatPath": "v1/domains",
        "httpMethod": "GET",
        "method": "getDomains",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "domainsrdap.getEntities": {
        "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
        "flatPath": "v1/entities",
        "httpMethod": "GET",
        "method": "getEntities",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "domainsrdap.getHelp": {
        "description": "Get help information for the RDAP API, including links to documentation.",
        "flatPath": "v1/help",
        "httpMethod": "GET",
        "method": "getHelp",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "domainsrdap.getIp": {
        "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
        "flatPath": "v1/ip",
        "httpMethod": "GET",
        "method": "getIp",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "domainsrdap.getNameservers": {
        "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
        "flatPath": "v1/nameservers",
        "httpMethod": "GET",
        "method": "getNameservers",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "domainsrdap.ip.get": {
        "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
        "flatPath": "v1/ip/{ipId}/{ipId1}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "ip",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "domainsrdap.nameserver.get": {
        "description": "The RDAP API recognizes this command from the RDAP specification but does not support it. The response is a formatted 501 error.",
        "flatPath": "v1/nameserver/{nameserverId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nameserver",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Domains RDAP API"
  },
  "doubleclickbidmanager": {
    "description": "DoubleClick Bid Manager API allows users to manage and create campaigns and reports.",
    "methods": {
      "doubleclickbidmanager.queries.createquery": {
        "description": "Creates a query.",
        "flatPath": "query",
        "httpMethod": "POST",
        "method": "createquery",
        "resourceType": "queries",
        "resourceTypePath": "/",
        "versions": [
          "v1.1"
        ]
      },
      "doubleclickbidmanager.queries.deletequery": {
        "description": "Deletes a stored query as well as the associated stored reports.",
        "flatPath": "query/{queryId}",
        "httpMethod": "DELETE",
        "method": "deletequery",
        "resourceType": "queries",
        "resourceTypePath": "/",
        "versions": [
          "v1.1"
        ]
      },
      "doubleclickbidmanager.queries.getquery": {
        "description": "Retrieves a stored query.",
        "flatPath": "query/{queryId}",
        "httpMethod": "GET",
        "method": "getquery",
        "resourceType": "queries",
        "resourceTypePath": "/",
        "versions": [
          "v1.1"
        ]
      },
      "doubleclickbidmanager.queries.listqueries": {
        "description": "Retrieves stored queries.",
        "flatPath": "queries",
        "httpMethod": "GET",
        "method": "listqueries",
        "resourceType": "queries",
        "resourceTypePath": "/",
        "versions": [
          "v1.1"
        ]
      },
      "doubleclickbidmanager.queries.runquery": {
        "description": "Runs a stored query to generate a report.",
        "flatPath": "query/{queryId}",
        "httpMethod": "POST",
        "method": "runquery",
        "resourceType": "queries",
        "resourceTypePath": "/",
        "versions": [
          "v1.1"
        ]
      },
      "doubleclickbidmanager.reports.listreports": {
        "description": "Retrieves stored reports.",
        "flatPath": "queries/{queryId}/reports",
        "httpMethod": "GET",
        "method": "listreports",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v1.1"
        ]
      }
    },
    "preferredVersion": "v1.1",
    "title": "DoubleClick Bid Manager API"
  },
  "doubleclicksearch": {
    "description": "The Search Ads 360 API allows developers to automate uploading conversions and downloading reports from Search Ads 360.",
    "methods": {
      "doubleclicksearch.conversion.get": {
        "description": "Retrieves a list of conversions from a DoubleClick Search engine account.",
        "flatPath": "doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/engine/{engineAccountId}/conversion",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "conversion",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "doubleclicksearch.conversion.insert": {
        "description": "Inserts a batch of new conversions into DoubleClick Search.",
        "flatPath": "doubleclicksearch/v2/conversion",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "conversion",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "doubleclicksearch.conversion.update": {
        "description": "Updates a batch of conversions in DoubleClick Search.",
        "flatPath": "doubleclicksearch/v2/conversion",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "conversion",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "doubleclicksearch.conversion.updateAvailability": {
        "description": "Updates the availabilities of a batch of floodlight activities in DoubleClick Search.",
        "flatPath": "doubleclicksearch/v2/conversion/updateAvailability",
        "httpMethod": "POST",
        "method": "updateAvailability",
        "resourceType": "conversion",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "doubleclicksearch.reports.generate": {
        "description": "Generates and returns a report immediately.",
        "flatPath": "doubleclicksearch/v2/reports/generate",
        "httpMethod": "POST",
        "method": "generate",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "doubleclicksearch.reports.get": {
        "description": "Polls for the status of a report request.",
        "flatPath": "doubleclicksearch/v2/reports/{reportId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "doubleclicksearch.reports.getFile": {
        "description": "Downloads a report file encoded in UTF-8.",
        "flatPath": "doubleclicksearch/v2/reports/{reportId}/files/{reportFragment}",
        "httpMethod": "GET",
        "method": "getFile",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "doubleclicksearch.reports.request": {
        "description": "Inserts a report request into the reporting system.",
        "flatPath": "doubleclicksearch/v2/reports",
        "httpMethod": "POST",
        "method": "request",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "doubleclicksearch.savedColumns.list": {
        "description": "Retrieve the list of saved columns for a specified advertiser.",
        "flatPath": "doubleclicksearch/v2/agency/{agencyId}/advertiser/{advertiserId}/savedcolumns",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "savedColumns",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Search Ads 360 API"
  },
  "drive": {
    "description": "Manages files in Drive including uploading, downloading, searching, detecting changes, and updating sharing permissions.",
    "methods": {
      "drive.about.get": {
        "description": "Gets the information about the current user along with Drive API settings",
        "flatPath": "about",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "about",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.apps.get": {
        "description": "Gets a specific app.",
        "flatPath": "apps/{appId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "apps",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.apps.list": {
        "description": "Lists a user's installed apps.",
        "flatPath": "apps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "apps",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.changes.get": {
        "description": "Deprecated - Use changes.getStartPageToken and changes.list to retrieve recent changes.",
        "flatPath": "changes/{changeId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "changes",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.changes.getStartPageToken": {
        "description": "Gets the starting pageToken for listing future changes.",
        "flatPath": "changes/startPageToken",
        "httpMethod": "GET",
        "method": "getStartPageToken",
        "resourceType": "changes",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.changes.list": {
        "description": "Lists the changes for a user or shared drive.",
        "flatPath": "changes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "changes",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.changes.watch": {
        "description": "Subscribe to changes for a user.",
        "flatPath": "changes/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "changes",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.channels.stop": {
        "description": "Stop watching resources through this channel",
        "flatPath": "channels/stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "channels",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.children.delete": {
        "description": "Removes a child from a folder.",
        "flatPath": "files/{folderId}/children/{childId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "children",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.children.get": {
        "description": "Gets a specific child reference.",
        "flatPath": "files/{folderId}/children/{childId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "children",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.children.insert": {
        "description": "Inserts a file into a folder.",
        "flatPath": "files/{folderId}/children",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "children",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.children.list": {
        "description": "Lists a folder's children.",
        "flatPath": "files/{folderId}/children",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "children",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.comments.create": {
        "description": "Creates a new comment on a file.",
        "flatPath": "files/{fileId}/comments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "drive.comments.delete": {
        "description": "Deletes a comment.",
        "flatPath": "files/{fileId}/comments/{commentId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.comments.get": {
        "description": "Gets a comment by ID.",
        "flatPath": "files/{fileId}/comments/{commentId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.comments.insert": {
        "description": "Creates a new comment on the given file.",
        "flatPath": "files/{fileId}/comments",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.comments.list": {
        "description": "Lists a file's comments.",
        "flatPath": "files/{fileId}/comments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.comments.patch": {
        "description": "Updates an existing comment.",
        "flatPath": "files/{fileId}/comments/{commentId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.comments.update": {
        "description": "Updates an existing comment.",
        "flatPath": "files/{fileId}/comments/{commentId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.drives.create": {
        "description": "Creates a new shared drive.",
        "flatPath": "drives",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "drives",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "drive.drives.delete": {
        "description": "Permanently deletes a shared drive for which the user is an organizer. The shared drive cannot contain any untrashed items.",
        "flatPath": "drives/{driveId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "drives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.drives.get": {
        "description": "Gets a shared drive's metadata by ID.",
        "flatPath": "drives/{driveId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "drives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.drives.hide": {
        "description": "Hides a shared drive from the default view.",
        "flatPath": "drives/{driveId}/hide",
        "httpMethod": "POST",
        "method": "hide",
        "resourceType": "drives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.drives.insert": {
        "description": "Creates a new shared drive.",
        "flatPath": "drives",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "drives",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.drives.list": {
        "description": "Lists the user's shared drives.",
        "flatPath": "drives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "drives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.drives.unhide": {
        "description": "Restores a shared drive to the default view.",
        "flatPath": "drives/{driveId}/unhide",
        "httpMethod": "POST",
        "method": "unhide",
        "resourceType": "drives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.drives.update": {
        "description": "Updates the metadata for a shared drive.",
        "flatPath": "drives/{driveId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "drives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.files.copy": {
        "description": "Creates a copy of the specified file. Folders cannot be copied.",
        "flatPath": "files/{fileId}/copy",
        "httpMethod": "POST",
        "method": "copy",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.files.create": {
        "description": "Creates a new file.",
        "flatPath": "files",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "drive.files.delete": {
        "description": "Permanently deletes a file by ID. Skips the trash. The currently authenticated user must own the file or be an organizer on the parent for shared drive files.",
        "flatPath": "files/{fileId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.files.emptyTrash": {
        "description": "Permanently deletes all of the user's trashed files.",
        "flatPath": "files/trash",
        "httpMethod": "DELETE",
        "method": "emptyTrash",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.files.export": {
        "description": "Exports a Google Workspace document to the requested MIME type and returns exported byte content. Note that the exported content is limited to 10MB.",
        "flatPath": "files/{fileId}/export",
        "httpMethod": "GET",
        "method": "export",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.files.generateIds": {
        "description": "Generates a set of file IDs which can be provided in insert or copy requests.",
        "flatPath": "files/generateIds",
        "httpMethod": "GET",
        "method": "generateIds",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.files.get": {
        "description": "Gets a file's metadata or content by ID.",
        "flatPath": "files/{fileId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.files.insert": {
        "description": "Insert a new file.",
        "flatPath": "files",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.files.list": {
        "description": "Lists the user's files.",
        "flatPath": "files",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.files.patch": {
        "description": "Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might might change automatically, such as modifiedDate. This method supports patch semantics.",
        "flatPath": "files/{fileId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.files.touch": {
        "description": "Set the file's updated time to the current server time.",
        "flatPath": "files/{fileId}/touch",
        "httpMethod": "POST",
        "method": "touch",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.files.trash": {
        "description": "Moves a file to the trash. The currently authenticated user must own the file or be at least a fileOrganizer on the parent for shared drive files. Only the owner may trash a file. The trashed item is excluded from all files.list responses returned for any user who does not own the file. However, all users with access to the file can see the trashed item metadata in an API response. All users with access can copy, download, export, and share the file.",
        "flatPath": "files/{fileId}/trash",
        "httpMethod": "POST",
        "method": "trash",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.files.untrash": {
        "description": "Restores a file from the trash. The currently authenticated user must own the file or be at least a fileOrganizer on the parent for shared drive files. Only the owner may untrash a file.",
        "flatPath": "files/{fileId}/untrash",
        "httpMethod": "POST",
        "method": "untrash",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.files.update": {
        "description": "Updates a file's metadata and/or content. When calling this method, only populate fields in the request that you want to modify. When updating fields, some fields might be changed automatically, such as modifiedDate. This method supports patch semantics.",
        "flatPath": "files/{fileId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.files.watch": {
        "description": "Subscribe to changes on a file",
        "flatPath": "files/{fileId}/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.parents.delete": {
        "description": "Removes a parent from a file.",
        "flatPath": "files/{fileId}/parents/{parentId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "parents",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.parents.get": {
        "description": "Gets a specific parent reference.",
        "flatPath": "files/{fileId}/parents/{parentId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "parents",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.parents.insert": {
        "description": "Adds a parent folder for a file.",
        "flatPath": "files/{fileId}/parents",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "parents",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.parents.list": {
        "description": "Lists a file's parents.",
        "flatPath": "files/{fileId}/parents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "parents",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.permissions.create": {
        "description": "Creates a permission for a file or shared drive.",
        "flatPath": "files/{fileId}/permissions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "drive.permissions.delete": {
        "description": "Deletes a permission from a file or shared drive.",
        "flatPath": "files/{fileId}/permissions/{permissionId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.permissions.get": {
        "description": "Gets a permission by ID.",
        "flatPath": "files/{fileId}/permissions/{permissionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.permissions.getIdForEmail": {
        "description": "Returns the permission ID for an email address.",
        "flatPath": "permissionIds/{email}",
        "httpMethod": "GET",
        "method": "getIdForEmail",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.permissions.insert": {
        "description": "Inserts a permission for a file or shared drive.",
        "flatPath": "files/{fileId}/permissions",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.permissions.list": {
        "description": "Lists a file's or shared drive's permissions.",
        "flatPath": "files/{fileId}/permissions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.permissions.patch": {
        "description": "Updates a permission using patch semantics.",
        "flatPath": "files/{fileId}/permissions/{permissionId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.permissions.update": {
        "description": "Updates a permission.",
        "flatPath": "files/{fileId}/permissions/{permissionId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.properties.delete": {
        "description": "Deletes a property.",
        "flatPath": "files/{fileId}/properties/{propertyKey}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.properties.get": {
        "description": "Gets a property by its key.",
        "flatPath": "files/{fileId}/properties/{propertyKey}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.properties.insert": {
        "description": "Adds a property to a file, or updates it if it already exists.",
        "flatPath": "files/{fileId}/properties",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.properties.list": {
        "description": "Lists a file's properties.",
        "flatPath": "files/{fileId}/properties",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.properties.patch": {
        "description": "Updates a property.",
        "flatPath": "files/{fileId}/properties/{propertyKey}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.properties.update": {
        "description": "Updates a property.",
        "flatPath": "files/{fileId}/properties/{propertyKey}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "properties",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.replies.create": {
        "description": "Creates a new reply to a comment.",
        "flatPath": "files/{fileId}/comments/{commentId}/replies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "replies",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "drive.replies.delete": {
        "description": "Deletes a reply.",
        "flatPath": "files/{fileId}/comments/{commentId}/replies/{replyId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "replies",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.replies.get": {
        "description": "Gets a reply.",
        "flatPath": "files/{fileId}/comments/{commentId}/replies/{replyId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "replies",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.replies.insert": {
        "description": "Creates a new reply to the given comment.",
        "flatPath": "files/{fileId}/comments/{commentId}/replies",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "replies",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.replies.list": {
        "description": "Lists all of the replies to a comment.",
        "flatPath": "files/{fileId}/comments/{commentId}/replies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "replies",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.replies.patch": {
        "description": "Updates an existing reply.",
        "flatPath": "files/{fileId}/comments/{commentId}/replies/{replyId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "replies",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.replies.update": {
        "description": "Updates an existing reply.",
        "flatPath": "files/{fileId}/comments/{commentId}/replies/{replyId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "replies",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.revisions.delete": {
        "description": "Permanently deletes a file version. You can only delete revisions for files with binary content, like images or videos. Revisions for other files, like Google Docs or Sheets, and the last remaining file version can't be deleted.",
        "flatPath": "files/{fileId}/revisions/{revisionId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "revisions",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.revisions.get": {
        "description": "Gets a specific revision.",
        "flatPath": "files/{fileId}/revisions/{revisionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "revisions",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.revisions.list": {
        "description": "Lists a file's revisions.",
        "flatPath": "files/{fileId}/revisions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "revisions",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.revisions.patch": {
        "description": "Updates a revision.",
        "flatPath": "files/{fileId}/revisions/{revisionId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "revisions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.revisions.update": {
        "description": "Updates a revision.",
        "flatPath": "files/{fileId}/revisions/{revisionId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "revisions",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.teamdrives.create": {
        "description": "Deprecated use drives.create instead.",
        "flatPath": "teamdrives",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "teamdrives",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "drive.teamdrives.delete": {
        "description": "Deprecated use drives.delete instead.",
        "flatPath": "teamdrives/{teamDriveId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "teamdrives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.teamdrives.get": {
        "description": "Deprecated use drives.get instead.",
        "flatPath": "teamdrives/{teamDriveId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "teamdrives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.teamdrives.insert": {
        "description": "Deprecated use drives.insert instead.",
        "flatPath": "teamdrives",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "teamdrives",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "drive.teamdrives.list": {
        "description": "Deprecated use drives.list instead.",
        "flatPath": "teamdrives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "teamdrives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      },
      "drive.teamdrives.update": {
        "description": "Deprecated use drives.update instead.",
        "flatPath": "teamdrives/{teamDriveId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "teamdrives",
        "resourceTypePath": "/",
        "versions": [
          "v2",
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Drive API"
  },
  "driveactivity": {
    "description": "Provides a historical view of activity in Google Drive.",
    "methods": {
      "driveactivity.activity.query": {
        "description": "Query past activity in Google Drive.",
        "flatPath": "v2/activity:query",
        "httpMethod": "POST",
        "method": "query",
        "resourceType": "activity",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Drive Activity API"
  },
  "essentialcontacts": {
    "description": "",
    "methods": {
      "essentialcontacts.folders.contacts.compute": {
        "description": "Lists all contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources.",
        "flatPath": "v1/folders/{foldersId}/contacts:compute",
        "httpMethod": "GET",
        "method": "compute",
        "resourceType": "contacts",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.folders.contacts.create": {
        "description": "Adds a new contact for a resource.",
        "flatPath": "v1/folders/{foldersId}/contacts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "contacts",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.folders.contacts.delete": {
        "description": "Deletes a contact.",
        "flatPath": "v1/folders/{foldersId}/contacts/{contactsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "contacts",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.folders.contacts.get": {
        "description": "Gets a single contact.",
        "flatPath": "v1/folders/{foldersId}/contacts/{contactsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "contacts",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.folders.contacts.list": {
        "description": "Lists the contacts that have been set on a resource.",
        "flatPath": "v1/folders/{foldersId}/contacts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "contacts",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.folders.contacts.patch": {
        "description": "Updates a contact. Note: A contact's email address cannot be changed.",
        "flatPath": "v1/folders/{foldersId}/contacts/{contactsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "contacts",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.folders.contacts.sendTestMessage": {
        "description": "Allows a contact admin to send a test message to contact to verify that it has been configured correctly.",
        "flatPath": "v1/folders/{foldersId}/contacts:sendTestMessage",
        "httpMethod": "POST",
        "method": "sendTestMessage",
        "resourceType": "contacts",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.organizations.contacts.compute": {
        "description": "Lists all contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources.",
        "flatPath": "v1/organizations/{organizationsId}/contacts:compute",
        "httpMethod": "GET",
        "method": "compute",
        "resourceType": "contacts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.organizations.contacts.create": {
        "description": "Adds a new contact for a resource.",
        "flatPath": "v1/organizations/{organizationsId}/contacts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "contacts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.organizations.contacts.delete": {
        "description": "Deletes a contact.",
        "flatPath": "v1/organizations/{organizationsId}/contacts/{contactsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "contacts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.organizations.contacts.get": {
        "description": "Gets a single contact.",
        "flatPath": "v1/organizations/{organizationsId}/contacts/{contactsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "contacts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.organizations.contacts.list": {
        "description": "Lists the contacts that have been set on a resource.",
        "flatPath": "v1/organizations/{organizationsId}/contacts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "contacts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.organizations.contacts.patch": {
        "description": "Updates a contact. Note: A contact's email address cannot be changed.",
        "flatPath": "v1/organizations/{organizationsId}/contacts/{contactsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "contacts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.organizations.contacts.sendTestMessage": {
        "description": "Allows a contact admin to send a test message to contact to verify that it has been configured correctly.",
        "flatPath": "v1/organizations/{organizationsId}/contacts:sendTestMessage",
        "httpMethod": "POST",
        "method": "sendTestMessage",
        "resourceType": "contacts",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.projects.contacts.compute": {
        "description": "Lists all contacts for the resource that are subscribed to the specified notification categories, including contacts inherited from any parent resources.",
        "flatPath": "v1/projects/{projectsId}/contacts:compute",
        "httpMethod": "GET",
        "method": "compute",
        "resourceType": "contacts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.projects.contacts.create": {
        "description": "Adds a new contact for a resource.",
        "flatPath": "v1/projects/{projectsId}/contacts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "contacts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.projects.contacts.delete": {
        "description": "Deletes a contact.",
        "flatPath": "v1/projects/{projectsId}/contacts/{contactsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "contacts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.projects.contacts.get": {
        "description": "Gets a single contact.",
        "flatPath": "v1/projects/{projectsId}/contacts/{contactsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "contacts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.projects.contacts.list": {
        "description": "Lists the contacts that have been set on a resource.",
        "flatPath": "v1/projects/{projectsId}/contacts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "contacts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.projects.contacts.patch": {
        "description": "Updates a contact. Note: A contact's email address cannot be changed.",
        "flatPath": "v1/projects/{projectsId}/contacts/{contactsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "contacts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "essentialcontacts.projects.contacts.sendTestMessage": {
        "description": "Allows a contact admin to send a test message to contact to verify that it has been configured correctly.",
        "flatPath": "v1/projects/{projectsId}/contacts:sendTestMessage",
        "httpMethod": "POST",
        "method": "sendTestMessage",
        "resourceType": "contacts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Essential Contacts API"
  },
  "eventarc": {
    "description": "",
    "methods": {
      "eventarc.projects.locations.channels.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/channels/{channelsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "channels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "eventarc.projects.locations.channels.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/channels/{channelsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "channels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "eventarc.projects.locations.channels.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/channels/{channelsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "channels",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "eventarc.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.triggers.create": {
        "description": "Create a new trigger in a particular project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/triggers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.triggers.delete": {
        "description": "Delete a single trigger.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.triggers.get": {
        "description": "Get a single trigger.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.triggers.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.triggers.list": {
        "description": "List triggers.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/triggers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.triggers.patch": {
        "description": "Update a single trigger.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.triggers.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "eventarc.projects.locations.triggers.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "triggers",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Eventarc API"
  },
  "factchecktools": {
    "description": "",
    "methods": {
      "factchecktools.claims.search": {
        "description": "Search through fact-checked claims.",
        "flatPath": "v1alpha1/claims:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "claims",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "factchecktools.pages.create": {
        "description": "Create `ClaimReview` markup on a page.",
        "flatPath": "v1alpha1/pages",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "factchecktools.pages.delete": {
        "description": "Delete all `ClaimReview` markup on a page.",
        "flatPath": "v1alpha1/pages/{pagesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "factchecktools.pages.get": {
        "description": "Get all `ClaimReview` markup on a page.",
        "flatPath": "v1alpha1/pages/{pagesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "factchecktools.pages.list": {
        "description": "List the `ClaimReview` markup pages for a specific URL or for an organization.",
        "flatPath": "v1alpha1/pages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "factchecktools.pages.update": {
        "description": "Update for all `ClaimReview` markup on a page Note that this is a full update. To retain the existing `ClaimReview` markup on a page, first perform a Get operation, then modify the returned markup, and finally call Update with the entire `ClaimReview` markup as the body.",
        "flatPath": "v1alpha1/pages/{pagesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "pages",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      }
    },
    "preferredVersion": "v1alpha1",
    "title": "Fact Check Tools API"
  },
  "fcm": {
    "description": "FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.",
    "methods": {
      "fcm.projects.messages.send": {
        "description": "Send a message to specified target (a registration token, topic or condition).",
        "flatPath": "v1/projects/{projectsId}/messages:send",
        "httpMethod": "POST",
        "method": "send",
        "resourceType": "messages",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Firebase Cloud Messaging API"
  },
  "fcmdata": {
    "description": "Provides additional information about Firebase Cloud Messaging (FCM) message sends and deliveries.",
    "methods": {
      "fcmdata.projects.androidApps.deliveryData.list": {
        "description": "List aggregate delivery data for the given Android application.",
        "flatPath": "v1beta1/projects/{projectsId}/androidApps/{androidAppsId}/deliveryData",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deliveryData",
        "resourceTypePath": "//projects/androidApps",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1beta1",
    "title": "Firebase Cloud Messaging Data API"
  },
  "file": {
    "description": "The Cloud Filestore API is used for creating and managing cloud file servers.",
    "methods": {
      "file.projects.locations.backups.create": {
        "description": "Creates a backup.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/backups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.backups.delete": {
        "description": "Deletes a backup.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/backups/{backupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.backups.get": {
        "description": "Gets the details of a specific backup.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/backups/{backupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.backups.list": {
        "description": "Lists all backups in a project for either a specified location or for all locations.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/backups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.backups.patch": {
        "description": "Updates the settings of a specific backup.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/backups/{backupsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.create": {
        "description": "Creates an instance. When creating from a backup, the capacity of the new instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the minimum capacity of the tier).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.delete": {
        "description": "Deletes an instance.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.get": {
        "description": "Gets the details of a specific instance.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.list": {
        "description": "Lists all instances in a project for either a specified location or for all locations.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.patch": {
        "description": "Updates the settings of a specific instance.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.restore": {
        "description": "Restores an existing instance's file share from a backup. The capacity of the instance needs to be equal to or larger than the capacity of the backup (and also equal to or larger than the minimum capacity of the tier).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.revert": {
        "description": "Revert an existing instance's file system to a specified snapshot.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "file.projects.locations.instances.snapshots.create": {
        "description": "Creates a snapshot.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/snapshots",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.snapshots.delete": {
        "description": "Deletes a snapshot.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/snapshots/{snapshotsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.snapshots.get": {
        "description": "Gets the details of a specific snapshot.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/snapshots/{snapshotsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.snapshots.list": {
        "description": "Lists all snapshots in a project for either a specified location or for all locations.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/snapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.instances.snapshots.patch": {
        "description": "Updates the settings of a specific snapshot.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/snapshots/{snapshotsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "file.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Filestore API"
  },
  "firebase": {
    "description": "The Firebase Management API enables programmatic setup and management of Firebase projects, including a project's Firebase resources and Firebase apps.",
    "methods": {
      "firebase.availableProjects.list": {
        "description": "Lists each [Google Cloud Platform (GCP) `Project`] (https://cloud.google.com/resource-manager/reference/rest/v1/projects) that can have Firebase resources added to it. A Project will only be listed if: - The caller has sufficient [Google IAM](https://cloud.google.com/iam) permissions to call AddFirebase. - The Project is not already a FirebaseProject. - The Project is not in an Organization which has policies that prevent Firebase resources from being added. ",
        "flatPath": "v1beta1/availableProjects",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "availableProjects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.addFirebase": {
        "description": "Adds Firebase resources to the specified existing [Google Cloud Platform (GCP) `Project`] (https://cloud.google.com/resource-manager/reference/rest/v1/projects). Since a FirebaseProject is actually also a GCP `Project`, a `FirebaseProject` has the same underlying GCP identifiers (`projectNumber` and `projectId`). This allows for easy interop with Google APIs. The result of this call is an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the provisioning process by calling GetOperation until [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When `done` is `true`, the `Operation` has either succeeded or failed. If the `Operation` succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to a FirebaseProject; if the `Operation` failed, its [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a google.rpc.Status. The `Operation` is automatically deleted after completion, so there is no need to call DeleteOperation. This method does not modify any billing account information on the underlying GCP `Project`. To call `AddFirebase`, a project member or service account must have the following permissions (the IAM roles of Editor and Owner contain these permissions): `firebase.projects.update`, `resourcemanager.projects.get`, `serviceusage.services.enable`, and `serviceusage.services.get`.",
        "flatPath": "v1beta1/projects/{projectsId}:addFirebase",
        "httpMethod": "POST",
        "method": "addFirebase",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.addGoogleAnalytics": {
        "description": "Links the specified FirebaseProject with an existing [Google Analytics account](http://www.google.com/analytics/). Using this call, you can either: - Specify an `analyticsAccountId` to provision a new Google Analytics property within the specified account and associate the new property with the `FirebaseProject`. - Specify an existing `analyticsPropertyId` to associate the property with the `FirebaseProject`. Note that when you call `AddGoogleAnalytics`: 1. The first check determines if any existing data streams in the Google Analytics property correspond to any existing Firebase Apps in the `FirebaseProject` (based on the `packageName` or `bundleId` associated with the data stream). Then, as applicable, the data streams and apps are linked. Note that this auto-linking only applies to `AndroidApps` and `IosApps`. 2. If no corresponding data streams are found for the Firebase Apps, new data streams are provisioned in the Google Analytics property for each of the Firebase Apps. Note that a new data stream is always provisioned for a Web App even if it was previously associated with a data stream in the Analytics property. Learn more about the hierarchy and structure of Google Analytics accounts in the [Analytics documentation](https://support.google.com/analytics/answer/9303323). The result of this call is an [`Operation`](../../v1beta1/operations). Poll the `Operation` to track the provisioning process by calling GetOperation until [`done`](../../v1beta1/operations#Operation.FIELDS.done) is `true`. When `done` is `true`, the `Operation` has either succeeded or failed. If the `Operation` succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) is set to an AnalyticsDetails; if the `Operation` failed, its [`error`](../../v1beta1/operations#Operation.FIELDS.error) is set to a google.rpc.Status. To call `AddGoogleAnalytics`, a project member must be an Owner for the existing `FirebaseProject` and have the [`Edit` permission](https://support.google.com/analytics/answer/2884495) for the Google Analytics account. If the `FirebaseProject` already has Google Analytics enabled, and you call `AddGoogleAnalytics` using an `analyticsPropertyId` that's different from the currently associated property, then the call will fail. Analytics may have already been enabled in the Firebase console or by specifying `timeZone` and `regionCode` in the call to [`AddFirebase`](../../v1beta1/projects/addFirebase).",
        "flatPath": "v1beta1/projects/{projectsId}:addGoogleAnalytics",
        "httpMethod": "POST",
        "method": "addGoogleAnalytics",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.androidApps.create": {
        "description": "Requests the creation of a new AndroidApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.",
        "flatPath": "v1beta1/projects/{projectsId}/androidApps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "androidApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.androidApps.get": {
        "description": "Gets the specified AndroidApp.",
        "flatPath": "v1beta1/projects/{projectsId}/androidApps/{androidAppsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "androidApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.androidApps.getConfig": {
        "description": "Gets the configuration artifact associated with the specified AndroidApp.",
        "flatPath": "v1beta1/projects/{projectsId}/androidApps/{androidAppsId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "androidApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.androidApps.list": {
        "description": "Lists each AndroidApp associated with the specified FirebaseProject. The elements are returned in no particular order, but will be a consistent view of the Apps when additional requests are made with a `pageToken`.",
        "flatPath": "v1beta1/projects/{projectsId}/androidApps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "androidApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.androidApps.patch": {
        "description": "Updates the attributes of the specified AndroidApp.",
        "flatPath": "v1beta1/projects/{projectsId}/androidApps/{androidAppsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "androidApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.androidApps.sha.create": {
        "description": "Adds a ShaCertificate to the specified AndroidApp.",
        "flatPath": "v1beta1/projects/{projectsId}/androidApps/{androidAppsId}/sha",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sha",
        "resourceTypePath": "//projects/androidApps",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.androidApps.sha.delete": {
        "description": "Removes a ShaCertificate from the specified AndroidApp.",
        "flatPath": "v1beta1/projects/{projectsId}/androidApps/{androidAppsId}/sha/{shaId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sha",
        "resourceTypePath": "//projects/androidApps",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.androidApps.sha.list": {
        "description": "Lists the SHA-1 and SHA-256 certificates for the specified AndroidApp.",
        "flatPath": "v1beta1/projects/{projectsId}/androidApps/{androidAppsId}/sha",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sha",
        "resourceTypePath": "//projects/androidApps",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.availableLocations.list": {
        "description": "Lists the valid Google Cloud Platform (GCP) resource locations for the specified Project (including a FirebaseProject). One of these locations can be selected as the Project's [_default_ GCP resource location](https://firebase.google.com/docs/projects/locations), which is the geographical location where the Project's resources, such as Cloud Firestore, will be provisioned by default. However, if the default GCP resource location has already been set for the Project, then this setting cannot be changed. This call checks for any possible [location restrictions](https://cloud.google.com/resource-manager/docs/organization-policy/defining-locations) for the specified Project and, thus, might return a subset of all possible GCP resource locations. To list all GCP resource locations (regardless of any restrictions), call the endpoint without specifying a unique project identifier (that is, `/v1beta1/{parent=projects/-}/listAvailableLocations`). To call `ListAvailableLocations` with a specified project, a member must be at minimum a Viewer of the Project. Calls without a specified project do not require any specific project permissions.",
        "flatPath": "v1beta1/projects/{projectsId}/availableLocations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "availableLocations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.defaultLocation.finalize": {
        "description": "Sets the default Google Cloud Platform (GCP) resource location for the specified FirebaseProject. This method creates an App Engine application with a [default Cloud Storage bucket](https://cloud.google.com/appengine/docs/standard/python/googlecloudstorageclient/setting-up-cloud-storage#activating_a_cloud_storage_bucket), located in the specified [`locationId`](#body.request_body.FIELDS.location_id). This location must be one of the available [GCP resource locations](https://firebase.google.com/docs/projects/locations). After the default GCP resource location is finalized, or if it was already set, it cannot be changed. The default GCP resource location for the specified `FirebaseProject` might already be set because either the underlying GCP `Project` already has an App Engine application or `FinalizeDefaultLocation` was previously called with a specified `locationId`. Any new calls to `FinalizeDefaultLocation` with a *different* specified `locationId` will return a 409 error. The result of this call is an [`Operation`](../../v1beta1/operations), which can be used to track the provisioning process. The [`response`](../../v1beta1/operations#Operation.FIELDS.response) type of the `Operation` is google.protobuf.Empty. The `Operation` can be polled by its `name` using GetOperation until `done` is true. When `done` is true, the `Operation` has either succeeded or failed. If the `Operation` has succeeded, its [`response`](../../v1beta1/operations#Operation.FIELDS.response) will be set to a google.protobuf.Empty; if the `Operation` has failed, its `error` will be set to a google.rpc.Status. The `Operation` is automatically deleted after completion, so there is no need to call DeleteOperation. All fields listed in the [request body](#request-body) are required. To call `FinalizeDefaultLocation`, a member must be an Owner of the Project.",
        "flatPath": "v1beta1/projects/{projectsId}/defaultLocation:finalize",
        "httpMethod": "POST",
        "method": "finalize",
        "resourceType": "defaultLocation",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.get": {
        "description": "Gets the specified FirebaseProject.",
        "flatPath": "v1beta1/projects/{projectsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.getAdminSdkConfig": {
        "description": "Gets the configuration artifact associated with the specified FirebaseProject, which can be used by servers to simplify initialization. Typically, this configuration is used with the Firebase Admin SDK [initializeApp](https://firebase.google.com/docs/admin/setup#initialize_the_sdk) command.",
        "flatPath": "v1beta1/projects/{projectsId}/adminSdkConfig",
        "httpMethod": "GET",
        "method": "getAdminSdkConfig",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.getAnalyticsDetails": {
        "description": "Gets the Google Analytics details currently associated with the specified FirebaseProject. If the `FirebaseProject` is not yet linked to Google Analytics, then the response to `GetAnalyticsDetails` is `NOT_FOUND`.",
        "flatPath": "v1beta1/projects/{projectsId}/analyticsDetails",
        "httpMethod": "GET",
        "method": "getAnalyticsDetails",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.iosApps.create": {
        "description": "Requests the creation of a new IosApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.",
        "flatPath": "v1beta1/projects/{projectsId}/iosApps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "iosApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.iosApps.get": {
        "description": "Gets the specified IosApp.",
        "flatPath": "v1beta1/projects/{projectsId}/iosApps/{iosAppsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "iosApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.iosApps.getConfig": {
        "description": "Gets the configuration artifact associated with the specified IosApp.",
        "flatPath": "v1beta1/projects/{projectsId}/iosApps/{iosAppsId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "iosApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.iosApps.list": {
        "description": "Lists each IosApp associated with the specified FirebaseProject. The elements are returned in no particular order, but will be a consistent view of the Apps when additional requests are made with a `pageToken`.",
        "flatPath": "v1beta1/projects/{projectsId}/iosApps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "iosApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.iosApps.patch": {
        "description": "Updates the attributes of the specified IosApp.",
        "flatPath": "v1beta1/projects/{projectsId}/iosApps/{iosAppsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "iosApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.list": {
        "description": "Lists each FirebaseProject accessible to the caller. The elements are returned in no particular order, but they will be a consistent view of the Projects when additional requests are made with a `pageToken`. This method is eventually consistent with Project mutations, which means newly provisioned Projects and recent modifications to existing Projects might not be reflected in the set of Projects. The list will include only ACTIVE Projects. Use GetFirebaseProject for consistent reads as well as for additional Project details.",
        "flatPath": "v1beta1/projects",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.patch": {
        "description": "Updates the attributes of the specified FirebaseProject. All [query parameters](#query-parameters) are required.",
        "flatPath": "v1beta1/projects/{projectsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.removeAnalytics": {
        "description": "Unlinks the specified FirebaseProject from its Google Analytics account. This call removes the association of the specified `FirebaseProject` with its current Google Analytics property. However, this call does not delete the Google Analytics resources, such as the Google Analytics property or any data streams. These resources may be re-associated later to the `FirebaseProject` by calling [`AddGoogleAnalytics`](../../v1beta1/projects/addGoogleAnalytics) and specifying the same `analyticsPropertyId`. For Android Apps and iOS Apps, this call re-links data streams with their corresponding apps. However, for Web Apps, this call provisions a *new* data stream for each Web App. To call `RemoveAnalytics`, a project member must be an Owner for the `FirebaseProject`.",
        "flatPath": "v1beta1/projects/{projectsId}:removeAnalytics",
        "httpMethod": "POST",
        "method": "removeAnalytics",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.searchApps": {
        "description": "Lists all available Apps for the specified FirebaseProject. This is a convenience method. Typically, interaction with an App should be done using the platform-specific service, but some tool use-cases require a summary of all known Apps (such as for App selector interfaces).",
        "flatPath": "v1beta1/projects/{projectsId}:searchApps",
        "httpMethod": "GET",
        "method": "searchApps",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.webApps.create": {
        "description": "Requests the creation of a new WebApp in the specified FirebaseProject. The result of this call is an `Operation` which can be used to track the provisioning process. The `Operation` is automatically deleted after completion, so there is no need to call `DeleteOperation`.",
        "flatPath": "v1beta1/projects/{projectsId}/webApps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "webApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.webApps.get": {
        "description": "Gets the specified WebApp.",
        "flatPath": "v1beta1/projects/{projectsId}/webApps/{webAppsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "webApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.webApps.getConfig": {
        "description": "Gets the configuration artifact associated with the specified WebApp.",
        "flatPath": "v1beta1/projects/{projectsId}/webApps/{webAppsId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "webApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.webApps.list": {
        "description": "Lists each WebApp associated with the specified FirebaseProject. The elements are returned in no particular order, but will be a consistent view of the Apps when additional requests are made with a `pageToken`.",
        "flatPath": "v1beta1/projects/{projectsId}/webApps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebase.projects.webApps.patch": {
        "description": "Updates the attributes of the specified WebApp.",
        "flatPath": "v1beta1/projects/{projectsId}/webApps/{webAppsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "webApps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1beta1",
    "title": "Firebase Management API"
  },
  "firebaseappcheck": {
    "description": "Firebase App Check works alongside other Firebase services to help protect your backend resources from abuse, such as billing fraud or phishing.",
    "methods": {
      "firebaseappcheck.jwks.get": {
        "description": "Returns a public JWK set as specified by [RFC 7517](https://tools.ietf.org/html/rfc7517) that can be used to verify App Check tokens. Exactly one of the public keys in the returned set will successfully validate any App Check token that is currently valid.",
        "flatPath": "v1beta/jwks",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jwks",
        "resourceTypePath": "/",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.appAttestConfig.batchGet": {
        "description": "Gets the AppAttestConfigs for the specified list of apps atomically.",
        "flatPath": "v1beta/projects/{projectsId}/apps/-/appAttestConfig:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "appAttestConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.appAttestConfig.get": {
        "description": "Gets the AppAttestConfig for the specified app.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/appAttestConfig",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "appAttestConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.appAttestConfig.patch": {
        "description": "Updates the AppAttestConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange AppAttest tokens for App Check tokens.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/appAttestConfig",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "appAttestConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.debugTokens.create": {
        "description": "Creates a new DebugToken for the specified app. For security reasons, after the creation operation completes, the `token` field cannot be updated or retrieved, but you can revoke the debug token using DeleteDebugToken. Each app can have a maximum of 20 debug tokens.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "debugTokens",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.debugTokens.delete": {
        "description": "Deletes the specified DebugToken. A deleted debug token cannot be used to exchange for an App Check token. Use this method when you suspect the secret `token` has been compromised or when you no longer need the debug token.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens/{debugTokensId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "debugTokens",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.debugTokens.get": {
        "description": "Gets the specified DebugToken. For security reasons, the `token` field is never populated in the response.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens/{debugTokensId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "debugTokens",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.debugTokens.list": {
        "description": "Lists all DebugTokens for the specified app. For security reasons, the `token` field is never populated in the response.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "debugTokens",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.debugTokens.patch": {
        "description": "Updates the specified DebugToken. For security reasons, the `token` field cannot be updated, nor will it be populated in the response, but you can revoke the debug token using DeleteDebugToken.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/debugTokens/{debugTokensId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "debugTokens",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.deviceCheckConfig.batchGet": {
        "description": "Gets the DeviceCheckConfigs for the specified list of apps atomically. For security reasons, the `private_key` field is never populated in the response.",
        "flatPath": "v1beta/projects/{projectsId}/apps/-/deviceCheckConfig:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "deviceCheckConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.deviceCheckConfig.get": {
        "description": "Gets the DeviceCheckConfig for the specified app. For security reasons, the `private_key` field is never populated in the response.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/deviceCheckConfig",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deviceCheckConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.deviceCheckConfig.patch": {
        "description": "Updates the DeviceCheckConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange DeviceCheck tokens for App Check tokens. For security reasons, the `private_key` field is never populated in the response.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/deviceCheckConfig",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deviceCheckConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.exchangeAppAttestAssertion": {
        "description": "Accepts an App Attest assertion and an artifact previously obtained from ExchangeAppAttestAttestation and verifies those with Apple. If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeAppAttestAssertion",
        "httpMethod": "POST",
        "method": "exchangeAppAttestAssertion",
        "resourceType": "apps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.exchangeAppAttestAttestation": {
        "description": "Accepts an App Attest CBOR attestation and verifies it with Apple using the developer's preconfigured team and bundle IDs. If valid, returns an attestation artifact that can later be exchanged for an AttestationTokenResponse using ExchangeAppAttestAssertion. For convenience and performance, this method's response object will also contain an App Check token encapsulated in an AttestationTokenResponse (if the verification is successful).",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeAppAttestAttestation",
        "httpMethod": "POST",
        "method": "exchangeAppAttestAttestation",
        "resourceType": "apps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.exchangeCustomToken": {
        "description": "Validates a custom token signed using your project's Admin SDK service account credentials. If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeCustomToken",
        "httpMethod": "POST",
        "method": "exchangeCustomToken",
        "resourceType": "apps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.exchangeDebugToken": {
        "description": "Validates a debug token secret that you have previously created using CreateDebugToken. If valid, returns an App Check token encapsulated in an AttestationTokenResponse. Note that a restrictive quota is enforced on this method to prevent accidental exposure of the app to abuse.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeDebugToken",
        "httpMethod": "POST",
        "method": "exchangeDebugToken",
        "resourceType": "apps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.exchangeDeviceCheckToken": {
        "description": "Accepts a [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice) issued by DeviceCheck, and attempts to validate it with Apple. If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeDeviceCheckToken",
        "httpMethod": "POST",
        "method": "exchangeDeviceCheckToken",
        "resourceType": "apps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.exchangeRecaptchaEnterpriseToken": {
        "description": "Validates a [reCAPTCHA Enterprise response token](https://cloud.google.com/recaptcha-enterprise/docs/create-assessment#retrieve_token). If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeRecaptchaEnterpriseToken",
        "httpMethod": "POST",
        "method": "exchangeRecaptchaEnterpriseToken",
        "resourceType": "apps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.exchangeRecaptchaToken": {
        "description": "Validates a [reCAPTCHA v3 response token](https://developers.google.com/recaptcha/docs/v3). If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeRecaptchaToken",
        "httpMethod": "POST",
        "method": "exchangeRecaptchaToken",
        "resourceType": "apps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.exchangeSafetyNetToken": {
        "description": "Validates a [SafetyNet token](https://developer.android.com/training/safetynet/attestation#request-attestation-step). If valid, returns an App Check token encapsulated in an AttestationTokenResponse.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:exchangeSafetyNetToken",
        "httpMethod": "POST",
        "method": "exchangeSafetyNetToken",
        "resourceType": "apps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.generateAppAttestChallenge": {
        "description": "Generates a challenge that protects the integrity of an immediately following call to ExchangeAppAttestAttestation or ExchangeAppAttestAssertion. A challenge should not be reused for multiple calls.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}:generateAppAttestChallenge",
        "httpMethod": "POST",
        "method": "generateAppAttestChallenge",
        "resourceType": "apps",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.recaptchaConfig.batchGet": {
        "description": "Gets the RecaptchaConfigs for the specified list of apps atomically. For security reasons, the `site_secret` field is never populated in the response.",
        "flatPath": "v1beta/projects/{projectsId}/apps/-/recaptchaConfig:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "recaptchaConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.recaptchaConfig.get": {
        "description": "Gets the RecaptchaConfig for the specified app. For security reasons, the `site_secret` field is never populated in the response.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/recaptchaConfig",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "recaptchaConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.recaptchaConfig.patch": {
        "description": "Updates the RecaptchaConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange reCAPTCHA tokens for App Check tokens. For security reasons, the `site_secret` field is never populated in the response.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/recaptchaConfig",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "recaptchaConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.recaptchaEnterpriseConfig.batchGet": {
        "description": "Gets the RecaptchaEnterpriseConfigs for the specified list of apps atomically.",
        "flatPath": "v1beta/projects/{projectsId}/apps/-/recaptchaEnterpriseConfig:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "recaptchaEnterpriseConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.recaptchaEnterpriseConfig.get": {
        "description": "Gets the RecaptchaEnterpriseConfig for the specified app.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/recaptchaEnterpriseConfig",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "recaptchaEnterpriseConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.recaptchaEnterpriseConfig.patch": {
        "description": "Updates the RecaptchaEnterpriseConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange reCAPTCHA Enterprise tokens for App Check tokens.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/recaptchaEnterpriseConfig",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "recaptchaEnterpriseConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.safetyNetConfig.batchGet": {
        "description": "Gets the SafetyNetConfigs for the specified list of apps atomically.",
        "flatPath": "v1beta/projects/{projectsId}/apps/-/safetyNetConfig:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "safetyNetConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.safetyNetConfig.get": {
        "description": "Gets the SafetyNetConfig for the specified app.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/safetyNetConfig",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "safetyNetConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.apps.safetyNetConfig.patch": {
        "description": "Updates the SafetyNetConfig for the specified app. While this configuration is incomplete or invalid, the app will be unable to exchange SafetyNet tokens for App Check tokens.",
        "flatPath": "v1beta/projects/{projectsId}/apps/{appsId}/safetyNetConfig",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "safetyNetConfig",
        "resourceTypePath": "//projects/apps",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.services.batchUpdate": {
        "description": "Updates the specified Service configurations atomically.",
        "flatPath": "v1beta/projects/{projectsId}/services:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "services",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.services.get": {
        "description": "Gets the Service configuration for the specified service name.",
        "flatPath": "v1beta/projects/{projectsId}/services/{servicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "services",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.services.list": {
        "description": "Lists all Service configurations for the specified project. Only Services which were explicitly configured using UpdateService or BatchUpdateServices will be returned.",
        "flatPath": "v1beta/projects/{projectsId}/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebaseappcheck.projects.services.patch": {
        "description": "Updates the specified Service configuration.",
        "flatPath": "v1beta/projects/{projectsId}/services/{servicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "services",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      }
    },
    "preferredVersion": "v1beta",
    "title": "Firebase App Check API"
  },
  "firebasedatabase": {
    "description": "The Firebase Realtime Database Management API enables programmatic provisioning and management of Realtime Database instances.",
    "methods": {
      "firebasedatabase.projects.locations.instances.create": {
        "description": "Requests that a new DatabaseInstance be created. The state of a successfully created DatabaseInstance is ACTIVE. Only available for projects on the Blaze plan. Projects can be upgraded using the Cloud Billing API https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo. Note that it might take a few minutes for billing enablement state to propagate to Firebase systems.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta"
        ]
      },
      "firebasedatabase.projects.locations.instances.delete": {
        "description": "Marks a DatabaseInstance to be deleted. The DatabaseInstance will be purged within 30 days. The default database cannot be deleted. IDs for deleted database instances may never be recovered or re-used. The Database may only be deleted if it is already in a DISABLED state.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta"
        ]
      },
      "firebasedatabase.projects.locations.instances.disable": {
        "description": "Disables a DatabaseInstance. The database can be re-enabled later using ReenableDatabaseInstance. When a database is disabled, all reads and writes are denied, including view access in the Firebase console.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:disable",
        "httpMethod": "POST",
        "method": "disable",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta"
        ]
      },
      "firebasedatabase.projects.locations.instances.get": {
        "description": "Gets the DatabaseInstance identified by the specified resource name.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta"
        ]
      },
      "firebasedatabase.projects.locations.instances.list": {
        "description": "Lists each DatabaseInstance associated with the specified parent project. The list items are returned in no particular order, but will be a consistent view of the database instances when additional requests are made with a `pageToken`. The resulting list contains instances in any STATE. The list results may be stale by a few seconds. Use GetDatabaseInstance for consistent reads.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta"
        ]
      },
      "firebasedatabase.projects.locations.instances.reenable": {
        "description": "Enables a DatabaseInstance. The database must have been disabled previously using DisableDatabaseInstance. The state of a successfully reenabled DatabaseInstance is ACTIVE.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:reenable",
        "httpMethod": "POST",
        "method": "reenable",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta"
        ]
      }
    },
    "preferredVersion": "v1beta",
    "title": "Firebase Realtime Database Management API"
  },
  "firebasedynamiclinks": {
    "description": "Programmatically creates and manages Firebase Dynamic Links.",
    "methods": {
      "firebasedynamiclinks.getLinkStats": {
        "description": "Fetches analytics stats of a short Dynamic Link for a given duration. Metrics include number of clicks, redirects, installs, app first opens, and app reopens.",
        "flatPath": "v1/{dynamicLink}/linkStats",
        "httpMethod": "GET",
        "method": "getLinkStats",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebasedynamiclinks.installAttribution": {
        "description": "Get iOS strong/weak-match info for post-install attribution.",
        "flatPath": "v1/installAttribution",
        "httpMethod": "POST",
        "method": "installAttribution",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebasedynamiclinks.managedShortLinks.create": {
        "description": "Creates a managed short Dynamic Link given either a valid long Dynamic Link or details such as Dynamic Link domain, Android and iOS app information. The created short Dynamic Link will not expire. This differs from CreateShortDynamicLink in the following ways: - The request will also contain a name for the link (non unique name for the front end). - The response must be authenticated with an auth token (generated with the admin service account). - The link will appear in the FDL list of links in the console front end. The Dynamic Link domain in the request must be owned by requester's Firebase project.",
        "flatPath": "v1/managedShortLinks:create",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "managedShortLinks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebasedynamiclinks.reopenAttribution": {
        "description": "Get iOS reopen attribution for app universal link open deeplinking.",
        "flatPath": "v1/reopenAttribution",
        "httpMethod": "POST",
        "method": "reopenAttribution",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebasedynamiclinks.shortLinks.create": {
        "description": "Creates a short Dynamic Link given either a valid long Dynamic Link or details such as Dynamic Link domain, Android and iOS app information. The created short Dynamic Link will not expire. Repeated calls with the same long Dynamic Link or Dynamic Link information will produce the same short Dynamic Link. The Dynamic Link domain in the request must be owned by requester's Firebase project.",
        "flatPath": "v1/shortLinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "shortLinks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Firebase Dynamic Links API"
  },
  "firebasehosting": {
    "description": "The Firebase Hosting REST API enables programmatic and customizable management and deployments to your Firebase-hosted sites. Use this REST API to create and manage channels and sites as well as to deploy new or updated hosting configurations and content files.",
    "methods": {
      "firebasehosting.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebasehosting.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebasehosting.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebasehosting.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.channels.create": {
        "description": "Creates a new channel in the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "channels",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.channels.delete": {
        "description": "Deletes the specified channel of the specified site. The `live` channel cannot be deleted.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "channels",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.channels.get": {
        "description": "Retrieves information for the specified channel of the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "channels",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.channels.list": {
        "description": "Lists the channels for the specified site. All sites have a default `live` channel.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "channels",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.channels.patch": {
        "description": "Updates information for the specified channel of the specified site. Implicitly creates the channel if it doesn't already exist.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "channels",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.channels.releases.create": {
        "description": "Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}/releases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "releases",
        "resourceTypePath": "//projects/sites/channels",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.channels.releases.list": {
        "description": "Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/channels/{channelsId}/releases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "releases",
        "resourceTypePath": "//projects/sites/channels",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.create": {
        "description": "Creates a new Hosting Site in the specified parent Firebase project. Note that Hosting sites can take several minutes to propagate through Firebase systems.",
        "flatPath": "v1beta1/projects/{projectsId}/sites",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sites",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.delete": {
        "description": "Deletes the specified Hosting Site from the specified parent Firebase project.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sites",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.domains.create": {
        "description": "Creates a domain mapping on the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "domains",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.domains.delete": {
        "description": "Deletes the existing domain mapping on the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains/{domainsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "domains",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.domains.get": {
        "description": "Gets a domain mapping on the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains/{domainsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domains",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.domains.list": {
        "description": "Lists the domains for the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "domains",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.domains.update": {
        "description": "Updates the specified domain mapping, creating the mapping as if it does not exist.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/domains/{domainsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "domains",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.get": {
        "description": "Gets the specified Hosting Site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sites",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.getConfig": {
        "description": "Gets the Hosting metadata for a specific site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "sites",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.list": {
        "description": "Lists each Hosting Site associated with the specified parent Firebase project.",
        "flatPath": "v1beta1/projects/{projectsId}/sites",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sites",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.patch": {
        "description": "Updates attributes of the specified Hosting Site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sites",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.releases.create": {
        "description": "Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/releases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "releases",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.releases.list": {
        "description": "Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/releases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "releases",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.updateConfig": {
        "description": "Sets the Hosting metadata for a specific site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/config",
        "httpMethod": "PATCH",
        "method": "updateConfig",
        "resourceType": "sites",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.versions.clone": {
        "description": "Creates a new version on the specified target site using the content of the specified version.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions:clone",
        "httpMethod": "POST",
        "method": "clone",
        "resourceType": "versions",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.versions.create": {
        "description": "Creates a new version for the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "versions",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.versions.delete": {
        "description": "Deletes the specified version.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions/{versionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "versions",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.versions.files.list": {
        "description": "Lists the remaining files to be uploaded for the specified version.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions/{versionsId}/files",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "files",
        "resourceTypePath": "//projects/sites/versions",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.versions.list": {
        "description": "Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.versions.patch": {
        "description": " Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions/{versionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "versions",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.projects.sites.versions.populateFiles": {
        "description": " Adds content files to the specified version. Each file must be under 2 GB.",
        "flatPath": "v1beta1/projects/{projectsId}/sites/{sitesId}/versions/{versionsId}:populateFiles",
        "httpMethod": "POST",
        "method": "populateFiles",
        "resourceType": "versions",
        "resourceTypePath": "//projects/sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.channels.create": {
        "description": "Creates a new channel in the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/channels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "channels",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.channels.delete": {
        "description": "Deletes the specified channel of the specified site. The `live` channel cannot be deleted.",
        "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "channels",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.channels.get": {
        "description": "Retrieves information for the specified channel of the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "channels",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.channels.list": {
        "description": "Lists the channels for the specified site. All sites have a default `live` channel.",
        "flatPath": "v1beta1/sites/{sitesId}/channels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "channels",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.channels.patch": {
        "description": "Updates information for the specified channel of the specified site. Implicitly creates the channel if it doesn't already exist.",
        "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "channels",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.channels.releases.create": {
        "description": "Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).",
        "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}/releases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "releases",
        "resourceTypePath": "//sites/channels",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.channels.releases.list": {
        "description": "Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/channels/{channelsId}/releases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "releases",
        "resourceTypePath": "//sites/channels",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.domains.create": {
        "description": "Creates a domain mapping on the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/domains",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "domains",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.domains.delete": {
        "description": "Deletes the existing domain mapping on the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/domains/{domainsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "domains",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.domains.get": {
        "description": "Gets a domain mapping on the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/domains/{domainsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domains",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.domains.list": {
        "description": "Lists the domains for the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/domains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "domains",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.domains.update": {
        "description": "Updates the specified domain mapping, creating the mapping as if it does not exist.",
        "flatPath": "v1beta1/sites/{sitesId}/domains/{domainsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "domains",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.getConfig": {
        "description": "Gets the Hosting metadata for a specific site.",
        "flatPath": "v1beta1/sites/{sitesId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.releases.create": {
        "description": "Creates a new release, which makes the content of the specified version actively display on the appropriate URL(s).",
        "flatPath": "v1beta1/sites/{sitesId}/releases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "releases",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.releases.list": {
        "description": "Lists the releases that have been created for the specified site or channel. When used to list releases for a site, this list includes releases for both the default `live` channel and any active preview channels for the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/releases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "releases",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.updateConfig": {
        "description": "Sets the Hosting metadata for a specific site.",
        "flatPath": "v1beta1/sites/{sitesId}/config",
        "httpMethod": "PATCH",
        "method": "updateConfig",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.versions.clone": {
        "description": "Creates a new version on the specified target site using the content of the specified version.",
        "flatPath": "v1beta1/sites/{sitesId}/versions:clone",
        "httpMethod": "POST",
        "method": "clone",
        "resourceType": "versions",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.versions.create": {
        "description": "Creates a new version for the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/versions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "versions",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.versions.delete": {
        "description": "Deletes the specified version.",
        "flatPath": "v1beta1/sites/{sitesId}/versions/{versionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "versions",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.versions.files.list": {
        "description": "Lists the remaining files to be uploaded for the specified version.",
        "flatPath": "v1beta1/sites/{sitesId}/versions/{versionsId}/files",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "files",
        "resourceTypePath": "//sites/versions",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.versions.list": {
        "description": "Lists the versions that have been created for the specified site. This list includes versions for both the default `live` channel and any active preview channels for the specified site.",
        "flatPath": "v1beta1/sites/{sitesId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.versions.patch": {
        "description": " Updates the specified metadata for the specified version. This method will fail with `FAILED_PRECONDITION` in the event of an invalid state transition. The supported [state](../sites.versions#versionstatus) transitions for a version are from `CREATED` to `FINALIZED`. Use [`DeleteVersion`](delete) to set the status of a version to `DELETED`.",
        "flatPath": "v1beta1/sites/{sitesId}/versions/{versionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "versions",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      },
      "firebasehosting.sites.versions.populateFiles": {
        "description": " Adds content files to the specified version. Each file must be under 2 GB.",
        "flatPath": "v1beta1/sites/{sitesId}/versions/{versionsId}:populateFiles",
        "httpMethod": "POST",
        "method": "populateFiles",
        "resourceType": "versions",
        "resourceTypePath": "//sites",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Firebase Hosting API"
  },
  "firebaseml": {
    "description": "Access custom machine learning models hosted via Firebase ML.",
    "methods": {
      "firebaseml.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebaseml.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebaseml.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "firebaseml.projects.models.create": {
        "description": "Creates a model in Firebase ML. The longrunning operation will eventually return a Model",
        "flatPath": "v1beta2/projects/{projectsId}/models",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "firebaseml.projects.models.delete": {
        "description": "Deletes a model",
        "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "firebaseml.projects.models.download": {
        "description": "Gets Download information for a model. This is meant for downloading model resources onto devices. It gives very limited information about the model.",
        "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}:download",
        "httpMethod": "GET",
        "method": "download",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "firebaseml.projects.models.get": {
        "description": "Gets a model resource.",
        "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "firebaseml.projects.models.list": {
        "description": "Lists the models",
        "flatPath": "v1beta2/projects/{projectsId}/models",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "firebaseml.projects.models.patch": {
        "description": "Updates a model. The longrunning operation will eventually return a Model.",
        "flatPath": "v1beta2/projects/{projectsId}/models/{modelsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "firebaseml.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta2/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Firebase ML API"
  },
  "firebaserules": {
    "description": "Creates and manages rules that determine when a Firebase Rules-enabled service should permit a request.",
    "methods": {
      "firebaserules.projects.releases.create": {
        "description": "Create a `Release`. Release names should reflect the developer's deployment practices. For example, the release name may include the environment name, application name, application version, or any other name meaningful to the developer. Once a `Release` refers to a `Ruleset`, the rules can be enforced by Firebase Rules-enabled services. More than one `Release` may be 'live' concurrently. Consider the following three `Release` names for `projects/foo` and the `Ruleset` to which they refer. Release Name -> Ruleset Name * projects/foo/releases/prod -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/beta -> projects/foo/rulesets/uuid123 * projects/foo/releases/prod/v23 -> projects/foo/rulesets/uuid456 The relationships reflect a `Ruleset` rollout in progress. The `prod` and `prod/beta` releases refer to the same `Ruleset`. However, `prod/v23` refers to a new `Ruleset`. The `Ruleset` reference for a `Release` may be updated using the UpdateRelease method.",
        "flatPath": "v1/projects/{projectsId}/releases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "releases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.releases.delete": {
        "description": "Delete a `Release` by resource name.",
        "flatPath": "v1/projects/{projectsId}/releases/{releasesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "releases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.releases.get": {
        "description": "Get a `Release` by name.",
        "flatPath": "v1/projects/{projectsId}/releases/{releasesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "releases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.releases.getExecutable": {
        "description": "Get the `Release` executable to use when enforcing rules.",
        "flatPath": "v1/projects/{projectsId}/releases/{releasesId}:getExecutable",
        "httpMethod": "GET",
        "method": "getExecutable",
        "resourceType": "releases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.releases.list": {
        "description": "List the `Release` values for a project. This list may optionally be filtered by `Release` name, `Ruleset` name, `TestSuite` name, or any combination thereof.",
        "flatPath": "v1/projects/{projectsId}/releases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "releases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.releases.patch": {
        "description": "Update a `Release` via PATCH. Only updates to `ruleset_name` will be honored. `Release` rename is not supported. To create a `Release` use the CreateRelease method.",
        "flatPath": "v1/projects/{projectsId}/releases/{releasesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "releases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.rulesets.create": {
        "description": "Create a `Ruleset` from `Source`. The `Ruleset` is given a unique generated name which is returned to the caller. `Source` containing syntactic or semantics errors will result in an error response indicating the first error encountered. For a detailed view of `Source` issues, use TestRuleset.",
        "flatPath": "v1/projects/{projectsId}/rulesets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "rulesets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.rulesets.delete": {
        "description": "Delete a `Ruleset` by resource name. If the `Ruleset` is referenced by a `Release` the operation will fail.",
        "flatPath": "v1/projects/{projectsId}/rulesets/{rulesetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "rulesets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.rulesets.get": {
        "description": "Get a `Ruleset` by name including the full `Source` contents.",
        "flatPath": "v1/projects/{projectsId}/rulesets/{rulesetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "rulesets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.rulesets.list": {
        "description": "List `Ruleset` metadata only and optionally filter the results by `Ruleset` name. The full `Source` contents of a `Ruleset` may be retrieved with GetRuleset.",
        "flatPath": "v1/projects/{projectsId}/rulesets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "rulesets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firebaserules.projects.test": {
        "description": "Test `Source` for syntactic and semantic correctness. Issues present, if any, will be returned to the caller with a description, severity, and source location. The test method may be executed with `Source` or a `Ruleset` name. Passing `Source` is useful for unit testing new rules. Passing a `Ruleset` name is useful for regression testing an existing rule. The following is an example of `Source` that permits users to upload images to a bucket bearing their user id and matching the correct metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe to the blog. service firebase.storage { match /users/{userId}/images/{imageName} { allow write: if userId == request.auth.uid && (imageName.matches('*.png$') || imageName.matches('*.jpg$')) && resource.mimeType.matches('^image/') } }",
        "flatPath": "v1/projects/{projectsId}:test",
        "httpMethod": "POST",
        "method": "test",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Firebase Rules API"
  },
  "firebasestorage": {
    "description": "The Cloud Storage for Firebase API enables programmatic management of Cloud Storage buckets for use in Firebase projects",
    "methods": {
      "firebasestorage.projects.buckets.addFirebase": {
        "description": "Links a Google Cloud Storage bucket to a Firebase project.",
        "flatPath": "v1beta/projects/{projectsId}/buckets/{bucketsId}:addFirebase",
        "httpMethod": "POST",
        "method": "addFirebase",
        "resourceType": "buckets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebasestorage.projects.buckets.get": {
        "description": "Gets a single linked storage bucket.",
        "flatPath": "v1beta/projects/{projectsId}/buckets/{bucketsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buckets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebasestorage.projects.buckets.list": {
        "description": "Lists the linked storage buckets for a project.",
        "flatPath": "v1beta/projects/{projectsId}/buckets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "buckets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "firebasestorage.projects.buckets.removeFirebase": {
        "description": "Unlinks a linked Google Cloud Storage bucket from a Firebase project.",
        "flatPath": "v1beta/projects/{projectsId}/buckets/{bucketsId}:removeFirebase",
        "httpMethod": "POST",
        "method": "removeFirebase",
        "resourceType": "buckets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      }
    },
    "preferredVersion": "v1beta",
    "title": "Cloud Storage for Firebase API"
  },
  "firestore": {
    "description": "Accesses the NoSQL document database built for automatic scaling, high performance, and ease of application development.",
    "methods": {
      "firestore.projects.databases.collectionGroups.fields.get": {
        "description": "Gets the metadata and configuration for a Field.",
        "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "fields",
        "resourceTypePath": "//projects/databases/collectionGroups",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "firestore.projects.databases.collectionGroups.fields.list": {
        "description": "Lists the field configuration and metadata for this database. Currently, FirestoreAdmin.ListFields only supports listing fields that have been explicitly overridden. To issue this query, call FirestoreAdmin.ListFields with the filter set to `indexConfig.usesAncestorConfig:false`.",
        "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "fields",
        "resourceTypePath": "//projects/databases/collectionGroups",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "firestore.projects.databases.collectionGroups.fields.patch": {
        "description": "Updates a field configuration. Currently, field updates apply only to single field index configuration. However, calls to FirestoreAdmin.UpdateField should provide a field mask to avoid changing any configuration that the caller isn't aware of. The field mask should be specified as: `{ paths: \"index_config\" }`. This call returns a google.longrunning.Operation which may be used to track the status of the field update. The metadata for the operation will be the type FieldOperationMetadata. To configure the default field settings for the database, use the special `Field` with resource name: `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.",
        "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/fields/{fieldsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "fields",
        "resourceTypePath": "//projects/databases/collectionGroups",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "firestore.projects.databases.collectionGroups.indexes.create": {
        "description": "Creates a composite index. This returns a google.longrunning.Operation which may be used to track the status of the creation. The metadata for the operation will be the type IndexOperationMetadata.",
        "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "indexes",
        "resourceTypePath": "//projects/databases/collectionGroups",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "firestore.projects.databases.collectionGroups.indexes.delete": {
        "description": "Deletes a composite index.",
        "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "indexes",
        "resourceTypePath": "//projects/databases/collectionGroups",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "firestore.projects.databases.collectionGroups.indexes.get": {
        "description": "Gets a composite index.",
        "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes/{indexesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "indexes",
        "resourceTypePath": "//projects/databases/collectionGroups",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "firestore.projects.databases.collectionGroups.indexes.list": {
        "description": "Lists composite indexes.",
        "flatPath": "v1beta2/projects/{projectsId}/databases/{databasesId}/collectionGroups/{collectionGroupsId}/indexes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "indexes",
        "resourceTypePath": "//projects/databases/collectionGroups",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.batchGet": {
        "description": "Gets multiple documents. Documents returned by this method are not guaranteed to be returned in the same order that they were requested.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents:batchGet",
        "httpMethod": "POST",
        "method": "batchGet",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.batchWrite": {
        "description": "Applies a batch of write operations. The BatchWrite method does not apply the write operations atomically and can apply them out of order. Method does not allow more than one write per document. Each write succeeds or fails independently. See the BatchWriteResponse for the success status of each write. If you require an atomically applied set of writes, use Commit instead.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents:batchWrite",
        "httpMethod": "POST",
        "method": "batchWrite",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.beginTransaction": {
        "description": "Starts a new transaction.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents:beginTransaction",
        "httpMethod": "POST",
        "method": "beginTransaction",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.commit": {
        "description": "Commits a transaction, while optionally updating documents.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents:commit",
        "httpMethod": "POST",
        "method": "commit",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.createDocument": {
        "description": "Creates a new document.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{collectionId}",
        "httpMethod": "POST",
        "method": "createDocument",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.delete": {
        "description": "Deletes a document.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.get": {
        "description": "Gets a single document.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.list": {
        "description": "Lists documents.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}/{collectionId}",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.listCollectionIds": {
        "description": "Lists all the collection IDs underneath a document.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:listCollectionIds",
        "httpMethod": "POST",
        "method": "listCollectionIds",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.listen": {
        "description": "Listens to changes.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents:listen",
        "httpMethod": "POST",
        "method": "listen",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.partitionQuery": {
        "description": "Partitions a query by returning partition cursors that can be used to run the query in parallel. The returned partition cursors are split points that can be used by RunQuery as starting/end points for the query results.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:partitionQuery",
        "httpMethod": "POST",
        "method": "partitionQuery",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.patch": {
        "description": "Updates or inserts a document.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.rollback": {
        "description": "Rolls back a transaction.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents:rollback",
        "httpMethod": "POST",
        "method": "rollback",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.runQuery": {
        "description": "Runs a query.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents/{documentsId}/{documentsId1}:runQuery",
        "httpMethod": "POST",
        "method": "runQuery",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.documents.write": {
        "description": "Streams batches of document updates and deletes, in order.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/documents:write",
        "httpMethod": "POST",
        "method": "write",
        "resourceType": "documents",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "firestore.projects.databases.exportDocuments": {
        "description": "Exports a copy of all or a subset of documents from Google Cloud Firestore to another storage system, such as Google Cloud Storage. Recent updates to documents may not be reflected in the export. The export occurs in the background and its progress can be monitored and managed via the Operation resource that is created. The output of an export may only be used once the associated operation is done. If an export operation is cancelled before completion it may leave partial data behind in Google Cloud Storage.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}:exportDocuments",
        "httpMethod": "POST",
        "method": "exportDocuments",
        "resourceType": "databases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1beta2",
          "v1"
        ]
      },
      "firestore.projects.databases.get": {
        "description": "Gets information about a database.",
        "flatPath": "v1/projects/{projectsId}/databases/{databasesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "databases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firestore.projects.databases.importDocuments": {
        "description": "Imports documents into Google Cloud Firestore. Existing documents with the same name are overwritten. The import occurs in the background and its progress can be monitored and managed via the Operation resource that is created. If an ImportDocuments operation is cancelled, it is possible that a subset of the data has already been imported to Cloud Firestore.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}:importDocuments",
        "httpMethod": "POST",
        "method": "importDocuments",
        "resourceType": "databases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1beta2",
          "v1"
        ]
      },
      "firestore.projects.databases.indexes.create": {
        "description": "Creates the specified index. A newly created index's initial state is `CREATING`. On completion of the returned google.longrunning.Operation, the state will be `READY`. If the index already exists, the call will return an `ALREADY_EXISTS` status. During creation, the process could result in an error, in which case the index will move to the `ERROR` state. The process can be recovered by fixing the data that caused the error, removing the index with delete, then re-creating the index with create. Indexes with a single field cannot be created.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/indexes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "indexes",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1"
        ]
      },
      "firestore.projects.databases.indexes.delete": {
        "description": "Deletes an index.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/indexes/{indexesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "indexes",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1"
        ]
      },
      "firestore.projects.databases.indexes.get": {
        "description": "Gets an index.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/indexes/{indexesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "indexes",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1"
        ]
      },
      "firestore.projects.databases.indexes.list": {
        "description": "Lists the indexes that match the specified filters.",
        "flatPath": "v1beta1/projects/{projectsId}/databases/{databasesId}/indexes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "indexes",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1beta1"
        ]
      },
      "firestore.projects.databases.list": {
        "description": "List all the databases in the project.",
        "flatPath": "v1/projects/{projectsId}/databases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "databases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firestore.projects.databases.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1"
        ]
      },
      "firestore.projects.databases.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1"
        ]
      },
      "firestore.projects.databases.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1"
        ]
      },
      "firestore.projects.databases.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/databases/{databasesId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/databases",
        "versions": [
          "v1"
        ]
      },
      "firestore.projects.databases.patch": {
        "description": "Updates a database.",
        "flatPath": "v1/projects/{projectsId}/databases/{databasesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "databases",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firestore.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "firestore.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Firestore API"
  },
  "fitness": {
    "description": "The Fitness API for managing users' fitness tracking data.",
    "methods": {
      "fitness.users.dataSources.create": {
        "description": "Creates a new data source that is unique across all data sources belonging to this user. A data source is a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point in every dataset inserted into or read from the Fitness API has an associated data source. Each data source produces a unique stream of dataset updates, with a unique data source identifier. Not all changes to data source affect the data stream ID, so that data collected by updated versions of the same application/device can still be considered to belong to the same data source. Data sources are identified using a string generated by the server, based on the contents of the source being created. The dataStreamId field should not be set when invoking this method. It will be automatically generated by the server with the correct format. If a dataStreamId is set, it must match the format that the server would generate. This format is a combination of some fields from the data source, and has a specific order. If it doesn't match, the request will fail with an error. Specifying a DataType which is not a known type (beginning with \"com.google.\") will create a DataSource with a *custom data type*. Custom data types are only readable by the application that created them. Custom data types are *deprecated*; use standard data types instead. In addition to the data source fields included in the data source ID, the developer project number that is authenticated when creating the data source is included. This developer project number is obfuscated when read by any other developer reading public data types.",
        "flatPath": "{userId}/dataSources",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "dataSources",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.dataSources.dataPointChanges.list": {
        "description": "Queries for user's data point changes for a particular data source.",
        "flatPath": "{userId}/dataSources/{dataSourceId}/dataPointChanges",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dataPointChanges",
        "resourceTypePath": "//users/dataSources",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.dataSources.datasets.delete": {
        "description": "Performs an inclusive delete of all data points whose start and end times have any overlap with the time range specified by the dataset ID. For most data types, the entire data point will be deleted. For data types where the time span represents a consistent value (such as com.google.activity.segment), and a data point straddles either end point of the dataset, only the overlapping portion of the data point will be deleted.",
        "flatPath": "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "datasets",
        "resourceTypePath": "//users/dataSources",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.dataSources.datasets.get": {
        "description": "Returns a dataset containing all data points whose start and end times overlap with the specified range of the dataset minimum start time and maximum end time. Specifically, any data point whose start time is less than or equal to the dataset end time and whose end time is greater than or equal to the dataset start time.",
        "flatPath": "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datasets",
        "resourceTypePath": "//users/dataSources",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.dataSources.datasets.patch": {
        "description": "Adds data points to a dataset. The dataset need not be previously created. All points within the given dataset will be returned with subsquent calls to retrieve this dataset. Data points can belong to more than one dataset. This method does not use patch semantics: the data points provided are merely inserted, with no existing data replaced.",
        "flatPath": "{userId}/dataSources/{dataSourceId}/datasets/{datasetId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "datasets",
        "resourceTypePath": "//users/dataSources",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.dataSources.delete": {
        "description": "Deletes the specified data source. The request will fail if the data source contains any data points.",
        "flatPath": "{userId}/dataSources/{dataSourceId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "dataSources",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.dataSources.get": {
        "description": "Returns the specified data source.",
        "flatPath": "{userId}/dataSources/{dataSourceId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dataSources",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.dataSources.list": {
        "description": "Lists all data sources that are visible to the developer, using the OAuth scopes provided. The list is not exhaustive; the user may have private data sources that are only visible to other developers, or calls using other scopes.",
        "flatPath": "{userId}/dataSources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dataSources",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.dataSources.update": {
        "description": "Updates the specified data source. The dataStreamId, dataType, type, dataStreamName, and device properties with the exception of version, cannot be modified. Data sources are identified by their dataStreamId.",
        "flatPath": "{userId}/dataSources/{dataSourceId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "dataSources",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.dataset.aggregate": {
        "description": "Aggregates data of a certain type or stream into buckets divided by a given type of boundary. Multiple data sets of multiple types and from multiple sources can be aggregated into exactly one bucket type per request.",
        "flatPath": "{userId}/dataset:aggregate",
        "httpMethod": "POST",
        "method": "aggregate",
        "resourceType": "dataset",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.sessions.delete": {
        "description": "Deletes a session specified by the given session ID.",
        "flatPath": "{userId}/sessions/{sessionId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sessions",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.sessions.list": {
        "description": "Lists sessions previously created.",
        "flatPath": "{userId}/sessions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sessions",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "fitness.users.sessions.update": {
        "description": "Updates or insert a given session.",
        "flatPath": "{userId}/sessions/{sessionId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "sessions",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Fitness API"
  },
  "games": {
    "description": "The Google Play games service allows developers to enhance games with social leaderboards, achievements, game state, sign-in with Google, and more.",
    "methods": {
      "games.achievementDefinitions.list": {
        "description": "Lists all the achievement definitions for your application.",
        "flatPath": "games/v1/achievements",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "achievementDefinitions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.achievements.increment": {
        "description": "Increments the steps of the achievement with the given ID for the currently authenticated player.",
        "flatPath": "games/v1/achievements/{achievementId}/increment",
        "httpMethod": "POST",
        "method": "increment",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.achievements.list": {
        "description": "Lists the progress for all your application's achievements for the currently authenticated player.",
        "flatPath": "games/v1/players/{playerId}/achievements",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.achievements.reveal": {
        "description": "Sets the state of the achievement with the given ID to `REVEALED` for the currently authenticated player.",
        "flatPath": "games/v1/achievements/{achievementId}/reveal",
        "httpMethod": "POST",
        "method": "reveal",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.achievements.setStepsAtLeast": {
        "description": "Sets the steps for the currently authenticated player towards unlocking an achievement. If the steps parameter is less than the current number of steps that the player already gained for the achievement, the achievement is not modified.",
        "flatPath": "games/v1/achievements/{achievementId}/setStepsAtLeast",
        "httpMethod": "POST",
        "method": "setStepsAtLeast",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.achievements.unlock": {
        "description": "Unlocks this achievement for the currently authenticated player.",
        "flatPath": "games/v1/achievements/{achievementId}/unlock",
        "httpMethod": "POST",
        "method": "unlock",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.achievements.updateMultiple": {
        "description": "Updates multiple achievements for the currently authenticated player.",
        "flatPath": "games/v1/achievements/updateMultiple",
        "httpMethod": "POST",
        "method": "updateMultiple",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.applications.get": {
        "description": "Retrieves the metadata of the application with the given ID. If the requested application is not available for the specified `platformType`, the returned response will not include any instance data.",
        "flatPath": "games/v1/applications/{applicationId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "applications",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.applications.getEndPoint": {
        "description": "Returns a URL for the requested end point type.",
        "flatPath": "games/v1/applications/getEndPoint",
        "httpMethod": "POST",
        "method": "getEndPoint",
        "resourceType": "applications",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.applications.played": {
        "description": "Indicate that the currently authenticated user is playing your application.",
        "flatPath": "games/v1/applications/played",
        "httpMethod": "POST",
        "method": "played",
        "resourceType": "applications",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.applications.verify": {
        "description": "Verifies the auth token provided with this request is for the application with the specified ID, and returns the ID of the player it was granted for.",
        "flatPath": "games/v1/applications/{applicationId}/verify",
        "httpMethod": "GET",
        "method": "verify",
        "resourceType": "applications",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.events.listByPlayer": {
        "description": "Returns a list showing the current progress on events in this application for the currently authenticated user.",
        "flatPath": "games/v1/events",
        "httpMethod": "GET",
        "method": "listByPlayer",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.events.listDefinitions": {
        "description": "Returns a list of the event definitions in this application.",
        "flatPath": "games/v1/eventDefinitions",
        "httpMethod": "GET",
        "method": "listDefinitions",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.events.record": {
        "description": "Records a batch of changes to the number of times events have occurred for the currently authenticated user of this application.",
        "flatPath": "games/v1/events",
        "httpMethod": "POST",
        "method": "record",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.leaderboards.get": {
        "description": "Retrieves the metadata of the leaderboard with the given ID.",
        "flatPath": "games/v1/leaderboards/{leaderboardId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "leaderboards",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.leaderboards.list": {
        "description": "Lists all the leaderboard metadata for your application.",
        "flatPath": "games/v1/leaderboards",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "leaderboards",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.metagame.getMetagameConfig": {
        "description": "Return the metagame configuration data for the calling application.",
        "flatPath": "games/v1/metagameConfig",
        "httpMethod": "GET",
        "method": "getMetagameConfig",
        "resourceType": "metagame",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.metagame.listCategoriesByPlayer": {
        "description": "List play data aggregated per category for the player corresponding to `playerId`.",
        "flatPath": "games/v1/players/{playerId}/categories/{collection}",
        "httpMethod": "GET",
        "method": "listCategoriesByPlayer",
        "resourceType": "metagame",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.players.get": {
        "description": "Retrieves the Player resource with the given ID. To retrieve the player for the currently authenticated user, set `playerId` to `me`.",
        "flatPath": "games/v1/players/{playerId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "players",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.players.list": {
        "description": "Get the collection of players for the currently authenticated user.",
        "flatPath": "games/v1/players/me/players/{collection}",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "players",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.revisions.check": {
        "description": "Checks whether the games client is out of date.",
        "flatPath": "games/v1/revisions/check",
        "httpMethod": "GET",
        "method": "check",
        "resourceType": "revisions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.scores.get": {
        "description": "Get high scores, and optionally ranks, in leaderboards for the currently authenticated player. For a specific time span, `leaderboardId` can be set to `ALL` to retrieve data for all leaderboards in a given time span. `NOTE: You cannot ask for 'ALL' leaderboards and 'ALL' timeSpans in the same request; only one parameter may be set to 'ALL'.",
        "flatPath": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.scores.list": {
        "description": "Lists the scores in a leaderboard, starting from the top.",
        "flatPath": "games/v1/leaderboards/{leaderboardId}/scores/{collection}",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.scores.listWindow": {
        "description": "Lists the scores in a leaderboard around (and including) a player's score.",
        "flatPath": "games/v1/leaderboards/{leaderboardId}/window/{collection}",
        "httpMethod": "GET",
        "method": "listWindow",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.scores.submit": {
        "description": "Submits a score to the specified leaderboard.",
        "flatPath": "games/v1/leaderboards/{leaderboardId}/scores",
        "httpMethod": "POST",
        "method": "submit",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.scores.submitMultiple": {
        "description": "Submits multiple scores to leaderboards.",
        "flatPath": "games/v1/leaderboards/scores",
        "httpMethod": "POST",
        "method": "submitMultiple",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.snapshots.get": {
        "description": "Retrieves the metadata for a given snapshot ID.",
        "flatPath": "games/v1/snapshots/{snapshotId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.snapshots.list": {
        "description": "Retrieves a list of snapshots created by your application for the player corresponding to the player ID.",
        "flatPath": "games/v1/players/{playerId}/snapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "snapshots",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "games.stats.get": {
        "description": "Returns engagement and spend statistics in this application for the currently authenticated user.",
        "flatPath": "games/v1/stats",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "stats",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Play Game Services"
  },
  "gamesConfiguration": {
    "description": "The Google Play Game Services Publishing API allows developers to configure their games in Game Services.",
    "methods": {
      "gamesConfiguration.achievementConfigurations.delete": {
        "description": "Delete the achievement configuration with the given ID.",
        "flatPath": "games/v1configuration/achievements/{achievementId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "achievementConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.achievementConfigurations.get": {
        "description": "Retrieves the metadata of the achievement configuration with the given ID.",
        "flatPath": "games/v1configuration/achievements/{achievementId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "achievementConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.achievementConfigurations.insert": {
        "description": "Insert a new achievement configuration in this application.",
        "flatPath": "games/v1configuration/applications/{applicationId}/achievements",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "achievementConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.achievementConfigurations.list": {
        "description": "Returns a list of the achievement configurations in this application.",
        "flatPath": "games/v1configuration/applications/{applicationId}/achievements",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "achievementConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.achievementConfigurations.update": {
        "description": "Update the metadata of the achievement configuration with the given ID.",
        "flatPath": "games/v1configuration/achievements/{achievementId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "achievementConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.imageConfigurations.upload": {
        "description": "Uploads an image for a resource with the given ID and image type.",
        "flatPath": "games/v1configuration/images/{resourceId}/imageType/{imageType}",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "imageConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.leaderboardConfigurations.delete": {
        "description": "Delete the leaderboard configuration with the given ID.",
        "flatPath": "games/v1configuration/leaderboards/{leaderboardId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "leaderboardConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.leaderboardConfigurations.get": {
        "description": "Retrieves the metadata of the leaderboard configuration with the given ID.",
        "flatPath": "games/v1configuration/leaderboards/{leaderboardId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "leaderboardConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.leaderboardConfigurations.insert": {
        "description": "Insert a new leaderboard configuration in this application.",
        "flatPath": "games/v1configuration/applications/{applicationId}/leaderboards",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "leaderboardConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.leaderboardConfigurations.list": {
        "description": "Returns a list of the leaderboard configurations in this application.",
        "flatPath": "games/v1configuration/applications/{applicationId}/leaderboards",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "leaderboardConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      },
      "gamesConfiguration.leaderboardConfigurations.update": {
        "description": "Update the metadata of the leaderboard configuration with the given ID.",
        "flatPath": "games/v1configuration/leaderboards/{leaderboardId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "leaderboardConfigurations",
        "resourceTypePath": "/",
        "versions": [
          "v1configuration"
        ]
      }
    },
    "preferredVersion": "v1configuration",
    "title": "Google Play Game Services Publishing API"
  },
  "gamesManagement": {
    "description": "The Google Play Game Management API allows developers to manage resources from the Google Play Game service.",
    "methods": {
      "gamesManagement.achievements.reset": {
        "description": "Resets the achievement with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.",
        "flatPath": "games/v1management/achievements/{achievementId}/reset",
        "httpMethod": "POST",
        "method": "reset",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.achievements.resetAll": {
        "description": "Resets all achievements for the currently authenticated player for your application. This method is only accessible to whitelisted tester accounts for your application.",
        "flatPath": "games/v1management/achievements/reset",
        "httpMethod": "POST",
        "method": "resetAll",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.achievements.resetAllForAllPlayers": {
        "description": "Resets all draft achievements for all players. This method is only available to user accounts for your developer console.",
        "flatPath": "games/v1management/achievements/resetAllForAllPlayers",
        "httpMethod": "POST",
        "method": "resetAllForAllPlayers",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.achievements.resetForAllPlayers": {
        "description": "Resets the achievement with the given ID for all players. This method is only available to user accounts for your developer console. Only draft achievements can be reset.",
        "flatPath": "games/v1management/achievements/{achievementId}/resetForAllPlayers",
        "httpMethod": "POST",
        "method": "resetForAllPlayers",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.achievements.resetMultipleForAllPlayers": {
        "description": "Resets achievements with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft achievements may be reset.",
        "flatPath": "games/v1management/achievements/resetMultipleForAllPlayers",
        "httpMethod": "POST",
        "method": "resetMultipleForAllPlayers",
        "resourceType": "achievements",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.applications.listHidden": {
        "description": "Get the list of players hidden from the given application. This method is only available to user accounts for your developer console.",
        "flatPath": "games/v1management/applications/{applicationId}/players/hidden",
        "httpMethod": "GET",
        "method": "listHidden",
        "resourceType": "applications",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.events.reset": {
        "description": "Resets all player progress on the event with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.",
        "flatPath": "games/v1management/events/{eventId}/reset",
        "httpMethod": "POST",
        "method": "reset",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.events.resetAll": {
        "description": "Resets all player progress on all events for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.",
        "flatPath": "games/v1management/events/reset",
        "httpMethod": "POST",
        "method": "resetAll",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.events.resetAllForAllPlayers": {
        "description": "Resets all draft events for all players. This method is only available to user accounts for your developer console.",
        "flatPath": "games/v1management/events/resetAllForAllPlayers",
        "httpMethod": "POST",
        "method": "resetAllForAllPlayers",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.events.resetForAllPlayers": {
        "description": "Resets the event with the given ID for all players. This method is only available to user accounts for your developer console. Only draft events can be reset.",
        "flatPath": "games/v1management/events/{eventId}/resetForAllPlayers",
        "httpMethod": "POST",
        "method": "resetForAllPlayers",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.events.resetMultipleForAllPlayers": {
        "description": "Resets events with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft events may be reset.",
        "flatPath": "games/v1management/events/resetMultipleForAllPlayers",
        "httpMethod": "POST",
        "method": "resetMultipleForAllPlayers",
        "resourceType": "events",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.players.hide": {
        "description": "Hide the given player's leaderboard scores from the given application. This method is only available to user accounts for your developer console.",
        "flatPath": "games/v1management/applications/{applicationId}/players/hidden/{playerId}",
        "httpMethod": "POST",
        "method": "hide",
        "resourceType": "players",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.players.unhide": {
        "description": "Unhide the given player's leaderboard scores from the given application. This method is only available to user accounts for your developer console.",
        "flatPath": "games/v1management/applications/{applicationId}/players/hidden/{playerId}",
        "httpMethod": "DELETE",
        "method": "unhide",
        "resourceType": "players",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.scores.reset": {
        "description": "Resets scores for the leaderboard with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.",
        "flatPath": "games/v1management/leaderboards/{leaderboardId}/scores/reset",
        "httpMethod": "POST",
        "method": "reset",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.scores.resetAll": {
        "description": "Resets all scores for all leaderboards for the currently authenticated players. This method is only accessible to whitelisted tester accounts for your application.",
        "flatPath": "games/v1management/scores/reset",
        "httpMethod": "POST",
        "method": "resetAll",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.scores.resetAllForAllPlayers": {
        "description": "Resets scores for all draft leaderboards for all players. This method is only available to user accounts for your developer console.",
        "flatPath": "games/v1management/scores/resetAllForAllPlayers",
        "httpMethod": "POST",
        "method": "resetAllForAllPlayers",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.scores.resetForAllPlayers": {
        "description": "Resets scores for the leaderboard with the given ID for all players. This method is only available to user accounts for your developer console. Only draft leaderboards can be reset.",
        "flatPath": "games/v1management/leaderboards/{leaderboardId}/scores/resetForAllPlayers",
        "httpMethod": "POST",
        "method": "resetForAllPlayers",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      },
      "gamesManagement.scores.resetMultipleForAllPlayers": {
        "description": "Resets scores for the leaderboards with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft leaderboards may be reset.",
        "flatPath": "games/v1management/scores/resetMultipleForAllPlayers",
        "httpMethod": "POST",
        "method": "resetMultipleForAllPlayers",
        "resourceType": "scores",
        "resourceTypePath": "/",
        "versions": [
          "v1management"
        ]
      }
    },
    "preferredVersion": "v1management",
    "title": "Google Play Game Management"
  },
  "gameservices": {
    "description": "Deploy and manage infrastructure for global multiplayer gaming experiences.",
    "methods": {
      "gameservices.projects.locations.gameServerDeployments.configs.create": {
        "description": "Creates a new game server config in a given project, location, and game server deployment. Game server configs are immutable, and are not applied until referenced in the game server deployment rollout resource.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}/configs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/gameServerDeployments",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.configs.delete": {
        "description": "Deletes a single game server config. The deletion will fail if the game server config is referenced in a game server deployment rollout.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}/configs/{configsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/gameServerDeployments",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.configs.get": {
        "description": "Gets details of a single game server config.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}/configs/{configsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/gameServerDeployments",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.configs.list": {
        "description": "Lists game server configs in a given project, location, and game server deployment.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}/configs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "configs",
        "resourceTypePath": "//projects/locations/gameServerDeployments",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.create": {
        "description": "Creates a new game server deployment in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.delete": {
        "description": "Deletes a single game server deployment.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.fetchDeploymentState": {
        "description": "Retrieves information about the current state of the game server deployment. Gathers all the Agones fleets and Agones autoscalers, including fleets running an older version of the game server deployment.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}:fetchDeploymentState",
        "httpMethod": "POST",
        "method": "fetchDeploymentState",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.get": {
        "description": "Gets details of a single game server deployment.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.getRollout": {
        "description": "Gets details a single game server deployment rollout.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}/rollout",
        "httpMethod": "GET",
        "method": "getRollout",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.list": {
        "description": "Lists game server deployments in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.patch": {
        "description": "Patches a game server deployment.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.previewRollout": {
        "description": "Previews the game server deployment rollout. This API does not mutate the rollout resource.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}/rollout:preview",
        "httpMethod": "PATCH",
        "method": "previewRollout",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.gameServerDeployments.updateRollout": {
        "description": "Patches a single game server deployment rollout. The method will not return an error if the update does not affect any existing realms. For example - if the default_game_server_config is changed but all existing realms use the override, that is valid. Similarly, if a non existing realm is explicitly called out in game_server_config_overrides field, that will also not result in an error.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/gameServerDeployments/{gameServerDeploymentsId}/rollout",
        "httpMethod": "PATCH",
        "method": "updateRollout",
        "resourceType": "gameServerDeployments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.create": {
        "description": "Creates a new realm in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "realms",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.delete": {
        "description": "Deletes a single realm.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "realms",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.gameServerClusters.create": {
        "description": "Creates a new game server cluster in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}/gameServerClusters",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "gameServerClusters",
        "resourceTypePath": "//projects/locations/realms",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.gameServerClusters.delete": {
        "description": "Deletes a single game server cluster.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}/gameServerClusters/{gameServerClustersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "gameServerClusters",
        "resourceTypePath": "//projects/locations/realms",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.gameServerClusters.get": {
        "description": "Gets details of a single game server cluster.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}/gameServerClusters/{gameServerClustersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "gameServerClusters",
        "resourceTypePath": "//projects/locations/realms",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.gameServerClusters.list": {
        "description": "Lists game server clusters in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}/gameServerClusters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "gameServerClusters",
        "resourceTypePath": "//projects/locations/realms",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.gameServerClusters.patch": {
        "description": "Patches a single game server cluster.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}/gameServerClusters/{gameServerClustersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "gameServerClusters",
        "resourceTypePath": "//projects/locations/realms",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.gameServerClusters.previewCreate": {
        "description": "Previews creation of a new game server cluster in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}/gameServerClusters:previewCreate",
        "httpMethod": "POST",
        "method": "previewCreate",
        "resourceType": "gameServerClusters",
        "resourceTypePath": "//projects/locations/realms",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.gameServerClusters.previewDelete": {
        "description": "Previews deletion of a single game server cluster.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}/gameServerClusters/{gameServerClustersId}:previewDelete",
        "httpMethod": "DELETE",
        "method": "previewDelete",
        "resourceType": "gameServerClusters",
        "resourceTypePath": "//projects/locations/realms",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.gameServerClusters.previewUpdate": {
        "description": "Previews updating a GameServerCluster.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}/gameServerClusters/{gameServerClustersId}:previewUpdate",
        "httpMethod": "PATCH",
        "method": "previewUpdate",
        "resourceType": "gameServerClusters",
        "resourceTypePath": "//projects/locations/realms",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.get": {
        "description": "Gets details of a single realm.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "realms",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.list": {
        "description": "Lists realms in a given project and location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "realms",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.patch": {
        "description": "Patches a single realm.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "realms",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "gameservices.projects.locations.realms.previewUpdate": {
        "description": "Previews patches to a single realm.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/realms/{realmsId}:previewUpdate",
        "httpMethod": "PATCH",
        "method": "previewUpdate",
        "resourceType": "realms",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Game Services API"
  },
  "genomics": {
    "description": "Uploads, processes, queries, and searches Genomics data in the cloud.",
    "methods": {
      "genomics.pipelines.run": {
        "description": "Runs a pipeline. The returned Operation's metadata field will contain a google.genomics.v2alpha1.Metadata object describing the status of the pipeline execution. The [response] field will contain a google.genomics.v2alpha1.RunPipelineResponse object if the pipeline completes successfully. **Note:** Before you can use this method, the Genomics Service Agent must have access to your project. This is done automatically when the Cloud Genomics API is first enabled, but if you delete this permission, or if you enabled the Cloud Genomics API before the v2alpha1 API launch, you must disable and re-enable the API to grant the Genomics Service Agent the required permissions. Authorization requires the following [Google IAM](https://cloud.google.com/iam/) permission: * `genomics.operations.create` [1]: /genomics/gsa",
        "flatPath": "v2alpha1/pipelines:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "pipelines",
        "resourceTypePath": "/",
        "versions": [
          "v2alpha1"
        ]
      },
      "genomics.projects.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `genomics.operations.cancel`",
        "flatPath": "v2alpha1/projects/{projectsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2alpha1"
        ]
      },
      "genomics.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `genomics.operations.get`",
        "flatPath": "v2alpha1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2alpha1"
        ]
      },
      "genomics.projects.operations.list": {
        "description": "Lists operations that match the specified filter in the request. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `genomics.operations.list`",
        "flatPath": "v2alpha1/projects/{projectsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2alpha1"
        ]
      },
      "genomics.projects.workers.checkIn": {
        "description": "The worker uses this method to retrieve the assigned operation and provide periodic status updates.",
        "flatPath": "v2alpha1/projects/{projectsId}/workers/{workersId}:checkIn",
        "httpMethod": "POST",
        "method": "checkIn",
        "resourceType": "workers",
        "resourceTypePath": "//projects",
        "versions": [
          "v2alpha1"
        ]
      },
      "genomics.workers.checkIn": {
        "description": "The worker uses this method to retrieve the assigned operation and provide periodic status updates.",
        "flatPath": "v2alpha1/workers/{id}:checkIn",
        "httpMethod": "POST",
        "method": "checkIn",
        "resourceType": "workers",
        "resourceTypePath": "/",
        "versions": [
          "v2alpha1"
        ]
      }
    },
    "preferredVersion": "v2alpha1",
    "title": "Genomics API"
  },
  "gkehub": {
    "description": "",
    "methods": {
      "gkehub.projects.locations.features.create": {
        "description": "Adds a new Feature.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/features",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "features",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "gkehub.projects.locations.features.delete": {
        "description": "Removes a Feature.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/features/{featuresId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "features",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "gkehub.projects.locations.features.get": {
        "description": "Gets details of a single Feature.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/features/{featuresId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "features",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "gkehub.projects.locations.features.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/features/{featuresId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "features",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "gkehub.projects.locations.features.list": {
        "description": "Lists Features in a given project and location.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/features",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "features",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "gkehub.projects.locations.features.patch": {
        "description": "Updates an existing Feature.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/features/{featuresId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "features",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "gkehub.projects.locations.features.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/features/{featuresId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "features",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "gkehub.projects.locations.features.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/features/{featuresId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "features",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "gkehub.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.global.memberships.initializeHub": {
        "description": "Initializes the Hub in this project, which includes creating the default Hub Service Account and the Hub Workload Identity Pool. Initialization is optional, and happens automatically when the first Membership is created. InitializeHub should be called when the first Membership cannot be registered without these resources. A common example is granting the Hub Service Account access to another project, which requires the account to exist first.",
        "flatPath": "v1alpha2/projects/{projectsId}/locations/global/memberships:initializeHub",
        "httpMethod": "POST",
        "method": "initializeHub",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha2"
        ]
      },
      "gkehub.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.create": {
        "description": "Creates a new Membership. **This is currently only supported for GKE clusters on Google Cloud**. To register other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.delete": {
        "description": "Removes a Membership. **This is currently only supported for GKE clusters on Google Cloud**. To unregister other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.generateConnectManifest": {
        "description": "Generates the manifest for deployment of the GKE connect agent. **This method is used internally by Google-provided libraries.** Most clients should not need to call this method directly.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}:generateConnectManifest",
        "httpMethod": "GET",
        "method": "generateConnectManifest",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.generateExclusivityManifest": {
        "description": "GenerateExclusivityManifest generates the manifests to update the exclusivity artifacts in the cluster if needed. Exclusivity artifacts include the Membership custom resource definition (CRD) and the singleton Membership custom resource (CR). Combined with ValidateExclusivity, exclusivity artifacts guarantee that a Kubernetes cluster is only registered to a single GKE Hub. The Membership CRD is versioned, and may require conversion when the GKE Hub API server begins serving a newer version of the CRD and corresponding CR. The response will be the converted CRD and CR if there are any differences between the versions.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}:generateExclusivityManifest",
        "httpMethod": "GET",
        "method": "generateExclusivityManifest",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "gkehub.projects.locations.memberships.get": {
        "description": "Gets the details of a Membership.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.list": {
        "description": "Lists Memberships in a given project and location.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.listAdmin": {
        "description": "Lists Memberships of admin clusters in a given project and location. **This method is only used internally**.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships:listAdmin",
        "httpMethod": "GET",
        "method": "listAdmin",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha"
        ]
      },
      "gkehub.projects.locations.memberships.patch": {
        "description": "Updates an existing Membership.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/memberships/{membershipsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.memberships.validateExclusivity": {
        "description": "ValidateExclusivity validates the state of exclusivity in the cluster. The validation does not depend on an existing Hub membership resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/memberships:validateExclusivity",
        "httpMethod": "GET",
        "method": "validateExclusivity",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "gkehub.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta",
          "v1beta1",
          "v1"
        ]
      },
      "gkehub.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1alpha2",
          "v1beta",
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "GKE Hub API"
  },
  "gmail": {
    "description": "The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.",
    "methods": {
      "gmail.users.drafts.create": {
        "description": "Creates a new draft with the `DRAFT` label.",
        "flatPath": "gmail/v1/users/{userId}/drafts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "drafts",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.drafts.delete": {
        "description": "Immediately and permanently deletes the specified draft. Does not simply trash it.",
        "flatPath": "gmail/v1/users/{userId}/drafts/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "drafts",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.drafts.get": {
        "description": "Gets the specified draft.",
        "flatPath": "gmail/v1/users/{userId}/drafts/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "drafts",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.drafts.list": {
        "description": "Lists the drafts in the user's mailbox.",
        "flatPath": "gmail/v1/users/{userId}/drafts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "drafts",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.drafts.send": {
        "description": "Sends the specified, existing draft to the recipients in the `To`, `Cc`, and `Bcc` headers.",
        "flatPath": "gmail/v1/users/{userId}/drafts/send",
        "httpMethod": "POST",
        "method": "send",
        "resourceType": "drafts",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.drafts.update": {
        "description": "Replaces a draft's content.",
        "flatPath": "gmail/v1/users/{userId}/drafts/{id}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "drafts",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.getProfile": {
        "description": "Gets the current user's Gmail profile.",
        "flatPath": "gmail/v1/users/{userId}/profile",
        "httpMethod": "GET",
        "method": "getProfile",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.history.list": {
        "description": "Lists the history of all changes to the given mailbox. History results are returned in chronological order (increasing `historyId`).",
        "flatPath": "gmail/v1/users/{userId}/history",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "history",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.labels.create": {
        "description": "Creates a new label.",
        "flatPath": "gmail/v1/users/{userId}/labels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "labels",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.labels.delete": {
        "description": "Immediately and permanently deletes the specified label and removes it from any messages and threads that it is applied to.",
        "flatPath": "gmail/v1/users/{userId}/labels/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "labels",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.labels.get": {
        "description": "Gets the specified label.",
        "flatPath": "gmail/v1/users/{userId}/labels/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "labels",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.labels.list": {
        "description": "Lists all labels in the user's mailbox.",
        "flatPath": "gmail/v1/users/{userId}/labels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "labels",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.labels.patch": {
        "description": "Patch the specified label.",
        "flatPath": "gmail/v1/users/{userId}/labels/{id}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "labels",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.labels.update": {
        "description": "Updates the specified label.",
        "flatPath": "gmail/v1/users/{userId}/labels/{id}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "labels",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.attachments.get": {
        "description": "Gets the specified message attachment.",
        "flatPath": "gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "attachments",
        "resourceTypePath": "//users/messages",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.batchDelete": {
        "description": "Deletes many messages by message ID. Provides no guarantees that messages were not already deleted or even existed at all.",
        "flatPath": "gmail/v1/users/{userId}/messages/batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.batchModify": {
        "description": "Modifies the labels on the specified messages.",
        "flatPath": "gmail/v1/users/{userId}/messages/batchModify",
        "httpMethod": "POST",
        "method": "batchModify",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.delete": {
        "description": "Immediately and permanently deletes the specified message. This operation cannot be undone. Prefer `messages.trash` instead.",
        "flatPath": "gmail/v1/users/{userId}/messages/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.get": {
        "description": "Gets the specified message.",
        "flatPath": "gmail/v1/users/{userId}/messages/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.import": {
        "description": "Imports a message into only this user's mailbox, with standard email delivery scanning and classification similar to receiving via SMTP. This method doesn't perform SPF checks, so it might not work for some spam messages, such as those attempting to perform domain spoofing. This method does not send a message. Note: This function doesn't trigger forwarding rules or filters set up by the user.",
        "flatPath": "gmail/v1/users/{userId}/messages/import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.insert": {
        "description": "Directly inserts a message into only this user's mailbox similar to `IMAP APPEND`, bypassing most scanning and classification. Does not send a message.",
        "flatPath": "gmail/v1/users/{userId}/messages",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.list": {
        "description": "Lists the messages in the user's mailbox.",
        "flatPath": "gmail/v1/users/{userId}/messages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.modify": {
        "description": "Modifies the labels on the specified message.",
        "flatPath": "gmail/v1/users/{userId}/messages/{id}/modify",
        "httpMethod": "POST",
        "method": "modify",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.send": {
        "description": "Sends the specified message to the recipients in the `To`, `Cc`, and `Bcc` headers.",
        "flatPath": "gmail/v1/users/{userId}/messages/send",
        "httpMethod": "POST",
        "method": "send",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.trash": {
        "description": "Moves the specified message to the trash.",
        "flatPath": "gmail/v1/users/{userId}/messages/{id}/trash",
        "httpMethod": "POST",
        "method": "trash",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.messages.untrash": {
        "description": "Removes the specified message from the trash.",
        "flatPath": "gmail/v1/users/{userId}/messages/{id}/untrash",
        "httpMethod": "POST",
        "method": "untrash",
        "resourceType": "messages",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.delegates.create": {
        "description": "Adds a delegate with its verification status set directly to `accepted`, without sending any verification email. The delegate user must be a member of the same G Suite organization as the delegator user. Gmail imposes limitations on the number of delegates and delegators each user in a G Suite organization can have. These limits depend on your organization, but in general each user can have up to 25 delegates and up to 10 delegators. Note that a delegate user must be referred to by their primary email address, and not an email alias. Also note that when a new delegate is created, there may be up to a one minute delay before the new delegate is available for use. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/delegates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "delegates",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.delegates.delete": {
        "description": "Removes the specified delegate (which can be of any verification status), and revokes any verification that may have been required for using it. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "delegates",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.delegates.get": {
        "description": "Gets the specified delegate. Note that a delegate user must be referred to by their primary email address, and not an email alias. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/delegates/{delegateEmail}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "delegates",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.delegates.list": {
        "description": "Lists the delegates for the specified account. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/delegates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "delegates",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.filters.create": {
        "description": "Creates a filter. Note: you can only create a maximum of 1,000 filters.",
        "flatPath": "gmail/v1/users/{userId}/settings/filters",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "filters",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.filters.delete": {
        "description": "Deletes a filter.",
        "flatPath": "gmail/v1/users/{userId}/settings/filters/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "filters",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.filters.get": {
        "description": "Gets a filter.",
        "flatPath": "gmail/v1/users/{userId}/settings/filters/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "filters",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.filters.list": {
        "description": "Lists the message filters of a Gmail user.",
        "flatPath": "gmail/v1/users/{userId}/settings/filters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "filters",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.forwardingAddresses.create": {
        "description": "Creates a forwarding address. If ownership verification is required, a message will be sent to the recipient and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "forwardingAddresses",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.forwardingAddresses.delete": {
        "description": "Deletes the specified forwarding address and revokes any verification that may have been required. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "forwardingAddresses",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.forwardingAddresses.get": {
        "description": "Gets the specified forwarding address.",
        "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "forwardingAddresses",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.forwardingAddresses.list": {
        "description": "Lists the forwarding addresses for the specified account.",
        "flatPath": "gmail/v1/users/{userId}/settings/forwardingAddresses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "forwardingAddresses",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.getAutoForwarding": {
        "description": "Gets the auto-forwarding setting for the specified account.",
        "flatPath": "gmail/v1/users/{userId}/settings/autoForwarding",
        "httpMethod": "GET",
        "method": "getAutoForwarding",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.getImap": {
        "description": "Gets IMAP settings.",
        "flatPath": "gmail/v1/users/{userId}/settings/imap",
        "httpMethod": "GET",
        "method": "getImap",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.getLanguage": {
        "description": "Gets language settings.",
        "flatPath": "gmail/v1/users/{userId}/settings/language",
        "httpMethod": "GET",
        "method": "getLanguage",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.getPop": {
        "description": "Gets POP settings.",
        "flatPath": "gmail/v1/users/{userId}/settings/pop",
        "httpMethod": "GET",
        "method": "getPop",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.getVacation": {
        "description": "Gets vacation responder settings.",
        "flatPath": "gmail/v1/users/{userId}/settings/vacation",
        "httpMethod": "GET",
        "method": "getVacation",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.create": {
        "description": "Creates a custom \"from\" send-as alias. If an SMTP MSA is specified, Gmail will attempt to connect to the SMTP service to validate the configuration before creating the alias. If ownership verification is required for the alias, a message will be sent to the email address and the resource's verification status will be set to `pending`; otherwise, the resource will be created with verification status set to `accepted`. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sendAs",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.delete": {
        "description": "Deletes the specified send-as alias. Revokes any verification that may have been required for using it. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sendAs",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.get": {
        "description": "Gets the specified send-as alias. Fails with an HTTP 404 error if the specified address is not a member of the collection.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sendAs",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.list": {
        "description": "Lists the send-as aliases for the specified account. The result includes the primary send-as address associated with the account as well as any custom \"from\" aliases.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sendAs",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.patch": {
        "description": "Patch the specified send-as alias.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sendAs",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.smimeInfo.delete": {
        "description": "Deletes the specified S/MIME config for the specified send-as alias.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "smimeInfo",
        "resourceTypePath": "//users/settings/sendAs",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.smimeInfo.get": {
        "description": "Gets the specified S/MIME config for the specified send-as alias.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "smimeInfo",
        "resourceTypePath": "//users/settings/sendAs",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.smimeInfo.insert": {
        "description": "Insert (upload) the given S/MIME config for the specified send-as alias. Note that pkcs12 format is required for the key.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "smimeInfo",
        "resourceTypePath": "//users/settings/sendAs",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.smimeInfo.list": {
        "description": "Lists S/MIME configs for the specified send-as alias.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "smimeInfo",
        "resourceTypePath": "//users/settings/sendAs",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.smimeInfo.setDefault": {
        "description": "Sets the default S/MIME config for the specified send-as alias.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault",
        "httpMethod": "POST",
        "method": "setDefault",
        "resourceType": "smimeInfo",
        "resourceTypePath": "//users/settings/sendAs",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.update": {
        "description": "Updates a send-as alias. If a signature is provided, Gmail will sanitize the HTML before saving it with the alias. Addresses other than the primary address for the account can only be updated by service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "sendAs",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.sendAs.verify": {
        "description": "Sends a verification email to the specified send-as alias address. The verification status must be `pending`. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify",
        "httpMethod": "POST",
        "method": "verify",
        "resourceType": "sendAs",
        "resourceTypePath": "//users/settings",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.updateAutoForwarding": {
        "description": "Updates the auto-forwarding setting for the specified account. A verified forwarding address must be specified when auto-forwarding is enabled. This method is only available to service account clients that have been delegated domain-wide authority.",
        "flatPath": "gmail/v1/users/{userId}/settings/autoForwarding",
        "httpMethod": "PUT",
        "method": "updateAutoForwarding",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.updateImap": {
        "description": "Updates IMAP settings.",
        "flatPath": "gmail/v1/users/{userId}/settings/imap",
        "httpMethod": "PUT",
        "method": "updateImap",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.updateLanguage": {
        "description": "Updates language settings. If successful, the return object contains the `displayLanguage` that was saved for the user, which may differ from the value passed into the request. This is because the requested `displayLanguage` may not be directly supported by Gmail but have a close variant that is, and so the variant may be chosen and saved instead.",
        "flatPath": "gmail/v1/users/{userId}/settings/language",
        "httpMethod": "PUT",
        "method": "updateLanguage",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.updatePop": {
        "description": "Updates POP settings.",
        "flatPath": "gmail/v1/users/{userId}/settings/pop",
        "httpMethod": "PUT",
        "method": "updatePop",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.settings.updateVacation": {
        "description": "Updates vacation responder settings.",
        "flatPath": "gmail/v1/users/{userId}/settings/vacation",
        "httpMethod": "PUT",
        "method": "updateVacation",
        "resourceType": "settings",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.stop": {
        "description": "Stop receiving push notifications for the given user mailbox.",
        "flatPath": "gmail/v1/users/{userId}/stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.threads.delete": {
        "description": "Immediately and permanently deletes the specified thread. This operation cannot be undone. Prefer `threads.trash` instead.",
        "flatPath": "gmail/v1/users/{userId}/threads/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "threads",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.threads.get": {
        "description": "Gets the specified thread.",
        "flatPath": "gmail/v1/users/{userId}/threads/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "threads",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.threads.list": {
        "description": "Lists the threads in the user's mailbox.",
        "flatPath": "gmail/v1/users/{userId}/threads",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "threads",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.threads.modify": {
        "description": "Modifies the labels applied to the thread. This applies to all messages in the thread.",
        "flatPath": "gmail/v1/users/{userId}/threads/{id}/modify",
        "httpMethod": "POST",
        "method": "modify",
        "resourceType": "threads",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.threads.trash": {
        "description": "Moves the specified thread to the trash.",
        "flatPath": "gmail/v1/users/{userId}/threads/{id}/trash",
        "httpMethod": "POST",
        "method": "trash",
        "resourceType": "threads",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.threads.untrash": {
        "description": "Removes the specified thread from the trash.",
        "flatPath": "gmail/v1/users/{userId}/threads/{id}/untrash",
        "httpMethod": "POST",
        "method": "untrash",
        "resourceType": "threads",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "gmail.users.watch": {
        "description": "Set up or update a push notification watch on the given user mailbox.",
        "flatPath": "gmail/v1/users/{userId}/watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Gmail API"
  },
  "gmailpostmastertools": {
    "description": "The Postmaster Tools API is a RESTful API that provides programmatic access to email traffic metrics (like spam reports, delivery errors etc) otherwise available through the Gmail Postmaster Tools UI currently.",
    "methods": {
      "gmailpostmastertools.domains.get": {
        "description": "Gets a specific domain registered by the client. Returns NOT_FOUND if the domain does not exist.",
        "flatPath": "v1beta1/domains/{domainsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domains",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "gmailpostmastertools.domains.list": {
        "description": "Lists the domains that have been registered by the client. The order of domains in the response is unspecified and non-deterministic. Newly created domains will not necessarily be added to the end of this list.",
        "flatPath": "v1beta1/domains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "domains",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "gmailpostmastertools.domains.trafficStats.get": {
        "description": "Get traffic statistics for a domain on a specific date. Returns PERMISSION_DENIED if user does not have permission to access TrafficStats for the domain.",
        "flatPath": "v1beta1/domains/{domainsId}/trafficStats/{trafficStatsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "trafficStats",
        "resourceTypePath": "//domains",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "gmailpostmastertools.domains.trafficStats.list": {
        "description": "List traffic statistics for all available days. Returns PERMISSION_DENIED if user does not have permission to access TrafficStats for the domain.",
        "flatPath": "v1beta1/domains/{domainsId}/trafficStats",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "trafficStats",
        "resourceTypePath": "//domains",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Gmail Postmaster Tools API"
  },
  "groupsmigration": {
    "description": "The Groups Migration API allows domain administrators to archive emails into Google groups.",
    "methods": {
      "groupsmigration.archive.insert": {
        "description": "Inserts a new mail into the archive of the Google group.",
        "flatPath": "groups/v1/groups/{groupId}/archive",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "archive",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Groups Migration API"
  },
  "groupssettings": {
    "description": "The Groups Settings API allows domain administrators to view and manage access levels and advanced settings for a group.",
    "methods": {
      "groupsSettings.groups.get": {
        "description": "Gets one resource by id.",
        "flatPath": "{groupUniqueId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "groupsSettings.groups.patch": {
        "description": "Updates an existing resource. This method supports patch semantics.",
        "flatPath": "{groupUniqueId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "groupsSettings.groups.update": {
        "description": "Updates an existing resource.",
        "flatPath": "{groupUniqueId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Groups Settings API"
  },
  "healthcare": {
    "description": "Manage, store, and access healthcare data in Google Cloud Platform.",
    "methods": {
      "healthcare.projects.locations.datasets.annotationStores.annotations.create": {
        "description": "Creates a new Annotation record. It is valid to create Annotation objects for the same source more than once since a unique ID is assigned to each record by this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "annotations",
        "resourceTypePath": "//projects/locations/datasets/annotationStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.annotations.delete": {
        "description": "Deletes an Annotation or returns NOT_FOUND if it does not exist.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations/{annotationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "annotations",
        "resourceTypePath": "//projects/locations/datasets/annotationStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.annotations.get": {
        "description": "Gets an Annotation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations/{annotationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "annotations",
        "resourceTypePath": "//projects/locations/datasets/annotationStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.annotations.list": {
        "description": "Lists the Annotations in the given Annotation store for a source resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "annotations",
        "resourceTypePath": "//projects/locations/datasets/annotationStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.annotations.patch": {
        "description": "Updates the Annotation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations/{annotationsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "annotations",
        "resourceTypePath": "//projects/locations/datasets/annotationStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.create": {
        "description": "Creates a new Annotation store within the parent dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.delete": {
        "description": "Deletes the specified Annotation store and removes all annotations that are contained within it.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.evaluate": {
        "description": "Evaluate an Annotation store against a ground truth Annotation store. When the operation finishes successfully, a detailed response is returned of type EvaluateAnnotationStoreResponse, contained in the response. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:evaluate",
        "httpMethod": "POST",
        "method": "evaluate",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.export": {
        "description": "Export Annotations from the Annotation store. If the request is successful, a detailed response is returned of type ExportAnnotationsResponse, contained in the response field when the operation finishes. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.get": {
        "description": "Gets the specified Annotation store or returns NOT_FOUND if it does not exist.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.import": {
        "description": "Import Annotations to the Annotation store by loading data from the specified sources. If the request is successful, a detailed response is returned as of type ImportAnnotationsResponse, contained in the response field when the operation finishes. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.list": {
        "description": "Lists the Annotation stores in the given dataset for a source store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.patch": {
        "description": "Updates the specified Annotation store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.annotationStores.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "annotationStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.create": {
        "description": "Creates a new Attribute definition in the parent consent store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "attributeDefinitions",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.delete": {
        "description": "Deletes the specified Attribute definition. Fails if the Attribute definition is referenced by any User data mapping, or the latest revision of any Consent.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "attributeDefinitions",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.get": {
        "description": "Gets the specified Attribute definition.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "attributeDefinitions",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.list": {
        "description": "Lists the Attribute definitions in the specified consent store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "attributeDefinitions",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.attributeDefinitions.patch": {
        "description": "Updates the specified Attribute definition.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/attributeDefinitions/{attributeDefinitionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "attributeDefinitions",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.checkDataAccess": {
        "description": "Checks if a particular data_id of a User data mapping in the specified consent store is consented for the specified use.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:checkDataAccess",
        "httpMethod": "POST",
        "method": "checkDataAccess",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consentArtifacts.create": {
        "description": "Creates a new Consent artifact in the parent consent store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "consentArtifacts",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consentArtifacts.delete": {
        "description": "Deletes the specified Consent artifact. Fails if the artifact is referenced by the latest revision of any Consent.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts/{consentArtifactsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "consentArtifacts",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consentArtifacts.get": {
        "description": "Gets the specified Consent artifact.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts/{consentArtifactsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "consentArtifacts",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consentArtifacts.list": {
        "description": "Lists the Consent artifacts in the specified consent store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consentArtifacts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "consentArtifacts",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.activate": {
        "description": "Activates the latest revision of the specified Consent by committing a new revision with `state` updated to `ACTIVE`. If the latest revision of the specified Consent is in the `ACTIVE` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified consent is in the `REJECTED` or `REVOKED` state.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.create": {
        "description": "Creates a new Consent in the parent consent store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.delete": {
        "description": "Deletes the Consent and its revisions. To keep a record of the Consent but mark it inactive, see [RevokeConsent]. To delete a revision of a Consent, see [DeleteConsentRevision]. This operation does not delete the related Consent artifact.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.deleteRevision": {
        "description": "Deletes the specified revision of a Consent. An INVALID_ARGUMENT error occurs if the specified revision is the latest revision.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:deleteRevision",
        "httpMethod": "DELETE",
        "method": "deleteRevision",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.get": {
        "description": "Gets the specified revision of a Consent, or the latest revision if `revision_id` is not specified in the resource name.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.list": {
        "description": "Lists the Consent in the given consent store, returning each Consent's latest revision.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.listRevisions": {
        "description": "Lists the revisions of the specified Consent in reverse chronological order.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:listRevisions",
        "httpMethod": "GET",
        "method": "listRevisions",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.patch": {
        "description": "Updates the latest revision of the specified Consent by committing a new revision with the changes. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `REJECTED` or `REVOKED` state.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.reject": {
        "description": "Rejects the latest revision of the specified Consent by committing a new revision with `state` updated to `REJECTED`. If the latest revision of the specified Consent is in the `REJECTED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the specified Consent is in the `ACTIVE` or `REVOKED` state.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:reject",
        "httpMethod": "POST",
        "method": "reject",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.consents.revoke": {
        "description": "Revokes the latest revision of the specified Consent by committing a new revision with `state` updated to `REVOKED`. If the latest revision of the specified Consent is in the `REVOKED` state, no new revision is committed. A FAILED_PRECONDITION error occurs if the latest revision of the given consent is in `DRAFT` or `REJECTED` state.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/consents/{consentsId}:revoke",
        "httpMethod": "POST",
        "method": "revoke",
        "resourceType": "consents",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.create": {
        "description": "Creates a new consent store in the parent dataset. Attempting to create a consent store with the same ID as an existing store fails with an ALREADY_EXISTS error.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.delete": {
        "description": "Deletes the specified consent store and removes all the consent store's data.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.evaluateUserConsents": {
        "description": "Evaluates the user's Consents for all matching User data mappings. Note: User data mappings are indexed asynchronously, which can cause a slight delay between the time mappings are created or updated and when they are included in EvaluateUserConsents results.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:evaluateUserConsents",
        "httpMethod": "POST",
        "method": "evaluateUserConsents",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.get": {
        "description": "Gets the specified consent store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.list": {
        "description": "Lists the consent stores in the specified dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.patch": {
        "description": "Updates the specified consent store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.queryAccessibleData": {
        "description": "Queries all data_ids that are consented for a specified use in the given consent store and writes them to a specified destination. The returned Operation includes a progress counter for the number of User data mappings processed. If the request is successful, a detailed response is returned of type QueryAccessibleDataResponse, contained in the response field when the operation finishes. The metadata field type is OperationMetadata. Errors are logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). For example, the following sample log entry shows a `failed to evaluate consent policy` error that occurred during a QueryAccessibleData call to consent store `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}`. ```json jsonPayload: { @type: \"type.googleapis.com/google.cloud.healthcare.logging.QueryAccessibleDataLogEntry\" error: { code: 9 message: \"failed to evaluate consent policy\" } resourceName: \"projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/consentStores/{consent_store_id}/consents/{consent_id}\" } logName: \"projects/{project_id}/logs/healthcare.googleapis.com%2Fquery_accessible_data\" operation: { id: \"projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/operations/{operation_id}\" producer: \"healthcare.googleapis.com/QueryAccessibleData\" } receiveTimestamp: \"TIMESTAMP\" resource: { labels: { consent_store_id: \"{consent_store_id}\" dataset_id: \"{dataset_id}\" location: \"{location_id}\" project_id: \"{project_id}\" } type: \"healthcare_consent_store\" } severity: \"ERROR\" timestamp: \"TIMESTAMP\" ```",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:queryAccessibleData",
        "httpMethod": "POST",
        "method": "queryAccessibleData",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "consentStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.userDataMappings.archive": {
        "description": "Archives the specified User data mapping.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}:archive",
        "httpMethod": "POST",
        "method": "archive",
        "resourceType": "userDataMappings",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.userDataMappings.create": {
        "description": "Creates a new User data mapping in the parent consent store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "userDataMappings",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.userDataMappings.delete": {
        "description": "Deletes the specified User data mapping.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "userDataMappings",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.userDataMappings.get": {
        "description": "Gets the specified User data mapping.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userDataMappings",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.userDataMappings.list": {
        "description": "Lists the User data mappings in the specified consent store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userDataMappings",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.consentStores.userDataMappings.patch": {
        "description": "Updates the specified User data mapping.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/consentStores/{consentStoresId}/userDataMappings/{userDataMappingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "userDataMappings",
        "resourceTypePath": "//projects/locations/datasets/consentStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.create": {
        "description": "Creates a new health dataset. Results are returned through the Operation interface which returns either an `Operation.response` which contains a Dataset or `Operation.error`. The metadata field type is OperationMetadata.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.deidentify": {
        "description": "Creates a new dataset containing de-identified data from the source dataset. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifySummary. The LRO result may still be successful if de-identification fails for some resources. The new de-identified dataset will not contain these failed resources. The number of resources processed are tracked in Operation.metadata. Error details are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:deidentify",
        "httpMethod": "POST",
        "method": "deidentify",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.delete": {
        "description": "Deletes the specified health dataset and all data contained in the dataset. Deleting a dataset does not affect the sources from which the dataset was imported (if any).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.create": {
        "description": "Creates a new DICOM store within the parent dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.deidentify": {
        "description": "De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyDicomStoreSummary. The LRO result may still be successful if de-identification fails for some DICOM instances. The output DICOM store will not contain these failed resources. The number of resources processed are tracked in Operation.metadata. Error details are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:deidentify",
        "httpMethod": "POST",
        "method": "deidentify",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.delete": {
        "description": "Deletes the specified DICOM store and removes all images that are contained within it.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.export": {
        "description": "Exports data to the specified destination by copying it from the DICOM store. Errors are also logged to Cloud Logging. For more information, see [Viewing errors in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.get": {
        "description": "Gets the specified DICOM store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.import": {
        "description": "Imports data into the DICOM store by copying it from the specified source. Errors are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging). The metadata field type is OperationMetadata.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.list": {
        "description": "Lists the DICOM stores in the given dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.patch": {
        "description": "Updates the specified DICOM store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.searchForInstances": {
        "description": "SearchForInstances returns a list of matching instances. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/instances",
        "httpMethod": "GET",
        "method": "searchForInstances",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.searchForSeries": {
        "description": "SearchForSeries returns a list of matching series. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/series",
        "httpMethod": "GET",
        "method": "searchForSeries",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.searchForStudies": {
        "description": "SearchForStudies returns a list of matching studies. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of SearchForStudies, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForStudies, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies",
        "httpMethod": "GET",
        "method": "searchForStudies",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.storeInstances": {
        "description": "StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see [Storing DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies",
        "httpMethod": "POST",
        "method": "storeInstances",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.delete": {
        "description": "DeleteStudy deletes all instances within the given study using a long running operation. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Instances cannot be inserted into a study that is being deleted by an operation until the operation completes. For samples that show how to call DeleteStudy, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations/datasets/dicomStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.retrieveMetadata": {
        "description": "RetrieveStudyMetadata returns instance associated with the given study presented as metadata with the bulk data removed. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudyMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudyMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/metadata",
        "httpMethod": "GET",
        "method": "retrieveMetadata",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations/datasets/dicomStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.retrieveStudy": {
        "description": "RetrieveStudy returns all instances within the given study. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveStudy, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveStudy, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}",
        "httpMethod": "GET",
        "method": "retrieveStudy",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations/datasets/dicomStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.searchForInstances": {
        "description": "SearchForInstances returns a list of matching instances. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/instances",
        "httpMethod": "GET",
        "method": "searchForInstances",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations/datasets/dicomStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.searchForSeries": {
        "description": "SearchForSeries returns a list of matching series. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of SearchForSeries, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForSeries, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series",
        "httpMethod": "GET",
        "method": "searchForSeries",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations/datasets/dicomStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.delete": {
        "description": "DeleteSeries deletes all instances within the given study and series using a long running operation. The method returns an Operation which will be marked successful when the deletion is complete. Warning: Instances cannot be inserted into a series that is being deleted by an operation until the operation completes. For samples that show how to call DeleteSeries, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "series",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.delete": {
        "description": "DeleteInstance deletes an instance associated with the given study, series, and SOP Instance UID. Delete requests are equivalent to the GET requests specified in the Retrieve transaction. Study and series search results can take a few seconds to be updated after an instance is deleted using DeleteInstance. For samples that show how to call DeleteInstance, see [Deleting a study, series, or instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#deleting_a_study_series_or_instance).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies/series",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveFrames": {
        "description": "RetrieveFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveFrames, see [DICOM frames](https://cloud.google.com/healthcare/docs/dicom#dicom_frames) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveFrames, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}",
        "httpMethod": "GET",
        "method": "retrieveFrames",
        "resourceType": "frames",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies/series/instances",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.frames.retrieveRendered": {
        "description": "RetrieveRenderedFrames returns instances associated with the given study, series, SOP Instance UID and frame numbers in an acceptable Rendered Media Type. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedFrames, see [Rendered resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedFrames, see [Retrieving consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}/rendered",
        "httpMethod": "GET",
        "method": "retrieveRendered",
        "resourceType": "frames",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies/series/instances",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveInstance": {
        "description": "RetrieveInstance returns instance associated with the given study, series, and SOP Instance UID. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstance, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) and [DICOM instances](https://cloud.google.com/healthcare/docs/dicom#dicom_instances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstance, see [Retrieving an instance](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_an_instance).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "retrieveInstance",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies/series",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveMetadata": {
        "description": "RetrieveInstanceMetadata returns instance associated with the given study, series, and SOP Instance UID presented as metadata with the bulk data removed. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveInstanceMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveInstanceMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/metadata",
        "httpMethod": "GET",
        "method": "retrieveMetadata",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies/series",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.instances.retrieveRendered": {
        "description": "RetrieveRenderedInstance returns instance associated with the given study, series, and SOP Instance UID in an acceptable Rendered Media Type. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveRenderedInstance, see [Rendered resources](https://cloud.google.com/healthcare/docs/dicom#rendered_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveRenderedInstance, see [Retrieving consumer image formats](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_consumer_image_formats).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/rendered",
        "httpMethod": "GET",
        "method": "retrieveRendered",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies/series",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveMetadata": {
        "description": "RetrieveSeriesMetadata returns instance associated with the given study and series, presented as metadata with the bulk data removed. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeriesMetadata, see [Metadata resources](https://cloud.google.com/healthcare/docs/dicom#metadata_resources) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeriesMetadata, see [Retrieving metadata](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/metadata",
        "httpMethod": "GET",
        "method": "retrieveMetadata",
        "resourceType": "series",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.retrieveSeries": {
        "description": "RetrieveSeries returns all instances within the given study and series. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of RetrieveSeries, see [DICOM study/series/instances](https://cloud.google.com/healthcare/docs/dicom#dicom_studyseriesinstances) in the Cloud Healthcare API conformance statement. For samples that show how to call RetrieveSeries, see [Retrieving DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_dicom_data).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}",
        "httpMethod": "GET",
        "method": "retrieveSeries",
        "resourceType": "series",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.series.searchForInstances": {
        "description": "SearchForInstances returns a list of matching instances. See [RetrieveTransaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.4). For details on the implementation of SearchForInstances, see [Search transaction](https://cloud.google.com/healthcare/docs/dicom#search_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call SearchForInstances, see [Searching for studies, series, instances, and frames](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#searching_for_studies_series_instances_and_frames).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances",
        "httpMethod": "GET",
        "method": "searchForInstances",
        "resourceType": "series",
        "resourceTypePath": "//projects/locations/datasets/dicomStores/studies",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.studies.storeInstances": {
        "description": "StoreInstances stores DICOM instances associated with study instance unique identifiers (SUID). See [Store Transaction](http://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_10.5). For details on the implementation of StoreInstances, see [Store transaction](https://cloud.google.com/healthcare/docs/dicom#store_transaction) in the Cloud Healthcare API conformance statement. For samples that show how to call StoreInstances, see [Storing DICOM data](https://cloud.google.com/healthcare/docs/how-tos/dicomweb#storing_dicom_data).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}",
        "httpMethod": "POST",
        "method": "storeInstances",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations/datasets/dicomStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.dicomStores.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "dicomStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.configureSearch": {
        "description": "Configure the search parameters for the FHIR store and reindex resources in the FHIR store according to the defined search parameters. The search parameters provided in this request will replace any previous search configuration. The target SearchParameter resources need to exist in the store before calling ConfigureSearch, otherwise an error will occur. This method returns an Operation that can be used to track the progress of the reindexing by calling GetOperation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:configureSearch",
        "httpMethod": "POST",
        "method": "configureSearch",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.create": {
        "description": "Creates a new FHIR store within the parent dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.deidentify": {
        "description": "De-identifies data from the source store and writes it to the destination store. The metadata field type is OperationMetadata. If the request is successful, the response field type is DeidentifyFhirStoreSummary. The number of resources processed are tracked in Operation.metadata. Error details are logged to Cloud Logging. For more information, see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:deidentify",
        "httpMethod": "POST",
        "method": "deidentify",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.delete": {
        "description": "Deletes the specified FHIR store and removes all resources within it.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.export": {
        "description": "Export resources from the FHIR store to the specified destination. This method returns an Operation that can be used to track the status of the export by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a detailed response of type ExportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.ConceptMap-search-translate": {
        "description": "Translates a code from one value set to another by searching for appropriate concept maps. Implements the FHIR standard $translate operation ([DSTU2](https://www.hl7.org/fhir/DSTU2/operation-conceptmap-translate.html), [STU3](https://www.hl7.org/fhir/STU3/operation-conceptmap-translate.html), [R4](https://www.hl7.org/fhir/R4/operation-conceptmap-translate.html)). On success, the response body contains a JSON-encoded representation of a FHIR Parameters resource, which includes the translation result. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/ConceptMap/$translate",
        "httpMethod": "GET",
        "method": "ConceptMap-search-translate",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.ConceptMap-translate": {
        "description": "Translates a code from one value set to another using a concept map. You can provide your own concept maps to translate any code system to another code system. Implements the FHIR standard $translate operation ([DSTU2](https://www.hl7.org/fhir/DSTU2/operation-conceptmap-translate.html), [STU3](https://www.hl7.org/fhir/STU3/operation-conceptmap-translate.html), [R4](https://www.hl7.org/fhir/R4/operation-conceptmap-translate.html)). On success, the response body contains a JSON-encoded representation of a FHIR Parameters resource, which includes the translation result. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/ConceptMap/{ConceptMapId}/$translate",
        "httpMethod": "GET",
        "method": "ConceptMap-translate",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.Observation-lastn": {
        "description": "Retrieves the N most recent `Observation` resources for a subject matching search criteria specified as query parameters, grouped by `Observation.code`, sorted from most recent to oldest. Implements the FHIR extended operation Observation-lastn ([STU3](https://hl7.org/implement/standards/fhir/STU3/observation-operations.html#lastn), [R4](https://hl7.org/implement/standards/fhir/R4/observation-operations.html#lastn)). DSTU2 doesn't define the Observation-lastn method, but the server supports it the same way it supports STU3. Search terms are provided as query parameters following the same pattern as the search method. The following search parameters must be provided: - `subject` or `patient` to specify a subject for the Observation. - `code`, `category` or any of the composite parameters that include `code`. Any other valid Observation search parameters can also be provided. This operation accepts an additional query parameter `max`, which specifies N, the maximum number of Observations to return from each group, with a default of 1. Searches with over 1000 results are rejected. Results are counted before grouping and limiting the results with `max`. To stay within the limit, constrain these searches using Observation search parameters such as `_lastUpdated` or `date`. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the operation. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Observation/$lastn",
        "httpMethod": "GET",
        "method": "Observation-lastn",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.Patient-everything": {
        "description": "Retrieves a Patient resource and resources related to that patient. Implements the FHIR extended operation Patient-everything ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/patient-operations.html#everything), [STU3](https://hl7.org/implement/standards/fhir/STU3/patient-operations.html#everything), [R4](https://hl7.org/implement/standards/fhir/R4/patient-operations.html#everything)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the operation. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The resources in scope for the response are: * The patient resource itself. * All the resources directly referenced by the patient resource. * Resources directly referencing the patient resource that meet the inclusion criteria. The inclusion criteria are based on the membership rules in the patient compartment definition ([DSTU2](https://hl7.org/fhir/DSTU2/compartment-patient.html), [STU3](http://www.hl7.org/fhir/stu3/compartmentdefinition-patient.html), [R4](https://hl7.org/fhir/R4/compartmentdefinition-patient.html)), which details the eligible resource types and referencing search parameters. For samples that show how to call `Patient-everything`, see [Getting all patient compartment resources](/healthcare/docs/how-tos/fhir-resources#getting_all_patient_compartment_resources).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Patient/{PatientId}/$everything",
        "httpMethod": "GET",
        "method": "Patient-everything",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.Resource-purge": {
        "description": "Deletes all the historical versions of a resource (excluding the current version) from the FHIR store. To remove all versions of a resource, first delete the current version and then call this method. This is not a FHIR standard operation. For samples that show how to call `Resource-purge`, see [Deleting historical versions of a FHIR resource](/healthcare/docs/how-tos/fhir-resources#deleting_historical_versions_of_a_fhir_resource).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/$purge",
        "httpMethod": "DELETE",
        "method": "Resource-purge",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.Resource-validate": {
        "description": "Validates an input FHIR resource's conformance to its profiles and the profiles configured on the FHIR store. Implements the FHIR extended operation $validate ([DSTU2](http://hl7.org/implement/standards/fhir/DSTU2/resource-operations.html#validate), [STU3](http://hl7.org/implement/standards/fhir/STU3/resource-operations.html#validate), or [R4](http://hl7.org/implement/standards/fhir/R4/resource-operation-validate.html)). The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The `Parameters` input syntax is not supported. The `profile` query parameter can be used to request that the resource only be validated against a specific profile. If a profile with the given URL cannot be found in the FHIR store then an error is returned. Errors generated by validation contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/$validate",
        "httpMethod": "POST",
        "method": "Resource-validate",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.capabilities": {
        "description": "Gets the FHIR capability statement ([STU3](https://hl7.org/implement/standards/fhir/STU3/capabilitystatement.html), [R4](https://hl7.org/implement/standards/fhir/R4/capabilitystatement.html)), or the [conformance statement](https://hl7.org/implement/standards/fhir/DSTU2/conformance.html) in the DSTU2 case for the store, which contains a description of functionality supported by the server. Implements the FHIR standard capabilities interaction ([STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#capabilities), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#capabilities)), or the [conformance interaction](https://hl7.org/implement/standards/fhir/DSTU2/http.html#conformance) in the DSTU2 case. On success, the response body contains a JSON-encoded representation of a `CapabilityStatement` resource.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/metadata",
        "httpMethod": "GET",
        "method": "capabilities",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.conditionalDelete": {
        "description": "Deletes FHIR resources that match a search query. Implements the FHIR standard conditional delete interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.12.1), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.13.1), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#3.1.0.7.1)). If multiple resources match, all matching resources are deleted. Search terms are provided as query parameters following the same pattern as the search method. Note: Unless resource versioning is disabled by setting the disable_resource_versioning flag on the FHIR store, the deleted resources are moved to a history repository that can still be retrieved through vread and related methods, unless they are removed by the purge method. This method requires the`healthcare.fhirStores.searchResources` and `healthcare.fhirResources.delete` permissions on the parent FHIR store. For samples that show how to call `conditionalDelete`, see [Conditionally deleting a FHIR resource](/healthcare/docs/how-tos/fhir-resources#conditionally_deleting_a_fhir_resource).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
        "httpMethod": "DELETE",
        "method": "conditionalDelete",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.conditionalPatch": {
        "description": "If a resource is found based on the search criteria specified in the query parameters, updates part of that resource by applying the operations specified in a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard conditional patch interaction ([STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#patch), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2 doesn't define a conditional patch method, but the server supports it in the same way it supports STU3. Search terms are provided as query parameters following the same pattern as the search method. If the search criteria identify more than one match, the request returns a `412 Precondition Failed` error. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type: application/json-patch+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. This method requires the`healthcare.fhirStores.searchResources` permission on the parent FHIR store and the `healthcare.fhirResources.patch` permission on the requested FHIR store resource. For samples that show how to call `conditionalPatch`, see [Conditionally patching a FHIR resource](/healthcare/docs/how-tos/fhir-resources#conditionally_patching_a_fhir_resource).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
        "httpMethod": "PATCH",
        "method": "conditionalPatch",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.conditionalUpdate": {
        "description": "If a resource is found based on the search criteria specified in the query parameters, updates the entire contents of that resource. Implements the FHIR standard conditional update interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.10.2), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#cond-update), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#cond-update)). Search terms are provided as query parameters following the same pattern as the search method. If the search criteria identify more than one match, the request returns a `412 Precondition Failed` error. If the search criteria identify zero matches, and the supplied resource body contains an `id`, and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. If the search criteria identify zero matches, and the supplied resource body does not contain an `id`, the resource is created with a server-assigned ID as per the create method. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. This method requires the`healthcare.fhirStores.searchResources` and `healthcare.fhirResources.update` permissions on the parent FHIR store. For samples that show how to call `conditionalUpdate`, see [Conditionally updating a FHIR resource](/healthcare/docs/how-tos/fhir-resources#conditionally_updating_a_fhir_resource).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
        "httpMethod": "PUT",
        "method": "conditionalUpdate",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.create": {
        "description": "Creates a FHIR resource. Implements the FHIR standard create interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#create), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#create), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#create)), which creates a new resource with a server-assigned resource ID. Also supports the FHIR standard conditional create interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#ccreate), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#ccreate), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#ccreate)), specified by supplying an `If-None-Exist` header containing a FHIR search query. If no resources match this search query, the server processes the create operation as normal. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. On success, the response body contains a JSON-encoded representation of the resource as it was created on the server, including the server-assigned resource ID and version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `create`, see [Creating a FHIR resource](/healthcare/docs/how-tos/fhir-resources#creating_a_fhir_resource).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.delete": {
        "description": "Deletes a FHIR resource. Implements the FHIR standard delete interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#delete), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#delete), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#delete)). Note: Unless resource versioning is disabled by setting the disable_resource_versioning flag on the FHIR store, the deleted resources are moved to a history repository that can still be retrieved through vread and related methods, unless they are removed by the purge method. For samples that show how to call `delete`, see [Deleting a FHIR resource](/healthcare/docs/how-tos/fhir-resources#deleting_a_fhir_resource).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.executeBundle": {
        "description": "Executes all the requests in the given Bundle. Implements the FHIR standard batch/transaction interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#transaction), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#transaction), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#transaction)). Supports all interactions within a bundle, except search. This method accepts Bundles of type `batch` and `transaction`, processing them according to the batch processing rules ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.1), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.1), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#brules)) and transaction processing rules ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#2.1.0.16.2), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#2.21.0.17.2), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#trules)). The request body must contain a JSON-encoded FHIR `Bundle` resource, and the request headers must contain `Content-Type: application/fhir+json`. For a batch bundle or a successful transaction the response body contains a JSON-encoded representation of a `Bundle` resource of type `batch-response` or `transaction-response` containing one entry for each entry in the request, with the outcome of processing the entry. In the case of an error for a transaction bundle, the response body contains a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. This method requires permission for executing the requests in the bundle. The `executeBundle` permission grants permission to execute the request in the bundle but you must grant sufficient permissions to execute the individual requests in the bundle. For example, if the bundle contains a `create` request, you must have permission to execute the `create` request. Logging is available for the `executeBundle` permission. For samples that show how to call `executeBundle`, see [Managing FHIR resources using FHIR bundles](/healthcare/docs/how-tos/fhir-bundles).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir",
        "httpMethod": "POST",
        "method": "executeBundle",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.history": {
        "description": "Lists all the versions of a resource (including the current version and deleted versions) from the FHIR store. Implements the per-resource form of the FHIR standard history interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#history), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#history), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#history)). On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `history`, containing the version history sorted from most recent to oldest versions. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `history`, see [Listing FHIR resource versions](/healthcare/docs/how-tos/fhir-resources#listing_fhir_resource_versions).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history",
        "httpMethod": "GET",
        "method": "history",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.patch": {
        "description": "Updates part of an existing resource by applying the operations specified in a [JSON Patch](http://jsonpatch.com/) document. Implements the FHIR standard patch interaction ([STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#patch), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#patch)). DSTU2 doesn't define a patch method, but the server supports it in the same way it supports STU3. The request body must contain a JSON Patch document, and the request headers must contain `Content-Type: application/json-patch+json`. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `patch`, see [Patching a FHIR resource](/healthcare/docs/how-tos/fhir-resources#patching_a_fhir_resource).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.read": {
        "description": "Gets the contents of a FHIR resource. Implements the FHIR standard read interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#read), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#read), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#read)). Also supports the FHIR standard conditional read interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#cread), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#cread), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#cread)) specified by supplying an `If-Modified-Since` header with a date/time value or an `If-None-Match` header with an ETag value. On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `read`, see [Getting a FHIR resource](/healthcare/docs/how-tos/fhir-resources#getting_a_fhir_resource).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
        "httpMethod": "GET",
        "method": "read",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.search": {
        "description": "Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](https://hl7.org/implement/standards/fhir/STU3/search.html), [R4](https://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](https://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](https://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `:recurse`. Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. If there are additional results, the returned `Bundle` contains a link of `relation` \"next\", which has a `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changes and when the change is reflected in search results. For samples and detailed information, see [Searching for FHIR resources](/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](/healthcare/docs/how-tos/fhir-advanced-search).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/_search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.search-type": {
        "description": "Searches for resources in the given FHIR store according to criteria specified as query parameters. Implements the FHIR standard search interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#search), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#search), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#search)) using the search semantics described in the FHIR Search specification ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/search.html), [STU3](https://hl7.org/implement/standards/fhir/STU3/search.html), [R4](https://hl7.org/implement/standards/fhir/R4/search.html)). Supports four methods of search defined by the specification: * `GET [base]?[parameters]` to search across all resources. * `GET [base]/[type]?[parameters]` to search resources of a specified type. * `POST [base]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method across all resources. * `POST [base]/[type]/_search?[parameters]` as an alternate form having the same semantics as the `GET` method for the specified type. The `GET` and `POST` methods do not support compartment searches. The `POST` method does not support `application/x-www-form-urlencoded` search parameters. On success, the response body contains a JSON-encoded representation of a `Bundle` resource of type `searchset`, containing the results of the search. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. The server's capability statement, retrieved through capabilities, indicates what search parameters are supported on each FHIR resource. A list of all search parameters defined by the specification can be found in the FHIR Search Parameter Registry ([STU3](https://hl7.org/implement/standards/fhir/STU3/searchparameter-registry.html), [R4](https://hl7.org/implement/standards/fhir/R4/searchparameter-registry.html)). FHIR search parameters for DSTU2 can be found on each resource's definition page. Supported search modifiers: `:missing`, `:exact`, `:contains`, `:text`, `:in`, `:not-in`, `:above`, `:below`, `:[type]`, `:not`, and `:recurse`. Supported search result parameters: `_sort`, `_count`, `_include`, `_revinclude`, `_summary=text`, `_summary=data`, and `_elements`. The maximum number of search results returned defaults to 100, which can be overridden by the `_count` parameter up to a maximum limit of 1000. If there are additional results, the returned `Bundle` contains a link of `relation` \"next\", which has a `_page_token` parameter for an opaque pagination token that can be used to retrieve the next page. Resources with a total size larger than 5MB or a field count larger than 50,000 might not be fully searchable as the server might trim its generated search index in those cases. Note: FHIR resources are indexed asynchronously, so there might be a slight delay between the time a resource is created or changes and when the change is reflected in search results. For samples and detailed information, see [Searching for FHIR resources](/healthcare/docs/how-tos/fhir-search) and [Advanced FHIR search features](/healthcare/docs/how-tos/fhir-advanced-search).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{resourceType}/_search",
        "httpMethod": "POST",
        "method": "search-type",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.update": {
        "description": "Updates the entire contents of a resource. Implements the FHIR standard update interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#update), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#update), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#update)). If the specified resource does not exist and the FHIR store has enable_update_create set, creates the resource with the client-specified ID. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The request body must contain a JSON-encoded FHIR resource, and the request headers must contain `Content-Type: application/fhir+json`. The resource must contain an `id` element having an identical value to the ID in the REST path of the request. On success, the response body contains a JSON-encoded representation of the updated resource, including the server-assigned version ID. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `update`, see [Updating a FHIR resource](/healthcare/docs/how-tos/fhir-resources#updating_a_fhir_resource).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.fhir.vread": {
        "description": "Gets the contents of a version (current or historical) of a FHIR resource by version ID. Implements the FHIR standard vread interaction ([DSTU2](https://hl7.org/implement/standards/fhir/DSTU2/http.html#vread), [STU3](https://hl7.org/implement/standards/fhir/STU3/http.html#vread), [R4](https://hl7.org/implement/standards/fhir/R4/http.html#vread)). On success, the response body contains a JSON-encoded representation of the resource. Errors generated by the FHIR store contain a JSON-encoded `OperationOutcome` resource describing the reason for the error. If the request cannot be mapped to a valid API method on a FHIR store, a generic GCP error might be returned instead. For samples that show how to call `vread`, see [Retrieving a FHIR resource version](/healthcare/docs/how-tos/fhir-resources#retrieving_a_fhir_resource_version).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history/{_historyId}",
        "httpMethod": "GET",
        "method": "vread",
        "resourceType": "fhir",
        "resourceTypePath": "//projects/locations/datasets/fhirStores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.get": {
        "description": "Gets the configuration of the specified FHIR store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.import": {
        "description": "Import resources to the FHIR store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some FHIR store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty FHIR store that is not being used by other clients. In cases where this method is not appropriate, consider using ExecuteBundle to load data. Every resource in the input must contain a client-supplied ID. Each resource is stored using the supplied ID regardless of the enable_update_create setting on the FHIR store. It is strongly advised not to include or encode any sensitive data such as patient identifiers in client-specified resource IDs. Those IDs are part of the FHIR resource path recorded in Cloud Audit Logs and Cloud Pub/Sub notifications. Those IDs can also be contained in reference fields within other resources. The import process does not enforce referential integrity, regardless of the disable_referential_integrity setting on the FHIR store. This allows the import of resources with arbitrary interdependencies without considering grouping or ordering, but if the input data contains invalid references or if some resources fail to be imported, the FHIR store might be left in a state that violates referential integrity. The import process does not trigger Pub/Sub notification or BigQuery streaming update, regardless of how those are configured on the FHIR store. If a resource with the specified ID already exists, the most recent version of the resource is overwritten without creating a new historical version, regardless of the disable_resource_versioning setting on the FHIR store. If transient failures occur during the import, it is possible that successfully imported resources will be overwritten more than once. The import operation is idempotent unless the input data contains multiple valid resources with the same ID but different contents. In that case, after the import completes, the store contains exactly one resource with that ID but there is no ordering guarantee on which version of the contents it will have. The operation result counters do not count duplicate IDs as an error and count one success for each resource in the input, which might result in a success count larger than the number of resources in the FHIR store. This often occurs when importing data organized in bundles produced by Patient-everything where each bundle contains its own copy of a resource such as Practitioner that might be referred to by many patients. If some resources fail to import, for example due to parsing errors, successfully imported resources are not rolled back. The location and format of the input data are specified by the parameters in ImportResourcesRequest. Note that if no format is specified, this method assumes the `BUNDLE` format. When using the `BUNDLE` format this method ignores the `Bundle.type` field, except that `history` bundles are rejected, and does not apply any of the bundle processing semantics for batch or transaction bundles. Unlike in ExecuteBundle, transaction bundles are not executed as a single transaction and bundle-internal references are not rewritten. The bundle is treated as a collection of resources to be written as provided in `Bundle.entry.resource`, ignoring `Bundle.entry.request`. As an example, this allows the import of `searchset` bundles produced by a FHIR search or Patient-everything operation. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a detailed response of type ImportResourcesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.list": {
        "description": "Lists the FHIR stores in the given dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.patch": {
        "description": "Updates the configuration of the specified FHIR store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.fhirStores.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "fhirStores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.get": {
        "description": "Gets any metadata associated with a dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.create": {
        "description": "Creates a new HL7v2 store within the parent dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.delete": {
        "description": "Deletes the specified HL7v2 store and removes all messages that it contains.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.export": {
        "description": "Exports the messages to a destination. To filter messages to be exported, define a filter using the start and end time, relative to the message generation time (MSH.7). This API returns an Operation that can be used to track the status of the job by calling GetOperation. Immediate fatal errors appear in the error field. Otherwise, when the operation finishes, a detailed response of type ExportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.get": {
        "description": "Gets the specified HL7v2 store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.import": {
        "description": "Import messages to the HL7v2 store by loading data from the specified sources. This method is optimized to load large quantities of data using import semantics that ignore some HL7v2 store configuration options and are not suitable for all use cases. It is primarily intended to load data into an empty HL7v2 store that is not being used by other clients. An existing message will be overwritten if a duplicate message is imported. A duplicate message is a message with the same raw bytes as a message that already exists in this HL7v2 store. When a message is overwritten, its labels will also be overwritten. The import operation is idempotent unless the input data contains multiple valid messages with the same raw bytes but different labels. In that case, after the import completes, the store contains exactly one message with those raw bytes but there is no ordering guarantee on which version of the labels it has. The operation result counters do not count duplicated raw bytes as an error and count one success for each message in the input, which might result in a success count larger than the number of messages in the HL7v2 store. If some messages fail to import, for example due to parsing errors, successfully imported messages are not rolled back. This method returns an Operation that can be used to track the status of the import by calling GetOperation. Immediate fatal errors appear in the error field, errors are also logged to Cloud Logging (see [Viewing error logs in Cloud Logging](https://cloud.google.com/healthcare/docs/how-tos/logging)). Otherwise, when the operation finishes, a response of type ImportMessagesResponse is returned in the response field. The metadata field type for this operation is OperationMetadata.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.list": {
        "description": "Lists the HL7v2 stores in the given dataset.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.messages.batchGet": {
        "description": "Gets multiple messages in the given HL7v2 store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/datasets/hl7V2Stores",
        "versions": [
          "v1beta1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.messages.create": {
        "description": "Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/datasets/hl7V2Stores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.messages.delete": {
        "description": "Deletes an HL7v2 message.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/datasets/hl7V2Stores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.messages.get": {
        "description": "Gets an HL7v2 message.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/datasets/hl7V2Stores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest": {
        "description": "Parses and stores an HL7v2 message. This method triggers an asynchronous notification to any Pub/Sub topic configured in Hl7V2Store.Hl7V2NotificationConfig, if the filtering matches the message. If an MLLP adapter is configured to listen to a Pub/Sub topic, the adapter transmits the message when a notification is received. If the method is successful, it generates a response containing an HL7v2 acknowledgment (`ACK`) message. If the method encounters an error, it returns a negative acknowledgment (`NACK`) message. This behavior is suitable for replying to HL7v2 interface systems that expect these acknowledgments.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:ingest",
        "httpMethod": "POST",
        "method": "ingest",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/datasets/hl7V2Stores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.messages.list": {
        "description": "Lists all the messages in the given HL7v2 store with support for filtering. Note: HL7v2 messages are indexed asynchronously, so there might be a slight delay between the time a message is created and when it can be found through a filter.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/datasets/hl7V2Stores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.messages.patch": {
        "description": "Update the message. The contents of the message in Message.data and data extracted from the contents such as Message.create_time can't be altered. Only the Message.labels field is allowed to be updated. The labels in the request are merged with the existing set of labels. Existing labels with the same keys are updated.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "messages",
        "resourceTypePath": "//projects/locations/datasets/hl7V2Stores",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.patch": {
        "description": "Updates the HL7v2 store.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "hl7V2Stores",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.list": {
        "description": "Lists the health datasets in the current project.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/datasets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.patch": {
        "description": "Updates dataset metadata.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.datasets.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "healthcare.projects.locations.services.nlp.analyzeEntities": {
        "description": "Analyze heathcare entity in a document. Its response includes the recognized entity mentions and the relationships between them. AnalyzeEntities uses context aware models to detect entities. This method can only analyze documents written in English.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/services/nlp:analyzeEntities",
        "httpMethod": "POST",
        "method": "analyzeEntities",
        "resourceType": "nlp",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Healthcare API"
  },
  "homegraph": {
    "description": "",
    "methods": {
      "homegraph.agentUsers.delete": {
        "description": "Unlinks the given third-party user from your smart home Action. All data related to this user will be deleted. For more details on how users link their accounts, see [fulfillment and authentication](https://developers.google.com/assistant/smarthome/concepts/fulfillment-authentication). The third-party user's identity is passed in via the `agent_user_id` (see DeleteAgentUserRequest). This request must be authorized using service account credentials from your Actions console project.",
        "flatPath": "v1/agentUsers/{agentUsersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "agentUsers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "homegraph.devices.query": {
        "description": "Gets the current states in Home Graph for the given set of the third-party user's devices. The third-party user's identity is passed in via the `agent_user_id` (see QueryRequest). This request must be authorized using service account credentials from your Actions console project.",
        "flatPath": "v1/devices:query",
        "httpMethod": "POST",
        "method": "query",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "homegraph.devices.reportStateAndNotification": {
        "description": "Reports device state and optionally sends device notifications. Called by your smart home Action when the state of a third-party device changes or you need to send a notification about the device. See [Implement Report State](https://developers.google.com/assistant/smarthome/develop/report-state) for more information. This method updates the device state according to its declared [traits](https://developers.google.com/assistant/smarthome/concepts/devices-traits). Publishing a new state value outside of these traits will result in an `INVALID_ARGUMENT` error response. The third-party user's identity is passed in via the `agent_user_id` (see ReportStateAndNotificationRequest). This request must be authorized using service account credentials from your Actions console project.",
        "flatPath": "v1/devices:reportStateAndNotification",
        "httpMethod": "POST",
        "method": "reportStateAndNotification",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "homegraph.devices.requestSync": {
        "description": "Requests Google to send an `action.devices.SYNC` [intent](https://developers.google.com/assistant/smarthome/reference/intent/sync) to your smart home Action to update device metadata for the given user. The third-party user's identity is passed via the `agent_user_id` (see RequestSyncDevicesRequest). This request must be authorized using service account credentials from your Actions console project.",
        "flatPath": "v1/devices:requestSync",
        "httpMethod": "POST",
        "method": "requestSync",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "homegraph.devices.sync": {
        "description": "Gets all the devices associated with the given third-party user. The third-party user's identity is passed in via the `agent_user_id` (see SyncRequest). This request must be authorized using service account credentials from your Actions console project.",
        "flatPath": "v1/devices:sync",
        "httpMethod": "POST",
        "method": "sync",
        "resourceType": "devices",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "HomeGraph API"
  },
  "iam": {
    "description": "Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls.",
    "methods": {
      "iam.iamPolicies.lintPolicy": {
        "description": "Lints, or validates, an IAM policy. Currently checks the google.iam.v1.Binding.condition field, which contains a condition expression for a role binding. Successful calls to this method always return an HTTP `200 OK` status code, even if the linter detects an issue in the IAM policy.",
        "flatPath": "v1/iamPolicies:lintPolicy",
        "httpMethod": "POST",
        "method": "lintPolicy",
        "resourceType": "iamPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "iam.iamPolicies.queryAuditableServices": {
        "description": "Returns a list of services that allow you to opt into audit logs that are not generated by default. To learn more about audit logs, see the [Logging documentation](https://cloud.google.com/logging/docs/audit).",
        "flatPath": "v1/iamPolicies:queryAuditableServices",
        "httpMethod": "POST",
        "method": "queryAuditableServices",
        "resourceType": "iamPolicies",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "iam.locations.workforcePools.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/locations/{locationsId}/workforcePools/{workforcePoolsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//locations/workforcePools",
        "versions": [
          "v1"
        ]
      },
      "iam.locations.workforcePools.providers.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/locations/{locationsId}/workforcePools/{workforcePoolsId}/providers/{providersId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//locations/workforcePools/providers",
        "versions": [
          "v1"
        ]
      },
      "iam.organizations.roles.create": {
        "description": "Creates a new custom Role.",
        "flatPath": "v1/organizations/{organizationsId}/roles",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "roles",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "iam.organizations.roles.delete": {
        "description": "Deletes a custom Role. When you delete a custom role, the following changes occur immediately: * You cannot bind a principal to the custom role in an IAM Policy. * Existing bindings to the custom role are not changed, but they have no effect. * By default, the response from ListRoles does not include the custom role. You have 7 days to undelete the custom role. After 7 days, the following changes occur: * The custom role is permanently deleted and cannot be recovered. * If an IAM policy contains a binding to the custom role, the binding is permanently removed.",
        "flatPath": "v1/organizations/{organizationsId}/roles/{rolesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "roles",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "iam.organizations.roles.get": {
        "description": "Gets the definition of a Role.",
        "flatPath": "v1/organizations/{organizationsId}/roles/{rolesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "roles",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "iam.organizations.roles.list": {
        "description": "Lists every predefined Role that IAM supports, or every custom role that is defined for an organization or project.",
        "flatPath": "v1/organizations/{organizationsId}/roles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "roles",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "iam.organizations.roles.patch": {
        "description": "Updates the definition of a custom Role.",
        "flatPath": "v1/organizations/{organizationsId}/roles/{rolesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "roles",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "iam.organizations.roles.undelete": {
        "description": "Undeletes a custom Role.",
        "flatPath": "v1/organizations/{organizationsId}/roles/{rolesId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "roles",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "iam.permissions.queryTestablePermissions": {
        "description": "Lists every permission that you can test on a resource. A permission is testable if you can check whether a principal has that permission on the resource.",
        "flatPath": "v1/permissions:queryTestablePermissions",
        "httpMethod": "POST",
        "method": "queryTestablePermissions",
        "resourceType": "permissions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.create": {
        "description": "Creates a new WorkloadIdentityPool. You cannot reuse the name of a deleted pool until 30 days after deletion.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "workloadIdentityPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.delete": {
        "description": "Deletes a WorkloadIdentityPool. You cannot use a deleted pool to exchange external credentials for Google Cloud credentials. However, deletion does not revoke credentials that have already been issued. Credentials issued for a deleted pool do not grant access to resources. If the pool is undeleted, and the credentials are not expired, they grant access again. You can undelete a pool for 30 days. After 30 days, deletion is permanent. You cannot update deleted pools. However, you can view and list them.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "workloadIdentityPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.get": {
        "description": "Gets an individual WorkloadIdentityPool.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "workloadIdentityPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.list": {
        "description": "Lists all non-deleted WorkloadIdentityPools in a project. If `show_deleted` is set to `true`, then deleted pools are also listed.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "workloadIdentityPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/workloadIdentityPools",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.patch": {
        "description": "Updates an existing WorkloadIdentityPool.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "workloadIdentityPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.providers.create": {
        "description": "Creates a new WorkloadIdentityPoolProvider in a WorkloadIdentityPool. You cannot reuse the name of a deleted provider until 30 days after deletion.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}/providers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations/workloadIdentityPools",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.providers.delete": {
        "description": "Deletes a WorkloadIdentityPoolProvider. Deleting a provider does not revoke credentials that have already been issued; they continue to grant access. You can undelete a provider for 30 days. After 30 days, deletion is permanent. You cannot update deleted providers. However, you can view and list them.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}/providers/{providersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations/workloadIdentityPools",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.providers.get": {
        "description": "Gets an individual WorkloadIdentityPoolProvider.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}/providers/{providersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations/workloadIdentityPools",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.providers.list": {
        "description": "Lists all non-deleted WorkloadIdentityPoolProviders in a WorkloadIdentityPool. If `show_deleted` is set to `true`, then deleted providers are also listed.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}/providers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations/workloadIdentityPools",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.providers.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}/providers/{providersId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/workloadIdentityPools/providers",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.providers.patch": {
        "description": "Updates an existing WorkloadIdentityPoolProvider.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}/providers/{providersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations/workloadIdentityPools",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.providers.undelete": {
        "description": "Undeletes a WorkloadIdentityPoolProvider, as long as it was deleted fewer than 30 days ago.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}/providers/{providersId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "providers",
        "resourceTypePath": "//projects/locations/workloadIdentityPools",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.locations.workloadIdentityPools.undelete": {
        "description": "Undeletes a WorkloadIdentityPool, as long as it was deleted fewer than 30 days ago.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/workloadIdentityPools/{workloadIdentityPoolsId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "workloadIdentityPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.roles.create": {
        "description": "Creates a new custom Role.",
        "flatPath": "v1/projects/{projectsId}/roles",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "roles",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.roles.delete": {
        "description": "Deletes a custom Role. When you delete a custom role, the following changes occur immediately: * You cannot bind a principal to the custom role in an IAM Policy. * Existing bindings to the custom role are not changed, but they have no effect. * By default, the response from ListRoles does not include the custom role. You have 7 days to undelete the custom role. After 7 days, the following changes occur: * The custom role is permanently deleted and cannot be recovered. * If an IAM policy contains a binding to the custom role, the binding is permanently removed.",
        "flatPath": "v1/projects/{projectsId}/roles/{rolesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "roles",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.roles.get": {
        "description": "Gets the definition of a Role.",
        "flatPath": "v1/projects/{projectsId}/roles/{rolesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "roles",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.roles.list": {
        "description": "Lists every predefined Role that IAM supports, or every custom role that is defined for an organization or project.",
        "flatPath": "v1/projects/{projectsId}/roles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "roles",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.roles.patch": {
        "description": "Updates the definition of a custom Role.",
        "flatPath": "v1/projects/{projectsId}/roles/{rolesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "roles",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.roles.undelete": {
        "description": "Undeletes a custom Role.",
        "flatPath": "v1/projects/{projectsId}/roles/{rolesId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "roles",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.create": {
        "description": "Creates a ServiceAccount.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.delete": {
        "description": "Deletes a ServiceAccount. **Warning:** After you delete a service account, you might not be able to undelete it. If you know that you need to re-enable the service account in the future, use DisableServiceAccount instead. If you delete a service account, IAM permanently removes the service account 30 days later. Google Cloud cannot recover the service account after it is permanently removed, even if you file a support request. To help avoid unplanned outages, we recommend that you disable the service account before you delete it. Use DisableServiceAccount to disable the service account, then wait at least 24 hours and watch for unintended consequences. If there are no unintended consequences, you can delete the service account.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.disable": {
        "description": "Disables a ServiceAccount immediately. If an application uses the service account to authenticate, that application can no longer call Google APIs or access Google Cloud resources. Existing access tokens for the service account are rejected, and requests for new access tokens will fail. To re-enable the service account, use EnableServiceAccount. After you re-enable the service account, its existing access tokens will be accepted, and you can request new access tokens. To help avoid unplanned outages, we recommend that you disable the service account before you delete it. Use this method to disable the service account, then wait at least 24 hours and watch for unintended consequences. If there are no unintended consequences, you can delete the service account with DeleteServiceAccount.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:disable",
        "httpMethod": "POST",
        "method": "disable",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.enable": {
        "description": "Enables a ServiceAccount that was disabled by DisableServiceAccount. If the service account is already enabled, then this method has no effect. If the service account was disabled by other means\u2014for example, if Google disabled the service account because it was compromised\u2014you cannot use this method to enable the service account.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:enable",
        "httpMethod": "POST",
        "method": "enable",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.get": {
        "description": "Gets a ServiceAccount.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.getIamPolicy": {
        "description": "Gets the IAM policy that is attached to a ServiceAccount. This IAM policy specifies which principals have access to the service account. This method does not tell you whether the service account has been granted any roles on other resources. To check whether a service account has role grants on a resource, use the `getIamPolicy` method for that resource. For example, to view the role grants for a project, call the Resource Manager API's [`projects.getIamPolicy`](https://cloud.google.com/resource-manager/reference/rest/v1/projects/getIamPolicy) method.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.keys.create": {
        "description": "Creates a ServiceAccountKey.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}/keys",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "keys",
        "resourceTypePath": "//projects/serviceAccounts",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.keys.delete": {
        "description": "Deletes a ServiceAccountKey. Deleting a service account key does not revoke short-lived credentials that have been issued based on the service account key.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}/keys/{keysId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "keys",
        "resourceTypePath": "//projects/serviceAccounts",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.keys.disable": {
        "description": "Disable a ServiceAccountKey. A disabled service account key can be enabled through EnableServiceAccountKey.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}/keys/{keysId}:disable",
        "httpMethod": "POST",
        "method": "disable",
        "resourceType": "keys",
        "resourceTypePath": "//projects/serviceAccounts",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.keys.enable": {
        "description": "Enable a ServiceAccountKey.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}/keys/{keysId}:enable",
        "httpMethod": "POST",
        "method": "enable",
        "resourceType": "keys",
        "resourceTypePath": "//projects/serviceAccounts",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.keys.get": {
        "description": "Gets a ServiceAccountKey.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}/keys/{keysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "keys",
        "resourceTypePath": "//projects/serviceAccounts",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.keys.list": {
        "description": "Lists every ServiceAccountKey for a service account.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}/keys",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "keys",
        "resourceTypePath": "//projects/serviceAccounts",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.keys.upload": {
        "description": "Creates a ServiceAccountKey, using a public key that you provide.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}/keys:upload",
        "httpMethod": "POST",
        "method": "upload",
        "resourceType": "keys",
        "resourceTypePath": "//projects/serviceAccounts",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.list": {
        "description": "Lists every ServiceAccount that belongs to a specific project.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.patch": {
        "description": "Patches a ServiceAccount.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.setIamPolicy": {
        "description": "Sets the IAM policy that is attached to a ServiceAccount. Use this method to grant or revoke access to the service account. For example, you could grant a principal the ability to impersonate the service account. This method does not enable the service account to access other resources. To grant roles to a service account on a resource, follow these steps: 1. Call the resource's `getIamPolicy` method to get its current IAM policy. 2. Edit the policy so that it binds the service account to an IAM role for the resource. 3. Call the resource's `setIamPolicy` method to update its IAM policy. For detailed instructions, see [Manage access to project, folders, and organizations](https://cloud.google.com/iam/help/service-accounts/granting-access-to-service-accounts) or [Manage access to other resources](https://cloud.google.com/iam/help/access/manage-other-resources).",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.signBlob": {
        "description": "**Note:** This method is deprecated. Use the [`signBlob`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signBlob) method in the IAM Service Account Credentials API instead. If you currently use this method, see the [migration guide](https://cloud.google.com/iam/help/credentials/migrate-api) for instructions. Signs a blob using the system-managed private key for a ServiceAccount.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:signBlob",
        "httpMethod": "POST",
        "method": "signBlob",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.signJwt": {
        "description": "**Note:** This method is deprecated. Use the [`signJwt`](https://cloud.google.com/iam/help/rest-credentials/v1/projects.serviceAccounts/signJwt) method in the IAM Service Account Credentials API instead. If you currently use this method, see the [migration guide](https://cloud.google.com/iam/help/credentials/migrate-api) for instructions. Signs a JSON Web Token (JWT) using the system-managed private key for a ServiceAccount.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:signJwt",
        "httpMethod": "POST",
        "method": "signJwt",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.testIamPermissions": {
        "description": "Tests whether the caller has the specified permissions on a ServiceAccount.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.undelete": {
        "description": "Restores a deleted ServiceAccount. **Important:** It is not always possible to restore a deleted service account. Use this method only as a last resort. After you delete a service account, IAM permanently removes the service account 30 days later. There is no way to restore a deleted service account that has been permanently removed.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.projects.serviceAccounts.update": {
        "description": "**Note:** We are in the process of deprecating this method. Use PatchServiceAccount instead. Updates a ServiceAccount. You can update only the `display_name` and `description` fields.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iam.roles.get": {
        "description": "Gets the definition of a Role.",
        "flatPath": "v1/roles/{rolesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "roles",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "iam.roles.list": {
        "description": "Lists every predefined Role that IAM supports, or every custom role that is defined for an organization or project.",
        "flatPath": "v1/roles",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "roles",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "iam.roles.queryGrantableRoles": {
        "description": "Lists roles that can be granted on a Google Cloud resource. A role is grantable if the IAM policy for the resource can contain bindings to the role.",
        "flatPath": "v1/roles:queryGrantableRoles",
        "httpMethod": "POST",
        "method": "queryGrantableRoles",
        "resourceType": "roles",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Identity and Access Management (IAM) API"
  },
  "iamcredentials": {
    "description": "Creates short-lived credentials for impersonating IAM service accounts. To enable this API, you must enable the IAM API (iam.googleapis.com).",
    "methods": {
      "iamcredentials.projects.serviceAccounts.generateAccessToken": {
        "description": "Generates an OAuth 2.0 access token for a service account.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:generateAccessToken",
        "httpMethod": "POST",
        "method": "generateAccessToken",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iamcredentials.projects.serviceAccounts.generateIdToken": {
        "description": "Generates an OpenID Connect ID token for a service account.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:generateIdToken",
        "httpMethod": "POST",
        "method": "generateIdToken",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iamcredentials.projects.serviceAccounts.signBlob": {
        "description": "Signs a blob using a service account's system-managed private key.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:signBlob",
        "httpMethod": "POST",
        "method": "signBlob",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iamcredentials.projects.serviceAccounts.signJwt": {
        "description": "Signs a JWT using a service account's system-managed private key.",
        "flatPath": "v1/projects/{projectsId}/serviceAccounts/{serviceAccountsId}:signJwt",
        "httpMethod": "POST",
        "method": "signJwt",
        "resourceType": "serviceAccounts",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "IAM Service Account Credentials API"
  },
  "iap": {
    "description": "Controls access to cloud applications running on Google Cloud Platform.",
    "methods": {
      "iap.getIamPolicy": {
        "description": "Gets the access control policy for an Identity-Aware Proxy protected resource. More information about managing access via IAP can be found at: https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api",
        "flatPath": "v1beta1/{v1beta1Id}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "v1beta1",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "iap.getIapSettings": {
        "description": "Gets the IAP settings on a particular IAP protected resource.",
        "flatPath": "v1/{v1Id}:iapSettings",
        "httpMethod": "GET",
        "method": "getIapSettings",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "iap.projects.brands.create": {
        "description": "Constructs a new OAuth brand for the project if one does not exist. The created brand is \"internal only\", meaning that OAuth clients created under it only accept requests from users who belong to the same Google Workspace organization as the project. The brand is created in an un-reviewed status. NOTE: The \"internal only\" status can be manually changed in the Google Cloud Console. Requires that a brand does not already exist for the project, and that the specified support email is owned by the caller.",
        "flatPath": "v1/projects/{projectsId}/brands",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "brands",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iap.projects.brands.get": {
        "description": "Retrieves the OAuth brand of the project.",
        "flatPath": "v1/projects/{projectsId}/brands/{brandsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "brands",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iap.projects.brands.identityAwareProxyClients.create": {
        "description": "Creates an Identity Aware Proxy (IAP) OAuth client. The client is owned by IAP. Requires that the brand for the project exists and that it is set for internal-only use.",
        "flatPath": "v1/projects/{projectsId}/brands/{brandsId}/identityAwareProxyClients",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "identityAwareProxyClients",
        "resourceTypePath": "//projects/brands",
        "versions": [
          "v1"
        ]
      },
      "iap.projects.brands.identityAwareProxyClients.delete": {
        "description": "Deletes an Identity Aware Proxy (IAP) OAuth client. Useful for removing obsolete clients, managing the number of clients in a given project, and cleaning up after tests. Requires that the client is owned by IAP.",
        "flatPath": "v1/projects/{projectsId}/brands/{brandsId}/identityAwareProxyClients/{identityAwareProxyClientsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "identityAwareProxyClients",
        "resourceTypePath": "//projects/brands",
        "versions": [
          "v1"
        ]
      },
      "iap.projects.brands.identityAwareProxyClients.get": {
        "description": "Retrieves an Identity Aware Proxy (IAP) OAuth client. Requires that the client is owned by IAP.",
        "flatPath": "v1/projects/{projectsId}/brands/{brandsId}/identityAwareProxyClients/{identityAwareProxyClientsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "identityAwareProxyClients",
        "resourceTypePath": "//projects/brands",
        "versions": [
          "v1"
        ]
      },
      "iap.projects.brands.identityAwareProxyClients.list": {
        "description": "Lists the existing clients for the brand.",
        "flatPath": "v1/projects/{projectsId}/brands/{brandsId}/identityAwareProxyClients",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "identityAwareProxyClients",
        "resourceTypePath": "//projects/brands",
        "versions": [
          "v1"
        ]
      },
      "iap.projects.brands.identityAwareProxyClients.resetSecret": {
        "description": "Resets an Identity Aware Proxy (IAP) OAuth client secret. Useful if the secret was compromised. Requires that the client is owned by IAP.",
        "flatPath": "v1/projects/{projectsId}/brands/{brandsId}/identityAwareProxyClients/{identityAwareProxyClientsId}:resetSecret",
        "httpMethod": "POST",
        "method": "resetSecret",
        "resourceType": "identityAwareProxyClients",
        "resourceTypePath": "//projects/brands",
        "versions": [
          "v1"
        ]
      },
      "iap.projects.brands.list": {
        "description": "Lists the existing brands for the project.",
        "flatPath": "v1/projects/{projectsId}/brands",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "brands",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "iap.setIamPolicy": {
        "description": "Sets the access control policy for an Identity-Aware Proxy protected resource. Replaces any existing policy. More information about managing access via IAP can be found at: https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api",
        "flatPath": "v1beta1/{v1beta1Id}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "v1beta1",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "iap.testIamPermissions": {
        "description": "Returns permissions that a caller has on the Identity-Aware Proxy protected resource. If the resource does not exist or the caller does not have Identity-Aware Proxy permissions a [google.rpc.Code.PERMISSION_DENIED] will be returned. More information about managing access via IAP can be found at: https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api",
        "flatPath": "v1beta1/{v1beta1Id}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "v1beta1",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "iap.updateIapSettings": {
        "description": "Updates the IAP settings on a particular IAP protected resource. It replaces all fields unless the `update_mask` is set.",
        "flatPath": "v1/{v1Id}:iapSettings",
        "httpMethod": "PATCH",
        "method": "updateIapSettings",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Identity-Aware Proxy API"
  },
  "ideahub": {
    "description": "This is an invitation-only API.",
    "methods": {
      "ideahub.ideas.list": {
        "description": "List ideas for a given Creator and filter and sort options.",
        "flatPath": "v1alpha/ideas",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "ideas",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha"
        ]
      },
      "ideahub.platforms.properties.ideaActivities.create": {
        "description": "Creates an idea activity entry.",
        "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/ideaActivities",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "ideaActivities",
        "resourceTypePath": "//platforms/properties",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "ideahub.platforms.properties.ideaStates.patch": {
        "description": "Update an idea state resource.",
        "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/ideaStates/{ideaStatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "ideaStates",
        "resourceTypePath": "//platforms/properties",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "ideahub.platforms.properties.ideas.list": {
        "description": "List ideas for a given Creator and filter and sort options.",
        "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/ideas",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "ideas",
        "resourceTypePath": "//platforms/properties",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "ideahub.platforms.properties.locales.list": {
        "description": "Returns which locales ideas are available in for a given Creator.",
        "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/locales",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locales",
        "resourceTypePath": "//platforms/properties",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "ideahub.platforms.properties.topicStates.patch": {
        "description": "Update a topic state resource.",
        "flatPath": "v1alpha/platforms/{platformsId}/properties/{propertiesId}/topicStates/{topicStatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "topicStates",
        "resourceTypePath": "//platforms/properties",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      }
    },
    "preferredVersion": "v1beta",
    "title": "Idea Hub API"
  },
  "identitytoolkit": {
    "description": "The Google Identity Toolkit API lets you use open standards to verify a user's identity.",
    "methods": {
      "identitytoolkit.relyingparty.createAuthUri": {
        "description": "Creates the URI used by the IdP to authenticate the user.",
        "flatPath": "createAuthUri",
        "httpMethod": "POST",
        "method": "createAuthUri",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.deleteAccount": {
        "description": "Delete user account.",
        "flatPath": "deleteAccount",
        "httpMethod": "POST",
        "method": "deleteAccount",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.downloadAccount": {
        "description": "Batch download user accounts.",
        "flatPath": "downloadAccount",
        "httpMethod": "POST",
        "method": "downloadAccount",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.emailLinkSignin": {
        "description": "Reset password for a user.",
        "flatPath": "emailLinkSignin",
        "httpMethod": "POST",
        "method": "emailLinkSignin",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.getAccountInfo": {
        "description": "Returns the account info.",
        "flatPath": "getAccountInfo",
        "httpMethod": "POST",
        "method": "getAccountInfo",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.getOobConfirmationCode": {
        "description": "Get a code for user action confirmation.",
        "flatPath": "getOobConfirmationCode",
        "httpMethod": "POST",
        "method": "getOobConfirmationCode",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.getProjectConfig": {
        "description": "Get project configuration.",
        "flatPath": "getProjectConfig",
        "httpMethod": "GET",
        "method": "getProjectConfig",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.getPublicKeys": {
        "description": "Get token signing public key.",
        "flatPath": "publicKeys",
        "httpMethod": "GET",
        "method": "getPublicKeys",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.getRecaptchaParam": {
        "description": "Get recaptcha secure param.",
        "flatPath": "getRecaptchaParam",
        "httpMethod": "GET",
        "method": "getRecaptchaParam",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.resetPassword": {
        "description": "Reset password for a user.",
        "flatPath": "resetPassword",
        "httpMethod": "POST",
        "method": "resetPassword",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.sendVerificationCode": {
        "description": "Send SMS verification code.",
        "flatPath": "sendVerificationCode",
        "httpMethod": "POST",
        "method": "sendVerificationCode",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.setAccountInfo": {
        "description": "Set account info for a user.",
        "flatPath": "setAccountInfo",
        "httpMethod": "POST",
        "method": "setAccountInfo",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.setProjectConfig": {
        "description": "Set project configuration.",
        "flatPath": "setProjectConfig",
        "httpMethod": "POST",
        "method": "setProjectConfig",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.signOutUser": {
        "description": "Sign out user.",
        "flatPath": "signOutUser",
        "httpMethod": "POST",
        "method": "signOutUser",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.signupNewUser": {
        "description": "Signup new user.",
        "flatPath": "signupNewUser",
        "httpMethod": "POST",
        "method": "signupNewUser",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.uploadAccount": {
        "description": "Batch upload existing user accounts.",
        "flatPath": "uploadAccount",
        "httpMethod": "POST",
        "method": "uploadAccount",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.verifyAssertion": {
        "description": "Verifies the assertion returned by the IdP.",
        "flatPath": "verifyAssertion",
        "httpMethod": "POST",
        "method": "verifyAssertion",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.verifyCustomToken": {
        "description": "Verifies the developer asserted ID token.",
        "flatPath": "verifyCustomToken",
        "httpMethod": "POST",
        "method": "verifyCustomToken",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.verifyPassword": {
        "description": "Verifies the user entered password.",
        "flatPath": "verifyPassword",
        "httpMethod": "POST",
        "method": "verifyPassword",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "identitytoolkit.relyingparty.verifyPhoneNumber": {
        "description": "Verifies ownership of a phone number and creates/updates the user account accordingly.",
        "flatPath": "verifyPhoneNumber",
        "httpMethod": "POST",
        "method": "verifyPhoneNumber",
        "resourceType": "relyingparty",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Identity Toolkit API"
  },
  "indexing": {
    "description": "Notifies Google when your web pages change.",
    "methods": {
      "indexing.urlNotifications.getMetadata": {
        "description": "Gets metadata about a Web Document. This method can _only_ be used to query URLs that were previously seen in successful Indexing API notifications. Includes the latest `UrlNotification` received via this API.",
        "flatPath": "v3/urlNotifications/metadata",
        "httpMethod": "GET",
        "method": "getMetadata",
        "resourceType": "urlNotifications",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "indexing.urlNotifications.publish": {
        "description": "Notifies that a URL has been updated or deleted.",
        "flatPath": "v3/urlNotifications:publish",
        "httpMethod": "POST",
        "method": "publish",
        "resourceType": "urlNotifications",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Indexing API"
  },
  "jobs": {
    "description": "Cloud Talent Solution provides the capability to create, read, update, and delete job postings, as well as search jobs based on keywords and filters.",
    "methods": {
      "jobs.projects.clientEvents.create": {
        "description": "Report events issued when end user interacts with customer's application that uses Cloud Talent Solution. You may inspect the created events in [self service tools](https://console.cloud.google.com/talent-solution/overview). [Learn more](https://cloud.google.com/talent-solution/docs/management-tools) about self service tools.",
        "flatPath": "v3p1beta1/projects/{projectsId}/clientEvents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clientEvents",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.companies.create": {
        "description": "Creates a new company entity.",
        "flatPath": "v3p1beta1/projects/{projectsId}/companies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "companies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.companies.delete": {
        "description": "Deletes specified company. Prerequisite: The company has no jobs associated with it.",
        "flatPath": "v3p1beta1/projects/{projectsId}/companies/{companiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "companies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.companies.get": {
        "description": "Retrieves specified company.",
        "flatPath": "v3p1beta1/projects/{projectsId}/companies/{companiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "companies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.companies.list": {
        "description": "Lists all companies associated with the service account.",
        "flatPath": "v3p1beta1/projects/{projectsId}/companies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "companies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.companies.patch": {
        "description": "Updates specified company. Company names can't be updated. To update a company name, delete the company and all jobs associated with it, and only then re-create them.",
        "flatPath": "v3p1beta1/projects/{projectsId}/companies/{companiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "companies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.complete": {
        "description": "Completes the specified prefix with keyword suggestions. Intended for use by a job search auto-complete search box.",
        "flatPath": "v3p1beta1/projects/{projectsId}:complete",
        "httpMethod": "GET",
        "method": "complete",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.jobs.batchDelete": {
        "description": "Deletes a list of Jobs by filter.",
        "flatPath": "v3p1beta1/projects/{projectsId}/jobs:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.jobs.create": {
        "description": "Creates a new job. Typically, the job becomes searchable within 10 seconds, but it may take up to 5 minutes.",
        "flatPath": "v3p1beta1/projects/{projectsId}/jobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.jobs.delete": {
        "description": "Deletes the specified job. Typically, the job becomes unsearchable within 10 seconds, but it may take up to 5 minutes.",
        "flatPath": "v3p1beta1/projects/{projectsId}/jobs/{jobsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.jobs.get": {
        "description": "Retrieves the specified job, whose status is OPEN or recently EXPIRED within the last 90 days.",
        "flatPath": "v3p1beta1/projects/{projectsId}/jobs/{jobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.jobs.list": {
        "description": "Lists jobs by filter.",
        "flatPath": "v3p1beta1/projects/{projectsId}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.jobs.patch": {
        "description": "Updates specified job. Typically, updated contents become visible in search results within 10 seconds, but it may take up to 5 minutes.",
        "flatPath": "v3p1beta1/projects/{projectsId}/jobs/{jobsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.jobs.search": {
        "description": "Searches for jobs using the provided SearchJobsRequest. This call constrains the visibility of jobs present in the database, and only returns jobs that the caller has permission to search against.",
        "flatPath": "v3p1beta1/projects/{projectsId}/jobs:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.jobs.searchForAlert": {
        "description": "Searches for jobs using the provided SearchJobsRequest. This API call is intended for the use case of targeting passive job seekers (for example, job seekers who have signed up to receive email alerts about potential job opportunities), and has different algorithmic adjustments that are targeted to passive job seekers. This call constrains the visibility of jobs present in the database, and only returns jobs the caller has permission to search against.",
        "flatPath": "v3p1beta1/projects/{projectsId}/jobs:searchForAlert",
        "httpMethod": "POST",
        "method": "searchForAlert",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v3"
        ]
      },
      "jobs.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v3p1beta1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v3p1beta1",
          "v4"
        ]
      },
      "jobs.projects.tenants.clientEvents.create": {
        "description": "Report events issued when end user interacts with customer's application that uses Cloud Talent Solution. You may inspect the created events in [self service tools](https://console.cloud.google.com/talent-solution/overview). [Learn more](https://cloud.google.com/talent-solution/docs/management-tools) about self service tools.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/clientEvents",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clientEvents",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.companies.create": {
        "description": "Creates a new company entity.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/companies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "companies",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.companies.delete": {
        "description": "Deletes specified company. Prerequisite: The company has no jobs associated with it.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/companies/{companiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "companies",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.companies.get": {
        "description": "Retrieves specified company.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/companies/{companiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "companies",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.companies.list": {
        "description": "Lists all companies associated with the project.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/companies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "companies",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.companies.patch": {
        "description": "Updates specified company.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/companies/{companiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "companies",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.completeQuery": {
        "description": "Completes the specified prefix with keyword suggestions. Intended for use by a job search auto-complete search box.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}:completeQuery",
        "httpMethod": "GET",
        "method": "completeQuery",
        "resourceType": "tenants",
        "resourceTypePath": "//projects",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.create": {
        "description": "Creates a new tenant entity.",
        "flatPath": "v4/projects/{projectsId}/tenants",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tenants",
        "resourceTypePath": "//projects",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.delete": {
        "description": "Deletes specified tenant.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tenants",
        "resourceTypePath": "//projects",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.get": {
        "description": "Retrieves specified tenant.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tenants",
        "resourceTypePath": "//projects",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.batchCreate": {
        "description": "Begins executing a batch create jobs operation.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.batchDelete": {
        "description": "Begins executing a batch delete jobs operation.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.batchUpdate": {
        "description": "Begins executing a batch update jobs operation.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.create": {
        "description": "Creates a new job. Typically, the job becomes searchable within 10 seconds, but it may take up to 5 minutes.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.delete": {
        "description": "Deletes the specified job. Typically, the job becomes unsearchable within 10 seconds, but it may take up to 5 minutes.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs/{jobsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.get": {
        "description": "Retrieves the specified job, whose status is OPEN or recently EXPIRED within the last 90 days.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs/{jobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.list": {
        "description": "Lists jobs by filter.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.patch": {
        "description": "Updates specified job. Typically, updated contents become visible in search results within 10 seconds, but it may take up to 5 minutes.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs/{jobsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.search": {
        "description": "Searches for jobs using the provided SearchJobsRequest. This call constrains the visibility of jobs present in the database, and only returns jobs that the caller has permission to search against.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.jobs.searchForAlert": {
        "description": "Searches for jobs using the provided SearchJobsRequest. This API call is intended for the use case of targeting passive job seekers (for example, job seekers who have signed up to receive email alerts about potential job opportunities), it has different algorithmic adjustments that are designed to specifically target passive job seekers. This call constrains the visibility of jobs present in the database, and only returns jobs the caller has permission to search against.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}/jobs:searchForAlert",
        "httpMethod": "POST",
        "method": "searchForAlert",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/tenants",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.list": {
        "description": "Lists all tenants associated with the project.",
        "flatPath": "v4/projects/{projectsId}/tenants",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tenants",
        "resourceTypePath": "//projects",
        "versions": [
          "v4"
        ]
      },
      "jobs.projects.tenants.patch": {
        "description": "Updates specified tenant.",
        "flatPath": "v4/projects/{projectsId}/tenants/{tenantsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tenants",
        "resourceTypePath": "//projects",
        "versions": [
          "v4"
        ]
      }
    },
    "preferredVersion": "v4",
    "title": "Cloud Talent Solution API"
  },
  "keep": {
    "description": "This API is an enterprise-only API used to create and manage the Keep notes within your domain, including resolving issues identified by CASB software.",
    "methods": {
      "keep.media.download": {
        "description": "Gets an attachment. To download attachment media via REST requires the alt=media query parameter. Returns a 400 bad request error if attachment media is not available in the requested MIME type.",
        "flatPath": "v1/notes/{notesId}/attachments/{attachmentsId}",
        "httpMethod": "GET",
        "method": "download",
        "resourceType": "media",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "keep.notes.create": {
        "description": "Creates a new note.",
        "flatPath": "v1/notes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "notes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "keep.notes.delete": {
        "description": "Deletes a note. Caller must have the `OWNER` role on the note to delete. Deleting a note removes the resource immediately and cannot be undone. Any collaborators will lose access to the note.",
        "flatPath": "v1/notes/{notesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "notes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "keep.notes.get": {
        "description": "Gets a note.",
        "flatPath": "v1/notes/{notesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "notes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "keep.notes.list": {
        "description": "Lists notes. Every list call returns a page of results with `page_size` as the upper bound of returned items. A `page_size` of zero allows the server to choose the upper bound. The ListNotesResponse contains at most `page_size` entries. If there are more things left to list, it provides a `next_page_token` value. (Page tokens are opaque values.) To get the next page of results, copy the result's `next_page_token` into the next request's `page_token`. Repeat until the `next_page_token` returned with a page of results is empty. ListNotes return consistent results in the face of concurrent changes, or signals that it cannot with an ABORTED error.",
        "flatPath": "v1/notes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "notes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "keep.notes.permissions.batchCreate": {
        "description": "Creates one or more permissions on the note. Only permissions with the `WRITER` role may be created. If adding any permission fails, then the entire request fails and no changes are made.",
        "flatPath": "v1/notes/{notesId}/permissions:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "permissions",
        "resourceTypePath": "//notes",
        "versions": [
          "v1"
        ]
      },
      "keep.notes.permissions.batchDelete": {
        "description": "Deletes one or more permissions on the note. The specified entities will immediately lose access. A permission with the `OWNER` role can't be removed. If removing a permission fails, then the entire request fails and no changes are made. Returns a 400 bad request error if a specified permission does not exist on the note.",
        "flatPath": "v1/notes/{notesId}/permissions:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "permissions",
        "resourceTypePath": "//notes",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Keep API"
  },
  "kgsearch": {
    "description": "Searches the Google Knowledge Graph for entities.",
    "methods": {
      "kgsearch.entities.search": {
        "description": "Searches Knowledge Graph for entities that match the constraints. A list of matched entities will be returned in response, which will be in JSON-LD format and compatible with http://schema.org",
        "flatPath": "v1/entities:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "entities",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Knowledge Graph Search API"
  },
  "language": {
    "description": "Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.",
    "methods": {
      "language.documents.analyzeEntities": {
        "description": "Finds named entities (currently proper names and common nouns) in the text along with entity types, salience, mentions for each entity, and other properties.",
        "flatPath": "v1beta1/documents:analyzeEntities",
        "httpMethod": "POST",
        "method": "analyzeEntities",
        "resourceType": "documents",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1beta2",
          "v1"
        ]
      },
      "language.documents.analyzeEntitySentiment": {
        "description": "Finds entities, similar to AnalyzeEntities in the text and analyzes sentiment associated with each entity and its mentions.",
        "flatPath": "v1beta2/documents:analyzeEntitySentiment",
        "httpMethod": "POST",
        "method": "analyzeEntitySentiment",
        "resourceType": "documents",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "language.documents.analyzeSentiment": {
        "description": "Analyzes the sentiment of the provided text.",
        "flatPath": "v1beta1/documents:analyzeSentiment",
        "httpMethod": "POST",
        "method": "analyzeSentiment",
        "resourceType": "documents",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1beta2",
          "v1"
        ]
      },
      "language.documents.analyzeSyntax": {
        "description": "Analyzes the syntax of the text and provides sentence boundaries and tokenization along with part of speech tags, dependency trees, and other properties.",
        "flatPath": "v1beta1/documents:analyzeSyntax",
        "httpMethod": "POST",
        "method": "analyzeSyntax",
        "resourceType": "documents",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1beta2",
          "v1"
        ]
      },
      "language.documents.annotateText": {
        "description": "A convenience method that provides all the features that analyzeSentiment, analyzeEntities, and analyzeSyntax provide in one call.",
        "flatPath": "v1beta1/documents:annotateText",
        "httpMethod": "POST",
        "method": "annotateText",
        "resourceType": "documents",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1beta2",
          "v1"
        ]
      },
      "language.documents.classifyText": {
        "description": "Classifies a document into categories.",
        "flatPath": "v1beta2/documents:classifyText",
        "httpMethod": "POST",
        "method": "classifyText",
        "resourceType": "documents",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Natural Language API"
  },
  "libraryagent": {
    "description": "A simple Google Example Library API.",
    "methods": {
      "libraryagent.shelves.books.borrow": {
        "description": "Borrow a book from the library. Returns the book if it is borrowed successfully. Returns NOT_FOUND if the book does not exist in the library. Returns quota exceeded error if the amount of books borrowed exceeds allocation quota in any dimensions.",
        "flatPath": "v1/shelves/{shelvesId}/books/{booksId}:borrow",
        "httpMethod": "POST",
        "method": "borrow",
        "resourceType": "books",
        "resourceTypePath": "//shelves",
        "versions": [
          "v1"
        ]
      },
      "libraryagent.shelves.books.get": {
        "description": "Gets a book. Returns NOT_FOUND if the book does not exist.",
        "flatPath": "v1/shelves/{shelvesId}/books/{booksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "books",
        "resourceTypePath": "//shelves",
        "versions": [
          "v1"
        ]
      },
      "libraryagent.shelves.books.list": {
        "description": "Lists books in a shelf. The order is unspecified but deterministic. Newly created books will not necessarily be added to the end of this list. Returns NOT_FOUND if the shelf does not exist.",
        "flatPath": "v1/shelves/{shelvesId}/books",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "books",
        "resourceTypePath": "//shelves",
        "versions": [
          "v1"
        ]
      },
      "libraryagent.shelves.books.return": {
        "description": "Return a book to the library. Returns the book if it is returned to the library successfully. Returns error if the book does not belong to the library or the users didn't borrow before.",
        "flatPath": "v1/shelves/{shelvesId}/books/{booksId}:return",
        "httpMethod": "POST",
        "method": "return",
        "resourceType": "books",
        "resourceTypePath": "//shelves",
        "versions": [
          "v1"
        ]
      },
      "libraryagent.shelves.get": {
        "description": "Gets a shelf. Returns NOT_FOUND if the shelf does not exist.",
        "flatPath": "v1/shelves/{shelvesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "shelves",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "libraryagent.shelves.list": {
        "description": "Lists shelves. The order is unspecified but deterministic. Newly created shelves will not necessarily be added to the end of this list.",
        "flatPath": "v1/shelves",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "shelves",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Library Agent API"
  },
  "licensing": {
    "description": "The Google Enterprise License Manager API's allows you to license apps for all the users of a domain managed by you.",
    "methods": {
      "licensing.licenseAssignments.delete": {
        "description": "Revoke a license.",
        "flatPath": "apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "licenseAssignments",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "licensing.licenseAssignments.get": {
        "description": "Get a specific user's license by product SKU.",
        "flatPath": "apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "licenseAssignments",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "licensing.licenseAssignments.insert": {
        "description": "Assign a license.",
        "flatPath": "apps/licensing/v1/product/{productId}/sku/{skuId}/user",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "licenseAssignments",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "licensing.licenseAssignments.listForProduct": {
        "description": "List all users assigned licenses for a specific product SKU.",
        "flatPath": "apps/licensing/v1/product/{productId}/users",
        "httpMethod": "GET",
        "method": "listForProduct",
        "resourceType": "licenseAssignments",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "licensing.licenseAssignments.listForProductAndSku": {
        "description": "List all users assigned licenses for a specific product SKU.",
        "flatPath": "apps/licensing/v1/product/{productId}/sku/{skuId}/users",
        "httpMethod": "GET",
        "method": "listForProductAndSku",
        "resourceType": "licenseAssignments",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "licensing.licenseAssignments.patch": {
        "description": "Reassign a user's product SKU with a different SKU in the same product. This method supports patch semantics.",
        "flatPath": "apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "licenseAssignments",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "licensing.licenseAssignments.update": {
        "description": "Reassign a user's product SKU with a different SKU in the same product.",
        "flatPath": "apps/licensing/v1/product/{productId}/sku/{skuId}/user/{userId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "licenseAssignments",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Enterprise License Manager API"
  },
  "lifesciences": {
    "description": "Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.",
    "methods": {
      "lifesciences.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v2beta/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta"
        ]
      },
      "lifesciences.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v2beta/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2beta"
        ]
      },
      "lifesciences.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.cancel`",
        "flatPath": "v2beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta"
        ]
      },
      "lifesciences.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.get`",
        "flatPath": "v2beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta"
        ]
      },
      "lifesciences.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.list`",
        "flatPath": "v2beta/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta"
        ]
      },
      "lifesciences.projects.locations.pipelines.run": {
        "description": "Runs a pipeline. The returned Operation's metadata field will contain a google.cloud.lifesciences.v2beta.Metadata object describing the status of the pipeline execution. The response field will contain a google.cloud.lifesciences.v2beta.RunPipelineResponse object if the pipeline completes successfully. **Note:** Before you can use this method, the *Life Sciences Service Agent* must have access to your project. This is done automatically when the Cloud Life Sciences API is first enabled, but if you delete this permission you must disable and re-enable the API to grant the Life Sciences Service Agent the required permissions. Authorization requires the following [Google IAM](https://cloud.google.com/iam/) permission: * `lifesciences.workflows.run`",
        "flatPath": "v2beta/projects/{projectsId}/locations/{locationsId}/pipelines:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "pipelines",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta"
        ]
      }
    },
    "preferredVersion": "v2beta",
    "title": "Cloud Life Sciences API"
  },
  "localservices": {
    "description": "",
    "methods": {
      "localservices.accountReports.search": {
        "description": "Get account reports containing aggregate account data of all linked GLS accounts. Caller needs to provide their manager customer id and the associated auth credential that allows them read permissions on their linked accounts.",
        "flatPath": "v1/accountReports:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "accountReports",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "localservices.detailedLeadReports.search": {
        "description": "Get detailed lead reports containing leads that have been received by all linked GLS accounts. Caller needs to provide their manager customer id and the associated auth credential that allows them read permissions on their linked accounts.",
        "flatPath": "v1/detailedLeadReports:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "detailedLeadReports",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Local Services API"
  },
  "logging": {
    "description": "Writes log entries and manages your Cloud Logging configuration.",
    "methods": {
      "logging.billingAccounts.buckets.get": {
        "description": "Gets a log bucket.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/buckets/{bucketsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buckets",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.buckets.views.get": {
        "description": "Gets a view on a log bucket..",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "views",
        "resourceTypePath": "//billingAccounts/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.exclusions.create": {
        "description": "Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/exclusions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "exclusions",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.exclusions.delete": {
        "description": "Deletes an exclusion in the _Default sink.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/exclusions/{exclusionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "exclusions",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.exclusions.get": {
        "description": "Gets the description of an exclusion in the _Default sink.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/exclusions/{exclusionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "exclusions",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.exclusions.list": {
        "description": "Lists all the exclusions on the _Default sink in a parent resource.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/exclusions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "exclusions",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.exclusions.patch": {
        "description": "Changes one or more properties of an existing exclusion in the _Default sink.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/exclusions/{exclusionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "exclusions",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.getCmekSettings": {
        "description": "Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Logs Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/cmekSettings",
        "httpMethod": "GET",
        "method": "getCmekSettings",
        "resourceType": "billingAccounts",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.buckets.create": {
        "description": "Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/buckets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "buckets",
        "resourceTypePath": "//billingAccounts/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.buckets.delete": {
        "description": "Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "buckets",
        "resourceTypePath": "//billingAccounts/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.buckets.list": {
        "description": "Lists log buckets.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/buckets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "buckets",
        "resourceTypePath": "//billingAccounts/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.buckets.patch": {
        "description": "Updates a log bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket is locked, FAILED_PRECONDITION will be returned.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "buckets",
        "resourceTypePath": "//billingAccounts/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.buckets.undelete": {
        "description": "Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/buckets/{bucketsId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "buckets",
        "resourceTypePath": "//billingAccounts/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.buckets.views.create": {
        "description": "Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "views",
        "resourceTypePath": "//billingAccounts/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.buckets.views.delete": {
        "description": "Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "views",
        "resourceTypePath": "//billingAccounts/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.buckets.views.list": {
        "description": "Lists views on a log bucket.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "views",
        "resourceTypePath": "//billingAccounts/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.buckets.views.patch": {
        "description": "Updates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "views",
        "resourceTypePath": "//billingAccounts/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//billingAccounts/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//billingAccounts/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.logs.delete": {
        "description": "Deletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/logs/{logsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "logs",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.logs.list": {
        "description": "Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/logs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "logs",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.sinks.create": {
        "description": "Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/sinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sinks",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.sinks.delete": {
        "description": "Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/sinks/{sinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sinks",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.sinks.get": {
        "description": "Gets a sink.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/sinks/{sinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sinks",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.sinks.list": {
        "description": "Lists sinks.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/sinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sinks",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.sinks.patch": {
        "description": "Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/sinks/{sinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sinks",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.billingAccounts.sinks.update": {
        "description": "Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.",
        "flatPath": "v2/billingAccounts/{billingAccountsId}/sinks/{sinksId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "sinks",
        "resourceTypePath": "//billingAccounts",
        "versions": [
          "v2"
        ]
      },
      "logging.entries.copy": {
        "description": "Copies a set of log entries from a log bucket to a Cloud Storage bucket.",
        "flatPath": "v2/entries:copy",
        "httpMethod": "POST",
        "method": "copy",
        "resourceType": "entries",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.entries.list": {
        "description": "Lists log entries. Use this method to retrieve log entries that originated from a project/folder/organization/billing account. For ways to export log entries, see Exporting Logs (https://cloud.google.com/logging/docs/export).",
        "flatPath": "v2/entries:list",
        "httpMethod": "POST",
        "method": "list",
        "resourceType": "entries",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.entries.tail": {
        "description": "Streaming read of log entries as they are ingested. Until the stream is terminated, it will continue reading logs.",
        "flatPath": "v2/entries:tail",
        "httpMethod": "POST",
        "method": "tail",
        "resourceType": "entries",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.entries.write": {
        "description": "Writes log entries to Logging. This API method is the only way to send log entries to Logging. This method is used, directly or indirectly, by the Logging agent (fluentd) and all logging libraries configured to use Logging. A single request may contain log entries for a maximum of 1000 different resources (projects, organizations, billing accounts or folders)",
        "flatPath": "v2/entries:write",
        "httpMethod": "POST",
        "method": "write",
        "resourceType": "entries",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.exclusions.create": {
        "description": "Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.",
        "flatPath": "v2/{v2Id}/{v2Id1}/exclusions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "exclusions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.exclusions.delete": {
        "description": "Deletes an exclusion in the _Default sink.",
        "flatPath": "v2/{v2Id}/{v2Id1}/exclusions/{exclusionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "exclusions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.exclusions.get": {
        "description": "Gets the description of an exclusion in the _Default sink.",
        "flatPath": "v2/{v2Id}/{v2Id1}/exclusions/{exclusionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "exclusions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.exclusions.list": {
        "description": "Lists all the exclusions on the _Default sink in a parent resource.",
        "flatPath": "v2/{v2Id}/{v2Id1}/exclusions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "exclusions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.exclusions.patch": {
        "description": "Changes one or more properties of an existing exclusion in the _Default sink.",
        "flatPath": "v2/{v2Id}/{v2Id1}/exclusions/{exclusionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "exclusions",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.exclusions.create": {
        "description": "Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.",
        "flatPath": "v2/folders/{foldersId}/exclusions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "exclusions",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.exclusions.delete": {
        "description": "Deletes an exclusion in the _Default sink.",
        "flatPath": "v2/folders/{foldersId}/exclusions/{exclusionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "exclusions",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.exclusions.get": {
        "description": "Gets the description of an exclusion in the _Default sink.",
        "flatPath": "v2/folders/{foldersId}/exclusions/{exclusionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "exclusions",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.exclusions.list": {
        "description": "Lists all the exclusions on the _Default sink in a parent resource.",
        "flatPath": "v2/folders/{foldersId}/exclusions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "exclusions",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.exclusions.patch": {
        "description": "Changes one or more properties of an existing exclusion in the _Default sink.",
        "flatPath": "v2/folders/{foldersId}/exclusions/{exclusionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "exclusions",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.getCmekSettings": {
        "description": "Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Logs Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.",
        "flatPath": "v2/folders/{foldersId}/cmekSettings",
        "httpMethod": "GET",
        "method": "getCmekSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.create": {
        "description": "Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "buckets",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.delete": {
        "description": "Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "buckets",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.get": {
        "description": "Gets a log bucket.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buckets",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.list": {
        "description": "Lists log buckets.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "buckets",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.patch": {
        "description": "Updates a log bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket is locked, FAILED_PRECONDITION will be returned.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "buckets",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.undelete": {
        "description": "Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets/{bucketsId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "buckets",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.views.create": {
        "description": "Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "views",
        "resourceTypePath": "//folders/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.views.delete": {
        "description": "Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "views",
        "resourceTypePath": "//folders/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.views.get": {
        "description": "Gets a view on a log bucket..",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "views",
        "resourceTypePath": "//folders/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.views.list": {
        "description": "Lists views on a log bucket.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "views",
        "resourceTypePath": "//folders/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.buckets.views.patch": {
        "description": "Updates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "views",
        "resourceTypePath": "//folders/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v2/folders/{foldersId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2/folders/{foldersId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.logs.delete": {
        "description": "Deletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.",
        "flatPath": "v2/folders/{foldersId}/logs/{logsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "logs",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.logs.list": {
        "description": "Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.",
        "flatPath": "v2/folders/{foldersId}/logs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "logs",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.sinks.create": {
        "description": "Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.",
        "flatPath": "v2/folders/{foldersId}/sinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sinks",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.sinks.delete": {
        "description": "Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.",
        "flatPath": "v2/folders/{foldersId}/sinks/{sinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sinks",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.sinks.get": {
        "description": "Gets a sink.",
        "flatPath": "v2/folders/{foldersId}/sinks/{sinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sinks",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.sinks.list": {
        "description": "Lists sinks.",
        "flatPath": "v2/folders/{foldersId}/sinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sinks",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.sinks.patch": {
        "description": "Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.",
        "flatPath": "v2/folders/{foldersId}/sinks/{sinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sinks",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.folders.sinks.update": {
        "description": "Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.",
        "flatPath": "v2/folders/{foldersId}/sinks/{sinksId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "sinks",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "logging.getCmekSettings": {
        "description": "Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Logs Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.",
        "flatPath": "v2/{v2Id}/{v2Id1}/cmekSettings",
        "httpMethod": "GET",
        "method": "getCmekSettings",
        "resourceType": "v2",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.create": {
        "description": "Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "buckets",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.delete": {
        "description": "Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "buckets",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.get": {
        "description": "Gets a log bucket.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buckets",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.list": {
        "description": "Lists log buckets.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "buckets",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.patch": {
        "description": "Updates a log bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket is locked, FAILED_PRECONDITION will be returned.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "buckets",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.undelete": {
        "description": "Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets/{bucketsId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "buckets",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.views.create": {
        "description": "Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "views",
        "resourceTypePath": "//locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.views.delete": {
        "description": "Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "views",
        "resourceTypePath": "//locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.views.get": {
        "description": "Gets a view on a log bucket..",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "views",
        "resourceTypePath": "//locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.views.list": {
        "description": "Lists views on a log bucket.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "views",
        "resourceTypePath": "//locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.buckets.views.patch": {
        "description": "Updates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "views",
        "resourceTypePath": "//locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "logging.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2/{v2Id}/{v2Id1}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//locations",
        "versions": [
          "v2"
        ]
      },
      "logging.logs.delete": {
        "description": "Deletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.",
        "flatPath": "v2/{v2Id}/{v2Id1}/logs/{logsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "logs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.logs.list": {
        "description": "Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.",
        "flatPath": "v2/{v2Id}/{v2Id1}/logs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "logs",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.monitoredResourceDescriptors.list": {
        "description": "Lists the descriptors for monitored resource types used by Logging.",
        "flatPath": "v2/monitoredResourceDescriptors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "monitoredResourceDescriptors",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.exclusions.create": {
        "description": "Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.",
        "flatPath": "v2/organizations/{organizationsId}/exclusions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "exclusions",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.exclusions.delete": {
        "description": "Deletes an exclusion in the _Default sink.",
        "flatPath": "v2/organizations/{organizationsId}/exclusions/{exclusionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "exclusions",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.exclusions.get": {
        "description": "Gets the description of an exclusion in the _Default sink.",
        "flatPath": "v2/organizations/{organizationsId}/exclusions/{exclusionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "exclusions",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.exclusions.list": {
        "description": "Lists all the exclusions on the _Default sink in a parent resource.",
        "flatPath": "v2/organizations/{organizationsId}/exclusions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "exclusions",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.exclusions.patch": {
        "description": "Changes one or more properties of an existing exclusion in the _Default sink.",
        "flatPath": "v2/organizations/{organizationsId}/exclusions/{exclusionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "exclusions",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.getCmekSettings": {
        "description": "Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Logs Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.",
        "flatPath": "v2/organizations/{organizationsId}/cmekSettings",
        "httpMethod": "GET",
        "method": "getCmekSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.create": {
        "description": "Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "buckets",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.delete": {
        "description": "Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "buckets",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.get": {
        "description": "Gets a log bucket.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buckets",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.list": {
        "description": "Lists log buckets.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "buckets",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.patch": {
        "description": "Updates a log bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket is locked, FAILED_PRECONDITION will be returned.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "buckets",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.undelete": {
        "description": "Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets/{bucketsId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "buckets",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.views.create": {
        "description": "Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "views",
        "resourceTypePath": "//organizations/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.views.delete": {
        "description": "Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "views",
        "resourceTypePath": "//organizations/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.views.get": {
        "description": "Gets a view on a log bucket..",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "views",
        "resourceTypePath": "//organizations/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.views.list": {
        "description": "Lists views on a log bucket.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "views",
        "resourceTypePath": "//organizations/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.buckets.views.patch": {
        "description": "Updates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "views",
        "resourceTypePath": "//organizations/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v2/organizations/{organizationsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2/organizations/{organizationsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.logs.delete": {
        "description": "Deletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.",
        "flatPath": "v2/organizations/{organizationsId}/logs/{logsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "logs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.logs.list": {
        "description": "Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.",
        "flatPath": "v2/organizations/{organizationsId}/logs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "logs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.sinks.create": {
        "description": "Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.",
        "flatPath": "v2/organizations/{organizationsId}/sinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sinks",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.sinks.delete": {
        "description": "Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.",
        "flatPath": "v2/organizations/{organizationsId}/sinks/{sinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sinks",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.sinks.get": {
        "description": "Gets a sink.",
        "flatPath": "v2/organizations/{organizationsId}/sinks/{sinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sinks",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.sinks.list": {
        "description": "Lists sinks.",
        "flatPath": "v2/organizations/{organizationsId}/sinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sinks",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.sinks.patch": {
        "description": "Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.",
        "flatPath": "v2/organizations/{organizationsId}/sinks/{sinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sinks",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.sinks.update": {
        "description": "Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.",
        "flatPath": "v2/organizations/{organizationsId}/sinks/{sinksId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "sinks",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "logging.organizations.updateCmekSettings": {
        "description": "Updates the Log Router CMEK settings for the given resource.Note: CMEK for the Log Router can currently only be configured for Google Cloud organizations. Once configured, it applies to all projects and folders in the Google Cloud organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or 2) the associated service account does not have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3) access to the key is disabled.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.",
        "flatPath": "v2/organizations/{organizationsId}/cmekSettings",
        "httpMethod": "PATCH",
        "method": "updateCmekSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.exclusions.create": {
        "description": "Creates a new exclusion in the _Default sink in a specified parent resource. Only log entries belonging to that resource can be excluded. You can have up to 10 exclusions in a resource.",
        "flatPath": "v2/projects/{projectsId}/exclusions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "exclusions",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.exclusions.delete": {
        "description": "Deletes an exclusion in the _Default sink.",
        "flatPath": "v2/projects/{projectsId}/exclusions/{exclusionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "exclusions",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.exclusions.get": {
        "description": "Gets the description of an exclusion in the _Default sink.",
        "flatPath": "v2/projects/{projectsId}/exclusions/{exclusionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "exclusions",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.exclusions.list": {
        "description": "Lists all the exclusions on the _Default sink in a parent resource.",
        "flatPath": "v2/projects/{projectsId}/exclusions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "exclusions",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.exclusions.patch": {
        "description": "Changes one or more properties of an existing exclusion in the _Default sink.",
        "flatPath": "v2/projects/{projectsId}/exclusions/{exclusionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "exclusions",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.getCmekSettings": {
        "description": "Gets the Logging CMEK settings for the given resource.Note: CMEK for the Log Router can be configured for Google Cloud projects, folders, organizations and billing accounts. Once configured for an organization, it applies to all projects and folders in the Google Cloud organization.See Enabling CMEK for Logs Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.",
        "flatPath": "v2/projects/{projectsId}/cmekSettings",
        "httpMethod": "GET",
        "method": "getCmekSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.create": {
        "description": "Creates a log bucket that can be used to store log entries. After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "buckets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.delete": {
        "description": "Deletes a log bucket.Changes the bucket's lifecycle_state to the DELETE_REQUESTED state. After 7 days, the bucket will be purged and all log entries in the bucket will be permanently deleted.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "buckets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.get": {
        "description": "Gets a log bucket.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buckets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.list": {
        "description": "Lists log buckets.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "buckets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.patch": {
        "description": "Updates a log bucket. This method replaces the following fields in the existing bucket with values from the new bucket: retention_periodIf the retention period is decreased and the bucket is locked, FAILED_PRECONDITION will be returned.If the bucket has a lifecycle_state of DELETE_REQUESTED, then FAILED_PRECONDITION will be returned.After a bucket has been created, the bucket's location cannot be changed.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets/{bucketsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "buckets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.undelete": {
        "description": "Undeletes a log bucket. A bucket that has been deleted can be undeleted within the grace period of 7 days.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets/{bucketsId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "buckets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.views.create": {
        "description": "Creates a view over log entries in a log bucket. A bucket may contain a maximum of 30 views.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "views",
        "resourceTypePath": "//projects/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.views.delete": {
        "description": "Deletes a view on a log bucket. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can delete the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "views",
        "resourceTypePath": "//projects/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.views.get": {
        "description": "Gets a view on a log bucket..",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "views",
        "resourceTypePath": "//projects/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.views.list": {
        "description": "Lists views on a log bucket.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets/{bucketsId}/views",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "views",
        "resourceTypePath": "//projects/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.buckets.views.patch": {
        "description": "Updates a view on a log bucket. This method replaces the following fields in the existing view with values from the new view: filter. If an UNAVAILABLE error is returned, this indicates that system is not in a state where it can update the view. If this occurs, please try again in a few minutes.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/buckets/{bucketsId}/views/{viewsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "views",
        "resourceTypePath": "//projects/locations/buckets",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v2/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.logs.delete": {
        "description": "Deletes all the log entries in a log for the _Default Log Bucket. The log reappears if it receives new entries. Log entries written shortly before the delete operation might not be deleted. Entries received after the delete operation with a timestamp before the operation will be deleted.",
        "flatPath": "v2/projects/{projectsId}/logs/{logsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "logs",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.logs.list": {
        "description": "Lists the logs in projects, organizations, folders, or billing accounts. Only logs that have entries are listed.",
        "flatPath": "v2/projects/{projectsId}/logs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "logs",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.metrics.create": {
        "description": "Creates a logs-based metric.",
        "flatPath": "v2/projects/{projectsId}/metrics",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "metrics",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.metrics.delete": {
        "description": "Deletes a logs-based metric.",
        "flatPath": "v2/projects/{projectsId}/metrics/{metricsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "metrics",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.metrics.get": {
        "description": "Gets a logs-based metric.",
        "flatPath": "v2/projects/{projectsId}/metrics/{metricsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "metrics",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.metrics.list": {
        "description": "Lists logs-based metrics.",
        "flatPath": "v2/projects/{projectsId}/metrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "metrics",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.metrics.update": {
        "description": "Creates or updates a logs-based metric.",
        "flatPath": "v2/projects/{projectsId}/metrics/{metricsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "metrics",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.sinks.create": {
        "description": "Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.",
        "flatPath": "v2/projects/{projectsId}/sinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.sinks.delete": {
        "description": "Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.",
        "flatPath": "v2/projects/{projectsId}/sinks/{sinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.sinks.get": {
        "description": "Gets a sink.",
        "flatPath": "v2/projects/{projectsId}/sinks/{sinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.sinks.list": {
        "description": "Lists sinks.",
        "flatPath": "v2/projects/{projectsId}/sinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.sinks.patch": {
        "description": "Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.",
        "flatPath": "v2/projects/{projectsId}/sinks/{sinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.projects.sinks.update": {
        "description": "Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.",
        "flatPath": "v2/projects/{projectsId}/sinks/{sinksId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "sinks",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "logging.sinks.create": {
        "description": "Creates a sink that exports specified log entries to a destination. The export of newly-ingested log entries begins immediately, unless the sink's writer_identity is not permitted to write to the destination. A sink can export log entries only from the resource owning the sink.",
        "flatPath": "v2/{v2Id}/{v2Id1}/sinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sinks",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.sinks.delete": {
        "description": "Deletes a sink. If the sink has a unique writer_identity, then that service account is also deleted.",
        "flatPath": "v2/{v2Id}/{v2Id1}/sinks/{sinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sinks",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.sinks.get": {
        "description": "Gets a sink.",
        "flatPath": "v2/{v2Id}/{v2Id1}/sinks/{sinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sinks",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.sinks.list": {
        "description": "Lists sinks.",
        "flatPath": "v2/{v2Id}/{v2Id1}/sinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sinks",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.sinks.update": {
        "description": "Updates a sink. This method replaces the following fields in the existing sink with values from the new sink: destination, and filter.The updated sink might also have a new writer_identity; see the unique_writer_identity field.",
        "flatPath": "v2/{v2Id}/{v2Id1}/sinks/{sinksId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "sinks",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "logging.updateCmekSettings": {
        "description": "Updates the Log Router CMEK settings for the given resource.Note: CMEK for the Log Router can currently only be configured for Google Cloud organizations. Once configured, it applies to all projects and folders in the Google Cloud organization.UpdateCmekSettings will fail if 1) kms_key_name is invalid, or 2) the associated service account does not have the required roles/cloudkms.cryptoKeyEncrypterDecrypter role assigned for the key, or 3) access to the key is disabled.See Enabling CMEK for Log Router (https://cloud.google.com/logging/docs/routing/managed-encryption) for more information.",
        "flatPath": "v2/{v2Id}/{v2Id1}/cmekSettings",
        "httpMethod": "PATCH",
        "method": "updateCmekSettings",
        "resourceType": "v2",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Cloud Logging API"
  },
  "managedidentities": {
    "description": "The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).",
    "methods": {
      "managedidentities.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.attachTrust": {
        "description": "Adds AD trust in a given domain. Operation",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}:attachTrust",
        "httpMethod": "POST",
        "method": "attachTrust",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.backups.create": {
        "description": "Creates a Backup for a domain.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/backups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "managedidentities.projects.locations.global.domains.backups.delete": {
        "description": "Deletes identified Backup.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/backups/{backupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "managedidentities.projects.locations.global.domains.backups.get": {
        "description": "Gets details of a single Backup.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/backups/{backupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "managedidentities.projects.locations.global.domains.backups.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/backups/{backupsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "managedidentities.projects.locations.global.domains.backups.list": {
        "description": "Lists Backup in a given project.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/backups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "managedidentities.projects.locations.global.domains.backups.patch": {
        "description": "Updates the labels for specified Backup.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/backups/{backupsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "managedidentities.projects.locations.global.domains.backups.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/backups/{backupsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "managedidentities.projects.locations.global.domains.backups.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/backups/{backupsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "managedidentities.projects.locations.global.domains.create": {
        "description": "Creates a Microsoft AD Domain in a given project. Operation",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.delete": {
        "description": "Deletes identified domain. Operation",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.detachTrust": {
        "description": "Removes identified trust. Operation",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}:detachTrust",
        "httpMethod": "POST",
        "method": "detachTrust",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.get": {
        "description": "Gets details of a single Domain.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.getLdapssettings": {
        "description": "Gets the domain ldaps settings.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/ldapssettings",
        "httpMethod": "GET",
        "method": "getLdapssettings",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.list": {
        "description": "Lists Domains in a given project.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.patch": {
        "description": "Updates the metadata and configuration of a specified domain. Operation",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.reconfigureTrust": {
        "description": "Updates the dns conditional forwarder. Operation",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}:reconfigureTrust",
        "httpMethod": "POST",
        "method": "reconfigureTrust",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.resetAdminPassword": {
        "description": "Resets managed identities admin password identified by managed_identities_admin_name",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}:resetAdminPassword",
        "httpMethod": "POST",
        "method": "resetAdminPassword",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.restore": {
        "description": "RestoreDomain restores domain backup mentioned in the RestoreDomainRequest",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1"
        ]
      },
      "managedidentities.projects.locations.global.domains.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.sqlIntegrations.get": {
        "description": "Gets details of a single sqlIntegration.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/sqlIntegrations/{sqlIntegrationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sqlIntegrations",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.sqlIntegrations.list": {
        "description": "Lists SQLIntegrations in a given domain.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/sqlIntegrations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sqlIntegrations",
        "resourceTypePath": "//projects/locations/global/domains",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.updateLdapssettings": {
        "description": "Patches a single ldaps settings.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}/ldapssettings",
        "httpMethod": "PATCH",
        "method": "updateLdapssettings",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.domains.validateTrust": {
        "description": "Validate the trust state Operation",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/domains/{domainsId}:validateTrust",
        "httpMethod": "POST",
        "method": "validateTrust",
        "resourceType": "domains",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.peerings.create": {
        "description": "Creates a Peering for Managed AD instance.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/peerings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "peerings",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.peerings.delete": {
        "description": "Deletes identified Peering.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/peerings/{peeringsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "peerings",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.peerings.get": {
        "description": "Gets details of a single Peering.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/peerings/{peeringsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "peerings",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.peerings.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/peerings/{peeringsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "peerings",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.peerings.list": {
        "description": "Lists Peerings in a given project.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/peerings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "peerings",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.peerings.patch": {
        "description": "Updates the labels for specified Peering.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/peerings/{peeringsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "peerings",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.peerings.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/peerings/{peeringsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "peerings",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.global.peerings.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/peerings/{peeringsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "peerings",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      },
      "managedidentities.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Managed Service for Microsoft Active Directory API"
  },
  "manufacturers": {
    "description": "Public API for managing Manufacturer Center related data.",
    "methods": {
      "manufacturers.accounts.products.delete": {
        "description": "Deletes the product from a Manufacturer Center account.",
        "flatPath": "v1/accounts/{accountsId}/products/{productsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "products",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "manufacturers.accounts.products.get": {
        "description": "Gets the product from a Manufacturer Center account, including product issues. A recently updated product takes around 15 minutes to process. Changes are only visible after it has been processed. While some issues may be available once the product has been processed, other issues may take days to appear.",
        "flatPath": "v1/accounts/{accountsId}/products/{productsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "products",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "manufacturers.accounts.products.list": {
        "description": "Lists all the products in a Manufacturer Center account.",
        "flatPath": "v1/accounts/{accountsId}/products",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "products",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "manufacturers.accounts.products.update": {
        "description": "Inserts or updates the attributes of the product in a Manufacturer Center account. Creates a product with the provided attributes. If the product already exists, then all attributes are replaced with the new ones. The checks at upload time are minimal. All required attributes need to be present for a product to be valid. Issues may show up later after the API has accepted a new upload for a product and it is possible to overwrite an existing valid product with an invalid product. To detect this, you should retrieve the product and check it for issues once the new version is available. Uploaded attributes first need to be processed before they can be retrieved. Until then, new products will be unavailable, and retrieval of previously uploaded products will return the original state of the product.",
        "flatPath": "v1/accounts/{accountsId}/products/{productsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "products",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Manufacturer Center API"
  },
  "memcache": {
    "description": "Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.",
    "methods": {
      "memcache.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.instances.applyParameters": {
        "description": "`ApplyParameters` restarts the set of specified nodes in order to update them to the current set of parameters for the Memcached Instance.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:applyParameters",
        "httpMethod": "POST",
        "method": "applyParameters",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.instances.applySoftwareUpdate": {
        "description": "Updates software on the selected nodes of the Instance.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:applySoftwareUpdate",
        "httpMethod": "POST",
        "method": "applySoftwareUpdate",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2"
        ]
      },
      "memcache.projects.locations.instances.create": {
        "description": "Creates a new Instance in a given location.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.instances.delete": {
        "description": "Deletes a single Instance.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.instances.get": {
        "description": "Gets details of a single Instance.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.instances.list": {
        "description": "Lists Instances in a given location.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.instances.patch": {
        "description": "Updates an existing Instance in a given project and location.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.instances.updateParameters": {
        "description": "Updates the defined Memcached parameters for an existing instance. This method only stages the parameters, it must be followed by `ApplyParameters` to apply the parameters to nodes of the Memcached instance.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:updateParameters",
        "httpMethod": "PATCH",
        "method": "updateParameters",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta2/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "memcache.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Memorystore for Memcached API"
  },
  "metastore": {
    "description": "The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.",
    "methods": {
      "metastore.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns google.rpc.Code.UNIMPLEMENTED.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns UNIMPLEMENTED.NOTE: the name binding allows API services to override the binding to use different resource name schemes, such as users/*/operations. To override the binding, API services can add a binding such as \"/v1/{name=users/*}/operations\" to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.backups.create": {
        "description": "Creates a new backup in a given project and location.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.backups.delete": {
        "description": "Deletes a single backup.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.backups.get": {
        "description": "Gets details of a single backup.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.backups.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.backups.list": {
        "description": "Lists backups in a service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.backups.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.backups.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/backups/{backupsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "backups",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.create": {
        "description": "Creates a metastore service in a project and location.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.databases.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "databases",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha"
        ]
      },
      "metastore.projects.locations.services.databases.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "databases",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha"
        ]
      },
      "metastore.projects.locations.services.databases.tables.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}/tables/{tablesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "tables",
        "resourceTypePath": "//projects/locations/services/databases",
        "versions": [
          "v1alpha"
        ]
      },
      "metastore.projects.locations.services.databases.tables.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}/tables/{tablesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "tables",
        "resourceTypePath": "//projects/locations/services/databases",
        "versions": [
          "v1alpha"
        ]
      },
      "metastore.projects.locations.services.databases.tables.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}/tables/{tablesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "tables",
        "resourceTypePath": "//projects/locations/services/databases",
        "versions": [
          "v1alpha"
        ]
      },
      "metastore.projects.locations.services.databases.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/databases/{databasesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "databases",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha"
        ]
      },
      "metastore.projects.locations.services.delete": {
        "description": "Deletes a single service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.exportMetadata": {
        "description": "Exports metadata from a service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:exportMetadata",
        "httpMethod": "POST",
        "method": "exportMetadata",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.get": {
        "description": "Gets the details of a single service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.list": {
        "description": "Lists services in a project and location.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.metadataImports.create": {
        "description": "Creates a new MetadataImport in a given project and location.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "metadataImports",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.metadataImports.get": {
        "description": "Gets details of a single import.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports/{metadataImportsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "metadataImports",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.metadataImports.list": {
        "description": "Lists imports in a service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "metadataImports",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.metadataImports.patch": {
        "description": "Updates a single import. Only the description field of MetadataImport is supported to be updated.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}/metadataImports/{metadataImportsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "metadataImports",
        "resourceTypePath": "//projects/locations/services",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.patch": {
        "description": "Updates the parameters of a single service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.restore": {
        "description": "Restores a service from a backup.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.Can return NOT_FOUND, INVALID_ARGUMENT, and PERMISSION_DENIED errors.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      },
      "metastore.projects.locations.services.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1beta"
        ]
      }
    },
    "preferredVersion": "v1beta",
    "title": "Dataproc Metastore API"
  },
  "ml": {
    "description": "An API to enable creating and using machine learning models.",
    "methods": {
      "ml.projects.explain": {
        "description": "Performs explanation on the data in the request. {% dynamic include \"/ai-platform/includes/___explain-request\" %} ",
        "flatPath": "v1/projects/{projectsId}:explain",
        "httpMethod": "POST",
        "method": "explain",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.getConfig": {
        "description": "Get the service account information associated with your project. You need this information in order to grant the service account permissions for the Google Cloud Storage location where you put your model training code for training the model with Google Cloud Machine Learning.",
        "flatPath": "v1/projects/{projectsId}:getConfig",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.jobs.cancel": {
        "description": "Cancels a running job.",
        "flatPath": "v1/projects/{projectsId}/jobs/{jobsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.jobs.create": {
        "description": "Creates a training or a batch prediction job.",
        "flatPath": "v1/projects/{projectsId}/jobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.jobs.get": {
        "description": "Describes a job.",
        "flatPath": "v1/projects/{projectsId}/jobs/{jobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.jobs.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/jobs/{jobsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.jobs.list": {
        "description": "Lists the jobs in the project. If there are no jobs that match the request parameters, the list request returns an empty response body: {}.",
        "flatPath": "v1/projects/{projectsId}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.jobs.patch": {
        "description": "Updates a specific job resource. Currently the only supported fields to update are `labels`.",
        "flatPath": "v1/projects/{projectsId}/jobs/{jobsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.jobs.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/jobs/{jobsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.jobs.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/jobs/{jobsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "jobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.get": {
        "description": "Get the complete list of CMLE capabilities in a location, along with their location-specific properties.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.list": {
        "description": "List all locations that provides at least one type of CMLE capability.",
        "flatPath": "v1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.create": {
        "description": "Creates a study.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.delete": {
        "description": "Deletes a study.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.get": {
        "description": "Gets a study.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.list": {
        "description": "Lists all the studies in a region for an associated project.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "studies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.addMeasurement": {
        "description": "Adds a measurement of the objective metrics to a trial. This measurement is assumed to have been taken before the trial is complete.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials/{trialsId}:addMeasurement",
        "httpMethod": "POST",
        "method": "addMeasurement",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.checkEarlyStoppingState": {
        "description": "Checks whether a trial should stop or not. Returns a long-running operation. When the operation is successful, it will contain a CheckTrialEarlyStoppingStateResponse.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials/{trialsId}:checkEarlyStoppingState",
        "httpMethod": "POST",
        "method": "checkEarlyStoppingState",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.complete": {
        "description": "Marks a trial as complete.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials/{trialsId}:complete",
        "httpMethod": "POST",
        "method": "complete",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.create": {
        "description": "Adds a user provided trial to a study.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.delete": {
        "description": "Deletes a trial.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials/{trialsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.get": {
        "description": "Gets a trial.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials/{trialsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.list": {
        "description": "Lists the trials associated with a study.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.listOptimalTrials": {
        "description": "Lists the pareto-optimal trials for multi-objective study or the optimal trials for single-objective study. The definition of pareto-optimal can be checked in wiki page. https://en.wikipedia.org/wiki/Pareto_efficiency",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials:listOptimalTrials",
        "httpMethod": "POST",
        "method": "listOptimalTrials",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.stop": {
        "description": "Stops a trial.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials/{trialsId}:stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.locations.studies.trials.suggest": {
        "description": "Adds one or more trials to a study, with parameter values suggested by AI Platform Vizier. Returns a long-running operation associated with the generation of trial suggestions. When this long-running operation succeeds, it will contain a SuggestTrialsResponse.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/studies/{studiesId}/trials:suggest",
        "httpMethod": "POST",
        "method": "suggest",
        "resourceType": "trials",
        "resourceTypePath": "//projects/locations/studies",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.create": {
        "description": "Creates a model which will later contain one or more versions. You must add at least one version before you can request predictions from the model. Add versions by calling projects.models.versions.create.",
        "flatPath": "v1/projects/{projectsId}/models",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.delete": {
        "description": "Deletes a model. You can only delete a model if there are no versions in it. You can delete versions by calling projects.models.versions.delete.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.get": {
        "description": "Gets information about a model, including its name, the description (if set), and the default version (if at least one version of the model has been deployed).",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.list": {
        "description": "Lists the models in a project. Each project can contain multiple models, and each model can have multiple versions. If there are no models that match the request parameters, the list request returns an empty response body: {}.",
        "flatPath": "v1/projects/{projectsId}/models",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.patch": {
        "description": "Updates a specific model resource. Currently the only supported fields to update are `description` and `default_version.name`.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "models",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.versions.create": {
        "description": "Creates a new version of a model from a trained TensorFlow model. If the version created in the cloud by this call is the first deployed version of the specified model, it will be made the default version of the model. When you add a version to a model that already has one or more versions, the default version does not automatically change. If you want a new version to be the default, you must call projects.models.versions.setDefault.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}/versions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "versions",
        "resourceTypePath": "//projects/models",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.versions.delete": {
        "description": "Deletes a model version. Each model can have multiple versions deployed and in use at any given time. Use this method to remove a single version. Note: You cannot delete the version that is set as the default version of the model unless it is the only remaining version.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}/versions/{versionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "versions",
        "resourceTypePath": "//projects/models",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.versions.get": {
        "description": "Gets information about a model version. Models can have multiple versions. You can call projects.models.versions.list to get the same information that this method returns for all of the versions of a model.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}/versions/{versionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//projects/models",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.versions.list": {
        "description": "Gets basic information about all the versions of a model. If you expect that a model has many versions, or if you need to handle only a limited number of results at a time, you can request that the list be retrieved in batches (called pages). If there are no versions that match the request parameters, the list request returns an empty response body: {}.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects/models",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.versions.patch": {
        "description": "Updates the specified Version resource. Currently the only update-able fields are `description`, `requestLoggingConfig`, `autoScaling.minNodes`, and `manualScaling.nodes`.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}/versions/{versionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "versions",
        "resourceTypePath": "//projects/models",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.models.versions.setDefault": {
        "description": "Designates a version to be the default for the model. The default version is used for prediction requests made against the model that don't specify a version. The first version to be created for a model is automatically set as the default. You must make any subsequent changes to the default version setting manually using this method.",
        "flatPath": "v1/projects/{projectsId}/models/{modelsId}/versions/{versionsId}:setDefault",
        "httpMethod": "POST",
        "method": "setDefault",
        "resourceType": "versions",
        "resourceTypePath": "//projects/models",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "ml.projects.predict": {
        "description": "Performs online prediction on the data in the request. {% dynamic include \"/ai-platform/includes/___predict-request\" %} ",
        "flatPath": "v1/projects/{projectsId}:predict",
        "httpMethod": "POST",
        "method": "predict",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "AI Platform Training & Prediction API"
  },
  "monitoring": {
    "description": "Manages your Cloud Monitoring data and configurations.",
    "methods": {
      "monitoring.folders.timeSeries.list": {
        "description": "Lists time series that match a filter. This method does not require a Workspace.",
        "flatPath": "v3/folders/{foldersId}/timeSeries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "timeSeries",
        "resourceTypePath": "//folders",
        "versions": [
          "v3"
        ]
      },
      "monitoring.locations.global.metricsScopes.get": {
        "description": "Returns a specific Metrics Scope, including the list of projects monitored by the specified Metrics Scope.",
        "flatPath": "v1/locations/global/metricsScopes/{metricsScopesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "metricsScopes",
        "resourceTypePath": "//locations/global",
        "versions": [
          "v1"
        ]
      },
      "monitoring.locations.global.metricsScopes.listMetricsScopesByMonitoredProject": {
        "description": "Returns a list of every Metrics Scope that a specific MonitoredProject has been added to. The metrics scope representing the specified monitored project will always be the first entry in the response.",
        "flatPath": "v1/locations/global/metricsScopes:listMetricsScopesByMonitoredProject",
        "httpMethod": "GET",
        "method": "listMetricsScopesByMonitoredProject",
        "resourceType": "metricsScopes",
        "resourceTypePath": "//locations/global",
        "versions": [
          "v1"
        ]
      },
      "monitoring.locations.global.metricsScopes.projects.create": {
        "description": "Adds a MonitoredProject with the given project ID to the specified Metrics Scope.",
        "flatPath": "v1/locations/global/metricsScopes/{metricsScopesId}/projects",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "projects",
        "resourceTypePath": "//locations/global/metricsScopes",
        "versions": [
          "v1"
        ]
      },
      "monitoring.locations.global.metricsScopes.projects.delete": {
        "description": "Deletes a MonitoredProject from the specified Metrics Scope.",
        "flatPath": "v1/locations/global/metricsScopes/{metricsScopesId}/projects/{projectsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "projects",
        "resourceTypePath": "//locations/global/metricsScopes",
        "versions": [
          "v1"
        ]
      },
      "monitoring.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "monitoring.organizations.timeSeries.list": {
        "description": "Lists time series that match a filter. This method does not require a Workspace.",
        "flatPath": "v3/organizations/{organizationsId}/timeSeries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "timeSeries",
        "resourceTypePath": "//organizations",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.alertPolicies.create": {
        "description": "Creates a new alerting policy.",
        "flatPath": "v3/projects/{projectsId}/alertPolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "alertPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.alertPolicies.delete": {
        "description": "Deletes an alerting policy.",
        "flatPath": "v3/projects/{projectsId}/alertPolicies/{alertPoliciesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "alertPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.alertPolicies.get": {
        "description": "Gets a single alerting policy.",
        "flatPath": "v3/projects/{projectsId}/alertPolicies/{alertPoliciesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "alertPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.alertPolicies.list": {
        "description": "Lists the existing alerting policies for the workspace.",
        "flatPath": "v3/projects/{projectsId}/alertPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "alertPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.alertPolicies.patch": {
        "description": "Updates an alerting policy. You can either replace the entire policy with a new one or replace only certain fields in the current alerting policy by specifying the fields to be updated via updateMask. Returns the updated alerting policy.",
        "flatPath": "v3/projects/{projectsId}/alertPolicies/{alertPoliciesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "alertPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.collectdTimeSeries.create": {
        "description": "Stackdriver Monitoring Agent only: Creates a new time series.This method is only for use by the Stackdriver Monitoring Agent. Use projects.timeSeries.create instead.",
        "flatPath": "v3/projects/{projectsId}/collectdTimeSeries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "collectdTimeSeries",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.dashboards.create": {
        "description": "Creates a new custom dashboard. For examples on how you can use this API to create dashboards, see Managing dashboards by API (https://cloud.google.com/monitoring/dashboards/api-dashboard). This method requires the monitoring.dashboards.create permission on the specified project. For more information about permissions, see Cloud Identity and Access Management (https://cloud.google.com/iam).",
        "flatPath": "v1/projects/{projectsId}/dashboards",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "dashboards",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.dashboards.delete": {
        "description": "Deletes an existing custom dashboard.This method requires the monitoring.dashboards.delete permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).",
        "flatPath": "v1/projects/{projectsId}/dashboards/{dashboardsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "dashboards",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.dashboards.get": {
        "description": "Fetches a specific dashboard.This method requires the monitoring.dashboards.get permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).",
        "flatPath": "v1/projects/{projectsId}/dashboards/{dashboardsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "dashboards",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.dashboards.list": {
        "description": "Lists the existing dashboards.This method requires the monitoring.dashboards.list permission on the specified project. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).",
        "flatPath": "v1/projects/{projectsId}/dashboards",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "dashboards",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.dashboards.patch": {
        "description": "Replaces an existing custom dashboard with a new definition.This method requires the monitoring.dashboards.update permission on the specified dashboard. For more information, see Cloud Identity and Access Management (https://cloud.google.com/iam).",
        "flatPath": "v1/projects/{projectsId}/dashboards/{dashboardsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "dashboards",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.groups.create": {
        "description": "Creates a new group.",
        "flatPath": "v3/projects/{projectsId}/groups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "groups",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.groups.delete": {
        "description": "Deletes an existing group.",
        "flatPath": "v3/projects/{projectsId}/groups/{groupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "groups",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.groups.get": {
        "description": "Gets a single group.",
        "flatPath": "v3/projects/{projectsId}/groups/{groupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "groups",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.groups.list": {
        "description": "Lists the existing groups.",
        "flatPath": "v3/projects/{projectsId}/groups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "groups",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.groups.members.list": {
        "description": "Lists the monitored resources that are members of a group.",
        "flatPath": "v3/projects/{projectsId}/groups/{groupsId}/members",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "members",
        "resourceTypePath": "//projects/groups",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.groups.update": {
        "description": "Updates an existing group. You can change any group attributes except name.",
        "flatPath": "v3/projects/{projectsId}/groups/{groupsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "groups",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.location.prometheus.api.v1.label.values": {
        "description": "Lists possible values for a given label name.",
        "flatPath": "v1/projects/{projectsId}/location/{location}/prometheus/api/v1/label/{label}/values",
        "httpMethod": "GET",
        "method": "values",
        "resourceType": "label",
        "resourceTypePath": "//projects/location/prometheus/api/v1",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.location.prometheus.api.v1.metadata.list": {
        "description": "Lists metadata for metrics.",
        "flatPath": "v1/projects/{projectsId}/location/{location}/prometheus/api/v1/metadata",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "metadata",
        "resourceTypePath": "//projects/location/prometheus/api/v1",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.location.prometheus.api.v1.query": {
        "description": "Evaluate a PromQL query at a single point in time.",
        "flatPath": "v1/projects/{projectsId}/location/{location}/prometheus/api/v1/query",
        "httpMethod": "POST",
        "method": "query",
        "resourceType": "v1",
        "resourceTypePath": "//projects/location/prometheus/api",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.location.prometheus.api.v1.query_range": {
        "description": "Evaluate a PromQL query with start, end time range.",
        "flatPath": "v1/projects/{projectsId}/location/{location}/prometheus/api/v1/query_range",
        "httpMethod": "POST",
        "method": "query_range",
        "resourceType": "v1",
        "resourceTypePath": "//projects/location/prometheus/api",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.location.prometheus.api.v1.series": {
        "description": "Lists metadata for metrics.",
        "flatPath": "v1/projects/{projectsId}/location/{location}/prometheus/api/v1/series",
        "httpMethod": "POST",
        "method": "series",
        "resourceType": "v1",
        "resourceTypePath": "//projects/location/prometheus/api",
        "versions": [
          "v1"
        ]
      },
      "monitoring.projects.metricDescriptors.create": {
        "description": "Creates a new metric descriptor. The creation is executed asynchronously and callers may check the returned operation to track its progress. User-created metric descriptors define custom metrics (https://cloud.google.com/monitoring/custom-metrics).",
        "flatPath": "v3/projects/{projectsId}/metricDescriptors",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "metricDescriptors",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.metricDescriptors.delete": {
        "description": "Deletes a metric descriptor. Only user-created custom metrics (https://cloud.google.com/monitoring/custom-metrics) can be deleted.",
        "flatPath": "v3/projects/{projectsId}/metricDescriptors/{metricDescriptorsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "metricDescriptors",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.metricDescriptors.get": {
        "description": "Gets a single metric descriptor. This method does not require a Workspace.",
        "flatPath": "v3/projects/{projectsId}/metricDescriptors/{metricDescriptorsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "metricDescriptors",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.metricDescriptors.list": {
        "description": "Lists metric descriptors that match a filter. This method does not require a Workspace.",
        "flatPath": "v3/projects/{projectsId}/metricDescriptors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "metricDescriptors",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.monitoredResourceDescriptors.get": {
        "description": "Gets a single monitored resource descriptor. This method does not require a Workspace.",
        "flatPath": "v3/projects/{projectsId}/monitoredResourceDescriptors/{monitoredResourceDescriptorsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "monitoredResourceDescriptors",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.monitoredResourceDescriptors.list": {
        "description": "Lists monitored resource descriptors that match a filter. This method does not require a Workspace.",
        "flatPath": "v3/projects/{projectsId}/monitoredResourceDescriptors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "monitoredResourceDescriptors",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannelDescriptors.get": {
        "description": "Gets a single channel descriptor. The descriptor indicates which fields are expected / permitted for a notification channel of the given type.",
        "flatPath": "v3/projects/{projectsId}/notificationChannelDescriptors/{notificationChannelDescriptorsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "notificationChannelDescriptors",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannelDescriptors.list": {
        "description": "Lists the descriptors for supported channel types. The use of descriptors makes it possible for new channel types to be dynamically added.",
        "flatPath": "v3/projects/{projectsId}/notificationChannelDescriptors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "notificationChannelDescriptors",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannels.create": {
        "description": "Creates a new notification channel, representing a single notification endpoint such as an email address, SMS number, or PagerDuty service.",
        "flatPath": "v3/projects/{projectsId}/notificationChannels",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "notificationChannels",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannels.delete": {
        "description": "Deletes a notification channel.",
        "flatPath": "v3/projects/{projectsId}/notificationChannels/{notificationChannelsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "notificationChannels",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannels.get": {
        "description": "Gets a single notification channel. The channel includes the relevant configuration details with which the channel was created. However, the response may truncate or omit passwords, API keys, or other private key matter and thus the response may not be 100% identical to the information that was supplied in the call to the create method.",
        "flatPath": "v3/projects/{projectsId}/notificationChannels/{notificationChannelsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "notificationChannels",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannels.getVerificationCode": {
        "description": "Requests a verification code for an already verified channel that can then be used in a call to VerifyNotificationChannel() on a different channel with an equivalent identity in the same or in a different project. This makes it possible to copy a channel between projects without requiring manual reverification of the channel. If the channel is not in the verified state, this method will fail (in other words, this may only be used if the SendNotificationChannelVerificationCode and VerifyNotificationChannel paths have already been used to put the given channel into the verified state).There is no guarantee that the verification codes returned by this method will be of a similar structure or form as the ones that are delivered to the channel via SendNotificationChannelVerificationCode; while VerifyNotificationChannel() will recognize both the codes delivered via SendNotificationChannelVerificationCode() and returned from GetNotificationChannelVerificationCode(), it is typically the case that the verification codes delivered via SendNotificationChannelVerificationCode() will be shorter and also have a shorter expiration (e.g. codes such as \"G-123456\") whereas GetVerificationCode() will typically return a much longer, websafe base 64 encoded string that has a longer expiration time.",
        "flatPath": "v3/projects/{projectsId}/notificationChannels/{notificationChannelsId}:getVerificationCode",
        "httpMethod": "POST",
        "method": "getVerificationCode",
        "resourceType": "notificationChannels",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannels.list": {
        "description": "Lists the notification channels that have been created for the project.",
        "flatPath": "v3/projects/{projectsId}/notificationChannels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "notificationChannels",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannels.patch": {
        "description": "Updates a notification channel. Fields not specified in the field mask remain unchanged.",
        "flatPath": "v3/projects/{projectsId}/notificationChannels/{notificationChannelsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "notificationChannels",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannels.sendVerificationCode": {
        "description": "Causes a verification code to be delivered to the channel. The code can then be supplied in VerifyNotificationChannel to verify the channel.",
        "flatPath": "v3/projects/{projectsId}/notificationChannels/{notificationChannelsId}:sendVerificationCode",
        "httpMethod": "POST",
        "method": "sendVerificationCode",
        "resourceType": "notificationChannels",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.notificationChannels.verify": {
        "description": "Verifies a NotificationChannel by proving receipt of the code delivered to the channel as a result of calling SendNotificationChannelVerificationCode.",
        "flatPath": "v3/projects/{projectsId}/notificationChannels/{notificationChannelsId}:verify",
        "httpMethod": "POST",
        "method": "verify",
        "resourceType": "notificationChannels",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.timeSeries.create": {
        "description": "Creates or adds data to one or more time series. The response is empty if all time series in the request were written. If any time series could not be written, a corresponding failure message is included in the error response.",
        "flatPath": "v3/projects/{projectsId}/timeSeries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "timeSeries",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.timeSeries.createService": {
        "description": "Creates or adds data to one or more service time series. A service time series is a time series for a metric from a Google Cloud service. The response is empty if all time series in the request were written. If any time series could not be written, a corresponding failure message is included in the error response. This endpoint rejects writes to user-defined metrics. This method is only for use by Google Cloud services. Use projects.timeSeries.create instead.",
        "flatPath": "v3/projects/{projectsId}/timeSeries:createService",
        "httpMethod": "POST",
        "method": "createService",
        "resourceType": "timeSeries",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.timeSeries.list": {
        "description": "Lists time series that match a filter. This method does not require a Workspace.",
        "flatPath": "v3/projects/{projectsId}/timeSeries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "timeSeries",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.timeSeries.query": {
        "description": "Queries time series using Monitoring Query Language. This method does not require a Workspace.",
        "flatPath": "v3/projects/{projectsId}/timeSeries:query",
        "httpMethod": "POST",
        "method": "query",
        "resourceType": "timeSeries",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.uptimeCheckConfigs.create": {
        "description": "Creates a new Uptime check configuration.",
        "flatPath": "v3/projects/{projectsId}/uptimeCheckConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "uptimeCheckConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.uptimeCheckConfigs.delete": {
        "description": "Deletes an Uptime check configuration. Note that this method will fail if the Uptime check configuration is referenced by an alert policy or other dependent configs that would be rendered invalid by the deletion.",
        "flatPath": "v3/projects/{projectsId}/uptimeCheckConfigs/{uptimeCheckConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "uptimeCheckConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.uptimeCheckConfigs.get": {
        "description": "Gets a single Uptime check configuration.",
        "flatPath": "v3/projects/{projectsId}/uptimeCheckConfigs/{uptimeCheckConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "uptimeCheckConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.uptimeCheckConfigs.list": {
        "description": "Lists the existing valid Uptime check configurations for the project (leaving out any invalid configurations).",
        "flatPath": "v3/projects/{projectsId}/uptimeCheckConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "uptimeCheckConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.projects.uptimeCheckConfigs.patch": {
        "description": "Updates an Uptime check configuration. You can either replace the entire configuration with a new one or replace only certain fields in the current configuration by specifying the fields to be updated via updateMask. Returns the updated configuration.",
        "flatPath": "v3/projects/{projectsId}/uptimeCheckConfigs/{uptimeCheckConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "uptimeCheckConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.create": {
        "description": "Create a Service.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.delete": {
        "description": "Soft delete this Service.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services/{servicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.get": {
        "description": "Get the named Service.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services/{servicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.list": {
        "description": "List Services for this workspace.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.patch": {
        "description": "Update this Service.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services/{servicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.serviceLevelObjectives.create": {
        "description": "Create a ServiceLevelObjective for the given Service.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services/{servicesId}/serviceLevelObjectives",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "serviceLevelObjectives",
        "resourceTypePath": "//services",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.serviceLevelObjectives.delete": {
        "description": "Delete the given ServiceLevelObjective.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services/{servicesId}/serviceLevelObjectives/{serviceLevelObjectivesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "serviceLevelObjectives",
        "resourceTypePath": "//services",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.serviceLevelObjectives.get": {
        "description": "Get a ServiceLevelObjective by name.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services/{servicesId}/serviceLevelObjectives/{serviceLevelObjectivesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "serviceLevelObjectives",
        "resourceTypePath": "//services",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.serviceLevelObjectives.list": {
        "description": "List the ServiceLevelObjectives for the given Service.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services/{servicesId}/serviceLevelObjectives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "serviceLevelObjectives",
        "resourceTypePath": "//services",
        "versions": [
          "v3"
        ]
      },
      "monitoring.services.serviceLevelObjectives.patch": {
        "description": "Update the given ServiceLevelObjective.",
        "flatPath": "v3/{v3Id}/{v3Id1}/services/{servicesId}/serviceLevelObjectives/{serviceLevelObjectivesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "serviceLevelObjectives",
        "resourceTypePath": "//services",
        "versions": [
          "v3"
        ]
      },
      "monitoring.uptimeCheckIps.list": {
        "description": "Returns the list of IP addresses that checkers run from",
        "flatPath": "v3/uptimeCheckIps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "uptimeCheckIps",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Cloud Monitoring API"
  },
  "mybusinessaccountmanagement": {
    "description": "The My Business Account Management API provides an interface for managing access to a location on Google.",
    "methods": {
      "mybusinessaccountmanagement.accounts.admins.create": {
        "description": "Invites the specified user to become an administrator for the specified account. The invitee must accept the invitation in order to be granted access to the account. See AcceptInvitation to programmatically accept an invitation.",
        "flatPath": "v1/accounts/{accountsId}/admins",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "admins",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.admins.delete": {
        "description": "Removes the specified admin from the specified account.",
        "flatPath": "v1/accounts/{accountsId}/admins/{adminsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "admins",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.admins.list": {
        "description": "Lists the admins for the specified account.",
        "flatPath": "v1/accounts/{accountsId}/admins",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "admins",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.admins.patch": {
        "description": "Updates the Admin for the specified Account Admin.",
        "flatPath": "v1/accounts/{accountsId}/admins/{adminsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "admins",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.create": {
        "description": "Creates an account with the specified name and type under the given parent. - Personal accounts and Organizations cannot be created. - User Groups cannot be created with a Personal account as primary owner. - Location Groups cannot be created with a primary owner of a Personal account if the Personal account is in an Organization. - Location Groups cannot own Location Groups.",
        "flatPath": "v1/accounts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.get": {
        "description": "Gets the specified account. Returns `NOT_FOUND` if the account does not exist or if the caller does not have access rights to it.",
        "flatPath": "v1/accounts/{accountsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.invitations.accept": {
        "description": "Accepts the specified invitation.",
        "flatPath": "v1/accounts/{accountsId}/invitations/{invitationsId}:accept",
        "httpMethod": "POST",
        "method": "accept",
        "resourceType": "invitations",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.invitations.decline": {
        "description": "Declines the specified invitation.",
        "flatPath": "v1/accounts/{accountsId}/invitations/{invitationsId}:decline",
        "httpMethod": "POST",
        "method": "decline",
        "resourceType": "invitations",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.invitations.list": {
        "description": "Lists pending invitations for the specified account.",
        "flatPath": "v1/accounts/{accountsId}/invitations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "invitations",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.list": {
        "description": "Lists all of the accounts for the authenticated user. This includes all accounts that the user owns, as well as any accounts for which the user has management rights.",
        "flatPath": "v1/accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.accounts.patch": {
        "description": "Updates the specified business account. Personal accounts cannot be updated using this method.",
        "flatPath": "v1/accounts/{accountsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.locations.admins.create": {
        "description": "Invites the specified user to become an administrator for the specified location. The invitee must accept the invitation in order to be granted access to the location. See AcceptInvitation to programmatically accept an invitation.",
        "flatPath": "v1/locations/{locationsId}/admins",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "admins",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.locations.admins.delete": {
        "description": "Removes the specified admin as a manager of the specified location.",
        "flatPath": "v1/locations/{locationsId}/admins/{adminsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "admins",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.locations.admins.list": {
        "description": "Lists all of the admins for the specified location.",
        "flatPath": "v1/locations/{locationsId}/admins",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "admins",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.locations.admins.patch": {
        "description": "Updates the Admin for the specified location. Only the AdminRole of the Admin can be updated.",
        "flatPath": "v1/locations/{locationsId}/admins/{adminsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "admins",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessaccountmanagement.locations.transfer": {
        "description": "Moves a location from an account that the user owns to another account that the same user administers. The user must be an owner of the account the location is currently associated with and must also be at least a manager of the destination account.",
        "flatPath": "v1/locations/{locationsId}:transfer",
        "httpMethod": "POST",
        "method": "transfer",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "My Business Account Management API"
  },
  "mybusinessbusinessinformation": {
    "description": "The My Business Business Information API provides an interface for managing business information on Google.",
    "methods": {
      "mybusinessbusinessinformation.accounts.locations.create": {
        "description": "Creates a new Location that will be owned by the logged in user.",
        "flatPath": "v1/accounts/{accountsId}/locations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "locations",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.accounts.locations.list": {
        "description": "Lists the locations for the specified account.",
        "flatPath": "v1/accounts/{accountsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.attributes.list": {
        "description": "Returns the list of attributes that would be available for a location with the given primary category and country.",
        "flatPath": "v1/attributes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "attributes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.categories.batchGet": {
        "description": "Returns a list of business categories for the provided language and GConcept ids.",
        "flatPath": "v1/categories:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "categories",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.categories.list": {
        "description": "Returns a list of business categories. Search will match the category name but not the category ID. Search only matches the front of a category name (that is, 'food' may return 'Food Court' but not 'Fast Food Restaurant').",
        "flatPath": "v1/categories",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "categories",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.chains.get": {
        "description": "Gets the specified chain. Returns `NOT_FOUND` if the chain does not exist.",
        "flatPath": "v1/chains/{chainsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "chains",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.chains.search": {
        "description": "Searches the chain based on chain name.",
        "flatPath": "v1/chains:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "chains",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.googleLocations.search": {
        "description": "Search all of the possible locations that are a match to the specified request.",
        "flatPath": "v1/googleLocations:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "googleLocations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.locations.associate": {
        "description": "Associates a location to a place ID. Any previous association is overwritten. This operation is only valid if the location is unverified. The association must be valid, that is, it appears in the list of `SearchGoogleLocations`.",
        "flatPath": "v1/locations/{locationsId}:associate",
        "httpMethod": "POST",
        "method": "associate",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.locations.attributes.getGoogleUpdated": {
        "description": "Gets the Google-updated version of the specified location.",
        "flatPath": "v1/locations/{locationsId}/attributes:getGoogleUpdated",
        "httpMethod": "GET",
        "method": "getGoogleUpdated",
        "resourceType": "attributes",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.locations.clearLocationAssociation": {
        "description": "Clears an association between a location and its place ID. This operation is only valid if the location is unverified.",
        "flatPath": "v1/locations/{locationsId}:clearLocationAssociation",
        "httpMethod": "POST",
        "method": "clearLocationAssociation",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.locations.delete": {
        "description": "Deletes a location. If this location cannot be deleted using the API and it is marked so in the `google.mybusiness.businessinformation.v1.LocationState`, use the [Google My Business](https://business.google.com/manage/) website.",
        "flatPath": "v1/locations/{locationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.locations.get": {
        "description": "Returns the specified location.",
        "flatPath": "v1/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.locations.getAttributes": {
        "description": "Looks up all the attributes set for a given location.",
        "flatPath": "v1/locations/{locationsId}/attributes",
        "httpMethod": "GET",
        "method": "getAttributes",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.locations.getGoogleUpdated": {
        "description": "Gets the Google-updated version of the specified location.",
        "flatPath": "v1/locations/{locationsId}:getGoogleUpdated",
        "httpMethod": "GET",
        "method": "getGoogleUpdated",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.locations.patch": {
        "description": "Updates the specified location.",
        "flatPath": "v1/locations/{locationsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessbusinessinformation.locations.updateAttributes": {
        "description": "Update attributes for a given location.",
        "flatPath": "v1/locations/{locationsId}/attributes",
        "httpMethod": "PATCH",
        "method": "updateAttributes",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "My Business Business Information API"
  },
  "mybusinesslodging": {
    "description": "The My Business Lodging API enables managing lodging business information on Google.",
    "methods": {
      "mybusinesslodging.locations.getLodging": {
        "description": "Returns the Lodging of a specific location.",
        "flatPath": "v1/locations/{locationsId}/lodging",
        "httpMethod": "GET",
        "method": "getLodging",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinesslodging.locations.lodging.getGoogleUpdated": {
        "description": "Returns the Google updated Lodging of a specific location.",
        "flatPath": "v1/locations/{locationsId}/lodging:getGoogleUpdated",
        "httpMethod": "GET",
        "method": "getGoogleUpdated",
        "resourceType": "lodging",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinesslodging.locations.updateLodging": {
        "description": "Updates the Lodging of a specific location.",
        "flatPath": "v1/locations/{locationsId}/lodging",
        "httpMethod": "PATCH",
        "method": "updateLodging",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "My Business Lodging API"
  },
  "mybusinessnotifications": {
    "description": "The My Business Notification Settings API enables managing notification settings for business accounts.",
    "methods": {
      "mybusinessnotifications.accounts.getNotificationSetting": {
        "description": "Returns the pubsub notification settings for the account.",
        "flatPath": "v1/accounts/{accountsId}/notificationSetting",
        "httpMethod": "GET",
        "method": "getNotificationSetting",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessnotifications.accounts.updateNotificationSetting": {
        "description": "Sets the pubsub notification setting for the account informing Google which topic to send pubsub notifications for. Use the notification_types field within notification_setting to manipulate the events an account wants to subscribe to. An account will only have one notification setting resource, and only one pubsub topic can be set. To delete the setting, update with an empty notification_types",
        "flatPath": "v1/accounts/{accountsId}/notificationSetting",
        "httpMethod": "PATCH",
        "method": "updateNotificationSetting",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "My Business Notifications API"
  },
  "mybusinessplaceactions": {
    "description": "The My Business Place Actions API provides an interface for managing place action links of a location on Google.",
    "methods": {
      "mybusinessplaceactions.locations.placeActionLinks.create": {
        "description": "Creates a place action link associated with the specified location, and returns it. The request is considered duplicate if the `parent`, `place_action_link.uri` and `place_action_link.place_action_type` are the same as a previous request.",
        "flatPath": "v1/locations/{locationsId}/placeActionLinks",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "placeActionLinks",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessplaceactions.locations.placeActionLinks.delete": {
        "description": "Deletes a place action link from the specified location.",
        "flatPath": "v1/locations/{locationsId}/placeActionLinks/{placeActionLinksId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "placeActionLinks",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessplaceactions.locations.placeActionLinks.get": {
        "description": "Gets the specified place action link.",
        "flatPath": "v1/locations/{locationsId}/placeActionLinks/{placeActionLinksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "placeActionLinks",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessplaceactions.locations.placeActionLinks.list": {
        "description": "Lists the place action links for the specified location.",
        "flatPath": "v1/locations/{locationsId}/placeActionLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "placeActionLinks",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessplaceactions.locations.placeActionLinks.patch": {
        "description": "Updates the specified place action link and returns it.",
        "flatPath": "v1/locations/{locationsId}/placeActionLinks/{placeActionLinksId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "placeActionLinks",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessplaceactions.placeActionTypeMetadata.list": {
        "description": "Returns the list of available place action types for a location or country.",
        "flatPath": "v1/placeActionTypeMetadata",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "placeActionTypeMetadata",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "My Business Place Actions API"
  },
  "mybusinessverifications": {
    "description": "The My Business Verifications API provides an interface for taking verifications related actions for locations.",
    "methods": {
      "mybusinessverifications.locations.fetchVerificationOptions": {
        "description": "Reports all eligible verification options for a location in a specific language.",
        "flatPath": "v1/locations/{locationsId}:fetchVerificationOptions",
        "httpMethod": "POST",
        "method": "fetchVerificationOptions",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessverifications.locations.getVoiceOfMerchantState": {
        "description": "Gets the VoiceOfMerchant state.",
        "flatPath": "v1/locations/{locationsId}/VoiceOfMerchantState",
        "httpMethod": "GET",
        "method": "getVoiceOfMerchantState",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessverifications.locations.verifications.complete": {
        "description": "Completes a `PENDING` verification. It is only necessary for non `AUTO` verification methods. `AUTO` verification request is instantly `VERIFIED` upon creation.",
        "flatPath": "v1/locations/{locationsId}/verifications/{verificationsId}:complete",
        "httpMethod": "POST",
        "method": "complete",
        "resourceType": "verifications",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessverifications.locations.verifications.list": {
        "description": "List verifications of a location, ordered by create time.",
        "flatPath": "v1/locations/{locationsId}/verifications",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "verifications",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "mybusinessverifications.locations.verify": {
        "description": "Starts the verification process for a location.",
        "flatPath": "v1/locations/{locationsId}:verify",
        "httpMethod": "POST",
        "method": "verify",
        "resourceType": "locations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "mybusinessverifications.verificationTokens.generate": {
        "description": "Generates a token for the provided location data as a vetted [partner](https://support.google.com/business/answer/7674102). Throws PERMISSION_DENIED if the caller is not a vetted partner account. Throws FAILED_PRECONDITION if the caller's VettedStatus is INVALID.",
        "flatPath": "v1/verificationTokens:generate",
        "httpMethod": "POST",
        "method": "generate",
        "resourceType": "verificationTokens",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "My Business Verifications API"
  },
  "networkconnectivity": {
    "description": "The Network Connectivity API provides access to Network Connectivity Center.",
    "methods": {
      "networkconnectivity.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.hubs.create": {
        "description": "Creates a new Hub in a given project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/hubs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "hubs",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.hubs.delete": {
        "description": "Deletes a single Hub.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/hubs/{hubsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "hubs",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.hubs.get": {
        "description": "Gets details of a single Hub.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/hubs/{hubsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "hubs",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.hubs.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/hubs/{hubsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "hubs",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.hubs.list": {
        "description": "Lists Hubs in a given project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/hubs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "hubs",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.hubs.patch": {
        "description": "Updates the parameters of a single Hub.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/hubs/{hubsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "hubs",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.hubs.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/hubs/{hubsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "hubs",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.hubs.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/global/hubs/{hubsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "hubs",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.policyBasedRoutes.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/global/policyBasedRoutes/{policyBasedRoutesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "policyBasedRoutes",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.policyBasedRoutes.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/global/policyBasedRoutes/{policyBasedRoutesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "policyBasedRoutes",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.global.policyBasedRoutes.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/global/policyBasedRoutes/{policyBasedRoutesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "policyBasedRoutes",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.internalRanges.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/internalRanges/{internalRangesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "internalRanges",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "networkconnectivity.projects.locations.internalRanges.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/internalRanges/{internalRangesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "internalRanges",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "networkconnectivity.projects.locations.internalRanges.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/internalRanges/{internalRangesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "internalRanges",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1"
        ]
      },
      "networkconnectivity.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.spokes.create": {
        "description": "Creates a new Spoke in a given project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/spokes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "spokes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.spokes.delete": {
        "description": "Deletes a single Spoke.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/spokes/{spokesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "spokes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.spokes.get": {
        "description": "Gets details of a single Spoke.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/spokes/{spokesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "spokes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.spokes.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/spokes/{spokesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "spokes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.spokes.list": {
        "description": "Lists Spokes in a given project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/spokes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "spokes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.spokes.patch": {
        "description": "Updates the parameters of a single Spoke.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/spokes/{spokesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "spokes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.spokes.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/spokes/{spokesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "spokes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "networkconnectivity.projects.locations.spokes.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/spokes/{spokesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "spokes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Network Connectivity API"
  },
  "networkmanagement": {
    "description": "The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.",
    "methods": {
      "networkmanagement.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.connectivityTests.create": {
        "description": "Creates a new Connectivity Test. After you create a test, the reachability analysis is performed as part of the long running operation, which completes when the analysis completes. If the endpoint specifications in `ConnectivityTest` are invalid (for example, containing non-existent resources in the network, or you don't have read permissions to the network configurations of listed projects), then the reachability result returns a value of `UNKNOWN`. If the endpoint specifications in `ConnectivityTest` are incomplete, the reachability result returns a value of AMBIGUOUS. For more information, see the Connectivity Test documentation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/connectivityTests",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "connectivityTests",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.connectivityTests.delete": {
        "description": "Deletes a specific `ConnectivityTest`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/connectivityTests/{connectivityTestsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "connectivityTests",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.connectivityTests.get": {
        "description": "Gets the details of a specific Connectivity Test.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/connectivityTests/{connectivityTestsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "connectivityTests",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.connectivityTests.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/connectivityTests/{connectivityTestsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "connectivityTests",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.connectivityTests.list": {
        "description": "Lists all Connectivity Tests owned by a project.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/connectivityTests",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "connectivityTests",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.connectivityTests.patch": {
        "description": "Updates the configuration of an existing `ConnectivityTest`. After you update a test, the reachability analysis is performed as part of the long running operation, which completes when the analysis completes. The Reachability state in the test resource is updated with the new result. If the endpoint specifications in `ConnectivityTest` are invalid (for example, they contain non-existent resources in the network, or the user does not have read permissions to the network configurations of listed projects), then the reachability result returns a value of UNKNOWN. If the endpoint specifications in `ConnectivityTest` are incomplete, the reachability result returns a value of `AMBIGUOUS`. See the documentation in `ConnectivityTest` for for more details.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/connectivityTests/{connectivityTestsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "connectivityTests",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.connectivityTests.rerun": {
        "description": "Rerun an existing `ConnectivityTest`. After the user triggers the rerun, the reachability analysis is performed as part of the long running operation, which completes when the analysis completes. Even though the test configuration remains the same, the reachability result may change due to underlying network configuration changes. If the endpoint specifications in `ConnectivityTest` become invalid (for example, specified resources are deleted in the network, or you lost read permissions to the network configurations of listed projects), then the reachability result returns a value of `UNKNOWN`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/connectivityTests/{connectivityTestsId}:rerun",
        "httpMethod": "POST",
        "method": "rerun",
        "resourceType": "connectivityTests",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.connectivityTests.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/connectivityTests/{connectivityTestsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "connectivityTests",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.connectivityTests.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/connectivityTests/{connectivityTestsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "connectivityTests",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.global.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/global/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/global",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkmanagement.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Network Management API"
  },
  "networksecurity": {
    "description": "",
    "methods": {
      "networksecurity.projects.locations.authorizationPolicies.create": {
        "description": "Creates a new AuthorizationPolicy in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/authorizationPolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "authorizationPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.authorizationPolicies.delete": {
        "description": "Deletes a single AuthorizationPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/authorizationPolicies/{authorizationPoliciesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "authorizationPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.authorizationPolicies.get": {
        "description": "Gets details of a single AuthorizationPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/authorizationPolicies/{authorizationPoliciesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "authorizationPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.authorizationPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/authorizationPolicies/{authorizationPoliciesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "authorizationPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.authorizationPolicies.list": {
        "description": "Lists AuthorizationPolicies in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/authorizationPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "authorizationPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.authorizationPolicies.patch": {
        "description": "Updates the parameters of a single AuthorizationPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/authorizationPolicies/{authorizationPoliciesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "authorizationPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.authorizationPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/authorizationPolicies/{authorizationPoliciesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "authorizationPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.authorizationPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/authorizationPolicies/{authorizationPoliciesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "authorizationPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.clientTlsPolicies.create": {
        "description": "Creates a new ClientTlsPolicy in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clientTlsPolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clientTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.clientTlsPolicies.delete": {
        "description": "Deletes a single ClientTlsPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clientTlsPolicies/{clientTlsPoliciesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "clientTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.clientTlsPolicies.get": {
        "description": "Gets details of a single ClientTlsPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clientTlsPolicies/{clientTlsPoliciesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clientTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.clientTlsPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clientTlsPolicies/{clientTlsPoliciesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "clientTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.clientTlsPolicies.list": {
        "description": "Lists ClientTlsPolicies in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clientTlsPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clientTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.clientTlsPolicies.patch": {
        "description": "Updates the parameters of a single ClientTlsPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clientTlsPolicies/{clientTlsPoliciesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "clientTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.clientTlsPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clientTlsPolicies/{clientTlsPoliciesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "clientTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.clientTlsPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/clientTlsPolicies/{clientTlsPoliciesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "clientTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.serverTlsPolicies.create": {
        "description": "Creates a new ServerTlsPolicy in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/serverTlsPolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "serverTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.serverTlsPolicies.delete": {
        "description": "Deletes a single ServerTlsPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/serverTlsPolicies/{serverTlsPoliciesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "serverTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.serverTlsPolicies.get": {
        "description": "Gets details of a single ServerTlsPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/serverTlsPolicies/{serverTlsPoliciesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "serverTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.serverTlsPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/serverTlsPolicies/{serverTlsPoliciesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "serverTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.serverTlsPolicies.list": {
        "description": "Lists ServerTlsPolicies in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/serverTlsPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "serverTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.serverTlsPolicies.patch": {
        "description": "Updates the parameters of a single ServerTlsPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/serverTlsPolicies/{serverTlsPoliciesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "serverTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.serverTlsPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/serverTlsPolicies/{serverTlsPoliciesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "serverTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networksecurity.projects.locations.serverTlsPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/serverTlsPolicies/{serverTlsPoliciesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "serverTlsPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Network Security API"
  },
  "networkservices": {
    "description": "",
    "methods": {
      "networkservices.projects.locations.edgeCacheKeysets.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/edgeCacheKeysets/{edgeCacheKeysetsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "edgeCacheKeysets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "networkservices.projects.locations.edgeCacheKeysets.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/edgeCacheKeysets/{edgeCacheKeysetsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "edgeCacheKeysets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "networkservices.projects.locations.edgeCacheKeysets.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/edgeCacheKeysets/{edgeCacheKeysetsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "edgeCacheKeysets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "networkservices.projects.locations.edgeCacheOrigins.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/edgeCacheOrigins/{edgeCacheOriginsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "edgeCacheOrigins",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "networkservices.projects.locations.edgeCacheOrigins.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/edgeCacheOrigins/{edgeCacheOriginsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "edgeCacheOrigins",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "networkservices.projects.locations.edgeCacheOrigins.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/edgeCacheOrigins/{edgeCacheOriginsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "edgeCacheOrigins",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "networkservices.projects.locations.edgeCacheServices.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/edgeCacheServices/{edgeCacheServicesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "edgeCacheServices",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "networkservices.projects.locations.edgeCacheServices.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/edgeCacheServices/{edgeCacheServicesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "edgeCacheServices",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "networkservices.projects.locations.edgeCacheServices.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/edgeCacheServices/{edgeCacheServicesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "edgeCacheServices",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "networkservices.projects.locations.endpointPolicies.create": {
        "description": "Creates a new EndpointPolicy in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/endpointPolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "endpointPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.endpointPolicies.delete": {
        "description": "Deletes a single EndpointPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/endpointPolicies/{endpointPoliciesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "endpointPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.endpointPolicies.get": {
        "description": "Gets details of a single EndpointPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/endpointPolicies/{endpointPoliciesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "endpointPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.endpointPolicies.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/endpointPolicies/{endpointPoliciesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "endpointPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.endpointPolicies.list": {
        "description": "Lists EndpointPolicies in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/endpointPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "endpointPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.endpointPolicies.patch": {
        "description": "Updates the parameters of a single EndpointPolicy.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/endpointPolicies/{endpointPoliciesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "endpointPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.endpointPolicies.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/endpointPolicies/{endpointPoliciesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "endpointPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.endpointPolicies.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/endpointPolicies/{endpointPoliciesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "endpointPolicies",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "networkservices.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Network Services API"
  },
  "notebooks": {
    "description": "Notebooks API is used to manage notebook resources in Google Cloud.",
    "methods": {
      "notebooks.projects.locations.environments.create": {
        "description": "Creates a new Environment.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/environments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.environments.delete": {
        "description": "Deletes a single Environment.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/environments/{environmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.environments.get": {
        "description": "Gets details of a single Environment.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/environments/{environmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.environments.list": {
        "description": "Lists environments in a project.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/environments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "environments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.executions.create": {
        "description": "Creates a new Execution in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/executions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "executions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.executions.delete": {
        "description": "Deletes execution",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/executions/{executionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "executions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.executions.get": {
        "description": "Gets details of executions",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/executions/{executionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "executions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.executions.list": {
        "description": "Lists executions in a given project and location",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/executions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "executions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.create": {
        "description": "Creates a new Instance in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.delete": {
        "description": "Deletes a single Instance.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.get": {
        "description": "Gets details of a single Instance.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.getInstanceHealth": {
        "description": "Check if a notebook instance is healthy.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:getInstanceHealth",
        "httpMethod": "GET",
        "method": "getInstanceHealth",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.isUpgradeable": {
        "description": "Check if a notebook instance is upgradable.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:isUpgradeable",
        "httpMethod": "GET",
        "method": "isUpgradeable",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.list": {
        "description": "Lists instances in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.register": {
        "description": "Registers an existing legacy notebook instance to the Notebooks API server. Legacy instances are instances created with the legacy Compute Engine calls. They are not manageable by the Notebooks API out of the box. This call makes these instances manageable by the Notebooks API.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances:register",
        "httpMethod": "POST",
        "method": "register",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.report": {
        "description": "Allows notebook instances to report their latest instance information to the Notebooks API server. The server will merge the reported information to the instance metadata store. Do not use this method directly.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:report",
        "httpMethod": "POST",
        "method": "report",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.reset": {
        "description": "Resets a notebook instance.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:reset",
        "httpMethod": "POST",
        "method": "reset",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.rollback": {
        "description": "Rollbacks a notebook instance to the previous version.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:rollback",
        "httpMethod": "POST",
        "method": "rollback",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.setAccelerator": {
        "description": "Updates the guest accelerators of a single Instance.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setAccelerator",
        "httpMethod": "PATCH",
        "method": "setAccelerator",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.setLabels": {
        "description": "Replaces all the labels of an Instance.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setLabels",
        "httpMethod": "PATCH",
        "method": "setLabels",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.setMachineType": {
        "description": "Updates the machine type of a single Instance.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:setMachineType",
        "httpMethod": "PATCH",
        "method": "setMachineType",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.start": {
        "description": "Starts a notebook instance.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:start",
        "httpMethod": "POST",
        "method": "start",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.stop": {
        "description": "Stops a notebook instance.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.updateConfig": {
        "description": "Update Notebook Instance configurations.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:updateConfig",
        "httpMethod": "PATCH",
        "method": "updateConfig",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.updateShieldedInstanceConfig": {
        "description": "Updates the Shielded instance configuration of a single Instance.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:updateShieldedInstanceConfig",
        "httpMethod": "PATCH",
        "method": "updateShieldedInstanceConfig",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.upgrade": {
        "description": "Upgrades a notebook instance to the latest version.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:upgrade",
        "httpMethod": "POST",
        "method": "upgrade",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.instances.upgradeInternal": {
        "description": "Allows notebook instances to call this endpoint to upgrade themselves. Do not use this method directly.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:upgradeInternal",
        "httpMethod": "POST",
        "method": "upgradeInternal",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.create": {
        "description": "Creates a new Runtime in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.delete": {
        "description": "Deletes a single Runtime.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.get": {
        "description": "Gets details of a single Runtime. The location must be a regional endpoint rather than zonal.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.list": {
        "description": "Lists Runtimes in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.reportEvent": {
        "description": "Report and process a runtime event.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}:reportEvent",
        "httpMethod": "POST",
        "method": "reportEvent",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.reset": {
        "description": "Resets a Managed Notebook Runtime.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}:reset",
        "httpMethod": "POST",
        "method": "reset",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.start": {
        "description": "Starts a Managed Notebook Runtime. Perform \"Start\" on GPU instances; \"Resume\" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance https://cloud.google.com/compute/docs/instances/suspend-resume-instance",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}:start",
        "httpMethod": "POST",
        "method": "start",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.stop": {
        "description": "Stops a Managed Notebook Runtime. Perform \"Stop\" on GPU instances; \"Suspend\" on CPU instances See: https://cloud.google.com/compute/docs/instances/stop-start-instance https://cloud.google.com/compute/docs/instances/suspend-resume-instance",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}:stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.switch": {
        "description": "Switch a Managed Notebook Runtime.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}:switch",
        "httpMethod": "POST",
        "method": "switch",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.runtimes.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/runtimes/{runtimesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "runtimes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.schedules.create": {
        "description": "Creates a new Scheduled Notebook in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "schedules",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.schedules.delete": {
        "description": "Deletes schedule and all underlying jobs",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules/{schedulesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "schedules",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.schedules.get": {
        "description": "Gets details of schedule",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules/{schedulesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "schedules",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.schedules.list": {
        "description": "Lists schedules in a given project and location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "schedules",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "notebooks.projects.locations.schedules.trigger": {
        "description": "Triggers execution of an existing schedule.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/schedules/{schedulesId}:trigger",
        "httpMethod": "POST",
        "method": "trigger",
        "resourceType": "schedules",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Notebooks API"
  },
  "oauth2": {
    "description": "[Deprecated] Obtains end-user authorization grants for use with other Google APIs.",
    "methods": {
      "oauth2.tokeninfo": {
        "description": "",
        "flatPath": "oauth2/v2/tokeninfo",
        "httpMethod": "POST",
        "method": "tokeninfo",
        "resourceType": "",
        "resourceTypePath": "",
        "versions": [
          "v2"
        ]
      },
      "oauth2.userinfo.get": {
        "description": "",
        "flatPath": "oauth2/v2/userinfo",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userinfo",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "oauth2.userinfo.v2.me.get": {
        "description": "",
        "flatPath": "userinfo/v2/me",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "me",
        "resourceTypePath": "//userinfo/v2",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Google OAuth2 API"
  },
  "ondemandscanning": {
    "description": "A service to scan container images for vulnerabilities.",
    "methods": {
      "ondemandscanning.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "ondemandscanning.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "ondemandscanning.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "ondemandscanning.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "ondemandscanning.projects.locations.operations.wait": {
        "description": "Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:wait",
        "httpMethod": "POST",
        "method": "wait",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "ondemandscanning.projects.locations.scans.analyzePackages": {
        "description": "Initiates an analysis of the provided packages.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/scans:analyzePackages",
        "httpMethod": "POST",
        "method": "analyzePackages",
        "resourceType": "scans",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "ondemandscanning.projects.locations.scans.vulnerabilities.list": {
        "description": "Lists vulnerabilities resulting from a successfully completed scan.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/scans/{scansId}/vulnerabilities",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "vulnerabilities",
        "resourceTypePath": "//projects/locations/scans",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "On-Demand Scanning API"
  },
  "orgpolicy": {
    "description": "The Org Policy API allows users to configure governance rules on their GCP resources across the Cloud Resource Hierarchy.",
    "methods": {
      "orgpolicy.folders.constraints.list": {
        "description": "Lists `Constraints` that could be applied on the specified resource.",
        "flatPath": "v2/folders/{foldersId}/constraints",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "constraints",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.folders.policies.create": {
        "description": "Creates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Cloud resource.",
        "flatPath": "v2/folders/{foldersId}/policies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "policies",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.folders.policies.delete": {
        "description": "Deletes a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or Org Policy does not exist.",
        "flatPath": "v2/folders/{foldersId}/policies/{policiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "policies",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.folders.policies.get": {
        "description": "Gets a `Policy` on a resource. If no `Policy` is set on the resource, NOT_FOUND is returned. The `etag` value can be used with `UpdatePolicy()` to update a `Policy` during read-modify-write.",
        "flatPath": "v2/folders/{foldersId}/policies/{policiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "policies",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.folders.policies.getEffectivePolicy": {
        "description": "Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy and evaluating conditions. The returned `Policy` will not have an `etag` or `condition` set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.",
        "flatPath": "v2/folders/{foldersId}/policies/{policiesId}:getEffectivePolicy",
        "httpMethod": "GET",
        "method": "getEffectivePolicy",
        "resourceType": "policies",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.folders.policies.list": {
        "description": "Retrieves all of the `Policies` that exist on a particular resource.",
        "flatPath": "v2/folders/{foldersId}/policies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "policies",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.folders.policies.patch": {
        "description": "Updates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.",
        "flatPath": "v2/folders/{foldersId}/policies/{policiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "policies",
        "resourceTypePath": "//folders",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.organizations.constraints.list": {
        "description": "Lists `Constraints` that could be applied on the specified resource.",
        "flatPath": "v2/organizations/{organizationsId}/constraints",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "constraints",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.organizations.policies.create": {
        "description": "Creates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Cloud resource.",
        "flatPath": "v2/organizations/{organizationsId}/policies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "policies",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.organizations.policies.delete": {
        "description": "Deletes a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or Org Policy does not exist.",
        "flatPath": "v2/organizations/{organizationsId}/policies/{policiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "policies",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.organizations.policies.get": {
        "description": "Gets a `Policy` on a resource. If no `Policy` is set on the resource, NOT_FOUND is returned. The `etag` value can be used with `UpdatePolicy()` to update a `Policy` during read-modify-write.",
        "flatPath": "v2/organizations/{organizationsId}/policies/{policiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "policies",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.organizations.policies.getEffectivePolicy": {
        "description": "Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy and evaluating conditions. The returned `Policy` will not have an `etag` or `condition` set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.",
        "flatPath": "v2/organizations/{organizationsId}/policies/{policiesId}:getEffectivePolicy",
        "httpMethod": "GET",
        "method": "getEffectivePolicy",
        "resourceType": "policies",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.organizations.policies.list": {
        "description": "Retrieves all of the `Policies` that exist on a particular resource.",
        "flatPath": "v2/organizations/{organizationsId}/policies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "policies",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.organizations.policies.patch": {
        "description": "Updates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.",
        "flatPath": "v2/organizations/{organizationsId}/policies/{policiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "policies",
        "resourceTypePath": "//organizations",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.projects.constraints.list": {
        "description": "Lists `Constraints` that could be applied on the specified resource.",
        "flatPath": "v2/projects/{projectsId}/constraints",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "constraints",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.projects.policies.create": {
        "description": "Creates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ALREADY_EXISTS` if the policy already exists on the given Cloud resource.",
        "flatPath": "v2/projects/{projectsId}/policies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "policies",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.projects.policies.delete": {
        "description": "Deletes a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or Org Policy does not exist.",
        "flatPath": "v2/projects/{projectsId}/policies/{policiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "policies",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.projects.policies.get": {
        "description": "Gets a `Policy` on a resource. If no `Policy` is set on the resource, NOT_FOUND is returned. The `etag` value can be used with `UpdatePolicy()` to update a `Policy` during read-modify-write.",
        "flatPath": "v2/projects/{projectsId}/policies/{policiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "policies",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.projects.policies.getEffectivePolicy": {
        "description": "Gets the effective `Policy` on a resource. This is the result of merging `Policies` in the resource hierarchy and evaluating conditions. The returned `Policy` will not have an `etag` or `condition` set because it is a computed `Policy` across multiple resources. Subtrees of Resource Manager resource hierarchy with 'under:' prefix will not be expanded.",
        "flatPath": "v2/projects/{projectsId}/policies/{policiesId}:getEffectivePolicy",
        "httpMethod": "GET",
        "method": "getEffectivePolicy",
        "resourceType": "policies",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.projects.policies.list": {
        "description": "Retrieves all of the `Policies` that exist on a particular resource.",
        "flatPath": "v2/projects/{projectsId}/policies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "policies",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      },
      "orgpolicy.projects.policies.patch": {
        "description": "Updates a Policy. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the constraint or the policy do not exist. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the policy Note: the supplied policy will perform a full overwrite of all fields.",
        "flatPath": "v2/projects/{projectsId}/policies/{policiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "policies",
        "resourceTypePath": "//projects",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Organization Policy API"
  },
  "osconfig": {
    "description": "OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.",
    "methods": {
      "osconfig.projects.guestPolicies.create": {
        "description": "Create an OS Config guest policy.",
        "flatPath": "v1beta/projects/{projectsId}/guestPolicies",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "guestPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "osconfig.projects.guestPolicies.delete": {
        "description": "Delete an OS Config guest policy.",
        "flatPath": "v1beta/projects/{projectsId}/guestPolicies/{guestPoliciesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "guestPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "osconfig.projects.guestPolicies.get": {
        "description": "Get an OS Config guest policy.",
        "flatPath": "v1beta/projects/{projectsId}/guestPolicies/{guestPoliciesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "guestPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "osconfig.projects.guestPolicies.list": {
        "description": "Get a page of OS Config guest policies.",
        "flatPath": "v1beta/projects/{projectsId}/guestPolicies",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "guestPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "osconfig.projects.guestPolicies.patch": {
        "description": "Update an OS Config guest policy.",
        "flatPath": "v1beta/projects/{projectsId}/guestPolicies/{guestPoliciesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "guestPolicies",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta"
        ]
      },
      "osconfig.projects.locations.instanceOSPoliciesCompliances.get": {
        "description": "Get OS policies compliance data for the specified Compute Engine VM instance.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/instanceOSPoliciesCompliances/{instanceOSPoliciesCompliancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instanceOSPoliciesCompliances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha"
        ]
      },
      "osconfig.projects.locations.instanceOSPoliciesCompliances.list": {
        "description": "List OS policies compliance data for all Compute Engine VM instances in the specified zone.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/instanceOSPoliciesCompliances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instanceOSPoliciesCompliances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha"
        ]
      },
      "osconfig.projects.locations.instances.inventories.get": {
        "description": "Get inventory data for the specified VM instance. If the VM has no associated inventory, the message `NOT_FOUND` is returned.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/inventory",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "inventories",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.instances.inventories.list": {
        "description": "List inventory data for all VM instances in the specified zone.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/inventories",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "inventories",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.instances.osPolicyAssignments.reports.get": {
        "description": "Get the OS policy asssignment report for the specified Compute Engine VM instance.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/osPolicyAssignments/{osPolicyAssignmentsId}/report",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reports",
        "resourceTypePath": "//projects/locations/instances/osPolicyAssignments",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.instances.osPolicyAssignments.reports.list": {
        "description": "List OS policy asssignment reports for all Compute Engine VM instances in the specified zone.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/osPolicyAssignments/{osPolicyAssignmentsId}/reports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reports",
        "resourceTypePath": "//projects/locations/instances/osPolicyAssignments",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.instances.vulnerabilityReports.get": {
        "description": "Gets the vulnerability report for the specified VM instance. Only VMs with inventory data have vulnerability reports associated with them.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/vulnerabilityReport",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "vulnerabilityReports",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.instances.vulnerabilityReports.list": {
        "description": "List vulnerability reports for all VM instances in the specified zone.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/vulnerabilityReports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "vulnerabilityReports",
        "resourceTypePath": "//projects/locations/instances",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.osPolicyAssignments.create": {
        "description": "Create an OS policy assignment. This method also creates the first revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/osPolicyAssignments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "osPolicyAssignments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.osPolicyAssignments.delete": {
        "description": "Delete the OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. If the LRO completes and is not cancelled, all revisions associated with the OS policy assignment are deleted. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/osPolicyAssignments/{osPolicyAssignmentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "osPolicyAssignments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.osPolicyAssignments.get": {
        "description": "Retrieve an existing OS policy assignment. This method always returns the latest revision. In order to retrieve a previous revision of the assignment, also provide the revision ID in the `name` parameter.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/osPolicyAssignments/{osPolicyAssignmentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "osPolicyAssignments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.osPolicyAssignments.list": {
        "description": "List the OS policy assignments under the parent resource. For each OS policy assignment, the latest revision is returned.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/osPolicyAssignments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "osPolicyAssignments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.osPolicyAssignments.listRevisions": {
        "description": "List the OS policy assignment revisions for a given OS policy assignment.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/osPolicyAssignments/{osPolicyAssignmentsId}:listRevisions",
        "httpMethod": "GET",
        "method": "listRevisions",
        "resourceType": "osPolicyAssignments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.osPolicyAssignments.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/osPolicyAssignments/{osPolicyAssignmentsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/osPolicyAssignments",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.osPolicyAssignments.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/osPolicyAssignments/{osPolicyAssignmentsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/osPolicyAssignments",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.locations.osPolicyAssignments.patch": {
        "description": "Update an existing OS policy assignment. This method creates a new revision of the OS policy assignment. This method returns a long running operation (LRO) that contains the rollout details. The rollout can be cancelled by cancelling the LRO. For more information, see [Method: projects.locations.osPolicyAssignments.operations.cancel](https://cloud.google.com/compute/docs/osconfig/rest/v1alpha/projects.locations.osPolicyAssignments.operations/cancel).",
        "flatPath": "v1alpha/projects/{projectsId}/locations/{locationsId}/osPolicyAssignments/{osPolicyAssignmentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "osPolicyAssignments",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha",
          "v1"
        ]
      },
      "osconfig.projects.patchDeployments.create": {
        "description": "Create an OS Config patch deployment.",
        "flatPath": "v1beta/projects/{projectsId}/patchDeployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "patchDeployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.patchDeployments.delete": {
        "description": "Delete an OS Config patch deployment.",
        "flatPath": "v1beta/projects/{projectsId}/patchDeployments/{patchDeploymentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "patchDeployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.patchDeployments.get": {
        "description": "Get an OS Config patch deployment.",
        "flatPath": "v1beta/projects/{projectsId}/patchDeployments/{patchDeploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "patchDeployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.patchDeployments.list": {
        "description": "Get a page of OS Config patch deployments.",
        "flatPath": "v1beta/projects/{projectsId}/patchDeployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "patchDeployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.patchDeployments.patch": {
        "description": "Update an OS Config patch deployment.",
        "flatPath": "v1beta/projects/{projectsId}/patchDeployments/{patchDeploymentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "patchDeployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.patchJobs.cancel": {
        "description": "Cancel a patch job. The patch job must be active. Canceled patch jobs cannot be restarted.",
        "flatPath": "v1beta/projects/{projectsId}/patchJobs/{patchJobsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "patchJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.patchJobs.execute": {
        "description": "Patch VM instances by creating and running a patch job.",
        "flatPath": "v1beta/projects/{projectsId}/patchJobs:execute",
        "httpMethod": "POST",
        "method": "execute",
        "resourceType": "patchJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.patchJobs.get": {
        "description": "Get the patch job. This can be used to track the progress of an ongoing patch job or review the details of completed jobs.",
        "flatPath": "v1beta/projects/{projectsId}/patchJobs/{patchJobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "patchJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.patchJobs.instanceDetails.list": {
        "description": "Get a list of instance details for a given patch job.",
        "flatPath": "v1beta/projects/{projectsId}/patchJobs/{patchJobsId}/instanceDetails",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instanceDetails",
        "resourceTypePath": "//projects/patchJobs",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.patchJobs.list": {
        "description": "Get a list of patch jobs.",
        "flatPath": "v1beta/projects/{projectsId}/patchJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "patchJobs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "osconfig.projects.zones.instances.lookupEffectiveGuestPolicy": {
        "description": "Lookup the effective guest policy that applies to a VM instance. This lookup merges all policies that are assigned to the instance ancestry.",
        "flatPath": "v1beta/projects/{projectsId}/zones/{zonesId}/instances/{instancesId}:lookupEffectiveGuestPolicy",
        "httpMethod": "POST",
        "method": "lookupEffectiveGuestPolicy",
        "resourceType": "instances",
        "resourceTypePath": "//projects/zones",
        "versions": [
          "v1beta"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "OS Config API"
  },
  "oslogin": {
    "description": "You can use OS Login to manage access to your VM instances using IAM roles.",
    "methods": {
      "oslogin.users.getLoginProfile": {
        "description": "Retrieves the profile information used for logging in to a virtual machine on Google Compute Engine.",
        "flatPath": "v1alpha/users/{usersId}/loginProfile",
        "httpMethod": "GET",
        "method": "getLoginProfile",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "oslogin.users.importSshPublicKey": {
        "description": "Adds an SSH public key and returns the profile information. Default POSIX account information is set when no username and UID exist as part of the login profile.",
        "flatPath": "v1alpha/users/{usersId}:importSshPublicKey",
        "httpMethod": "POST",
        "method": "importSshPublicKey",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "oslogin.users.projects.delete": {
        "description": "Deletes a POSIX account.",
        "flatPath": "v1alpha/users/{usersId}/projects/{projectsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "projects",
        "resourceTypePath": "//users",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "oslogin.users.sshPublicKey.create": {
        "description": "Create an SSH public key",
        "flatPath": "v1alpha/users/{usersId}/sshPublicKey",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sshPublicKey",
        "resourceTypePath": "//users",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "oslogin.users.sshPublicKeys.delete": {
        "description": "Deletes an SSH public key.",
        "flatPath": "v1alpha/users/{usersId}/sshPublicKeys/{sshPublicKeysId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sshPublicKeys",
        "resourceTypePath": "//users",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "oslogin.users.sshPublicKeys.get": {
        "description": "Retrieves an SSH public key.",
        "flatPath": "v1alpha/users/{usersId}/sshPublicKeys/{sshPublicKeysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sshPublicKeys",
        "resourceTypePath": "//users",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "oslogin.users.sshPublicKeys.patch": {
        "description": "Updates an SSH public key and returns the profile information. This method supports patch semantics.",
        "flatPath": "v1alpha/users/{usersId}/sshPublicKeys/{sshPublicKeysId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sshPublicKeys",
        "resourceTypePath": "//users",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud OS Login API"
  },
  "pagespeedonline": {
    "description": "The PageSpeed Insights API lets you analyze the performance of your website with a simple API. It offers tailored suggestions for how you can optimize your site, and lets you easily integrate PageSpeed Insights analysis into your development tools and workflow.",
    "methods": {
      "pagespeedonline.pagespeedapi.runpagespeed": {
        "description": "Runs PageSpeed analysis on the page at the specified URL, and returns PageSpeed scores, a list of suggestions to make that page faster, and other information.",
        "flatPath": "pagespeedonline/v5/runPagespeed",
        "httpMethod": "GET",
        "method": "runpagespeed",
        "resourceType": "pagespeedapi",
        "resourceTypePath": "/",
        "versions": [
          "v5"
        ]
      }
    },
    "preferredVersion": "v5",
    "title": "PageSpeed Insights API"
  },
  "paymentsresellersubscription": {
    "description": "",
    "methods": {
      "paymentsresellersubscription.partners.products.list": {
        "description": "Used by partners to list products that can be resold to their customers. It should be called directly by the partner using service accounts.",
        "flatPath": "v1/partners/{partnersId}/products",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "products",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "paymentsresellersubscription.partners.promotions.list": {
        "description": "Used by partners to list promotions, such as free trial, that can be applied on subscriptions. It should be called directly by the partner using service accounts.",
        "flatPath": "v1/partners/{partnersId}/promotions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "promotions",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "paymentsresellersubscription.partners.subscriptions.cancel": {
        "description": "Used by partners to cancel a subscription service either immediately or by the end of the current billing cycle for their customers. It should be called directly by the partner using service accounts.",
        "flatPath": "v1/partners/{partnersId}/subscriptions/{subscriptionsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "subscriptions",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "paymentsresellersubscription.partners.subscriptions.create": {
        "description": "Used by partners to create a subscription for their customers. The created subscription is associated with the end user inferred from the end user credentials. This API must be authorized by the end user using OAuth.",
        "flatPath": "v1/partners/{partnersId}/subscriptions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "subscriptions",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "paymentsresellersubscription.partners.subscriptions.entitle": {
        "description": "Used by partners to entitle a previously provisioned subscription to the current end user. The end user identity is inferred from the authorized credential of the request. This API must be authorized by the end user using OAuth.",
        "flatPath": "v1/partners/{partnersId}/subscriptions/{subscriptionsId}:entitle",
        "httpMethod": "POST",
        "method": "entitle",
        "resourceType": "subscriptions",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "paymentsresellersubscription.partners.subscriptions.extend": {
        "description": "Used by partners to extend a subscription service for their customers on an ongoing basis for the subscription to remain active and renewable. It should be called directly by the partner using service accounts.",
        "flatPath": "v1/partners/{partnersId}/subscriptions/{subscriptionsId}:extend",
        "httpMethod": "POST",
        "method": "extend",
        "resourceType": "subscriptions",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "paymentsresellersubscription.partners.subscriptions.get": {
        "description": "Used by partners to get a subscription by id. It should be called directly by the partner using service accounts.",
        "flatPath": "v1/partners/{partnersId}/subscriptions/{subscriptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "subscriptions",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "paymentsresellersubscription.partners.subscriptions.provision": {
        "description": "Used by partners to provision a subscription for their customers. This creates a subscription without associating it with the end user account. EntitleSubscription must be called separately using OAuth in order for the end user account to be associated with the subscription. It should be called directly by the partner using service accounts.",
        "flatPath": "v1/partners/{partnersId}/subscriptions:provision",
        "httpMethod": "POST",
        "method": "provision",
        "resourceType": "subscriptions",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      },
      "paymentsresellersubscription.partners.subscriptions.undoCancel": {
        "description": "Used by partners to revoke the pending cancellation of a subscription, which is currently in `STATE_CANCEL_AT_END_OF_CYCLE` state. If the subscription is already cancelled, the request will fail. It should be called directly by the partner using service accounts.",
        "flatPath": "v1/partners/{partnersId}/subscriptions/{subscriptionsId}:undoCancel",
        "httpMethod": "POST",
        "method": "undoCancel",
        "resourceType": "subscriptions",
        "resourceTypePath": "//partners",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Payments Reseller Subscription API"
  },
  "people": {
    "description": "Provides access to information about profiles and contacts.",
    "methods": {
      "people.contactGroups.batchGet": {
        "description": "Get a list of contact groups owned by the authenticated user by specifying a list of contact group resource names.",
        "flatPath": "v1/contactGroups:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "contactGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.contactGroups.create": {
        "description": "Create a new contact group owned by the authenticated user. Created contact group names must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error.",
        "flatPath": "v1/contactGroups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "contactGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.contactGroups.delete": {
        "description": "Delete an existing contact group owned by the authenticated user by specifying a contact group resource name.",
        "flatPath": "v1/contactGroups/{contactGroupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "contactGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.contactGroups.get": {
        "description": "Get a specific contact group owned by the authenticated user by specifying a contact group resource name.",
        "flatPath": "v1/contactGroups/{contactGroupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "contactGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.contactGroups.list": {
        "description": "List all contact groups owned by the authenticated user. Members of the contact groups are not populated.",
        "flatPath": "v1/contactGroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "contactGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.contactGroups.members.modify": {
        "description": "Modify the members of a contact group owned by the authenticated user. The only system contact groups that can have members added are `contactGroups/myContacts` and `contactGroups/starred`. Other system contact groups are deprecated and can only have contacts removed.",
        "flatPath": "v1/contactGroups/{contactGroupsId}/members:modify",
        "httpMethod": "POST",
        "method": "modify",
        "resourceType": "members",
        "resourceTypePath": "//contactGroups",
        "versions": [
          "v1"
        ]
      },
      "people.contactGroups.update": {
        "description": "Update the name of an existing contact group owned by the authenticated user. Updated contact group names must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error.",
        "flatPath": "v1/contactGroups/{contactGroupsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "contactGroups",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.otherContacts.copyOtherContactToMyContactsGroup": {
        "description": "Copies an \"Other contact\" to a new contact in the user's \"myContacts\" group",
        "flatPath": "v1/otherContacts/{otherContactsId}:copyOtherContactToMyContactsGroup",
        "httpMethod": "POST",
        "method": "copyOtherContactToMyContactsGroup",
        "resourceType": "otherContacts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.otherContacts.list": {
        "description": "List all \"Other contacts\", that is contacts that are not in a contact group. \"Other contacts\" are typically auto created contacts from interactions. Sync tokens expire 7 days after the full sync. A request with an expired sync token will result in a 410 error. In the case of such an error clients should make a full sync request without a `sync_token`. The first page of a full sync request has an additional quota. If the quota is exceeded, a 429 error will be returned. This quota is fixed and can not be increased. When the `sync_token` is specified, resources deleted since the last sync will be returned as a person with `PersonMetadata.deleted` set to true. When the `page_token` or `sync_token` is specified, all other request parameters must match the first call. Writes may have a propagation delay of several minutes for sync requests. Incremental syncs are not intended for read-after-write use cases. See example usage at [List the user's other contacts that have changed](/people/v1/other-contacts#list_the_users_other_contacts_that_have_changed).",
        "flatPath": "v1/otherContacts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "otherContacts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.otherContacts.search": {
        "description": "Provides a list of contacts in the authenticated user's other contacts that matches the search query. The query matches on a contact's `names`, `emailAddresses`, and `phoneNumbers` fields that are from the OTHER_CONTACT source. **IMPORTANT**: Before searching, clients should send a warmup request with an empty query to update the cache. See https://developers.google.com/people/v1/other-contacts#search_the_users_other_contacts",
        "flatPath": "v1/otherContacts:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "otherContacts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.batchCreateContacts": {
        "description": "Create a batch of new contacts and return the PersonResponses for the newly created contacts. Limited to 10 parallel requests per user.",
        "flatPath": "v1/people:batchCreateContacts",
        "httpMethod": "POST",
        "method": "batchCreateContacts",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.batchDeleteContacts": {
        "description": "Delete a batch of contacts. Any non-contact data will not be deleted. Limited to 10 parallel requests per user.",
        "flatPath": "v1/people:batchDeleteContacts",
        "httpMethod": "POST",
        "method": "batchDeleteContacts",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.batchUpdateContacts": {
        "description": "Update a batch of contacts and return a map of resource names to PersonResponses for the updated contacts. Limited to 10 parallel requests per user.",
        "flatPath": "v1/people:batchUpdateContacts",
        "httpMethod": "POST",
        "method": "batchUpdateContacts",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.connections.list": {
        "description": "Provides a list of the authenticated user's contacts. Sync tokens expire 7 days after the full sync. A request with an expired sync token will result in a 410 error. In the case of such an error clients should make a full sync request without a `sync_token`. The first page of a full sync request has an additional quota. If the quota is exceeded, a 429 error will be returned. This quota is fixed and can not be increased. When the `sync_token` is specified, resources deleted since the last sync will be returned as a person with `PersonMetadata.deleted` set to true. When the `page_token` or `sync_token` is specified, all other request parameters must match the first call. Writes may have a propagation delay of several minutes for sync requests. Incremental syncs are not intended for read-after-write use cases. See example usage at [List the user's contacts that have changed](/people/v1/contacts#list_the_users_contacts_that_have_changed).",
        "flatPath": "v1/people/{peopleId}/connections",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "connections",
        "resourceTypePath": "//people",
        "versions": [
          "v1"
        ]
      },
      "people.people.createContact": {
        "description": "Create a new contact and return the person resource for that contact. The request returns a 400 error if more than one field is specified on a field that is a singleton for contact sources: * biographies * birthdays * genders * names",
        "flatPath": "v1/people:createContact",
        "httpMethod": "POST",
        "method": "createContact",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.deleteContact": {
        "description": "Delete a contact person. Any non-contact data will not be deleted.",
        "flatPath": "v1/people/{peopleId}:deleteContact",
        "httpMethod": "DELETE",
        "method": "deleteContact",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.deleteContactPhoto": {
        "description": "Delete a contact's photo.",
        "flatPath": "v1/people/{peopleId}:deleteContactPhoto",
        "httpMethod": "DELETE",
        "method": "deleteContactPhoto",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.get": {
        "description": "Provides information about a person by specifying a resource name. Use `people/me` to indicate the authenticated user. The request returns a 400 error if 'personFields' is not specified.",
        "flatPath": "v1/people/{peopleId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.getBatchGet": {
        "description": "Provides information about a list of specific people by specifying a list of requested resource names. Use `people/me` to indicate the authenticated user. The request returns a 400 error if 'personFields' is not specified.",
        "flatPath": "v1/people:batchGet",
        "httpMethod": "GET",
        "method": "getBatchGet",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.listDirectoryPeople": {
        "description": "Provides a list of domain profiles and domain contacts in the authenticated user's domain directory. When the `sync_token` is specified, resources deleted since the last sync will be returned as a person with `PersonMetadata.deleted` set to true. When the `page_token` or `sync_token` is specified, all other request parameters must match the first call. Writes may have a propagation delay of several minutes for sync requests. Incremental syncs are not intended for read-after-write use cases. See example usage at [List the directory people that have changed](/people/v1/directory#list_the_directory_people_that_have_changed).",
        "flatPath": "v1/people:listDirectoryPeople",
        "httpMethod": "GET",
        "method": "listDirectoryPeople",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.searchContacts": {
        "description": "Provides a list of contacts in the authenticated user's grouped contacts that matches the search query. The query matches on a contact's `names`, `nickNames`, `emailAddresses`, `phoneNumbers`, and `organizations` fields that are from the CONTACT source. **IMPORTANT**: Before searching, clients should send a warmup request with an empty query to update the cache. See https://developers.google.com/people/v1/contacts#search_the_users_contacts",
        "flatPath": "v1/people:searchContacts",
        "httpMethod": "GET",
        "method": "searchContacts",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.searchDirectoryPeople": {
        "description": "Provides a list of domain profiles and domain contacts in the authenticated user's domain directory that match the search query.",
        "flatPath": "v1/people:searchDirectoryPeople",
        "httpMethod": "GET",
        "method": "searchDirectoryPeople",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.updateContact": {
        "description": "Update contact data for an existing contact person. Any non-contact data will not be modified. Any non-contact data in the person to update will be ignored. All fields specified in the `update_mask` will be replaced. The server returns a 400 error if `person.metadata.sources` is not specified for the contact to be updated or if there is no contact source. The server returns a 400 error with reason `\"failedPrecondition\"` if `person.metadata.sources.etag` is different than the contact's etag, which indicates the contact has changed since its data was read. Clients should get the latest person and merge their updates into the latest person. The server returns a 400 error if `memberships` are being updated and there are no contact group memberships specified on the person. The server returns a 400 error if more than one field is specified on a field that is a singleton for contact sources: * biographies * birthdays * genders * names",
        "flatPath": "v1/people/{peopleId}:updateContact",
        "httpMethod": "PATCH",
        "method": "updateContact",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "people.people.updateContactPhoto": {
        "description": "Update a contact's photo.",
        "flatPath": "v1/people/{peopleId}:updateContactPhoto",
        "httpMethod": "PATCH",
        "method": "updateContactPhoto",
        "resourceType": "people",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "People API"
  },
  "playcustomapp": {
    "description": "API to create and publish custom Android apps",
    "methods": {
      "playcustomapp.accounts.customApps.create": {
        "description": "Creates a new custom app.",
        "flatPath": "playcustomapp/v1/accounts/{account}/customApps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "customApps",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Play Custom App Publishing API"
  },
  "policyanalyzer": {
    "description": "",
    "methods": {
      "policyanalyzer.projects.locations.activityTypes.activities.query": {
        "description": "Queries policy activities on GCP resources.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/activityTypes/{activityTypesId}/activities:query",
        "httpMethod": "GET",
        "method": "query",
        "resourceType": "activities",
        "resourceTypePath": "//projects/locations/activityTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Policy Analyzer API"
  },
  "policysimulator": {
    "description": "Policy Simulator is a collection of endpoints for creating, running, and viewing a [Replay][google.cloud.policysimulator.v1beta1.Replay]. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.",
    "methods": {
      "policysimulator.folders.locations.replays.create": {
        "description": "Creates and starts a Replay using the given ReplayConfig.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/replays",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "replays",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.folders.locations.replays.get": {
        "description": "Gets the specified Replay. Each `Replay` is available for at least 7 days.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/replays/{replaysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "replays",
        "resourceTypePath": "//folders/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.folders.locations.replays.results.list": {
        "description": "Lists the results of running a Replay.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/replays/{replaysId}/results",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "results",
        "resourceTypePath": "//folders/locations/replays",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.organizations.locations.replays.create": {
        "description": "Creates and starts a Replay using the given ReplayConfig.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/replays",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "replays",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.organizations.locations.replays.get": {
        "description": "Gets the specified Replay. Each `Replay` is available for at least 7 days.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/replays/{replaysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "replays",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.organizations.locations.replays.results.list": {
        "description": "Lists the results of running a Replay.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/replays/{replaysId}/results",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "results",
        "resourceTypePath": "//organizations/locations/replays",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.projects.locations.replays.create": {
        "description": "Creates and starts a Replay using the given ReplayConfig.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/replays",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "replays",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.projects.locations.replays.get": {
        "description": "Gets the specified Replay. Each `Replay` is available for at least 7 days.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/replays/{replaysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "replays",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "policysimulator.projects.locations.replays.results.list": {
        "description": "Lists the results of running a Replay.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/replays/{replaysId}/results",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "results",
        "resourceTypePath": "//projects/locations/replays",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Policy Simulator API"
  },
  "policytroubleshooter": {
    "description": "",
    "methods": {
      "policytroubleshooter.iam.troubleshoot": {
        "description": "Checks whether a member has a specific permission for a specific resource, and explains why the member does or does not have that permission.",
        "flatPath": "v1beta/iam:troubleshoot",
        "httpMethod": "POST",
        "method": "troubleshoot",
        "resourceType": "iam",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Policy Troubleshooter API"
  },
  "poly": {
    "description": "The Poly API provides read access to assets hosted on poly.google.com to all, and upload access to poly.google.com for whitelisted accounts.",
    "methods": {
      "poly.assets.get": {
        "description": "Returns detailed information about an asset given its name. PRIVATE assets are returned only if the currently authenticated user (via OAuth token) is the author of the asset.",
        "flatPath": "v1/assets/{assetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "assets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "poly.assets.list": {
        "description": "Lists all public, remixable assets. These are assets with an access level of PUBLIC and published under the CC-By license.",
        "flatPath": "v1/assets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "poly.users.assets.list": {
        "description": "Lists assets authored by the given user. Only the value 'me', representing the currently-authenticated user, is supported. May include assets with an access level of PRIVATE or UNLISTED and assets which are All Rights Reserved for the currently-authenticated user.",
        "flatPath": "v1/users/{usersId}/assets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assets",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      },
      "poly.users.likedassets.list": {
        "description": "Lists assets that the user has liked. Only the value 'me', representing the currently-authenticated user, is supported. May include assets with an access level of UNLISTED.",
        "flatPath": "v1/users/{usersId}/likedassets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "likedassets",
        "resourceTypePath": "//users",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Poly API"
  },
  "privateca": {
    "description": "The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys.",
    "methods": {
      "privateca.projects.locations.caPools.certificateAuthorities.activate": {
        "description": "Activate a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. After the parent Certificate Authority signs a certificate signing request from FetchCertificateAuthorityCsr, this method can complete the activation process.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.get": {
        "description": "Returns a CertificateRevocationList.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/caPools/certificateAuthorities",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/caPools/certificateAuthorities",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.list": {
        "description": "Lists CertificateRevocationLists.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/caPools/certificateAuthorities",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.patch": {
        "description": "Update a CertificateRevocationList.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/caPools/certificateAuthorities",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/caPools/certificateAuthorities",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/caPools/certificateAuthorities",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.create": {
        "description": "Create a new CertificateAuthority in a given Project and Location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.delete": {
        "description": "Delete a CertificateAuthority.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.disable": {
        "description": "Disable a CertificateAuthority.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:disable",
        "httpMethod": "POST",
        "method": "disable",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.enable": {
        "description": "Enable a CertificateAuthority.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:enable",
        "httpMethod": "POST",
        "method": "enable",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.fetch": {
        "description": "Fetch a certificate signing request (CSR) from a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. The CSR must then be signed by the desired parent Certificate Authority, which could be another CertificateAuthority resource, or could be an on-prem certificate authority. See also ActivateCertificateAuthority.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:fetch",
        "httpMethod": "GET",
        "method": "fetch",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.get": {
        "description": "Returns a CertificateAuthority.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.list": {
        "description": "Lists CertificateAuthorities.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.patch": {
        "description": "Update a CertificateAuthority.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificateAuthorities.undelete": {
        "description": "Undelete a CertificateAuthority that has been deleted.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificates.create": {
        "description": "Create a new Certificate in a given Project, Location from a particular CaPool.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificates.get": {
        "description": "Returns a Certificate.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificates/{certificatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificates.list": {
        "description": "Lists Certificates.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificates.patch": {
        "description": "Update a Certificate. Currently, the only field you can update is the labels field.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificates/{certificatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.certificates.revoke": {
        "description": "Revoke a Certificate.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificates/{certificatesId}:revoke",
        "httpMethod": "POST",
        "method": "revoke",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/caPools",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.create": {
        "description": "Create a CaPool.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "caPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.delete": {
        "description": "Delete a CaPool.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "caPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.fetchCaCerts": {
        "description": "FetchCaCerts returns the current trust anchor for the CaPool. This will include CA certificate chains for all ACTIVE CertificateAuthority resources in the CaPool.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}:fetchCaCerts",
        "httpMethod": "POST",
        "method": "fetchCaCerts",
        "resourceType": "caPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.get": {
        "description": "Returns a CaPool.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "caPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "caPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.list": {
        "description": "Lists CaPools.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "caPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.patch": {
        "description": "Update a CaPool.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "caPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "caPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.caPools.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "caPools",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.activate": {
        "description": "Activate a CertificateAuthority that is in state PENDING_ACTIVATION and is of type SUBORDINATE. After the parent Certificate Authority signs a certificate signing request from FetchCertificateAuthorityCsr, this method can complete the activation process.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificateRevocationLists.get": {
        "description": "Returns a CertificateRevocationList.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificateRevocationLists.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificateRevocationLists.list": {
        "description": "Lists CertificateRevocationLists.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificateRevocationLists.patch": {
        "description": "Update a CertificateRevocationList.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificateRevocationLists.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificateRevocationLists.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "certificateRevocationLists",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificates.create": {
        "description": "Create a new Certificate in a given Project, Location from a particular CertificateAuthority.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificates.get": {
        "description": "Returns a Certificate.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificates/{certificatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificates.list": {
        "description": "Lists Certificates.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificates.patch": {
        "description": "Update a Certificate. Currently, the only field you can update is the labels field.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificates/{certificatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.certificates.revoke": {
        "description": "Revoke a Certificate.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}/certificates/{certificatesId}:revoke",
        "httpMethod": "POST",
        "method": "revoke",
        "resourceType": "certificates",
        "resourceTypePath": "//projects/locations/certificateAuthorities",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.create": {
        "description": "Create a new CertificateAuthority in a given Project and Location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.disable": {
        "description": "Disable a CertificateAuthority.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}:disable",
        "httpMethod": "POST",
        "method": "disable",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.enable": {
        "description": "Enable a CertificateAuthority.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}:enable",
        "httpMethod": "POST",
        "method": "enable",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.fetch": {
        "description": "Fetch a certificate signing request (CSR) from a CertificateAuthority that is in state PENDING_ACTIVATION and is of type SUBORDINATE. The CSR must then be signed by the desired parent Certificate Authority, which could be another CertificateAuthority resource, or could be an on-prem certificate authority. See also ActivateCertificateAuthority.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}:fetch",
        "httpMethod": "GET",
        "method": "fetch",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.get": {
        "description": "Returns a CertificateAuthority.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.list": {
        "description": "Lists CertificateAuthorities.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.patch": {
        "description": "Update a CertificateAuthority.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.restore": {
        "description": "Restore a CertificateAuthority that is scheduled for deletion.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.scheduleDelete": {
        "description": "Schedule a CertificateAuthority for deletion.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}:scheduleDelete",
        "httpMethod": "POST",
        "method": "scheduleDelete",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateAuthorities.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/certificateAuthorities/{certificateAuthoritiesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "certificateAuthorities",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.certificateTemplates.create": {
        "description": "Create a new CertificateTemplate in a given Project and Location.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "certificateTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.certificateTemplates.delete": {
        "description": "DeleteCertificateTemplate deletes a CertificateTemplate.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "certificateTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.certificateTemplates.get": {
        "description": "Returns a CertificateTemplate.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "certificateTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.certificateTemplates.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "certificateTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.certificateTemplates.list": {
        "description": "Lists CertificateTemplates.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "certificateTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.certificateTemplates.patch": {
        "description": "Update a CertificateTemplate.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "certificateTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.certificateTemplates.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "certificateTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.certificateTemplates.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "certificateTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "privateca.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "privateca.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "privateca.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "privateca.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "privateca.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "privateca.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "privateca.projects.locations.reusableConfigs.get": {
        "description": "Returns a ReusableConfig.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reusableConfigs/{reusableConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reusableConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.reusableConfigs.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reusableConfigs/{reusableConfigsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "reusableConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.reusableConfigs.list": {
        "description": "Lists ReusableConfigs.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reusableConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reusableConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.reusableConfigs.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reusableConfigs/{reusableConfigsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "reusableConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "privateca.projects.locations.reusableConfigs.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/reusableConfigs/{reusableConfigsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "reusableConfigs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Certificate Authority API"
  },
  "prod_tt_sasportal": {
    "description": "",
    "methods": {
      "prod_tt_sasportal.customers.deployments.create": {
        "description": "Creates a new deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.deployments.delete": {
        "description": "Deletes a deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.deployments.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//customers/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.deployments.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//customers/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.deployments.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//customers/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.deployments.get": {
        "description": "Returns a requested deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.deployments.list": {
        "description": "Lists deployments.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.deployments.move": {
        "description": "Moves a deployment under another node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.deployments.patch": {
        "description": "Updates an existing deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.devices.delete": {
        "description": "Deletes a device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.devices.get": {
        "description": "Gets details about a device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.devices.move": {
        "description": "Moves a device under another node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.devices.patch": {
        "description": "Updates a device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.devices.signDevice": {
        "description": "Signs a device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}:signDevice",
        "httpMethod": "POST",
        "method": "signDevice",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.devices.updateSigned": {
        "description": "Updates a signed device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}:updateSigned",
        "httpMethod": "PATCH",
        "method": "updateSigned",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.get": {
        "description": "Returns a requested customer.",
        "flatPath": "v1alpha1/customers/{customersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.list": {
        "description": "Returns a list of requested customers.",
        "flatPath": "v1alpha1/customers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.create": {
        "description": "Creates a new node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.delete": {
        "description": "Deletes a node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.deployments.create": {
        "description": "Creates a new deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/deployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deployments",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.deployments.list": {
        "description": "Lists deployments.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.get": {
        "description": "Returns a requested node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.list": {
        "description": "Lists nodes.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.move": {
        "description": "Moves a node under another node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.nodes.create": {
        "description": "Creates a new node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/nodes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodes",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.nodes.list": {
        "description": "Lists nodes.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/nodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodes",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.nodes.patch": {
        "description": "Updates an existing node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.customers.patch": {
        "description": "Updates an existing customer.",
        "flatPath": "v1alpha1/customers/{customersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.deployments.devices.delete": {
        "description": "Deletes a device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.deployments.devices.get": {
        "description": "Gets details about a device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.deployments.devices.move": {
        "description": "Moves a device under another node or customer.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.deployments.devices.patch": {
        "description": "Updates a device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.deployments.devices.signDevice": {
        "description": "Signs a device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}:signDevice",
        "httpMethod": "POST",
        "method": "signDevice",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.deployments.devices.updateSigned": {
        "description": "Updates a signed device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}:updateSigned",
        "httpMethod": "PATCH",
        "method": "updateSigned",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.deployments.get": {
        "description": "Returns a requested deployment.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.installer.generateSecret": {
        "description": "Generates a secret to be used with the ValidateInstaller.",
        "flatPath": "v1alpha1/installer:generateSecret",
        "httpMethod": "POST",
        "method": "generateSecret",
        "resourceType": "installer",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.installer.validate": {
        "description": "Validates the identity of a Certified Professional Installer (CPI).",
        "flatPath": "v1alpha1/installer:validate",
        "httpMethod": "POST",
        "method": "validate",
        "resourceType": "installer",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.deployments.delete": {
        "description": "Deletes a deployment.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.deployments.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.deployments.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.deployments.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.deployments.get": {
        "description": "Returns a requested deployment.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.deployments.list": {
        "description": "Lists deployments.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.deployments.move": {
        "description": "Moves a deployment under another node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.deployments.patch": {
        "description": "Updates an existing deployment.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.devices.delete": {
        "description": "Deletes a device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.devices.get": {
        "description": "Gets details about a device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.devices.move": {
        "description": "Moves a device under another node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.devices.patch": {
        "description": "Updates a device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.devices.signDevice": {
        "description": "Signs a device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}:signDevice",
        "httpMethod": "POST",
        "method": "signDevice",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.devices.updateSigned": {
        "description": "Updates a signed device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}:updateSigned",
        "httpMethod": "PATCH",
        "method": "updateSigned",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.get": {
        "description": "Returns a requested node.",
        "flatPath": "v1alpha1/nodes/{nodesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodes",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.create": {
        "description": "Creates a new node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.delete": {
        "description": "Deletes a node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.deployments.create": {
        "description": "Creates a new deployment.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/deployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.deployments.list": {
        "description": "Lists deployments.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.get": {
        "description": "Returns a requested node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.list": {
        "description": "Lists nodes.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.move": {
        "description": "Moves a node under another node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.nodes.create": {
        "description": "Creates a new node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/nodes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.nodes.list": {
        "description": "Lists nodes.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/nodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.nodes.nodes.patch": {
        "description": "Updates an existing node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.policies.get": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha1/policies:get",
        "httpMethod": "POST",
        "method": "get",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.policies.set": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "v1alpha1/policies:set",
        "httpMethod": "POST",
        "method": "set",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "prod_tt_sasportal.policies.test": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "v1alpha1/policies:test",
        "httpMethod": "POST",
        "method": "test",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      }
    },
    "preferredVersion": "v1alpha1",
    "title": "SAS Portal API (Testing)"
  },
  "pubsub": {
    "description": "Provides reliable, many-to-many, asynchronous messaging between applications.",
    "methods": {
      "pubsub.projects.schemas.create": {
        "description": "Creates a schema.",
        "flatPath": "v1/projects/{projectsId}/schemas",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "schemas",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.schemas.delete": {
        "description": "Deletes a schema.",
        "flatPath": "v1/projects/{projectsId}/schemas/{schemasId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "schemas",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.schemas.get": {
        "description": "Gets a schema.",
        "flatPath": "v1/projects/{projectsId}/schemas/{schemasId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "schemas",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.schemas.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/schemas/{schemasId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "schemas",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.schemas.list": {
        "description": "Lists schemas in a project.",
        "flatPath": "v1/projects/{projectsId}/schemas",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "schemas",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.schemas.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/schemas/{schemasId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "schemas",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.schemas.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/schemas/{schemasId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "schemas",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.schemas.validate": {
        "description": "Validates a schema.",
        "flatPath": "v1/projects/{projectsId}/schemas:validate",
        "httpMethod": "POST",
        "method": "validate",
        "resourceType": "schemas",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.schemas.validateMessage": {
        "description": "Validates a message against a schema.",
        "flatPath": "v1/projects/{projectsId}/schemas:validateMessage",
        "httpMethod": "POST",
        "method": "validateMessage",
        "resourceType": "schemas",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.snapshots.create": {
        "description": "Creates a snapshot from the requested subscription. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. If the snapshot already exists, returns `ALREADY_EXISTS`. If the requested subscription doesn't exist, returns `NOT_FOUND`. If the backlog in the subscription is too old -- and the resulting snapshot would expire in less than 1 hour -- then `FAILED_PRECONDITION` is returned. See also the `Snapshot.expire_time` field. If the name is not provided in the request, the server will assign a random name for this snapshot on the same project as the subscription, conforming to the [resource name format] (https://cloud.google.com/pubsub/docs/admin#resource_names). The generated name is populated in the returned Snapshot object. Note that for REST API requests, you must specify a name in the request.",
        "flatPath": "v1/projects/{projectsId}/snapshots/{snapshotsId}",
        "httpMethod": "PUT",
        "method": "create",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.snapshots.delete": {
        "description": "Removes an existing snapshot. Snapshots are used in [Seek] (https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. When the snapshot is deleted, all messages retained in the snapshot are immediately dropped. After a snapshot is deleted, a new one may be created with the same name, but the new one has no association with the old snapshot or its subscription, unless the same subscription is specified.",
        "flatPath": "v1/projects/{projectsId}/snapshots/{snapshotsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.snapshots.get": {
        "description": "Gets the configuration details of a snapshot. Snapshots are used in Seek operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.",
        "flatPath": "v1/projects/{projectsId}/snapshots/{snapshotsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.snapshots.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/snapshots/{snapshotsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.snapshots.list": {
        "description": "Lists the existing snapshots. Snapshots are used in [Seek]( https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.",
        "flatPath": "v1/projects/{projectsId}/snapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.snapshots.patch": {
        "description": "Updates an existing snapshot. Snapshots are used in Seek operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.",
        "flatPath": "v1/projects/{projectsId}/snapshots/{snapshotsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.snapshots.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/projects/{projectsId}/snapshots/{snapshotsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.snapshots.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/projects/{projectsId}/snapshots/{snapshotsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.acknowledge": {
        "description": "Acknowledges the messages associated with the `ack_ids` in the `AcknowledgeRequest`. The Pub/Sub system can remove the relevant messages from the subscription. Acknowledging a message whose ack deadline has expired may succeed, but such a message may be redelivered later. Acknowledging a message more than once will not result in an error.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}:acknowledge",
        "httpMethod": "POST",
        "method": "acknowledge",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.create": {
        "description": "Creates a subscription to a given topic. If the subscription already exists, returns `ALREADY_EXISTS`. If the corresponding topic doesn't exist, returns `NOT_FOUND`. If the name is not provided in the request, the server will assign a random name for this subscription on the same project as the topic. Note that for REST API requests, you must specify a name.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}",
        "httpMethod": "PUT",
        "method": "create",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.delete": {
        "description": "Deletes an existing subscription. All pending messages in the subscription are immediately dropped. Calls to `Pull` after deletion will return `NOT_FOUND`. After a subscription is deleted, a new one may be created with the same name, but the new one has no association with the old subscription, or its topic unless the same topic is specified.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.detach": {
        "description": "Detaches a subscription from this topic. All messages retained in the subscription are dropped. Subsequent `Pull` and `StreamingPull` requests will return FAILED_PRECONDITION. If the subscription is a push subscription, pushes to the endpoint will stop.",
        "flatPath": "v1/projects/{projectsId}/subscriptions/{subscriptionsId}:detach",
        "httpMethod": "POST",
        "method": "detach",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.get": {
        "description": "Gets the configuration details of a subscription.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.list": {
        "description": "Lists matching subscriptions.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.modifyAckDeadline": {
        "description": "Modifies the ack deadline for a specific message. This method is useful to indicate that more time is needed to process a message by the subscriber, or to make the message available for redelivery if the processing was interrupted. Note that this does not modify the subscription-level `ackDeadlineSeconds` used for subsequent messages.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}:modifyAckDeadline",
        "httpMethod": "POST",
        "method": "modifyAckDeadline",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.modifyPushConfig": {
        "description": "Modifies the `PushConfig` for a specified subscription. This may be used to change a push subscription to a pull one (signified by an empty `PushConfig`) or vice versa, or change the endpoint URL and other attributes of a push subscription. Messages will accumulate for delivery continuously through the call regardless of changes to the `PushConfig`.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}:modifyPushConfig",
        "httpMethod": "POST",
        "method": "modifyPushConfig",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.patch": {
        "description": "Updates an existing subscription. Note that certain properties of a subscription, such as its topic, are not modifiable.",
        "flatPath": "v1/projects/{projectsId}/subscriptions/{subscriptionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.pull": {
        "description": "Pulls messages from the server. Returns an empty list if there are no messages available in the backlog. The server may return `UNAVAILABLE` if there are too many concurrent pull requests pending for the given subscription.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}:pull",
        "httpMethod": "POST",
        "method": "pull",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.seek": {
        "description": "Seeks an existing subscription to a point in time or to a given snapshot, whichever is provided in the request. Snapshots are used in [Seek] (https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot. Note that both the subscription and the snapshot must be on the same topic.",
        "flatPath": "v1/projects/{projectsId}/subscriptions/{subscriptionsId}:seek",
        "httpMethod": "POST",
        "method": "seek",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.subscriptions.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta2/projects/{projectsId}/subscriptions/{subscriptionsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.topics.create": {
        "description": "Creates the given topic with the given name.",
        "flatPath": "v1beta2/projects/{projectsId}/topics/{topicsId}",
        "httpMethod": "PUT",
        "method": "create",
        "resourceType": "topics",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.topics.delete": {
        "description": "Deletes the topic with the given name. Returns `NOT_FOUND` if the topic does not exist. After a topic is deleted, a new topic may be created with the same name; this is an entirely new topic with none of the old configuration or subscriptions. Existing subscriptions to this topic are not deleted, but their `topic` field is set to `_deleted-topic_`.",
        "flatPath": "v1beta2/projects/{projectsId}/topics/{topicsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "topics",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.topics.get": {
        "description": "Gets the configuration of a topic.",
        "flatPath": "v1beta2/projects/{projectsId}/topics/{topicsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "topics",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.topics.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta2/projects/{projectsId}/topics/{topicsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "topics",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.topics.list": {
        "description": "Lists matching topics.",
        "flatPath": "v1beta2/projects/{projectsId}/topics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "topics",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.topics.patch": {
        "description": "Updates an existing topic. Note that certain properties of a topic are not modifiable.",
        "flatPath": "v1/projects/{projectsId}/topics/{topicsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "topics",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.topics.publish": {
        "description": "Adds one or more messages to the topic. Returns `NOT_FOUND` if the topic does not exist. The message payload must not be empty; it must contain either a non-empty data field, or at least one attribute.",
        "flatPath": "v1beta2/projects/{projectsId}/topics/{topicsId}:publish",
        "httpMethod": "POST",
        "method": "publish",
        "resourceType": "topics",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.topics.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta2/projects/{projectsId}/topics/{topicsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "topics",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.topics.snapshots.list": {
        "description": "Lists the names of the snapshots on this topic. Snapshots are used in [Seek](https://cloud.google.com/pubsub/docs/replay-overview) operations, which allow you to manage message acknowledgments in bulk. That is, you can set the acknowledgment state of messages in an existing subscription to the state captured by a snapshot.",
        "flatPath": "v1/projects/{projectsId}/topics/{topicsId}/snapshots",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "snapshots",
        "resourceTypePath": "//projects/topics",
        "versions": [
          "v1"
        ]
      },
      "pubsub.projects.topics.subscriptions.list": {
        "description": "Lists the name of the subscriptions for this topic.",
        "flatPath": "v1beta2/projects/{projectsId}/topics/{topicsId}/subscriptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subscriptions",
        "resourceTypePath": "//projects/topics",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.projects.topics.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta2/projects/{projectsId}/topics/{topicsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "topics",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2",
          "v1"
        ]
      },
      "pubsub.subscriptions.acknowledge": {
        "description": "Acknowledges a particular received message: the Pub/Sub system can remove the given message from the subscription. Acknowledging a message whose Ack deadline has expired may succeed, but the message could have been already redelivered. Acknowledging a message more than once will not result in an error. This is only used for messages received via pull.",
        "flatPath": "v1beta1a/subscriptions/acknowledge",
        "httpMethod": "POST",
        "method": "acknowledge",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.subscriptions.create": {
        "description": "Creates a subscription on a given topic for a given subscriber. If the subscription already exists, returns ALREADY_EXISTS. If the corresponding topic doesn't exist, returns NOT_FOUND. If the name is not provided in the request, the server will assign a random name for this subscription on the same project as the topic.",
        "flatPath": "v1beta1a/subscriptions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.subscriptions.delete": {
        "description": "Deletes an existing subscription. All pending messages in the subscription are immediately dropped. Calls to Pull after deletion will return NOT_FOUND.",
        "flatPath": "v1beta1a/subscriptions/{subscriptionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.subscriptions.get": {
        "description": "Gets the configuration details of a subscription.",
        "flatPath": "v1beta1a/subscriptions/{subscriptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.subscriptions.list": {
        "description": "Lists matching subscriptions.",
        "flatPath": "v1beta1a/subscriptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.subscriptions.modifyAckDeadline": {
        "description": "Modifies the Ack deadline for a message received from a pull request.",
        "flatPath": "v1beta1a/subscriptions/modifyAckDeadline",
        "httpMethod": "POST",
        "method": "modifyAckDeadline",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.subscriptions.modifyPushConfig": {
        "description": "Modifies the PushConfig for a specified subscription. This method can be used to suspend the flow of messages to an endpoint by clearing the PushConfig field in the request. Messages will be accumulated for delivery even if no push configuration is defined or while the configuration is modified.",
        "flatPath": "v1beta1a/subscriptions/modifyPushConfig",
        "httpMethod": "POST",
        "method": "modifyPushConfig",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.subscriptions.pull": {
        "description": "Pulls a single message from the server. If return_immediately is true, and no messages are available in the subscription, this method returns FAILED_PRECONDITION. The system is free to return an UNAVAILABLE error if no messages are available in a reasonable amount of time (to reduce system load).",
        "flatPath": "v1beta1a/subscriptions/pull",
        "httpMethod": "POST",
        "method": "pull",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.subscriptions.pullBatch": {
        "description": "Pulls messages from the server. Returns an empty list if there are no messages available in the backlog. The system is free to return UNAVAILABLE if there are too many pull requests outstanding for the given subscription.",
        "flatPath": "v1beta1a/subscriptions/pullBatch",
        "httpMethod": "POST",
        "method": "pullBatch",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.topics.create": {
        "description": "Creates the given topic with the given name.",
        "flatPath": "v1beta1a/topics",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "topics",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.topics.delete": {
        "description": "Deletes the topic with the given name. Returns NOT_FOUND if the topic does not exist. After a topic is deleted, a new topic may be created with the same name.",
        "flatPath": "v1beta1a/topics/{topicsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "topics",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.topics.get": {
        "description": "Gets the configuration of a topic. Since the topic only has the name attribute, this method is only useful to check the existence of a topic. If other attributes are added in the future, they will be returned here.",
        "flatPath": "v1beta1a/topics/{topicsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "topics",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.topics.list": {
        "description": "Lists matching topics.",
        "flatPath": "v1beta1a/topics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "topics",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.topics.publish": {
        "description": "Adds a message to the topic. Returns NOT_FOUND if the topic does not exist.",
        "flatPath": "v1beta1a/topics/publish",
        "httpMethod": "POST",
        "method": "publish",
        "resourceType": "topics",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      },
      "pubsub.topics.publishBatch": {
        "description": "Adds one or more messages to the topic. Returns NOT_FOUND if the topic does not exist.",
        "flatPath": "v1beta1a/topics/publishBatch",
        "httpMethod": "POST",
        "method": "publishBatch",
        "resourceType": "topics",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1a"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Pub/Sub API"
  },
  "pubsublite": {
    "description": "",
    "methods": {
      "pubsublite.admin.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.reservations.create": {
        "description": "Creates a new reservation.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/reservations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "reservations",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.reservations.delete": {
        "description": "Deletes the specified reservation.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "reservations",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.reservations.get": {
        "description": "Returns the reservation configuration.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reservations",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.reservations.list": {
        "description": "Returns the list of reservations for the given project.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/reservations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reservations",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.reservations.patch": {
        "description": "Updates properties of the specified reservation.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "reservations",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.reservations.topics.list": {
        "description": "Lists the topics attached to the specified reservation.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/reservations/{reservationsId}/topics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "topics",
        "resourceTypePath": "//admin/projects/locations/reservations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.subscriptions.create": {
        "description": "Creates a new subscription.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/subscriptions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "subscriptions",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.subscriptions.delete": {
        "description": "Deletes the specified subscription.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/subscriptions/{subscriptionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "subscriptions",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.subscriptions.get": {
        "description": "Returns the subscription configuration.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/subscriptions/{subscriptionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "subscriptions",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.subscriptions.list": {
        "description": "Returns the list of subscriptions for the given project.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/subscriptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subscriptions",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.subscriptions.patch": {
        "description": "Updates properties of the specified subscription.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/subscriptions/{subscriptionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "subscriptions",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.subscriptions.seek": {
        "description": "Performs an out-of-band seek for a subscription to a specified target, which may be timestamps or named positions within the message backlog. Seek translates these targets to cursors for each partition and orchestrates subscribers to start consuming messages from these seek cursors. If an operation is returned, the seek has been registered and subscribers will eventually receive messages from the seek cursors (i.e. eventual consistency), as long as they are using a minimum supported client library version and not a system that tracks cursors independently of Pub/Sub Lite (e.g. Apache Beam, Dataflow, Spark). The seek operation will fail for unsupported clients. If clients would like to know when subscribers react to the seek (or not), they can poll the operation. The seek operation will succeed and complete once subscribers are ready to receive messages from the seek cursors for all partitions of the topic. This means that the seek operation will not complete until all subscribers come online. If the previous seek operation has not yet completed, it will be aborted and the new invocation of seek will supersede it.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/subscriptions/{subscriptionsId}:seek",
        "httpMethod": "POST",
        "method": "seek",
        "resourceType": "subscriptions",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.topics.create": {
        "description": "Creates a new topic.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/topics",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "topics",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.topics.delete": {
        "description": "Deletes the specified topic.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/topics/{topicsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "topics",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.topics.get": {
        "description": "Returns the topic configuration.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/topics/{topicsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "topics",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.topics.getPartitions": {
        "description": "Returns the partition information for the requested topic.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/topics/{topicsId}/partitions",
        "httpMethod": "GET",
        "method": "getPartitions",
        "resourceType": "topics",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.topics.list": {
        "description": "Returns the list of topics for the given project.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/topics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "topics",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.topics.patch": {
        "description": "Updates properties of the specified topic.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/topics/{topicsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "topics",
        "resourceTypePath": "//admin/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.admin.projects.locations.topics.subscriptions.list": {
        "description": "Lists the subscriptions attached to the specified topic.",
        "flatPath": "v1/admin/projects/{projectsId}/locations/{locationsId}/topics/{topicsId}/subscriptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subscriptions",
        "resourceTypePath": "//admin/projects/locations/topics",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.cursor.projects.locations.subscriptions.commitCursor": {
        "description": "Updates the committed cursor.",
        "flatPath": "v1/cursor/projects/{projectsId}/locations/{locationsId}/subscriptions/{subscriptionsId}:commitCursor",
        "httpMethod": "POST",
        "method": "commitCursor",
        "resourceType": "subscriptions",
        "resourceTypePath": "//cursor/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.cursor.projects.locations.subscriptions.cursors.list": {
        "description": "Returns all committed cursor information for a subscription.",
        "flatPath": "v1/cursor/projects/{projectsId}/locations/{locationsId}/subscriptions/{subscriptionsId}/cursors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "cursors",
        "resourceTypePath": "//cursor/projects/locations/subscriptions",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.topicStats.projects.locations.topics.computeHeadCursor": {
        "description": "Compute the head cursor for the partition. The head cursor's offset is guaranteed to be less than or equal to all messages which have not yet been acknowledged as published, and greater than the offset of any message whose publish has already been acknowledged. It is zero if there have never been messages in the partition.",
        "flatPath": "v1/topicStats/projects/{projectsId}/locations/{locationsId}/topics/{topicsId}:computeHeadCursor",
        "httpMethod": "POST",
        "method": "computeHeadCursor",
        "resourceType": "topics",
        "resourceTypePath": "//topicStats/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.topicStats.projects.locations.topics.computeMessageStats": {
        "description": "Compute statistics about a range of messages in a given topic and partition.",
        "flatPath": "v1/topicStats/projects/{projectsId}/locations/{locationsId}/topics/{topicsId}:computeMessageStats",
        "httpMethod": "POST",
        "method": "computeMessageStats",
        "resourceType": "topics",
        "resourceTypePath": "//topicStats/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "pubsublite.topicStats.projects.locations.topics.computeTimeCursor": {
        "description": "Compute the corresponding cursor for a publish or event time in a topic partition.",
        "flatPath": "v1/topicStats/projects/{projectsId}/locations/{locationsId}/topics/{topicsId}:computeTimeCursor",
        "httpMethod": "POST",
        "method": "computeTimeCursor",
        "resourceType": "topics",
        "resourceTypePath": "//topicStats/projects/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Pub/Sub Lite API"
  },
  "realtimebidding": {
    "description": "Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.",
    "methods": {
      "realtimebidding.bidders.biddingFunctions.activate": {
        "description": "Activates an existing bidding function. An activated function is available for invocation for the server-side TURTLEDOVE simulations.",
        "flatPath": "v1alpha/bidders/{biddersId}/biddingFunctions/{biddingFunctionsId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "biddingFunctions",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1alpha"
        ]
      },
      "realtimebidding.bidders.biddingFunctions.archive": {
        "description": "Archives an existing bidding function. An archived function will not be available for function invocation for the server-side TURTLEDOVE simulations unless it is activated.",
        "flatPath": "v1alpha/bidders/{biddersId}/biddingFunctions/{biddingFunctionsId}:archive",
        "httpMethod": "POST",
        "method": "archive",
        "resourceType": "biddingFunctions",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1alpha"
        ]
      },
      "realtimebidding.bidders.biddingFunctions.create": {
        "description": "Creates a new bidding function.",
        "flatPath": "v1alpha/bidders/{biddersId}/biddingFunctions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "biddingFunctions",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1alpha"
        ]
      },
      "realtimebidding.bidders.biddingFunctions.list": {
        "description": "Lists the bidding functions that a bidder currently has registered.",
        "flatPath": "v1alpha/bidders/{biddersId}/biddingFunctions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "biddingFunctions",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1alpha"
        ]
      },
      "realtimebidding.bidders.creatives.list": {
        "description": "Lists creatives.",
        "flatPath": "v1/bidders/{biddersId}/creatives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creatives",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.creatives.watch": {
        "description": "Watches all creatives pertaining to a bidder. It is sufficient to invoke this endpoint once per bidder. A Pub/Sub topic will be created and notifications will be pushed to the topic when any of the bidder's creatives change status. All of the bidder's service accounts will have access to read from the topic. Subsequent invocations of this method will return the existing Pub/Sub configuration.",
        "flatPath": "v1/bidders/{biddersId}/creatives:watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "creatives",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.endpoints.get": {
        "description": "Gets a bidder endpoint by its name.",
        "flatPath": "v1/bidders/{biddersId}/endpoints/{endpointsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "endpoints",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.endpoints.list": {
        "description": "Lists all the bidder's endpoints.",
        "flatPath": "v1/bidders/{biddersId}/endpoints",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "endpoints",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.endpoints.patch": {
        "description": "Updates a bidder's endpoint.",
        "flatPath": "v1/bidders/{biddersId}/endpoints/{endpointsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "endpoints",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.get": {
        "description": "Gets a bidder account by its name.",
        "flatPath": "v1/bidders/{biddersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "bidders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.list": {
        "description": "Lists all the bidder accounts that belong to the caller.",
        "flatPath": "v1/bidders",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bidders",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.activate": {
        "description": "Activates a pretargeting configuration.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}:activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.addTargetedApps": {
        "description": "Adds targeted apps to the pretargeting configuration.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}:addTargetedApps",
        "httpMethod": "POST",
        "method": "addTargetedApps",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.addTargetedPublishers": {
        "description": "Adds targeted publishers to the pretargeting config.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}:addTargetedPublishers",
        "httpMethod": "POST",
        "method": "addTargetedPublishers",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.addTargetedSites": {
        "description": "Adds targeted sites to the pretargeting configuration.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}:addTargetedSites",
        "httpMethod": "POST",
        "method": "addTargetedSites",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.create": {
        "description": "Creates a pretargeting configuration. A pretargeting configuration's state (PretargetingConfig.state) is active upon creation, and it will start to affect traffic shortly after. A bidder may create a maximum of 10 pretargeting configurations. Attempts to exceed this maximum results in a 400 bad request error.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.delete": {
        "description": "Deletes a pretargeting configuration.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.get": {
        "description": "Gets a pretargeting configuration.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.list": {
        "description": "Lists all pretargeting configurations for a single bidder.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.patch": {
        "description": "Updates a pretargeting configuration.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.removeTargetedApps": {
        "description": "Removes targeted apps from the pretargeting configuration.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}:removeTargetedApps",
        "httpMethod": "POST",
        "method": "removeTargetedApps",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.removeTargetedPublishers": {
        "description": "Removes targeted publishers from the pretargeting config.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}:removeTargetedPublishers",
        "httpMethod": "POST",
        "method": "removeTargetedPublishers",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.removeTargetedSites": {
        "description": "Removes targeted sites from the pretargeting configuration.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}:removeTargetedSites",
        "httpMethod": "POST",
        "method": "removeTargetedSites",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.bidders.pretargetingConfigs.suspend": {
        "description": "Suspends a pretargeting configuration.",
        "flatPath": "v1/bidders/{biddersId}/pretargetingConfigs/{pretargetingConfigsId}:suspend",
        "httpMethod": "POST",
        "method": "suspend",
        "resourceType": "pretargetingConfigs",
        "resourceTypePath": "//bidders",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.creatives.create": {
        "description": "Creates a creative.",
        "flatPath": "v1/buyers/{buyersId}/creatives",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "creatives",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.creatives.get": {
        "description": "Gets a creative.",
        "flatPath": "v1/buyers/{buyersId}/creatives/{creativesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "creatives",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.creatives.list": {
        "description": "Lists creatives.",
        "flatPath": "v1/buyers/{buyersId}/creatives",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "creatives",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.creatives.patch": {
        "description": "Updates a creative.",
        "flatPath": "v1/buyers/{buyersId}/creatives/{creativesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "creatives",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.get": {
        "description": "Gets a buyer account by its name.",
        "flatPath": "v1/buyers/{buyersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buyers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.getRemarketingTag": {
        "description": "Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript code that can be placed on a web page. When a user visits a page containing a remarketing tag, Google adds the user to a user list.",
        "flatPath": "v1/buyers/{buyersId}:getRemarketingTag",
        "httpMethod": "GET",
        "method": "getRemarketingTag",
        "resourceType": "buyers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.list": {
        "description": "Lists all buyer account information the calling buyer user or service account is permissioned to manage.",
        "flatPath": "v1/buyers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "buyers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.userLists.close": {
        "description": "Change the status of a user list to CLOSED. This prevents new users from being added to the user list.",
        "flatPath": "v1/buyers/{buyersId}/userLists/{userListsId}:close",
        "httpMethod": "POST",
        "method": "close",
        "resourceType": "userLists",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.userLists.create": {
        "description": "Create a new user list.",
        "flatPath": "v1/buyers/{buyersId}/userLists",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "userLists",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.userLists.get": {
        "description": "Gets a user list by its name.",
        "flatPath": "v1/buyers/{buyersId}/userLists/{userListsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "userLists",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.userLists.getRemarketingTag": {
        "description": "Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript code that can be placed on a web page. When a user visits a page containing a remarketing tag, Google adds the user to a user list.",
        "flatPath": "v1/buyers/{buyersId}/userLists/{userListsId}:getRemarketingTag",
        "httpMethod": "GET",
        "method": "getRemarketingTag",
        "resourceType": "userLists",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.userLists.list": {
        "description": "Lists the user lists visible to the current user.",
        "flatPath": "v1/buyers/{buyersId}/userLists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userLists",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.userLists.open": {
        "description": "Change the status of a user list to OPEN. This allows new users to be added to the user list.",
        "flatPath": "v1/buyers/{buyersId}/userLists/{userListsId}:open",
        "httpMethod": "POST",
        "method": "open",
        "resourceType": "userLists",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      },
      "realtimebidding.buyers.userLists.update": {
        "description": "Update the given user list. Only user lists with URLRestrictions can be updated.",
        "flatPath": "v1/buyers/{buyersId}/userLists/{userListsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "userLists",
        "resourceTypePath": "//buyers",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Real-time Bidding API"
  },
  "recaptchaenterprise": {
    "description": "",
    "methods": {
      "recaptchaenterprise.projects.assessments.annotate": {
        "description": "Annotates a previously created Assessment to provide additional information on whether the event turned out to be authentic or fraudulent.",
        "flatPath": "v1/projects/{projectsId}/assessments/{assessmentsId}:annotate",
        "httpMethod": "POST",
        "method": "annotate",
        "resourceType": "assessments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.assessments.create": {
        "description": "Creates an Assessment of the likelihood an event is legitimate.",
        "flatPath": "v1/projects/{projectsId}/assessments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "assessments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.keys.create": {
        "description": "Creates a new reCAPTCHA Enterprise key.",
        "flatPath": "v1/projects/{projectsId}/keys",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "keys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.keys.delete": {
        "description": "Deletes the specified key.",
        "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "keys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.keys.get": {
        "description": "Returns the specified key.",
        "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "keys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.keys.getMetrics": {
        "description": "Get some aggregated metrics for a Key. This data can be used to build dashboards.",
        "flatPath": "v1/projects/{projectsId}/keys/{keysId}/metrics",
        "httpMethod": "GET",
        "method": "getMetrics",
        "resourceType": "keys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.keys.list": {
        "description": "Returns the list of all keys that belong to a project.",
        "flatPath": "v1/projects/{projectsId}/keys",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "keys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.keys.migrate": {
        "description": "Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise. Once a key is migrated, it can be used from either product. SiteVerify requests are billed as CreateAssessment calls. You must be authenticated as one of the current owners of the reCAPTCHA Site Key, and your user must have the reCAPTCHA Enterprise Admin IAM role in the destination project.",
        "flatPath": "v1/projects/{projectsId}/keys/{keysId}:migrate",
        "httpMethod": "POST",
        "method": "migrate",
        "resourceType": "keys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.keys.patch": {
        "description": "Updates the specified key.",
        "flatPath": "v1/projects/{projectsId}/keys/{keysId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "keys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.relatedaccountgroupmemberships.search": {
        "description": "Search group memberships related to a given account.",
        "flatPath": "v1/projects/{projectsId}/relatedaccountgroupmemberships:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "relatedaccountgroupmemberships",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.relatedaccountgroups.list": {
        "description": "List groups of related accounts.",
        "flatPath": "v1/projects/{projectsId}/relatedaccountgroups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "relatedaccountgroups",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "recaptchaenterprise.projects.relatedaccountgroups.memberships.list": {
        "description": "Get the memberships in a group of related accounts.",
        "flatPath": "v1/projects/{projectsId}/relatedaccountgroups/{relatedaccountgroupsId}/memberships",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "memberships",
        "resourceTypePath": "//projects/relatedaccountgroups",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "reCAPTCHA Enterprise API"
  },
  "recommendationengine": {
    "description": "Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.",
    "methods": {
      "recommendationengine.projects.locations.catalogs.catalogItems.create": {
        "description": "Creates a catalog item.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/catalogItems",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "catalogItems",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.catalogItems.delete": {
        "description": "Deletes a catalog item.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/catalogItems/{catalogItemsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "catalogItems",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.catalogItems.get": {
        "description": "Gets a specific catalog item.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/catalogItems/{catalogItemsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "catalogItems",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.catalogItems.import": {
        "description": "Bulk import of multiple catalog items. Request processing may be synchronous. No partial updating supported. Non-existing items will be created. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully updated.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/catalogItems:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "catalogItems",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.catalogItems.list": {
        "description": "Gets a list of catalog items.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/catalogItems",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "catalogItems",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.catalogItems.patch": {
        "description": "Updates a catalog item. Partial updating is supported. Non-existing items will be created.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/catalogItems/{catalogItemsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "catalogItems",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.placements.predict": {
        "description": "Makes a recommendation prediction. If using API Key based authentication, the API Key must be registered using the PredictionApiKeyRegistry service. [Learn more](https://cloud.google.com/recommendations-ai/docs/setting-up#register-key).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/placements/{placementsId}:predict",
        "httpMethod": "POST",
        "method": "predict",
        "resourceType": "placements",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.predictionApiKeyRegistrations.create": {
        "description": "Register an API key for use with predict method.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/predictionApiKeyRegistrations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "predictionApiKeyRegistrations",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.predictionApiKeyRegistrations.delete": {
        "description": "Unregister an apiKey from using for predict method.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/predictionApiKeyRegistrations/{predictionApiKeyRegistrationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "predictionApiKeyRegistrations",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.predictionApiKeyRegistrations.list": {
        "description": "List the registered apiKeys for use with predict method.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/predictionApiKeyRegistrations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "predictionApiKeyRegistrations",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.userEvents.collect": {
        "description": "Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Recommendations AI JavaScript pixel. Users should not call this method directly.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/userEvents:collect",
        "httpMethod": "GET",
        "method": "collect",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.userEvents.import": {
        "description": "Bulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/userEvents:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.userEvents.list": {
        "description": "Gets a list of user events within a time range, with potential filtering. The method does not list unjoined user events. Unjoined user event definition: when a user event is ingested from Recommendations AI User Event APIs, the catalog item included in the user event is connected with the current catalog. If a catalog item of the ingested event is not in the current catalog, it could lead to degraded model quality. This is called an unjoined event.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/userEvents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.userEvents.purge": {
        "description": "Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/userEvents:purge",
        "httpMethod": "POST",
        "method": "purge",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.userEvents.rejoin": {
        "description": "Triggers a user event rejoin operation with latest catalog data. Events will not be annotated with detailed catalog information if catalog item is missing at the time the user event is ingested, and these events are stored as unjoined events with a limited usage on training and serving. This API can be used to trigger a 'join' operation on specified events with latest version of catalog items. It can also be used to correct events joined with wrong catalog items.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/userEvents:rejoin",
        "httpMethod": "POST",
        "method": "rejoin",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.eventStores.userEvents.write": {
        "description": "Writes a single user event.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/eventStores/{eventStoresId}/userEvents:write",
        "httpMethod": "POST",
        "method": "write",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs/eventStores",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.list": {
        "description": "Lists all the catalog configurations associated with the project.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "catalogs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v1beta1"
        ]
      },
      "recommendationengine.projects.locations.catalogs.patch": {
        "description": "Updates the catalog configuration.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "catalogs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1beta1",
    "title": "Recommendations AI (Beta)"
  },
  "recommender": {
    "description": "",
    "methods": {
      "recommender.billingAccounts.locations.insightTypes.insights.get": {
        "description": "Gets the requested insight. Requires the recommender.*.get IAM permission for the specified insight type.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights/{insightsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "insights",
        "resourceTypePath": "//billingAccounts/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.billingAccounts.locations.insightTypes.insights.list": {
        "description": "Lists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "insights",
        "resourceTypePath": "//billingAccounts/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.billingAccounts.locations.insightTypes.insights.markAccepted": {
        "description": "Marks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights/{insightsId}:markAccepted",
        "httpMethod": "POST",
        "method": "markAccepted",
        "resourceType": "insights",
        "resourceTypePath": "//billingAccounts/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.billingAccounts.locations.recommenders.recommendations.get": {
        "description": "Gets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "recommendations",
        "resourceTypePath": "//billingAccounts/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.billingAccounts.locations.recommenders.recommendations.list": {
        "description": "Lists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "recommendations",
        "resourceTypePath": "//billingAccounts/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.billingAccounts.locations.recommenders.recommendations.markClaimed": {
        "description": "Marks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markClaimed",
        "httpMethod": "POST",
        "method": "markClaimed",
        "resourceType": "recommendations",
        "resourceTypePath": "//billingAccounts/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.billingAccounts.locations.recommenders.recommendations.markFailed": {
        "description": "Marks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markFailed",
        "httpMethod": "POST",
        "method": "markFailed",
        "resourceType": "recommendations",
        "resourceTypePath": "//billingAccounts/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.billingAccounts.locations.recommenders.recommendations.markSucceeded": {
        "description": "Marks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/billingAccounts/{billingAccountsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markSucceeded",
        "httpMethod": "POST",
        "method": "markSucceeded",
        "resourceType": "recommendations",
        "resourceTypePath": "//billingAccounts/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.folders.locations.insightTypes.insights.get": {
        "description": "Gets the requested insight. Requires the recommender.*.get IAM permission for the specified insight type.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights/{insightsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "insights",
        "resourceTypePath": "//folders/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.folders.locations.insightTypes.insights.list": {
        "description": "Lists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "insights",
        "resourceTypePath": "//folders/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.folders.locations.insightTypes.insights.markAccepted": {
        "description": "Marks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights/{insightsId}:markAccepted",
        "httpMethod": "POST",
        "method": "markAccepted",
        "resourceType": "insights",
        "resourceTypePath": "//folders/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.folders.locations.recommenders.recommendations.get": {
        "description": "Gets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "recommendations",
        "resourceTypePath": "//folders/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.folders.locations.recommenders.recommendations.list": {
        "description": "Lists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "recommendations",
        "resourceTypePath": "//folders/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.folders.locations.recommenders.recommendations.markClaimed": {
        "description": "Marks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markClaimed",
        "httpMethod": "POST",
        "method": "markClaimed",
        "resourceType": "recommendations",
        "resourceTypePath": "//folders/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.folders.locations.recommenders.recommendations.markFailed": {
        "description": "Marks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markFailed",
        "httpMethod": "POST",
        "method": "markFailed",
        "resourceType": "recommendations",
        "resourceTypePath": "//folders/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.folders.locations.recommenders.recommendations.markSucceeded": {
        "description": "Marks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/folders/{foldersId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markSucceeded",
        "httpMethod": "POST",
        "method": "markSucceeded",
        "resourceType": "recommendations",
        "resourceTypePath": "//folders/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.organizations.locations.insightTypes.config": {
        "description": "Updates an InsightTypeConfig change. This will create a new revision of the config.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/insightTypes/{insightTypesId}/config",
        "httpMethod": "POST",
        "method": "config",
        "resourceType": "insightTypes",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "recommender.organizations.locations.insightTypes.getConfig": {
        "description": "Gets the requested InsightTypeConfig. There is only one instance of the config for each InsightType.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/insightTypes/{insightTypesId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "insightTypes",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "recommender.organizations.locations.insightTypes.insights.get": {
        "description": "Gets the requested insight. Requires the recommender.*.get IAM permission for the specified insight type.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights/{insightsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "insights",
        "resourceTypePath": "//organizations/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.organizations.locations.insightTypes.insights.list": {
        "description": "Lists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "insights",
        "resourceTypePath": "//organizations/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.organizations.locations.insightTypes.insights.markAccepted": {
        "description": "Marks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights/{insightsId}:markAccepted",
        "httpMethod": "POST",
        "method": "markAccepted",
        "resourceType": "insights",
        "resourceTypePath": "//organizations/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.organizations.locations.recommenders.config": {
        "description": "Updates a Recommender Config. This will create a new revision of the config.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/recommenders/{recommendersId}/config",
        "httpMethod": "POST",
        "method": "config",
        "resourceType": "recommenders",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "recommender.organizations.locations.recommenders.getConfig": {
        "description": "Gets the requested Recommender Config. There is only one instance of the config for each Recommender.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/recommenders/{recommendersId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "recommenders",
        "resourceTypePath": "//organizations/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "recommender.organizations.locations.recommenders.recommendations.get": {
        "description": "Gets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "recommendations",
        "resourceTypePath": "//organizations/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.organizations.locations.recommenders.recommendations.list": {
        "description": "Lists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "recommendations",
        "resourceTypePath": "//organizations/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.organizations.locations.recommenders.recommendations.markClaimed": {
        "description": "Marks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markClaimed",
        "httpMethod": "POST",
        "method": "markClaimed",
        "resourceType": "recommendations",
        "resourceTypePath": "//organizations/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.organizations.locations.recommenders.recommendations.markFailed": {
        "description": "Marks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markFailed",
        "httpMethod": "POST",
        "method": "markFailed",
        "resourceType": "recommendations",
        "resourceTypePath": "//organizations/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.organizations.locations.recommenders.recommendations.markSucceeded": {
        "description": "Marks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/organizations/{organizationsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markSucceeded",
        "httpMethod": "POST",
        "method": "markSucceeded",
        "resourceType": "recommendations",
        "resourceTypePath": "//organizations/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.projects.locations.insightTypes.getConfig": {
        "description": "Gets the requested InsightTypeConfig. There is only one instance of the config for each InsightType.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/insightTypes/{insightTypesId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "insightTypes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "recommender.projects.locations.insightTypes.insights.get": {
        "description": "Gets the requested insight. Requires the recommender.*.get IAM permission for the specified insight type.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights/{insightsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "insights",
        "resourceTypePath": "//projects/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.projects.locations.insightTypes.insights.list": {
        "description": "Lists insights for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified insight type.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "insights",
        "resourceTypePath": "//projects/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.projects.locations.insightTypes.insights.markAccepted": {
        "description": "Marks the Insight State as Accepted. Users can use this method to indicate to the Recommender API that they have applied some action based on the insight. This stops the insight content from being updated. MarkInsightAccepted can be applied to insights in ACTIVE state. Requires the recommender.*.update IAM permission for the specified insight.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/insightTypes/{insightTypesId}/insights/{insightsId}:markAccepted",
        "httpMethod": "POST",
        "method": "markAccepted",
        "resourceType": "insights",
        "resourceTypePath": "//projects/locations/insightTypes",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.projects.locations.insightTypes.updateConfig": {
        "description": "Updates an InsightTypeConfig change. This will create a new revision of the config.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/insightTypes/{insightTypesId}/config",
        "httpMethod": "PATCH",
        "method": "updateConfig",
        "resourceType": "insightTypes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "recommender.projects.locations.recommenders.getConfig": {
        "description": "Gets the requested Recommender Config. There is only one instance of the config for each Recommender.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/recommenders/{recommendersId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "recommenders",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "recommender.projects.locations.recommenders.recommendations.get": {
        "description": "Gets the requested recommendation. Requires the recommender.*.get IAM permission for the specified recommender.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "recommendations",
        "resourceTypePath": "//projects/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.projects.locations.recommenders.recommendations.list": {
        "description": "Lists recommendations for the specified Cloud Resource. Requires the recommender.*.list IAM permission for the specified recommender.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "recommendations",
        "resourceTypePath": "//projects/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.projects.locations.recommenders.recommendations.markClaimed": {
        "description": "Marks the Recommendation State as Claimed. Users can use this method to indicate to the Recommender API that they are starting to apply the recommendation themselves. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationClaimed can be applied to recommendations in CLAIMED or ACTIVE state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markClaimed",
        "httpMethod": "POST",
        "method": "markClaimed",
        "resourceType": "recommendations",
        "resourceTypePath": "//projects/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.projects.locations.recommenders.recommendations.markFailed": {
        "description": "Marks the Recommendation State as Failed. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation failed. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationFailed can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markFailed",
        "httpMethod": "POST",
        "method": "markFailed",
        "resourceType": "recommendations",
        "resourceTypePath": "//projects/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.projects.locations.recommenders.recommendations.markSucceeded": {
        "description": "Marks the Recommendation State as Succeeded. Users can use this method to indicate to the Recommender API that they have applied the recommendation themselves, and the operation was successful. This stops the recommendation content from being updated. Associated insights are frozen and placed in the ACCEPTED state. MarkRecommendationSucceeded can be applied to recommendations in ACTIVE, CLAIMED, SUCCEEDED, or FAILED state. Requires the recommender.*.update IAM permission for the specified recommender.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/recommenders/{recommendersId}/recommendations/{recommendationsId}:markSucceeded",
        "httpMethod": "POST",
        "method": "markSucceeded",
        "resourceType": "recommendations",
        "resourceTypePath": "//projects/locations/recommenders",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "recommender.projects.locations.recommenders.updateConfig": {
        "description": "Updates a Recommender Config. This will create a new revision of the config.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/recommenders/{recommendersId}/config",
        "httpMethod": "PATCH",
        "method": "updateConfig",
        "resourceType": "recommenders",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Recommender API"
  },
  "redis": {
    "description": "Creates and manages Redis instances on the Google Cloud Platform.",
    "methods": {
      "redis.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.create": {
        "description": "Creates a Redis instance based on the specified tier and memory size. By default, the instance is accessible from the project's [default network](https://cloud.google.com/vpc/docs/vpc). The creation is executed asynchronously and callers may check the returned operation to track its progress. Once the operation is completed the Redis instance will be fully functional. The completed longrunning.Operation will contain the new instance object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.delete": {
        "description": "Deletes a specific Redis instance. Instance stops serving and data is deleted.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.export": {
        "description": "Export Redis instance data into a Redis RDB format file in Cloud Storage. Redis will continue serving during this operation. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.failover": {
        "description": "Initiates a failover of the primary node to current replica node for a specific STANDARD tier Cloud Memorystore for Redis instance.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:failover",
        "httpMethod": "POST",
        "method": "failover",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.get": {
        "description": "Gets the details of a specific Redis instance.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.getAuthString": {
        "description": "Gets the AUTH string for a Redis instance. If AUTH is not enabled for the instance the response will be empty. This information is not included in the details returned to GetInstance.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}/authString",
        "httpMethod": "GET",
        "method": "getAuthString",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.import": {
        "description": "Import a Redis RDB snapshot file from Cloud Storage into a Redis instance. Redis may stop serving during this operation. Instance state will be IMPORTING for entire operation. When complete, the instance will contain only data from the imported file. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.list": {
        "description": "Lists all Redis instances owned by a project in either the specified location (region) or all locations. The location should have the following format: * `projects/{project_id}/locations/{location_id}` If `location_id` is specified as `-` (wildcard), then all regions available to the project are queried, and the results are aggregated.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.patch": {
        "description": "Updates the metadata and configuration of a specific Redis instance. Completed longrunning.Operation will contain the new instance object in the response field. The returned operation is automatically deleted after a few hours, so there is no need to call DeleteOperation.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.rescheduleMaintenance": {
        "description": "Reschedule maintenance for a given instance in a given project and location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:rescheduleMaintenance",
        "httpMethod": "POST",
        "method": "rescheduleMaintenance",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.instances.upgrade": {
        "description": "Upgrades Redis instance to the newer Redis version specified in the request.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:upgrade",
        "httpMethod": "POST",
        "method": "upgrade",
        "resourceType": "instances",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "redis.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Cloud Memorystore for Redis API"
  },
  "reseller": {
    "description": "Perform common functions that are available on the Channel Services console at scale, like placing orders and viewing customer information",
    "methods": {
      "reseller.customers.get": {
        "description": "Gets a customer account. Use this operation to see a customer account already in your reseller management, or to see the minimal account information for an existing customer that you do not manage. For more information about the API response for existing customers, see [retrieving a customer account](/admin-sdk/reseller/v1/how-tos/manage_customers#get_customer).",
        "flatPath": "apps/reseller/v1/customers/{customerId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.customers.insert": {
        "description": "Orders a new customer's account. Before ordering a new customer account, establish whether the customer account already exists using the [`customers.get`](/admin-sdk/reseller/v1/reference/customers/get) If the customer account exists as a direct Google account or as a resold customer account from another reseller, use the `customerAuthToken\\` as described in [order a resold account for an existing customer](/admin-sdk/reseller/v1/how-tos/manage_customers#create_existing_customer). For more information about ordering a new customer account, see [order a new customer account](/admin-sdk/reseller/v1/how-tos/manage_customers#create_customer). After creating a new customer account, you must provision a user as an administrator. The customer's administrator is required to sign in to the Admin console and sign the G Suite via Reseller agreement to activate the account. Resellers are prohibited from signing the G Suite via Reseller agreement on the customer's behalf. For more information, see [order a new customer account](/admin-sdk/reseller/v1/how-tos/manage_customers#tos).",
        "flatPath": "apps/reseller/v1/customers",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.customers.patch": {
        "description": "Updates a customer account's settings. This method supports patch semantics. You cannot update `customerType` via the Reseller API, but a `\"team\"` customer can verify their domain and become `customerType = \"domain\"`. For more information, see [Verify your domain to unlock Essentials features](https://support.google.com/a/answer/9122284).",
        "flatPath": "apps/reseller/v1/customers/{customerId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.customers.update": {
        "description": "Updates a customer account's settings. You cannot update `customerType` via the Reseller API, but a `\"team\"` customer can verify their domain and become `customerType = \"domain\"`. For more information, see [update a customer's settings](/admin-sdk/reseller/v1/how-tos/manage_customers#update_customer).",
        "flatPath": "apps/reseller/v1/customers/{customerId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.resellernotify.getwatchdetails": {
        "description": "Returns all the details of the watch corresponding to the reseller.",
        "flatPath": "apps/reseller/v1/resellernotify/getwatchdetails",
        "httpMethod": "GET",
        "method": "getwatchdetails",
        "resourceType": "resellernotify",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.resellernotify.register": {
        "description": "Registers a Reseller for receiving notifications.",
        "flatPath": "apps/reseller/v1/resellernotify/register",
        "httpMethod": "POST",
        "method": "register",
        "resourceType": "resellernotify",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.resellernotify.unregister": {
        "description": "Unregisters a Reseller for receiving notifications.",
        "flatPath": "apps/reseller/v1/resellernotify/unregister",
        "httpMethod": "POST",
        "method": "unregister",
        "resourceType": "resellernotify",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.activate": {
        "description": "Activates a subscription previously suspended by the reseller. If you did not suspend the customer subscription and it is suspended for any other reason, such as for abuse or a pending ToS acceptance, this call will not reactivate the customer subscription.",
        "flatPath": "apps/reseller/v1/customers/{customerId}/subscriptions/{subscriptionId}/activate",
        "httpMethod": "POST",
        "method": "activate",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.changePlan": {
        "description": "Updates a subscription plan. Use this method to update a plan for a 30-day trial or a flexible plan subscription to an annual commitment plan with monthly or yearly payments. How a plan is updated differs depending on the plan and the products. For more information, see the description in [manage subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#update_subscription_plan).",
        "flatPath": "apps/reseller/v1/customers/{customerId}/subscriptions/{subscriptionId}/changePlan",
        "httpMethod": "POST",
        "method": "changePlan",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.changeRenewalSettings": {
        "description": "Updates a user license's renewal settings. This is applicable for accounts with annual commitment plans only. For more information, see the description in [manage subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#update_renewal).",
        "flatPath": "apps/reseller/v1/customers/{customerId}/subscriptions/{subscriptionId}/changeRenewalSettings",
        "httpMethod": "POST",
        "method": "changeRenewalSettings",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.changeSeats": {
        "description": "Updates a subscription's user license settings. For more information about updating an annual commitment plan or a flexible plan subscription\u2019s licenses, see [Manage Subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#update_subscription_seat).",
        "flatPath": "apps/reseller/v1/customers/{customerId}/subscriptions/{subscriptionId}/changeSeats",
        "httpMethod": "POST",
        "method": "changeSeats",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.delete": {
        "description": "Cancels, suspends, or transfers a subscription to direct.",
        "flatPath": "apps/reseller/v1/customers/{customerId}/subscriptions/{subscriptionId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.get": {
        "description": "Gets a specific subscription. The `subscriptionId` can be found using the [Retrieve all reseller subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#get_all_subscriptions) method. For more information about retrieving a specific subscription, see the information descrived in [manage subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#get_subscription).",
        "flatPath": "apps/reseller/v1/customers/{customerId}/subscriptions/{subscriptionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.insert": {
        "description": "Creates or transfer a subscription. Create a subscription for a customer's account that you ordered using the [Order a new customer account](/admin-sdk/reseller/v1/reference/customers/insert.html) method. For more information about creating a subscription for different payment plans, see [manage subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#create_subscription).\\ If you did not order the customer's account using the customer insert method, use the customer's `customerAuthToken` when creating a subscription for that customer. If transferring a G Suite subscription with an associated Google Drive or Google Vault subscription, use the [batch operation](/admin-sdk/reseller/v1/how-tos/batch.html) to transfer all of these subscriptions. For more information, see how to [transfer subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#transfer_a_subscription).",
        "flatPath": "apps/reseller/v1/customers/{customerId}/subscriptions",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.list": {
        "description": "Lists of subscriptions managed by the reseller. The list can be all subscriptions, all of a customer's subscriptions, or all of a customer's transferable subscriptions. Optionally, this method can filter the response by a `customerNamePrefix`. For more information, see [manage subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions).",
        "flatPath": "apps/reseller/v1/subscriptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.startPaidService": {
        "description": "Immediately move a 30-day free trial subscription to a paid service subscription. This method is only applicable if a payment plan has already been set up for the 30-day trial subscription. For more information, see [manage subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#paid_service).",
        "flatPath": "apps/reseller/v1/customers/{customerId}/subscriptions/{subscriptionId}/startPaidService",
        "httpMethod": "POST",
        "method": "startPaidService",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "reseller.subscriptions.suspend": {
        "description": "Suspends an active subscription. You can use this method to suspend a paid subscription that is currently in the `ACTIVE` state. * For `FLEXIBLE` subscriptions, billing is paused. * For `ANNUAL_MONTHLY_PAY` or `ANNUAL_YEARLY_PAY` subscriptions: * Suspending the subscription does not change the renewal date that was originally committed to. * A suspended subscription does not renew. If you activate the subscription after the original renewal date, a new annual subscription will be created, starting on the day of activation. We strongly encourage you to suspend subscriptions only for short periods of time as suspensions over 60 days may result in the subscription being cancelled.",
        "flatPath": "apps/reseller/v1/customers/{customerId}/subscriptions/{subscriptionId}/suspend",
        "httpMethod": "POST",
        "method": "suspend",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Workspace Reseller API"
  },
  "resourcesettings": {
    "description": "The Resource Settings API allows users to control and modify the behavior of their GCP resources (e.g., VM, firewall, Project, etc.) across the Cloud Resource Hierarchy.",
    "methods": {
      "resourcesettings.folders.settings.get": {
        "description": "Returns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist.",
        "flatPath": "v1/folders/{foldersId}/settings/{settingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "settings",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "resourcesettings.folders.settings.list": {
        "description": "Lists all the settings that are available on the Cloud resource `parent`.",
        "flatPath": "v1/folders/{foldersId}/settings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "settings",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "resourcesettings.folders.settings.patch": {
        "description": "Updates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.",
        "flatPath": "v1/folders/{foldersId}/settings/{settingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "settings",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "resourcesettings.organizations.settings.get": {
        "description": "Returns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist.",
        "flatPath": "v1/organizations/{organizationsId}/settings/{settingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "settings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "resourcesettings.organizations.settings.list": {
        "description": "Lists all the settings that are available on the Cloud resource `parent`.",
        "flatPath": "v1/organizations/{organizationsId}/settings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "settings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "resourcesettings.organizations.settings.patch": {
        "description": "Updates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.",
        "flatPath": "v1/organizations/{organizationsId}/settings/{settingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "settings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "resourcesettings.projects.settings.get": {
        "description": "Returns a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist.",
        "flatPath": "v1/projects/{projectsId}/settings/{settingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "settings",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "resourcesettings.projects.settings.list": {
        "description": "Lists all the settings that are available on the Cloud resource `parent`.",
        "flatPath": "v1/projects/{projectsId}/settings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "settings",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "resourcesettings.projects.settings.patch": {
        "description": "Updates a specified setting. Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the setting does not exist. Returns a `google.rpc.Status` with `google.rpc.Code.FAILED_PRECONDITION` if the setting is flagged as read only. Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag supplied in the request does not match the persisted etag of the setting value. On success, the response will contain only `name`, `local_value` and `etag`. The `metadata` and `effective_value` cannot be updated through this API. Note: the supplied setting will perform a full overwrite of the `local_value` field.",
        "flatPath": "v1/projects/{projectsId}/settings/{settingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "settings",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Resource Settings API"
  },
  "retail": {
    "description": "Cloud Retail service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.",
    "methods": {
      "retail.projects.locations.catalogs.branches.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.addFulfillmentPlaces": {
        "description": "Incrementally adds place IDs to Product.fulfillment_info.place_ids. This process is asynchronous and does not require the Product to exist before updating fulfillment information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, the added place IDs are not immediately manifested in the Product queried by GetProduct or ListProducts. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products/{productsId}:addFulfillmentPlaces",
        "httpMethod": "POST",
        "method": "addFulfillmentPlaces",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.addLocalInventories": {
        "description": "Updates local inventory information for a Product at a list of places, while respecting the last update timestamps of each inventory field. This process is asynchronous and does not require the Product to exist before updating inventory information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, updates are not immediately manifested in the Product queried by GetProduct or ListProducts. Store inventory information can only be modified using this method. CreateProduct and UpdateProduct has no effect on local inventories. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact Cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products/{productsId}:addLocalInventories",
        "httpMethod": "POST",
        "method": "addLocalInventories",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.create": {
        "description": "Creates a Product.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.delete": {
        "description": "Deletes a Product.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products/{productsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.get": {
        "description": "Gets a Product.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products/{productsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.import": {
        "description": "Bulk import of multiple Products. Request processing may be synchronous. No partial updating is supported. Non-existing items are created. Note that it is possible for a subset of the Products to be successfully updated.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.list": {
        "description": "Gets a list of Products.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.patch": {
        "description": "Updates a Product.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products/{productsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.removeFulfillmentPlaces": {
        "description": "Incrementally removes place IDs from a Product.fulfillment_info.place_ids. This process is asynchronous and does not require the Product to exist before updating fulfillment information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, the removed place IDs are not immediately manifested in the Product queried by GetProduct or ListProducts. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products/{productsId}:removeFulfillmentPlaces",
        "httpMethod": "POST",
        "method": "removeFulfillmentPlaces",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.removeLocalInventories": {
        "description": "Remove local inventory information for a Product at a list of places at a removal timestamp. This process is asynchronous. If the request is valid, the removal will be enqueued and processed downstream. As a consequence, when a response is returned, removals are not immediately manifested in the Product queried by GetProduct or ListProducts. Store inventory information can only be removed using this method. CreateProduct and UpdateProduct has no effect on local inventories. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact Cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products/{productsId}:removeLocalInventories",
        "httpMethod": "POST",
        "method": "removeLocalInventories",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha"
        ]
      },
      "retail.projects.locations.catalogs.branches.products.setInventory": {
        "description": "Updates inventory information for a Product while respecting the last update timestamps of each inventory field. This process is asynchronous and does not require the Product to exist before updating fulfillment information. If the request is valid, the update will be enqueued and processed downstream. As a consequence, when a response is returned, updates are not immediately manifested in the Product queried by GetProduct or ListProducts. When inventory is updated with CreateProduct and UpdateProduct, the specified inventory field value(s) will overwrite any existing value(s) while ignoring the last update time for this field. Furthermore, the last update time for the specified inventory fields will be overwritten to the time of the CreateProduct or UpdateProduct request. If no inventory fields are set in CreateProductRequest.product, then any pre-existing inventory information for this product will be used. If no inventory fields are set in UpdateProductRequest.set_mask, then any existing inventory information will be preserved. Pre-existing inventory information can only be updated with SetInventory, AddFulfillmentPlaces, and RemoveFulfillmentPlaces. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/branches/{branchesId}/products/{productsId}:setInventory",
        "httpMethod": "POST",
        "method": "setInventory",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/catalogs/branches",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.completeQuery": {
        "description": "Completes the specified prefix with keyword suggestions. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}:completeQuery",
        "httpMethod": "GET",
        "method": "completeQuery",
        "resourceType": "catalogs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.completionData.import": {
        "description": "Bulk import of processed completion dataset. Request processing may be synchronous. Partial updating is not supported. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/completionData:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "completionData",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.getDefaultBranch": {
        "description": "Get which branch is currently default branch set by CatalogService.SetDefaultBranch method under a specified parent catalog. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}:getDefaultBranch",
        "httpMethod": "GET",
        "method": "getDefaultBranch",
        "resourceType": "catalogs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.list": {
        "description": "Lists all the Catalogs associated with the project.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "catalogs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.patch": {
        "description": "Updates the Catalogs.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "catalogs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.placements.predict": {
        "description": "Makes a recommendation prediction.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/placements/{placementsId}:predict",
        "httpMethod": "POST",
        "method": "predict",
        "resourceType": "placements",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.placements.search": {
        "description": "Performs a search. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/placements/{placementsId}:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "placements",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.setDefaultBranch": {
        "description": "Set a specified branch id as default branch. API methods such as SearchService.Search, ProductService.GetProduct, ProductService.ListProducts will treat requests using \"default_branch\" to the actual branch id set as default. For example, if `projects/*/locations/*/catalogs/*/branches/1` is set as default, setting SearchRequest.branch to `projects/*/locations/*/catalogs/*/branches/default_branch` is equivalent to setting SearchRequest.branch to `projects/*/locations/*/catalogs/*/branches/1`. Using multiple branches can be useful when developers would like to have a staging branch to test and verify for future usage. When it becomes ready, developers switch on the staging branch using this API while keeping using `projects/*/locations/*/catalogs/*/branches/default_branch` as SearchRequest.branch to route the traffic to this staging branch. CAUTION: If you have live predict/search traffic, switching the default branch could potentially cause outages if the ID space of the new branch is very different from the old one. More specifically: * PredictionService will only return product IDs from branch {newBranch}. * SearchService will only return product IDs from branch {newBranch} (if branch is not explicitly set). * UserEventService will only join events with products from branch {newBranch}. This feature is only available for users who have Retail Search enabled. Please submit a form [here](https://cloud.google.com/contact) to contact cloud sales if you are interested in using Retail Search.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}:setDefaultBranch",
        "httpMethod": "POST",
        "method": "setDefaultBranch",
        "resourceType": "catalogs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.userEvents.collect": {
        "description": "Writes a single user event from the browser. This uses a GET request to due to browser restriction of POST-ing to a 3rd party domain. This method is used only by the Retail API JavaScript pixel and Google Tag Manager. Users should not call this method directly.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/userEvents:collect",
        "httpMethod": "GET",
        "method": "collect",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.userEvents.import": {
        "description": "Bulk import of User events. Request processing might be synchronous. Events that already exist are skipped. Use this method for backfilling historical user events. Operation.response is of type ImportResponse. Note that it is possible for a subset of the items to be successfully inserted. Operation.metadata is of type ImportMetadata.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/userEvents:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.userEvents.purge": {
        "description": "Deletes permanently all user events specified by the filter provided. Depending on the number of events specified by the filter, this operation could take hours or days to complete. To test a filter, use the list command first.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/userEvents:purge",
        "httpMethod": "POST",
        "method": "purge",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.userEvents.rejoin": {
        "description": "Triggers a user event rejoin operation with latest product catalog. Events will not be annotated with detailed product information if product is missing from the catalog at the time the user event is ingested, and these events are stored as unjoined events with a limited usage on training and serving. This API can be used to trigger a 'join' operation on specified events with latest version of product catalog. It can also be used to correct events joined with wrong product catalog.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/userEvents:rejoin",
        "httpMethod": "POST",
        "method": "rejoin",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.catalogs.userEvents.write": {
        "description": "Writes a single user event.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/userEvents:write",
        "httpMethod": "POST",
        "method": "write",
        "resourceType": "userEvents",
        "resourceTypePath": "//projects/locations/catalogs",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      },
      "retail.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2alpha/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha",
          "v2beta",
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Retail API"
  },
  "run": {
    "description": "Deploy and manage user provided container images that scale automatically based on incoming requests. The Cloud Run Admin API follows the Knative Serving API specification.",
    "methods": {
      "run.namespaces.authorizeddomains.list": {
        "description": "List authorized domains.",
        "flatPath": "apis/domains.cloudrun.com/v1/namespaces/{namespacesId}/authorizeddomains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "authorizeddomains",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.configurations.get": {
        "description": "Get information about a configuration.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/configurations/{configurationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "configurations",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.configurations.list": {
        "description": "List configurations.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/configurations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "configurations",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.domainmappings.create": {
        "description": "Create a new domain mapping.",
        "flatPath": "apis/domains.cloudrun.com/v1/namespaces/{namespacesId}/domainmappings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "domainmappings",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.domainmappings.delete": {
        "description": "Delete a domain mapping.",
        "flatPath": "apis/domains.cloudrun.com/v1/namespaces/{namespacesId}/domainmappings/{domainmappingsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "domainmappings",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.domainmappings.get": {
        "description": "Get information about a domain mapping.",
        "flatPath": "apis/domains.cloudrun.com/v1/namespaces/{namespacesId}/domainmappings/{domainmappingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domainmappings",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.domainmappings.list": {
        "description": "List domain mappings.",
        "flatPath": "apis/domains.cloudrun.com/v1/namespaces/{namespacesId}/domainmappings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "domainmappings",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.jobs.create": {
        "description": "Create a job.",
        "flatPath": "apis/run.googleapis.com/v1alpha1/namespaces/{namespacesId}/jobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobs",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1alpha1"
        ]
      },
      "run.namespaces.jobs.delete": {
        "description": "Delete a job.",
        "flatPath": "apis/run.googleapis.com/v1alpha1/namespaces/{namespacesId}/jobs/{jobsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobs",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1alpha1"
        ]
      },
      "run.namespaces.jobs.get": {
        "description": "Get information about a job.",
        "flatPath": "apis/run.googleapis.com/v1alpha1/namespaces/{namespacesId}/jobs/{jobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1alpha1"
        ]
      },
      "run.namespaces.jobs.list": {
        "description": "List jobs.",
        "flatPath": "apis/run.googleapis.com/v1alpha1/namespaces/{namespacesId}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1alpha1"
        ]
      },
      "run.namespaces.revisions.delete": {
        "description": "Delete a revision.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/revisions/{revisionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "revisions",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.revisions.get": {
        "description": "Get information about a revision.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/revisions/{revisionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "revisions",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.revisions.list": {
        "description": "List revisions.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/revisions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "revisions",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.routes.get": {
        "description": "Get information about a route.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/routes/{routesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "routes",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.routes.list": {
        "description": "List routes.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/routes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "routes",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.services.create": {
        "description": "Create a service.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/services",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "services",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.services.delete": {
        "description": "Delete a service. This will cause the Service to stop serving traffic and will delete the child entities like Routes, Configurations and Revisions.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/services/{servicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "services",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.services.get": {
        "description": "Get information about a service.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/services/{servicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "services",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.services.list": {
        "description": "List services.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.namespaces.services.replaceService": {
        "description": "Replace a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.",
        "flatPath": "apis/serving.knative.dev/v1/namespaces/{namespacesId}/services/{servicesId}",
        "httpMethod": "PUT",
        "method": "replaceService",
        "resourceType": "services",
        "resourceTypePath": "//namespaces",
        "versions": [
          "v1"
        ]
      },
      "run.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "run.projects.authorizeddomains.list": {
        "description": "List authorized domains.",
        "flatPath": "v1/projects/{projectsId}/authorizeddomains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "authorizeddomains",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.authorizeddomains.list": {
        "description": "List authorized domains.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/authorizeddomains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "authorizeddomains",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.configurations.get": {
        "description": "Get information about a configuration.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/configurations/{configurationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "configurations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.configurations.list": {
        "description": "List configurations.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/configurations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "configurations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.domainmappings.create": {
        "description": "Create a new domain mapping.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/domainmappings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "domainmappings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.domainmappings.delete": {
        "description": "Delete a domain mapping.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/domainmappings/{domainmappingsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "domainmappings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.domainmappings.get": {
        "description": "Get information about a domain mapping.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/domainmappings/{domainmappingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "domainmappings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.domainmappings.list": {
        "description": "List domain mappings.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/domainmappings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "domainmappings",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.revisions.delete": {
        "description": "Delete a revision.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/revisions/{revisionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "revisions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.revisions.get": {
        "description": "Get information about a revision.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/revisions/{revisionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "revisions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.revisions.list": {
        "description": "List revisions.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/revisions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "revisions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.routes.get": {
        "description": "Get information about a route.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/routes/{routesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "routes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.routes.list": {
        "description": "List routes.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/routes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "routes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.services.create": {
        "description": "Create a service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/services",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.services.delete": {
        "description": "Delete a service. This will cause the Service to stop serving traffic and will delete the child entities like Routes, Configurations and Revisions.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.services.get": {
        "description": "Get information about a service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.services.getIamPolicy": {
        "description": "Get the IAM Access Control policy currently in effect for the given Cloud Run service. This result does not include any inherited policies.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.services.list": {
        "description": "List services.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.services.replaceService": {
        "description": "Replace a service. Only the spec and metadata labels and annotations are modifiable. After the Update request, Cloud Run will work to make the 'status' match the requested 'spec'. May provide metadata.resourceVersion to enforce update from last read for optimistic concurrency control.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}",
        "httpMethod": "PUT",
        "method": "replaceService",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.services.setIamPolicy": {
        "description": "Sets the IAM Access control policy for the specified Service. Overwrites any existing policy.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "run.projects.locations.services.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified Project. There are no permissions required for making this API call.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/services/{servicesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Run Admin API"
  },
  "runtimeconfig": {
    "description": "The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.",
    "methods": {
      "runtimeconfig.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "runtimeconfig.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "runtimeconfig.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "runtimeconfig.projects.configs.create": {
        "description": "Creates a new RuntimeConfig resource. The configuration name must be unique within project.",
        "flatPath": "v1beta1/projects/{projectsId}/configs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "configs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.delete": {
        "description": "Deletes a RuntimeConfig resource.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "configs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.get": {
        "description": "Gets information about a RuntimeConfig resource.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "configs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "configs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.list": {
        "description": "Lists all the RuntimeConfig resources within project.",
        "flatPath": "v1beta1/projects/{projectsId}/configs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "configs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.operations.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/operations/{operationsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "operations",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "configs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "configs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.update": {
        "description": "Updates a RuntimeConfig resource. The configuration must exist beforehand.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "configs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.variables.create": {
        "description": "Creates a variable within the given configuration. You cannot create a variable with a name that is a prefix of an existing variable name, or a name that has an existing variable name as a prefix. To learn more about creating a variable, read the [Setting and Getting Data](/deployment-manager/runtime-configurator/set-and-get-variables) documentation.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/variables",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "variables",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.variables.delete": {
        "description": "Deletes a variable or multiple variables. If you specify a variable name, then that variable is deleted. If you specify a prefix and `recursive` is true, then all variables with that prefix are deleted. You must set a `recursive` to true if you delete variables by prefix.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/variables/{variablesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "variables",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.variables.get": {
        "description": "Gets information about a single variable.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/variables/{variablesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "variables",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.variables.list": {
        "description": "Lists variables within given a configuration, matching any provided filters. This only lists variable names, not the values, unless `return_values` is true, in which case only variables that user has IAM permission to GetVariable will be returned.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/variables",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "variables",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.variables.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/variables/{variablesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "variables",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.variables.update": {
        "description": "Updates an existing variable with a new value.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/variables/{variablesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "variables",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.variables.watch": {
        "description": "Watches a specific variable and waits for a change in the variable's value. When there is a change, this method returns the new value or times out. If a variable is deleted while being watched, the `variableState` state is set to `DELETED` and the method returns the last known variable `value`. If you set the deadline for watching to a larger value than internal timeout (60 seconds), the current variable value is returned and the `variableState` will be `VARIABLE_STATE_UNSPECIFIED`. To learn more about creating a watcher, read the [Watching a Variable for Changes](/deployment-manager/runtime-configurator/watching-a-variable) documentation.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/variables/{variablesId}:watch",
        "httpMethod": "POST",
        "method": "watch",
        "resourceType": "variables",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.waiters.create": {
        "description": "Creates a Waiter resource. This operation returns a long-running Operation resource which can be polled for completion. However, a waiter with the given name will exist (and can be retrieved) prior to the operation completing. If the operation fails, the failed Waiter resource will still exist and must be deleted prior to subsequent creation attempts.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/waiters",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "waiters",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.waiters.delete": {
        "description": "Deletes the waiter with the specified name.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/waiters/{waitersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "waiters",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.waiters.get": {
        "description": "Gets information about a single waiter.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/waiters/{waitersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "waiters",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.waiters.list": {
        "description": "List waiters within the given configuration.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/waiters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "waiters",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      },
      "runtimeconfig.projects.configs.waiters.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/configs/{configsId}/waiters/{waitersId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "waiters",
        "resourceTypePath": "//projects/configs",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Runtime Configuration API"
  },
  "safebrowsing": {
    "description": "Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes \u2013 meaning \u201cfor sale or revenue-generating purposes\u201d \u2013 please refer to the Web Risk API.",
    "methods": {
      "safebrowsing.encodedFullHashes.get": {
        "description": "",
        "flatPath": "v4/encodedFullHashes/{encodedRequest}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "encodedFullHashes",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "safebrowsing.encodedUpdates.get": {
        "description": "",
        "flatPath": "v4/encodedUpdates/{encodedRequest}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "encodedUpdates",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "safebrowsing.fullHashes.find": {
        "description": "Finds the full hashes that match the requested hash prefixes.",
        "flatPath": "v4/fullHashes:find",
        "httpMethod": "POST",
        "method": "find",
        "resourceType": "fullHashes",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "safebrowsing.threatHits.create": {
        "description": "Reports a Safe Browsing threat list hit to Google. Only projects with TRUSTED_REPORTER visibility can use this method.",
        "flatPath": "v4/threatHits",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "threatHits",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "safebrowsing.threatListUpdates.fetch": {
        "description": "Fetches the most recent threat list updates. A client can request updates for multiple lists at once.",
        "flatPath": "v4/threatListUpdates:fetch",
        "httpMethod": "POST",
        "method": "fetch",
        "resourceType": "threatListUpdates",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "safebrowsing.threatLists.list": {
        "description": "Lists the Safe Browsing threat lists available for download.",
        "flatPath": "v4/threatLists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "threatLists",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "safebrowsing.threatMatches.find": {
        "description": "Finds the threat entries that match the Safe Browsing lists.",
        "flatPath": "v4/threatMatches:find",
        "httpMethod": "POST",
        "method": "find",
        "resourceType": "threatMatches",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      }
    },
    "preferredVersion": "v4",
    "title": "Safe Browsing API"
  },
  "sasportal": {
    "description": "",
    "methods": {
      "sasportal.customers.deployments.create": {
        "description": "Creates a new deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.deployments.delete": {
        "description": "Deletes a deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.deployments.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//customers/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.deployments.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//customers/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.deployments.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//customers/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.deployments.get": {
        "description": "Returns a requested deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.deployments.list": {
        "description": "Lists deployments.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.deployments.move": {
        "description": "Moves a deployment under another node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.deployments.patch": {
        "description": "Updates an existing deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/deployments/{deploymentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deployments",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.devices.delete": {
        "description": "Deletes a device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.devices.get": {
        "description": "Gets details about a device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.devices.move": {
        "description": "Moves a device under another node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.devices.patch": {
        "description": "Updates a device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.devices.signDevice": {
        "description": "Signs a device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}:signDevice",
        "httpMethod": "POST",
        "method": "signDevice",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.devices.updateSigned": {
        "description": "Updates a signed device.",
        "flatPath": "v1alpha1/customers/{customersId}/devices/{devicesId}:updateSigned",
        "httpMethod": "PATCH",
        "method": "updateSigned",
        "resourceType": "devices",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.get": {
        "description": "Returns a requested customer.",
        "flatPath": "v1alpha1/customers/{customersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.list": {
        "description": "Returns a list of requested customers.",
        "flatPath": "v1alpha1/customers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.create": {
        "description": "Creates a new node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.delete": {
        "description": "Deletes a node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.deployments.create": {
        "description": "Creates a new deployment.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/deployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deployments",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.deployments.list": {
        "description": "Lists deployments.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.get": {
        "description": "Returns a requested node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.list": {
        "description": "Lists nodes.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.move": {
        "description": "Moves a node under another node or customer.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.nodes.create": {
        "description": "Creates a new node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/nodes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodes",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.nodes.list": {
        "description": "Lists nodes.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}/nodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodes",
        "resourceTypePath": "//customers/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.nodes.patch": {
        "description": "Updates an existing node.",
        "flatPath": "v1alpha1/customers/{customersId}/nodes/{nodesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "nodes",
        "resourceTypePath": "//customers",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.customers.patch": {
        "description": "Updates an existing customer.",
        "flatPath": "v1alpha1/customers/{customersId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customers",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.deployments.devices.delete": {
        "description": "Deletes a device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.deployments.devices.get": {
        "description": "Gets details about a device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.deployments.devices.move": {
        "description": "Moves a device under another node or customer.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.deployments.devices.patch": {
        "description": "Updates a device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.deployments.devices.signDevice": {
        "description": "Signs a device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}:signDevice",
        "httpMethod": "POST",
        "method": "signDevice",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.deployments.devices.updateSigned": {
        "description": "Updates a signed device.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}/devices/{devicesId}:updateSigned",
        "httpMethod": "PATCH",
        "method": "updateSigned",
        "resourceType": "devices",
        "resourceTypePath": "//deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.deployments.get": {
        "description": "Returns a requested deployment.",
        "flatPath": "v1alpha1/deployments/{deploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deployments",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.installer.generateSecret": {
        "description": "Generates a secret to be used with the ValidateInstaller.",
        "flatPath": "v1alpha1/installer:generateSecret",
        "httpMethod": "POST",
        "method": "generateSecret",
        "resourceType": "installer",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.installer.validate": {
        "description": "Validates the identity of a Certified Professional Installer (CPI).",
        "flatPath": "v1alpha1/installer:validate",
        "httpMethod": "POST",
        "method": "validate",
        "resourceType": "installer",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.deployments.delete": {
        "description": "Deletes a deployment.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.deployments.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.deployments.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.deployments.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/deployments",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.deployments.get": {
        "description": "Returns a requested deployment.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.deployments.list": {
        "description": "Lists deployments.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.deployments.move": {
        "description": "Moves a deployment under another node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.deployments.patch": {
        "description": "Updates an existing deployment.",
        "flatPath": "v1alpha1/nodes/{nodesId}/deployments/{deploymentsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.devices.delete": {
        "description": "Deletes a device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.devices.get": {
        "description": "Gets details about a device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.devices.move": {
        "description": "Moves a device under another node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.devices.patch": {
        "description": "Updates a device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.devices.signDevice": {
        "description": "Signs a device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}:signDevice",
        "httpMethod": "POST",
        "method": "signDevice",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.devices.updateSigned": {
        "description": "Updates a signed device.",
        "flatPath": "v1alpha1/nodes/{nodesId}/devices/{devicesId}:updateSigned",
        "httpMethod": "PATCH",
        "method": "updateSigned",
        "resourceType": "devices",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.get": {
        "description": "Returns a requested node.",
        "flatPath": "v1alpha1/nodes/{nodesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodes",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.create": {
        "description": "Creates a new node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.delete": {
        "description": "Deletes a node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.deployments.create": {
        "description": "Creates a new deployment.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/deployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.deployments.list": {
        "description": "Lists deployments.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.devices.create": {
        "description": "Creates a device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/devices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.devices.createSigned": {
        "description": "Creates a signed device under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/devices:createSigned",
        "httpMethod": "POST",
        "method": "createSigned",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.devices.list": {
        "description": "Lists devices under a node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.get": {
        "description": "Returns a requested node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.list": {
        "description": "Lists nodes.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.move": {
        "description": "Moves a node under another node or customer.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}:move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.nodes.create": {
        "description": "Creates a new node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/nodes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.nodes.list": {
        "description": "Lists nodes.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}/nodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes/nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.nodes.nodes.patch": {
        "description": "Updates an existing node.",
        "flatPath": "v1alpha1/nodes/{nodesId}/nodes/{nodesId1}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "nodes",
        "resourceTypePath": "//nodes",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.policies.get": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1alpha1/policies:get",
        "httpMethod": "POST",
        "method": "get",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.policies.set": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "v1alpha1/policies:set",
        "httpMethod": "POST",
        "method": "set",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      },
      "sasportal.policies.test": {
        "description": "Returns permissions that a caller has on the specified resource.",
        "flatPath": "v1alpha1/policies:test",
        "httpMethod": "POST",
        "method": "test",
        "resourceType": "policies",
        "resourceTypePath": "/",
        "versions": [
          "v1alpha1"
        ]
      }
    },
    "preferredVersion": "v1alpha1",
    "title": "SAS Portal API"
  },
  "script": {
    "description": "Manages and executes Google Apps Script projects.",
    "methods": {
      "script.processes.list": {
        "description": "List information about processes made by or on behalf of a user, such as process type and current status.",
        "flatPath": "v1/processes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "processes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "script.processes.listScriptProcesses": {
        "description": "List information about a script's executed processes, such as process type and current status.",
        "flatPath": "v1/processes:listScriptProcesses",
        "httpMethod": "GET",
        "method": "listScriptProcesses",
        "resourceType": "processes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "script.projects.create": {
        "description": "Creates a new, empty script project with no script files and a base manifest file.",
        "flatPath": "v1/projects",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "script.projects.deployments.create": {
        "description": "Creates a deployment of an Apps Script project.",
        "flatPath": "v1/projects/{scriptId}/deployments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "deployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "script.projects.deployments.delete": {
        "description": "Deletes a deployment of an Apps Script project.",
        "flatPath": "v1/projects/{scriptId}/deployments/{deploymentId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "deployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "script.projects.deployments.get": {
        "description": "Gets a deployment of an Apps Script project.",
        "flatPath": "v1/projects/{scriptId}/deployments/{deploymentId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "deployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "script.projects.deployments.list": {
        "description": "Lists the deployments of an Apps Script project.",
        "flatPath": "v1/projects/{scriptId}/deployments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "deployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "script.projects.deployments.update": {
        "description": "Updates a deployment of an Apps Script project.",
        "flatPath": "v1/projects/{scriptId}/deployments/{deploymentId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "deployments",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "script.projects.get": {
        "description": "Gets a script project's metadata.",
        "flatPath": "v1/projects/{scriptId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "script.projects.getContent": {
        "description": "Gets the content of the script project, including the code source and metadata for each script file.",
        "flatPath": "v1/projects/{scriptId}/content",
        "httpMethod": "GET",
        "method": "getContent",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "script.projects.getMetrics": {
        "description": "Get metrics data for scripts, such as number of executions and active users.",
        "flatPath": "v1/projects/{scriptId}/metrics",
        "httpMethod": "GET",
        "method": "getMetrics",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "script.projects.updateContent": {
        "description": "Updates the content of the specified script project. This content is stored as the HEAD version, and is used when the script is executed as a trigger, in the script editor, in add-on preview mode, or as a web app or Apps Script API in development mode. This clears all the existing files in the project.",
        "flatPath": "v1/projects/{scriptId}/content",
        "httpMethod": "PUT",
        "method": "updateContent",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "script.projects.versions.create": {
        "description": "Creates a new immutable version using the current code, with a unique version number.",
        "flatPath": "v1/projects/{scriptId}/versions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "versions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "script.projects.versions.get": {
        "description": "Gets a version of a script project.",
        "flatPath": "v1/projects/{scriptId}/versions/{versionNumber}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "script.projects.versions.list": {
        "description": "List the versions of a script project.",
        "flatPath": "v1/projects/{scriptId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "script.scripts.run": {
        "description": "Runs a function in an Apps Script project. The script project must be deployed for use with the Apps Script API and the calling application must share the same Cloud Platform project. This method requires authorization with an OAuth 2.0 token that includes at least one of the scopes listed in the [Authorization](#authorization-scopes) section; script projects that do not require authorization cannot be executed through this API. To find the correct scopes to include in the authentication token, open the script project **Overview** page and scroll down to \"Project OAuth Scopes.\" The error `403, PERMISSION_DENIED: The caller does not have permission` indicates that the Cloud Platform project used to authorize the request is not the same as the one used by the script.",
        "flatPath": "v1/scripts/{scriptId}:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "scripts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Apps Script API"
  },
  "searchconsole": {
    "description": "The Search Console API provides access to both Search Console data (verified users only) and to public information on an URL basis (anyone)",
    "methods": {
      "searchconsole.urlTestingTools.mobileFriendlyTest.run": {
        "description": "Runs Mobile-Friendly Test for a given URL.",
        "flatPath": "v1/urlTestingTools/mobileFriendlyTest:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "mobileFriendlyTest",
        "resourceTypePath": "//urlTestingTools",
        "versions": [
          "v1"
        ]
      },
      "webmasters.searchanalytics.query": {
        "description": "Query your data with filters and parameters that you define. Returns zero or more rows grouped by the row keys that you define. You must define a date range of one or more days. When date is one of the group by values, any days without data are omitted from the result list. If you need to know which days have data, issue a broad date range query grouped by date for any metric, and see which day rows are returned.",
        "flatPath": "webmasters/v3/sites/{siteUrl}/searchAnalytics/query",
        "httpMethod": "POST",
        "method": "query",
        "resourceType": "searchanalytics",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webmasters.sitemaps.delete": {
        "description": "Deletes a sitemap from this site.",
        "flatPath": "webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sitemaps",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webmasters.sitemaps.get": {
        "description": "Retrieves information about a specific sitemap.",
        "flatPath": "webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sitemaps",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webmasters.sitemaps.list": {
        "description": " Lists the [sitemaps-entries](/webmaster-tools/v3/sitemaps) submitted for this site, or included in the sitemap index file (if `sitemapIndex` is specified in the request).",
        "flatPath": "webmasters/v3/sites/{siteUrl}/sitemaps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sitemaps",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webmasters.sitemaps.submit": {
        "description": "Submits a sitemap for a site.",
        "flatPath": "webmasters/v3/sites/{siteUrl}/sitemaps/{feedpath}",
        "httpMethod": "PUT",
        "method": "submit",
        "resourceType": "sitemaps",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webmasters.sites.add": {
        "description": " Adds a site to the set of the user's sites in Search Console.",
        "flatPath": "webmasters/v3/sites/{siteUrl}",
        "httpMethod": "PUT",
        "method": "add",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webmasters.sites.delete": {
        "description": " Removes a site from the set of the user's Search Console sites.",
        "flatPath": "webmasters/v3/sites/{siteUrl}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webmasters.sites.get": {
        "description": " Retrieves information about specific site.",
        "flatPath": "webmasters/v3/sites/{siteUrl}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webmasters.sites.list": {
        "description": " Lists the user's Search Console sites.",
        "flatPath": "webmasters/v3/sites",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sites",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Search Console API"
  },
  "secretmanager": {
    "description": "Stores sensitive data such as API keys, passwords, and certificates. Provides convenience while improving security.",
    "methods": {
      "secretmanager.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.addVersion": {
        "description": "Creates a new SecretVersion containing secret data and attaches it to an existing Secret.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}:addVersion",
        "httpMethod": "POST",
        "method": "addVersion",
        "resourceType": "secrets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.create": {
        "description": "Creates a new Secret containing no SecretVersions.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "secrets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.delete": {
        "description": "Deletes a Secret.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "secrets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.get": {
        "description": "Gets metadata for a given Secret.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "secrets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.getIamPolicy": {
        "description": "Gets the access control policy for a secret. Returns empty policy if the secret exists and does not have a policy set.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "secrets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.list": {
        "description": "Lists Secrets.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "secrets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.patch": {
        "description": "Updates metadata of an existing Secret.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "secrets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.setIamPolicy": {
        "description": "Sets the access control policy on the specified secret. Replaces any existing policy. Permissions on SecretVersions are enforced according to the policy set on the associated Secret.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "secrets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.testIamPermissions": {
        "description": "Returns permissions that a caller has for the specified secret. If the secret does not exist, this call returns an empty set of permissions, not a NOT_FOUND error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "secrets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.versions.access": {
        "description": "Accesses a SecretVersion. This call returns the secret data. `projects/*/secrets/*/versions/latest` is an alias to the `latest` SecretVersion.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}:access",
        "httpMethod": "GET",
        "method": "access",
        "resourceType": "versions",
        "resourceTypePath": "//projects/secrets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.versions.destroy": {
        "description": "Destroys a SecretVersion. Sets the state of the SecretVersion to DESTROYED and irrevocably destroys the secret data.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}:destroy",
        "httpMethod": "POST",
        "method": "destroy",
        "resourceType": "versions",
        "resourceTypePath": "//projects/secrets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.versions.disable": {
        "description": "Disables a SecretVersion. Sets the state of the SecretVersion to DISABLED.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}:disable",
        "httpMethod": "POST",
        "method": "disable",
        "resourceType": "versions",
        "resourceTypePath": "//projects/secrets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.versions.enable": {
        "description": "Enables a SecretVersion. Sets the state of the SecretVersion to ENABLED.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}:enable",
        "httpMethod": "POST",
        "method": "enable",
        "resourceType": "versions",
        "resourceTypePath": "//projects/secrets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.versions.get": {
        "description": "Gets metadata for a SecretVersion. `projects/*/secrets/*/versions/latest` is an alias to the `latest` SecretVersion.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}/versions/{versionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//projects/secrets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "secretmanager.projects.secrets.versions.list": {
        "description": "Lists SecretVersions. This call does not return secret data.",
        "flatPath": "v1beta1/projects/{projectsId}/secrets/{secretsId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//projects/secrets",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Secret Manager API"
  },
  "securitycenter": {
    "description": "Security Command Center API provides access to temporal views of assets and findings within an organization.",
    "methods": {
      "securitycenter.folders.assets.group": {
        "description": "Filters an organization's assets and groups them by their specified properties.",
        "flatPath": "v1/folders/{foldersId}/assets:group",
        "httpMethod": "POST",
        "method": "group",
        "resourceType": "assets",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.assets.list": {
        "description": "Lists an organization's assets.",
        "flatPath": "v1/folders/{foldersId}/assets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assets",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.assets.updateSecurityMarks": {
        "description": "Updates security marks.",
        "flatPath": "v1/folders/{foldersId}/assets/{assetsId}/securityMarks",
        "httpMethod": "PATCH",
        "method": "updateSecurityMarks",
        "resourceType": "assets",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.containerThreatDetectionSettings.calculate": {
        "description": "Calculates the effective ContainerThreatDetectionSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/folders/{foldersId}/containerThreatDetectionSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "containerThreatDetectionSettings",
        "resourceTypePath": "//folders",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.eventThreatDetectionSettings.calculate": {
        "description": "Calculates the effective EventThreatDetectionSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/folders/{foldersId}/eventThreatDetectionSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "eventThreatDetectionSettings",
        "resourceTypePath": "//folders",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.findings.bulkMute": {
        "description": "Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done.",
        "flatPath": "v1/folders/{foldersId}/findings:bulkMute",
        "httpMethod": "POST",
        "method": "bulkMute",
        "resourceType": "findings",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.getContainerThreatDetectionSettings": {
        "description": "Get the ContainerThreatDetectionSettings resource.",
        "flatPath": "v1beta2/folders/{foldersId}/containerThreatDetectionSettings",
        "httpMethod": "GET",
        "method": "getContainerThreatDetectionSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.getEventThreatDetectionSettings": {
        "description": "Get the EventThreatDetectionSettings resource.",
        "flatPath": "v1beta2/folders/{foldersId}/eventThreatDetectionSettings",
        "httpMethod": "GET",
        "method": "getEventThreatDetectionSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.getSecurityHealthAnalyticsSettings": {
        "description": "Get the SecurityHealthAnalyticsSettings resource.",
        "flatPath": "v1beta2/folders/{foldersId}/securityHealthAnalyticsSettings",
        "httpMethod": "GET",
        "method": "getSecurityHealthAnalyticsSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.getWebSecurityScannerSettings": {
        "description": "Get the WebSecurityScannerSettings resource.",
        "flatPath": "v1beta2/folders/{foldersId}/webSecurityScannerSettings",
        "httpMethod": "GET",
        "method": "getWebSecurityScannerSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.muteConfigs.create": {
        "description": "Creates a mute config.",
        "flatPath": "v1/folders/{foldersId}/muteConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.muteConfigs.delete": {
        "description": "Deletes an existing mute config.",
        "flatPath": "v1/folders/{foldersId}/muteConfigs/{muteConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.muteConfigs.get": {
        "description": "Gets a mute config.",
        "flatPath": "v1/folders/{foldersId}/muteConfigs/{muteConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.muteConfigs.list": {
        "description": "Lists mute configs.",
        "flatPath": "v1/folders/{foldersId}/muteConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.muteConfigs.patch": {
        "description": "Updates a mute config.",
        "flatPath": "v1/folders/{foldersId}/muteConfigs/{muteConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.securityHealthAnalyticsSettings.calculate": {
        "description": "Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/folders/{foldersId}/securityHealthAnalyticsSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "securityHealthAnalyticsSettings",
        "resourceTypePath": "//folders",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.sources.findings.externalSystems.patch": {
        "description": "Updates external system. This is for a given finding.",
        "flatPath": "v1/folders/{foldersId}/sources/{sourcesId}/findings/{findingsId}/externalSystems/{externalSystemsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "externalSystems",
        "resourceTypePath": "//folders/sources/findings",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.sources.findings.group": {
        "description": "Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings",
        "flatPath": "v1/folders/{foldersId}/sources/{sourcesId}/findings:group",
        "httpMethod": "POST",
        "method": "group",
        "resourceType": "findings",
        "resourceTypePath": "//folders/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.sources.findings.list": {
        "description": "Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings",
        "flatPath": "v1/folders/{foldersId}/sources/{sourcesId}/findings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "findings",
        "resourceTypePath": "//folders/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.sources.findings.patch": {
        "description": "Creates or updates a finding. The corresponding source must exist for a finding creation to succeed.",
        "flatPath": "v1/folders/{foldersId}/sources/{sourcesId}/findings/{findingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "findings",
        "resourceTypePath": "//folders/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.sources.findings.setMute": {
        "description": "Updates the mute state of a finding.",
        "flatPath": "v1/folders/{foldersId}/sources/{sourcesId}/findings/{findingsId}:setMute",
        "httpMethod": "POST",
        "method": "setMute",
        "resourceType": "findings",
        "resourceTypePath": "//folders/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.sources.findings.setState": {
        "description": "Updates the state of a finding.",
        "flatPath": "v1/folders/{foldersId}/sources/{sourcesId}/findings/{findingsId}:setState",
        "httpMethod": "POST",
        "method": "setState",
        "resourceType": "findings",
        "resourceTypePath": "//folders/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.sources.findings.updateSecurityMarks": {
        "description": "Updates security marks.",
        "flatPath": "v1/folders/{foldersId}/sources/{sourcesId}/findings/{findingsId}/securityMarks",
        "httpMethod": "PATCH",
        "method": "updateSecurityMarks",
        "resourceType": "findings",
        "resourceTypePath": "//folders/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.sources.list": {
        "description": "Lists all sources belonging to an organization.",
        "flatPath": "v1/folders/{foldersId}/sources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sources",
        "resourceTypePath": "//folders",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.folders.updateContainerThreatDetectionSettings": {
        "description": "Update the ContainerThreatDetectionSettings resource.",
        "flatPath": "v1beta2/folders/{foldersId}/containerThreatDetectionSettings",
        "httpMethod": "PATCH",
        "method": "updateContainerThreatDetectionSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.updateEventThreatDetectionSettings": {
        "description": "Update the EventThreatDetectionSettings resource.",
        "flatPath": "v1beta2/folders/{foldersId}/eventThreatDetectionSettings",
        "httpMethod": "PATCH",
        "method": "updateEventThreatDetectionSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.updateSecurityHealthAnalyticsSettings": {
        "description": "Update the SecurityHealthAnalyticsSettings resource.",
        "flatPath": "v1beta2/folders/{foldersId}/securityHealthAnalyticsSettings",
        "httpMethod": "PATCH",
        "method": "updateSecurityHealthAnalyticsSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.updateWebSecurityScannerSettings": {
        "description": "Update the WebSecurityScannerSettings resource.",
        "flatPath": "v1beta2/folders/{foldersId}/webSecurityScannerSettings",
        "httpMethod": "PATCH",
        "method": "updateWebSecurityScannerSettings",
        "resourceType": "folders",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.folders.webSecurityScannerSettings.calculate": {
        "description": "Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/folders/{foldersId}/webSecurityScannerSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "webSecurityScannerSettings",
        "resourceTypePath": "//folders",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.assets.group": {
        "description": "Filters an organization's assets and groups them by their specified properties.",
        "flatPath": "v1beta1/organizations/{organizationsId}/assets:group",
        "httpMethod": "POST",
        "method": "group",
        "resourceType": "assets",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.assets.list": {
        "description": "Lists an organization's assets.",
        "flatPath": "v1beta1/organizations/{organizationsId}/assets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assets",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.assets.runDiscovery": {
        "description": "Runs asset discovery. The discovery is tracked with a long-running operation. This API can only be called with limited frequency for an organization. If it is called too frequently the caller will receive a TOO_MANY_REQUESTS error.",
        "flatPath": "v1beta1/organizations/{organizationsId}/assets:runDiscovery",
        "httpMethod": "POST",
        "method": "runDiscovery",
        "resourceType": "assets",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.assets.updateSecurityMarks": {
        "description": "Updates security marks.",
        "flatPath": "v1beta1/organizations/{organizationsId}/assets/{assetsId}/securityMarks",
        "httpMethod": "PATCH",
        "method": "updateSecurityMarks",
        "resourceType": "assets",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.containerThreatDetectionSettings.calculate": {
        "description": "Calculates the effective ContainerThreatDetectionSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/organizations/{organizationsId}/containerThreatDetectionSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "containerThreatDetectionSettings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.eventThreatDetectionSettings.calculate": {
        "description": "Calculates the effective EventThreatDetectionSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/organizations/{organizationsId}/eventThreatDetectionSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "eventThreatDetectionSettings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.findings.bulkMute": {
        "description": "Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done.",
        "flatPath": "v1/organizations/{organizationsId}/findings:bulkMute",
        "httpMethod": "POST",
        "method": "bulkMute",
        "resourceType": "findings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.getContainerThreatDetectionSettings": {
        "description": "Get the ContainerThreatDetectionSettings resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/containerThreatDetectionSettings",
        "httpMethod": "GET",
        "method": "getContainerThreatDetectionSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.getEventThreatDetectionSettings": {
        "description": "Get the EventThreatDetectionSettings resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/eventThreatDetectionSettings",
        "httpMethod": "GET",
        "method": "getEventThreatDetectionSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.getOrganizationSettings": {
        "description": "Gets the settings for an organization.",
        "flatPath": "v1beta1/organizations/{organizationsId}/organizationSettings",
        "httpMethod": "GET",
        "method": "getOrganizationSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.getSecurityCenterSettings": {
        "description": "Get the SecurityCenterSettings resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/securityCenterSettings",
        "httpMethod": "GET",
        "method": "getSecurityCenterSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.getSecurityHealthAnalyticsSettings": {
        "description": "Get the SecurityHealthAnalyticsSettings resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/securityHealthAnalyticsSettings",
        "httpMethod": "GET",
        "method": "getSecurityHealthAnalyticsSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.getSubscription": {
        "description": "Get the Subscription resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/subscription",
        "httpMethod": "GET",
        "method": "getSubscription",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.getWebSecurityScannerSettings": {
        "description": "Get the WebSecurityScannerSettings resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/webSecurityScannerSettings",
        "httpMethod": "GET",
        "method": "getWebSecurityScannerSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.muteConfigs.create": {
        "description": "Creates a mute config.",
        "flatPath": "v1/organizations/{organizationsId}/muteConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.muteConfigs.delete": {
        "description": "Deletes an existing mute config.",
        "flatPath": "v1/organizations/{organizationsId}/muteConfigs/{muteConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.muteConfigs.get": {
        "description": "Gets a mute config.",
        "flatPath": "v1/organizations/{organizationsId}/muteConfigs/{muteConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.muteConfigs.list": {
        "description": "Lists mute configs.",
        "flatPath": "v1/organizations/{organizationsId}/muteConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.muteConfigs.patch": {
        "description": "Updates a mute config.",
        "flatPath": "v1/organizations/{organizationsId}/muteConfigs/{muteConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.notificationConfigs.create": {
        "description": "Creates a notification config.",
        "flatPath": "v1/organizations/{organizationsId}/notificationConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "notificationConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.notificationConfigs.delete": {
        "description": "Deletes a notification config.",
        "flatPath": "v1/organizations/{organizationsId}/notificationConfigs/{notificationConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "notificationConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.notificationConfigs.get": {
        "description": "Gets a notification config.",
        "flatPath": "v1/organizations/{organizationsId}/notificationConfigs/{notificationConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "notificationConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.notificationConfigs.list": {
        "description": "Lists notification configs.",
        "flatPath": "v1/organizations/{organizationsId}/notificationConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "notificationConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.notificationConfigs.patch": {
        "description": " Updates a notification config. The following update fields are allowed: description, pubsub_topic, streaming_config.filter",
        "flatPath": "v1/organizations/{organizationsId}/notificationConfigs/{notificationConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "notificationConfigs",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1beta1/organizations/{organizationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta1/organizations/{organizationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/organizations/{organizationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/organizations/{organizationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.securityHealthAnalyticsSettings.calculate": {
        "description": "Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/organizations/{organizationsId}/securityHealthAnalyticsSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "securityHealthAnalyticsSettings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.sources.create": {
        "description": "Creates a source.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sources",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.findings.create": {
        "description": "Creates a finding. The corresponding source must exist for finding creation to succeed.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}/findings",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "findings",
        "resourceTypePath": "//organizations/sources",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.findings.externalSystems.patch": {
        "description": "Updates external system. This is for a given finding.",
        "flatPath": "v1/organizations/{organizationsId}/sources/{sourcesId}/findings/{findingsId}/externalSystems/{externalSystemsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "externalSystems",
        "resourceTypePath": "//organizations/sources/findings",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.sources.findings.group": {
        "description": "Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1beta1/organizations/{organization_id}/sources/-/findings",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}/findings:group",
        "httpMethod": "POST",
        "method": "group",
        "resourceType": "findings",
        "resourceTypePath": "//organizations/sources",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.findings.list": {
        "description": "Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1beta1/organizations/{organization_id}/sources/-/findings",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}/findings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "findings",
        "resourceTypePath": "//organizations/sources",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.findings.patch": {
        "description": "Creates or updates a finding. The corresponding source must exist for a finding creation to succeed.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}/findings/{findingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "findings",
        "resourceTypePath": "//organizations/sources",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.findings.setMute": {
        "description": "Updates the mute state of a finding.",
        "flatPath": "v1/organizations/{organizationsId}/sources/{sourcesId}/findings/{findingsId}:setMute",
        "httpMethod": "POST",
        "method": "setMute",
        "resourceType": "findings",
        "resourceTypePath": "//organizations/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.organizations.sources.findings.setState": {
        "description": "Updates the state of a finding.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}/findings/{findingsId}:setState",
        "httpMethod": "POST",
        "method": "setState",
        "resourceType": "findings",
        "resourceTypePath": "//organizations/sources",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.findings.updateSecurityMarks": {
        "description": "Updates security marks.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}/findings/{findingsId}/securityMarks",
        "httpMethod": "PATCH",
        "method": "updateSecurityMarks",
        "resourceType": "findings",
        "resourceTypePath": "//organizations/sources",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.get": {
        "description": "Gets a source.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sources",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.getIamPolicy": {
        "description": "Gets the access control policy on the specified Source.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "sources",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.list": {
        "description": "Lists all sources belonging to an organization.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sources",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.patch": {
        "description": "Updates a source.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sources",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.setIamPolicy": {
        "description": "Sets the access control policy on the specified Source.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "sources",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.sources.testIamPermissions": {
        "description": "Returns the permissions that a caller has on the specified source.",
        "flatPath": "v1beta1/organizations/{organizationsId}/sources/{sourcesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "sources",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.updateContainerThreatDetectionSettings": {
        "description": "Update the ContainerThreatDetectionSettings resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/containerThreatDetectionSettings",
        "httpMethod": "PATCH",
        "method": "updateContainerThreatDetectionSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.updateEventThreatDetectionSettings": {
        "description": "Update the EventThreatDetectionSettings resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/eventThreatDetectionSettings",
        "httpMethod": "PATCH",
        "method": "updateEventThreatDetectionSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.updateOrganizationSettings": {
        "description": "Updates an organization's settings.",
        "flatPath": "v1beta1/organizations/{organizationsId}/organizationSettings",
        "httpMethod": "PATCH",
        "method": "updateOrganizationSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "securitycenter.organizations.updateSecurityHealthAnalyticsSettings": {
        "description": "Update the SecurityHealthAnalyticsSettings resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/securityHealthAnalyticsSettings",
        "httpMethod": "PATCH",
        "method": "updateSecurityHealthAnalyticsSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.updateWebSecurityScannerSettings": {
        "description": "Update the WebSecurityScannerSettings resource.",
        "flatPath": "v1beta2/organizations/{organizationsId}/webSecurityScannerSettings",
        "httpMethod": "PATCH",
        "method": "updateWebSecurityScannerSettings",
        "resourceType": "organizations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.organizations.webSecurityScannerSettings.calculate": {
        "description": "Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/organizations/{organizationsId}/webSecurityScannerSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "webSecurityScannerSettings",
        "resourceTypePath": "//organizations",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.assets.group": {
        "description": "Filters an organization's assets and groups them by their specified properties.",
        "flatPath": "v1/projects/{projectsId}/assets:group",
        "httpMethod": "POST",
        "method": "group",
        "resourceType": "assets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.assets.list": {
        "description": "Lists an organization's assets.",
        "flatPath": "v1/projects/{projectsId}/assets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "assets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.assets.updateSecurityMarks": {
        "description": "Updates security marks.",
        "flatPath": "v1/projects/{projectsId}/assets/{assetsId}/securityMarks",
        "httpMethod": "PATCH",
        "method": "updateSecurityMarks",
        "resourceType": "assets",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.containerThreatDetectionSettings.calculate": {
        "description": "Calculates the effective ContainerThreatDetectionSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/projects/{projectsId}/containerThreatDetectionSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "containerThreatDetectionSettings",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.eventThreatDetectionSettings.calculate": {
        "description": "Calculates the effective EventThreatDetectionSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/projects/{projectsId}/eventThreatDetectionSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "eventThreatDetectionSettings",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.findings.bulkMute": {
        "description": "Kicks off an LRO to bulk mute findings for a parent based on a filter. The parent can be either an organization, folder or project. The findings matched by the filter will be muted after the LRO is done.",
        "flatPath": "v1/projects/{projectsId}/findings:bulkMute",
        "httpMethod": "POST",
        "method": "bulkMute",
        "resourceType": "findings",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.getContainerThreatDetectionSettings": {
        "description": "Get the ContainerThreatDetectionSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/containerThreatDetectionSettings",
        "httpMethod": "GET",
        "method": "getContainerThreatDetectionSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.getEventThreatDetectionSettings": {
        "description": "Get the EventThreatDetectionSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/eventThreatDetectionSettings",
        "httpMethod": "GET",
        "method": "getEventThreatDetectionSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.getSecurityHealthAnalyticsSettings": {
        "description": "Get the SecurityHealthAnalyticsSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/securityHealthAnalyticsSettings",
        "httpMethod": "GET",
        "method": "getSecurityHealthAnalyticsSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.getWebSecurityScannerSettings": {
        "description": "Get the WebSecurityScannerSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/webSecurityScannerSettings",
        "httpMethod": "GET",
        "method": "getWebSecurityScannerSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.locations.clusters.containerThreatDetectionSettings.calculate": {
        "description": "Calculates the effective ContainerThreatDetectionSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/containerThreatDetectionSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "containerThreatDetectionSettings",
        "resourceTypePath": "//projects/locations/clusters",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.locations.clusters.getContainerThreatDetectionSettings": {
        "description": "Get the ContainerThreatDetectionSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/containerThreatDetectionSettings",
        "httpMethod": "GET",
        "method": "getContainerThreatDetectionSettings",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.locations.clusters.updateContainerThreatDetectionSettings": {
        "description": "Update the ContainerThreatDetectionSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/containerThreatDetectionSettings",
        "httpMethod": "PATCH",
        "method": "updateContainerThreatDetectionSettings",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.muteConfigs.create": {
        "description": "Creates a mute config.",
        "flatPath": "v1/projects/{projectsId}/muteConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.muteConfigs.delete": {
        "description": "Deletes an existing mute config.",
        "flatPath": "v1/projects/{projectsId}/muteConfigs/{muteConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.muteConfigs.get": {
        "description": "Gets a mute config.",
        "flatPath": "v1/projects/{projectsId}/muteConfigs/{muteConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.muteConfigs.list": {
        "description": "Lists mute configs.",
        "flatPath": "v1/projects/{projectsId}/muteConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.muteConfigs.patch": {
        "description": "Updates a mute config.",
        "flatPath": "v1/projects/{projectsId}/muteConfigs/{muteConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "muteConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.securityHealthAnalyticsSettings.calculate": {
        "description": "Calculates the effective SecurityHealthAnalyticsSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/projects/{projectsId}/securityHealthAnalyticsSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "securityHealthAnalyticsSettings",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.sources.findings.externalSystems.patch": {
        "description": "Updates external system. This is for a given finding.",
        "flatPath": "v1/projects/{projectsId}/sources/{sourcesId}/findings/{findingsId}/externalSystems/{externalSystemsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "externalSystems",
        "resourceTypePath": "//projects/sources/findings",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.sources.findings.group": {
        "description": "Filters an organization or source's findings and groups them by their specified properties. To group across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings, /v1/folders/{folder_id}/sources/-/findings, /v1/projects/{project_id}/sources/-/findings",
        "flatPath": "v1/projects/{projectsId}/sources/{sourcesId}/findings:group",
        "httpMethod": "POST",
        "method": "group",
        "resourceType": "findings",
        "resourceTypePath": "//projects/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.sources.findings.list": {
        "description": "Lists an organization or source's findings. To list across all sources provide a `-` as the source id. Example: /v1/organizations/{organization_id}/sources/-/findings",
        "flatPath": "v1/projects/{projectsId}/sources/{sourcesId}/findings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "findings",
        "resourceTypePath": "//projects/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.sources.findings.patch": {
        "description": "Creates or updates a finding. The corresponding source must exist for a finding creation to succeed.",
        "flatPath": "v1/projects/{projectsId}/sources/{sourcesId}/findings/{findingsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "findings",
        "resourceTypePath": "//projects/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.sources.findings.setMute": {
        "description": "Updates the mute state of a finding.",
        "flatPath": "v1/projects/{projectsId}/sources/{sourcesId}/findings/{findingsId}:setMute",
        "httpMethod": "POST",
        "method": "setMute",
        "resourceType": "findings",
        "resourceTypePath": "//projects/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.sources.findings.setState": {
        "description": "Updates the state of a finding.",
        "flatPath": "v1/projects/{projectsId}/sources/{sourcesId}/findings/{findingsId}:setState",
        "httpMethod": "POST",
        "method": "setState",
        "resourceType": "findings",
        "resourceTypePath": "//projects/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.sources.findings.updateSecurityMarks": {
        "description": "Updates security marks.",
        "flatPath": "v1/projects/{projectsId}/sources/{sourcesId}/findings/{findingsId}/securityMarks",
        "httpMethod": "PATCH",
        "method": "updateSecurityMarks",
        "resourceType": "findings",
        "resourceTypePath": "//projects/sources",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.sources.list": {
        "description": "Lists all sources belonging to an organization.",
        "flatPath": "v1/projects/{projectsId}/sources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sources",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "securitycenter.projects.updateContainerThreatDetectionSettings": {
        "description": "Update the ContainerThreatDetectionSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/containerThreatDetectionSettings",
        "httpMethod": "PATCH",
        "method": "updateContainerThreatDetectionSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.updateEventThreatDetectionSettings": {
        "description": "Update the EventThreatDetectionSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/eventThreatDetectionSettings",
        "httpMethod": "PATCH",
        "method": "updateEventThreatDetectionSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.updateSecurityHealthAnalyticsSettings": {
        "description": "Update the SecurityHealthAnalyticsSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/securityHealthAnalyticsSettings",
        "httpMethod": "PATCH",
        "method": "updateSecurityHealthAnalyticsSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.updateWebSecurityScannerSettings": {
        "description": "Update the WebSecurityScannerSettings resource.",
        "flatPath": "v1beta2/projects/{projectsId}/webSecurityScannerSettings",
        "httpMethod": "PATCH",
        "method": "updateWebSecurityScannerSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta2"
        ]
      },
      "securitycenter.projects.webSecurityScannerSettings.calculate": {
        "description": "Calculates the effective WebSecurityScannerSettings based on its level in the resource hierarchy and its settings.",
        "flatPath": "v1beta2/projects/{projectsId}/webSecurityScannerSettings:calculate",
        "httpMethod": "GET",
        "method": "calculate",
        "resourceType": "webSecurityScannerSettings",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta2"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Security Command Center API"
  },
  "serviceconsumermanagement": {
    "description": "Manages the service consumers of a Service Infrastructure service.",
    "methods": {
      "serviceconsumermanagement.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "serviceconsumermanagement.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.consumerQuotaMetrics.get": {
        "description": "Retrieves a summary of quota information for a specific quota metric.",
        "flatPath": "v1beta1/services/{servicesId}/{servicesId1}/{servicesId2}/consumerQuotaMetrics/{consumerQuotaMetricsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "consumerQuotaMetrics",
        "resourceTypePath": "//services",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceconsumermanagement.services.consumerQuotaMetrics.importProducerOverrides": {
        "description": "Create or update multiple producer overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set.",
        "flatPath": "v1beta1/services/{servicesId}/{servicesId1}/{servicesId2}/consumerQuotaMetrics:importProducerOverrides",
        "httpMethod": "POST",
        "method": "importProducerOverrides",
        "resourceType": "consumerQuotaMetrics",
        "resourceTypePath": "//services",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceconsumermanagement.services.consumerQuotaMetrics.limits.get": {
        "description": "Retrieves a summary of quota information for a specific quota limit.",
        "flatPath": "v1beta1/services/{servicesId}/{servicesId1}/{servicesId2}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "limits",
        "resourceTypePath": "//services/consumerQuotaMetrics",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceconsumermanagement.services.consumerQuotaMetrics.limits.producerOverrides.create": {
        "description": "Creates a producer override. A producer override is applied by the owner or administrator of a service to increase or decrease the amount of quota a consumer of the service is allowed to use. To create multiple overrides at once, use ImportProducerOverrides instead. If an override with the specified dimensions already exists, this call will fail. To overwrite an existing override if one is already present (\"upsert\" semantics), use ImportProducerOverrides instead.",
        "flatPath": "v1beta1/services/{servicesId}/{servicesId1}/{servicesId2}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/producerOverrides",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "producerOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceconsumermanagement.services.consumerQuotaMetrics.limits.producerOverrides.delete": {
        "description": "Deletes a producer override.",
        "flatPath": "v1beta1/services/{servicesId}/{servicesId1}/{servicesId2}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/producerOverrides/{producerOverridesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "producerOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceconsumermanagement.services.consumerQuotaMetrics.limits.producerOverrides.list": {
        "description": "Lists all producer overrides on this limit.",
        "flatPath": "v1beta1/services/{servicesId}/{servicesId1}/{servicesId2}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/producerOverrides",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "producerOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceconsumermanagement.services.consumerQuotaMetrics.limits.producerOverrides.patch": {
        "description": "Updates a producer override.",
        "flatPath": "v1beta1/services/{servicesId}/{servicesId1}/{servicesId2}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/producerOverrides/{producerOverridesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "producerOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceconsumermanagement.services.consumerQuotaMetrics.list": {
        "description": "Retrieves a summary of all quota information about this consumer that is visible to the service producer, for each quota metric defined by the service. Each metric includes information about all of its defined limits. Each limit includes the limit configuration (quota unit, preciseness, default value), the current effective limit value, and all of the overrides applied to the limit.",
        "flatPath": "v1beta1/services/{servicesId}/{servicesId1}/{servicesId2}/consumerQuotaMetrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "consumerQuotaMetrics",
        "resourceTypePath": "//services",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceconsumermanagement.services.search": {
        "description": "Search tenancy units for a managed service.",
        "flatPath": "v1/services/{servicesId}:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.tenancyUnits.addProject": {
        "description": "Add a new tenant project to the tenancy unit. There can be a maximum of 1024 tenant projects in a tenancy unit. If there are previously failed `AddTenantProject` calls, you might need to call `RemoveTenantProject` first to resolve them before you can make another call to `AddTenantProject` with the same tag. Operation.",
        "flatPath": "v1/services/{servicesId}/{servicesId1}/{servicesId2}/tenancyUnits/{tenancyUnitsId}:addProject",
        "httpMethod": "POST",
        "method": "addProject",
        "resourceType": "tenancyUnits",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.tenancyUnits.applyProjectConfig": {
        "description": "Apply a configuration to an existing tenant project. This project must exist in an active state and have the original owner account. The caller must have permission to add a project to the given tenancy unit. The configuration is applied, but any existing settings on the project aren't modified. Specified policy bindings are applied. Existing bindings aren't modified. Specified services are activated. No service is deactivated. If specified, new billing configuration is applied. Omit a billing configuration to keep the existing one. A service account in the project is created if previously non existed. Specified labels will be appended to tenant project, note that the value of existing label key will be updated if the same label key is requested. The specified folder is ignored, as moving a tenant project to a different folder isn't supported. The operation fails if any of the steps fail, but no rollback of already applied configuration changes is attempted. Operation.",
        "flatPath": "v1/services/{servicesId}/{servicesId1}/{servicesId2}/tenancyUnits/{tenancyUnitsId}:applyProjectConfig",
        "httpMethod": "POST",
        "method": "applyProjectConfig",
        "resourceType": "tenancyUnits",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.tenancyUnits.attachProject": {
        "description": "Attach an existing project to the tenancy unit as a new tenant resource. The project could either be the tenant project reserved by calling `AddTenantProject` under a tenancy unit of a service producer's project of a managed service, or from a separate project. The caller is checked against a set of permissions as if calling `AddTenantProject` on the same service consumer. To trigger the attachment, the targeted tenant project must be in a folder. Make sure the ServiceConsumerManagement service account is the owner of that project. These two requirements are already met if the project is reserved by calling `AddTenantProject`. Operation.",
        "flatPath": "v1/services/{servicesId}/{servicesId1}/{servicesId2}/tenancyUnits/{tenancyUnitsId}:attachProject",
        "httpMethod": "POST",
        "method": "attachProject",
        "resourceType": "tenancyUnits",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.tenancyUnits.create": {
        "description": "Creates a tenancy unit with no tenant resources. If tenancy unit already exists, it will be returned, however, in this case, returned TenancyUnit does not have tenant_resources field set and ListTenancyUnits has to be used to get a complete TenancyUnit with all fields populated.",
        "flatPath": "v1/services/{servicesId}/{servicesId1}/{servicesId2}/tenancyUnits",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tenancyUnits",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.tenancyUnits.delete": {
        "description": "Delete a tenancy unit. Before you delete the tenancy unit, there should be no tenant resources in it that aren't in a DELETED state. Operation.",
        "flatPath": "v1/services/{servicesId}/{servicesId1}/{servicesId2}/tenancyUnits/{tenancyUnitsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tenancyUnits",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.tenancyUnits.deleteProject": {
        "description": "Deletes the specified project resource identified by a tenant resource tag. The mothod removes a project lien with a 'TenantManager' origin if that was added. It will then attempt to delete the project. If that operation fails, this method also fails. After the project has been deleted, the tenant resource state is set to DELETED. To permanently remove resource metadata, call the `RemoveTenantProject` method. New resources with the same tag can't be added if there are existing resources in a DELETED state. Operation.",
        "flatPath": "v1/services/{servicesId}/{servicesId1}/{servicesId2}/tenancyUnits/{tenancyUnitsId}:deleteProject",
        "httpMethod": "POST",
        "method": "deleteProject",
        "resourceType": "tenancyUnits",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.tenancyUnits.list": {
        "description": "Find the tenancy unit for a managed service and service consumer. This method shouldn't be used in a service producer's runtime path, for example to find the tenant project number when creating VMs. Service producers must persist the tenant project's information after the project is created.",
        "flatPath": "v1/services/{servicesId}/{servicesId1}/{servicesId2}/tenancyUnits",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tenancyUnits",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.tenancyUnits.removeProject": {
        "description": "Removes the specified project resource identified by a tenant resource tag. The method removes the project lien with 'TenantManager' origin if that was added. It then attempts to delete the project. If that operation fails, this method also fails. Calls to remove already removed or non-existent tenant project succeed. After the project has been deleted, or if was already in a DELETED state, resource metadata is permanently removed from the tenancy unit. Operation.",
        "flatPath": "v1/services/{servicesId}/{servicesId1}/{servicesId2}/tenancyUnits/{tenancyUnitsId}:removeProject",
        "httpMethod": "POST",
        "method": "removeProject",
        "resourceType": "tenancyUnits",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "serviceconsumermanagement.services.tenancyUnits.undeleteProject": {
        "description": "Attempts to undelete a previously deleted tenant project. The project must be in a DELETED state. There are no guarantees that an undeleted project will be in a fully restored and functional state. Call the `ApplyTenantProjectConfig` method to update its configuration and then validate all managed service resources. Operation.",
        "flatPath": "v1/services/{servicesId}/{servicesId1}/{servicesId2}/tenancyUnits/{tenancyUnitsId}:undeleteProject",
        "httpMethod": "POST",
        "method": "undeleteProject",
        "resourceType": "tenancyUnits",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Service Consumer Management API"
  },
  "servicecontrol": {
    "description": "Provides admission control and telemetry reporting for services integrated with Service Infrastructure.",
    "methods": {
      "servicecontrol.services.allocateQuota": {
        "description": "Attempts to allocate quota for the specified consumer. It should be called before the operation is executed. This method requires the `servicemanagement.services.quota` permission on the specified service. For more information, see [Cloud IAM](https://cloud.google.com/iam). **NOTE:** The client **must** fail-open on server errors `INTERNAL`, `UNKNOWN`, `DEADLINE_EXCEEDED`, and `UNAVAILABLE`. To ensure system reliability, the server may inject these errors to prohibit any hard dependency on the quota functionality.",
        "flatPath": "v1/services/{serviceName}:allocateQuota",
        "httpMethod": "POST",
        "method": "allocateQuota",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicecontrol.services.check": {
        "description": "Checks whether an operation on a service should be allowed to proceed based on the configuration of the service and related policies. It must be called before the operation is executed. If feasible, the client should cache the check results and reuse them for 60 seconds. In case of any server errors, the client should rely on the cached results for much longer time to avoid outage. WARNING: There is general 60s delay for the configuration and policy propagation, therefore callers MUST NOT depend on the `Check` method having the latest policy information. NOTE: the CheckRequest has the size limit (wire-format byte size) of 1MB. This method requires the `servicemanagement.services.check` permission on the specified service. For more information, see [Cloud IAM](https://cloud.google.com/iam).",
        "flatPath": "v1/services/{serviceName}:check",
        "httpMethod": "POST",
        "method": "check",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "servicecontrol.services.report": {
        "description": "Reports operation results to Google Service Control, such as logs and metrics. It should be called after an operation is completed. If feasible, the client should aggregate reporting data for up to 5 seconds to reduce API traffic. Limiting aggregation to 5 seconds is to reduce data loss during client crashes. Clients should carefully choose the aggregation time window to avoid data loss risk more than 0.01% for business and compliance reasons. NOTE: the ReportRequest has the size limit (wire-format byte size) of 1MB. This method requires the `servicemanagement.services.report` permission on the specified service. For more information, see [Google Cloud IAM](https://cloud.google.com/iam).",
        "flatPath": "v1/services/{serviceName}:report",
        "httpMethod": "POST",
        "method": "report",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Service Control API"
  },
  "servicedirectory": {
    "description": "Service Directory is a platform for discovering, publishing, and connecting services.",
    "methods": {
      "servicedirectory.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.create": {
        "description": "Creates a namespace, and returns the new namespace.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.delete": {
        "description": "Deletes a namespace. This also deletes all services and endpoints in the namespace.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.get": {
        "description": "Gets a namespace.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.getIamPolicy": {
        "description": "Gets the IAM Policy for a resource (namespace or service only).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.list": {
        "description": "Lists all namespaces.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.patch": {
        "description": "Updates a namespace.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.create": {
        "description": "Creates a service, and returns the new service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations/namespaces",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.delete": {
        "description": "Deletes a service. This also deletes all endpoints associated with the service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations/namespaces",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.endpoints.create": {
        "description": "Creates an endpoint, and returns the new endpoint.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}/endpoints",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "endpoints",
        "resourceTypePath": "//projects/locations/namespaces/services",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.endpoints.delete": {
        "description": "Deletes an endpoint.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}/endpoints/{endpointsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "endpoints",
        "resourceTypePath": "//projects/locations/namespaces/services",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.endpoints.get": {
        "description": "Gets an endpoint.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}/endpoints/{endpointsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "endpoints",
        "resourceTypePath": "//projects/locations/namespaces/services",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.endpoints.list": {
        "description": "Lists all endpoints.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}/endpoints",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "endpoints",
        "resourceTypePath": "//projects/locations/namespaces/services",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.endpoints.patch": {
        "description": "Updates an endpoint.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}/endpoints/{endpointsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "endpoints",
        "resourceTypePath": "//projects/locations/namespaces/services",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.get": {
        "description": "Gets a service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations/namespaces",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.getIamPolicy": {
        "description": "Gets the IAM Policy for a resource (namespace or service only).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations/namespaces",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.list": {
        "description": "Lists all services belonging to a namespace.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations/namespaces",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.patch": {
        "description": "Updates a service.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations/namespaces",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.resolve": {
        "description": "Returns a service and its associated endpoints. Resolving a service is not considered an active developer method.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}:resolve",
        "httpMethod": "POST",
        "method": "resolve",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations/namespaces",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.setIamPolicy": {
        "description": "Sets the IAM Policy for a resource (namespace or service only).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations/namespaces",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.services.testIamPermissions": {
        "description": "Tests IAM permissions for a resource (namespace or service only).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}/services/{servicesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "services",
        "resourceTypePath": "//projects/locations/namespaces",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.setIamPolicy": {
        "description": "Sets the IAM Policy for a resource (namespace or service only).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "servicedirectory.projects.locations.namespaces.testIamPermissions": {
        "description": "Tests IAM permissions for a resource (namespace or service only).",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/namespaces/{namespacesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "namespaces",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Service Directory API"
  },
  "servicemanagement": {
    "description": "Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.",
    "methods": {
      "servicemanagement.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.operations.list": {
        "description": "Lists service operations that match the specified filter in the request.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.configs.create": {
        "description": "Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.",
        "flatPath": "v1/services/{serviceName}/configs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "configs",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.configs.get": {
        "description": "Gets a service configuration (version) for a managed service.",
        "flatPath": "v1/services/{serviceName}/configs/{configId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "configs",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.configs.list": {
        "description": "Lists the history of the service configuration for a managed service, from the newest to the oldest.",
        "flatPath": "v1/services/{serviceName}/configs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "configs",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.configs.submit": {
        "description": "Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation",
        "flatPath": "v1/services/{serviceName}/configs:submit",
        "httpMethod": "POST",
        "method": "submit",
        "resourceType": "configs",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.consumers.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/services/{servicesId}/consumers/{consumersId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "consumers",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.consumers.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/services/{servicesId}/consumers/{consumersId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "consumers",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.consumers.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/services/{servicesId}/consumers/{consumersId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "consumers",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.create": {
        "description": "Creates a new managed service. A managed service is immutable, and is subject to mandatory 30-day data retention. You cannot move a service or recreate it within 30 days after deletion. One producer project can own no more than 500 services. For security and reliability purposes, a production service should be hosted in a dedicated producer project. Operation",
        "flatPath": "v1/services",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.delete": {
        "description": "Deletes a managed service. This method will change the service to the `Soft-Delete` state for 30 days. Within this period, service producers may call UndeleteService to restore the service. After 30 days, the service will be permanently deleted. Operation",
        "flatPath": "v1/services/{serviceName}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.generateConfigReport": {
        "description": "Generates and returns a report (errors, warnings and changes from existing configurations) associated with GenerateConfigReportRequest.new_value If GenerateConfigReportRequest.old_value is specified, GenerateConfigReportRequest will contain a single ChangeReport based on the comparison between GenerateConfigReportRequest.new_value and GenerateConfigReportRequest.old_value. If GenerateConfigReportRequest.old_value is not specified, this method will compare GenerateConfigReportRequest.new_value with the last pushed service configuration.",
        "flatPath": "v1/services:generateConfigReport",
        "httpMethod": "POST",
        "method": "generateConfigReport",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.get": {
        "description": "Gets a managed service. Authentication is required unless the service is public.",
        "flatPath": "v1/services/{serviceName}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.getConfig": {
        "description": "Gets a service configuration (version) for a managed service.",
        "flatPath": "v1/services/{serviceName}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/services/{servicesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.list": {
        "description": "Lists managed services. Returns all public services. For authenticated users, also returns all services the calling user has \"servicemanagement.services.get\" permission for.",
        "flatPath": "v1/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.rollouts.create": {
        "description": "Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent) rollouts are kept for each service. The rest will be deleted eventually. Operation",
        "flatPath": "v1/services/{serviceName}/rollouts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "rollouts",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.rollouts.get": {
        "description": "Gets a service configuration rollout.",
        "flatPath": "v1/services/{serviceName}/rollouts/{rolloutId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "rollouts",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.rollouts.list": {
        "description": "Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest.",
        "flatPath": "v1/services/{serviceName}/rollouts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "rollouts",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.",
        "flatPath": "v1/services/{servicesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        "flatPath": "v1/services/{servicesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicemanagement.services.undelete": {
        "description": "Revives a previously deleted managed service. The method restores the service using the configuration at the time the service was deleted. The target service must exist and must have been deleted within the last 30 days. Operation",
        "flatPath": "v1/services/{serviceName}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Service Management API"
  },
  "servicenetworking": {
    "description": "Provides automatic management of network configurations necessary for certain services.",
    "methods": {
      "servicenetworking.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "servicenetworking.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.addSubnetwork": {
        "description": "For service producers, provisions a new subnet in a peered service's shared VPC network in the requested region and with the requested size that's expressed as a CIDR range (number of leading bits of ipV4 network mask). The method checks against the assigned allocated ranges to find a non-conflicting IP address range. The method will reuse a subnet if subsequent calls contain the same subnet name, region, and prefix length. This method will make producer's tenant project to be a shared VPC service project as needed. The response from the `get` operation will be of type `Subnetwork` if the operation successfully completes.",
        "flatPath": "v1beta/services/{servicesId}/{servicesId1}/{servicesId2}:addSubnetwork",
        "httpMethod": "POST",
        "method": "addSubnetwork",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "servicenetworking.services.connections.create": {
        "description": "Creates a private connection that establishes a VPC Network Peering connection to a VPC network in the service producer's organization. The administrator of the service consumer's VPC network invokes this method. The administrator must assign one or more allocated IP ranges for provisioning subnetworks in the service producer's VPC network. This connection is used for all supported services in the service producer's organization, so it only needs to be invoked once. The response from the `get` operation will be of type `Connection` if the operation successfully completes.",
        "flatPath": "v1beta/services/{servicesId}/connections",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "connections",
        "resourceTypePath": "//services",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "servicenetworking.services.connections.deleteConnection": {
        "description": "Deletes a private service access connection.",
        "flatPath": "v1/services/{servicesId}/connections/{connectionsId}",
        "httpMethod": "POST",
        "method": "deleteConnection",
        "resourceType": "connections",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.connections.list": {
        "description": "List the private connections that are configured in a service consumer's VPC network.",
        "flatPath": "v1beta/services/{servicesId}/connections",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "connections",
        "resourceTypePath": "//services",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "servicenetworking.services.connections.patch": {
        "description": "Updates the allocated ranges that are assigned to a connection.",
        "flatPath": "v1/services/{servicesId}/connections/{connectionsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "connections",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.disableVpcServiceControls": {
        "description": "Disables VPC service controls for a connection.",
        "flatPath": "v1/services/{servicesId}:disableVpcServiceControls",
        "httpMethod": "PATCH",
        "method": "disableVpcServiceControls",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.dnsRecordSets.add": {
        "description": "Service producers can use this method to add DNS record sets to private DNS zones in the shared producer host project.",
        "flatPath": "v1/services/{servicesId}/dnsRecordSets:add",
        "httpMethod": "POST",
        "method": "add",
        "resourceType": "dnsRecordSets",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.dnsRecordSets.remove": {
        "description": "Service producers can use this method to remove DNS record sets from private DNS zones in the shared producer host project.",
        "flatPath": "v1/services/{servicesId}/dnsRecordSets:remove",
        "httpMethod": "POST",
        "method": "remove",
        "resourceType": "dnsRecordSets",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.dnsRecordSets.update": {
        "description": "Service producers can use this method to update DNS record sets from private DNS zones in the shared producer host project.",
        "flatPath": "v1/services/{servicesId}/dnsRecordSets:update",
        "httpMethod": "POST",
        "method": "update",
        "resourceType": "dnsRecordSets",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.dnsZones.add": {
        "description": "Service producers can use this method to add private DNS zones in the shared producer host project and matching peering zones in the consumer project.",
        "flatPath": "v1/services/{servicesId}/dnsZones:add",
        "httpMethod": "POST",
        "method": "add",
        "resourceType": "dnsZones",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.dnsZones.remove": {
        "description": "Service producers can use this method to remove private DNS zones in the shared producer host project and matching peering zones in the consumer project.",
        "flatPath": "v1/services/{servicesId}/dnsZones:remove",
        "httpMethod": "POST",
        "method": "remove",
        "resourceType": "dnsZones",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.enableVpcServiceControls": {
        "description": "Enables VPC service controls for a connection.",
        "flatPath": "v1/services/{servicesId}:enableVpcServiceControls",
        "httpMethod": "PATCH",
        "method": "enableVpcServiceControls",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.projects.global.networks.get": {
        "description": "Service producers use this method to get the configuration of their connection including the import/export of custom routes and subnetwork routes with public IP.",
        "flatPath": "v1/services/{servicesId}/projects/{projectsId}/global/networks/{networksId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "networks",
        "resourceTypePath": "//services/projects/global",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.projects.global.networks.peeredDnsDomains.create": {
        "description": "Creates a peered DNS domain which sends requests for records in given namespace originating in the service producer VPC network to the consumer VPC network to be resolved.",
        "flatPath": "v1/services/{servicesId}/projects/{projectsId}/global/networks/{networksId}/peeredDnsDomains",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "peeredDnsDomains",
        "resourceTypePath": "//services/projects/global/networks",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.projects.global.networks.peeredDnsDomains.delete": {
        "description": "Deletes a peered DNS domain.",
        "flatPath": "v1/services/{servicesId}/projects/{projectsId}/global/networks/{networksId}/peeredDnsDomains/{peeredDnsDomainsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "peeredDnsDomains",
        "resourceTypePath": "//services/projects/global/networks",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.projects.global.networks.peeredDnsDomains.list": {
        "description": "Lists peered DNS domains for a connection.",
        "flatPath": "v1/services/{servicesId}/projects/{projectsId}/global/networks/{networksId}/peeredDnsDomains",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "peeredDnsDomains",
        "resourceTypePath": "//services/projects/global/networks",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.projects.global.networks.updateConsumerConfig": {
        "description": "Service producers use this method to update the configuration of their connection including the import/export of custom routes and subnetwork routes with public IP.",
        "flatPath": "v1/services/{servicesId}/projects/{projectsId}/global/networks/{networksId}:updateConsumerConfig",
        "httpMethod": "PATCH",
        "method": "updateConsumerConfig",
        "resourceType": "networks",
        "resourceTypePath": "//services/projects/global",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.roles.add": {
        "description": "Service producers can use this method to add roles in the shared VPC host project. Each role is bound to the provided member. Each role must be selected from within an allowlisted set of roles. Each role is applied at only the granularity specified in the allowlist.",
        "flatPath": "v1/services/{servicesId}/roles:add",
        "httpMethod": "POST",
        "method": "add",
        "resourceType": "roles",
        "resourceTypePath": "//services",
        "versions": [
          "v1"
        ]
      },
      "servicenetworking.services.searchRange": {
        "description": "Service producers can use this method to find a currently unused range within consumer allocated ranges. This returned range is not reserved, and not guaranteed to remain unused. It will validate previously provided allocated ranges, find non-conflicting sub-range of requested size (expressed in number of leading bits of ipv4 network mask, as in CIDR range notation). Operation",
        "flatPath": "v1beta/services/{servicesId}:searchRange",
        "httpMethod": "POST",
        "method": "searchRange",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "servicenetworking.services.updateConnections": {
        "description": "Updates the allocated ranges that are assigned to a connection. The response from the `get` operation will be of type `Connection` if the operation successfully completes.",
        "flatPath": "v1beta/services/{servicesId}/connections",
        "httpMethod": "PATCH",
        "method": "updateConnections",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1beta"
        ]
      },
      "servicenetworking.services.validate": {
        "description": "Service producers use this method to validate if the consumer provided network, project and requested range are valid. This allows them to use a fail-fast mechanism for consumer requests, and not have to wait for AddSubnetwork operation completion to determine if user request is invalid.",
        "flatPath": "v1/services/{servicesId}:validate",
        "httpMethod": "POST",
        "method": "validate",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Service Networking API"
  },
  "serviceusage": {
    "description": "Enables services that service consumers want to use on Google Cloud Platform, lists the available or enabled services, or disables services that service consumers no longer use.",
    "methods": {
      "serviceusage.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "serviceusage.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "serviceusage.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "serviceusage.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "serviceusage.services.batchEnable": {
        "description": "Enables multiple services on a project. The operation is atomic: if enabling any service fails, then the entire batch fails, and no state changes occur. Operation response type: `google.protobuf.Empty`",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services:batchEnable",
        "httpMethod": "POST",
        "method": "batchEnable",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "serviceusage.services.batchGet": {
        "description": "Returns the service configurations and enabled states for a given list of services.",
        "flatPath": "v1/{v1Id}/{v1Id1}/services:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.get": {
        "description": "Retrieves a summary of quota information for a specific quota metric",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "consumerQuotaMetrics",
        "resourceTypePath": "//services",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.importAdminOverrides": {
        "description": "Creates or updates multiple admin overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics:importAdminOverrides",
        "httpMethod": "POST",
        "method": "importAdminOverrides",
        "resourceType": "consumerQuotaMetrics",
        "resourceTypePath": "//services",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.importConsumerOverrides": {
        "description": "Creates or updates multiple consumer overrides atomically, all on the same consumer, but on many different metrics or limits. The name field in the quota override message should not be set.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics:importConsumerOverrides",
        "httpMethod": "POST",
        "method": "importConsumerOverrides",
        "resourceType": "consumerQuotaMetrics",
        "resourceTypePath": "//services",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.limits.adminOverrides.create": {
        "description": "Creates an admin override. An admin override is applied by an administrator of a parent folder or parent organization of the consumer receiving the override. An admin override is intended to limit the amount of quota the consumer can use out of the total quota pool allocated to all children of the folder or organization.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/adminOverrides",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "adminOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.limits.adminOverrides.delete": {
        "description": "Deletes an admin override.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/adminOverrides/{adminOverridesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "adminOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.limits.adminOverrides.list": {
        "description": "Lists all admin overrides on this limit.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/adminOverrides",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "adminOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.limits.adminOverrides.patch": {
        "description": "Updates an admin override.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/adminOverrides/{adminOverridesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "adminOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.limits.consumerOverrides.create": {
        "description": "Creates a consumer override. A consumer override is applied to the consumer on its own authority to limit its own quota usage. Consumer overrides cannot be used to grant more quota than would be allowed by admin overrides, producer overrides, or the default limit of the service.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/consumerOverrides",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "consumerOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.limits.consumerOverrides.delete": {
        "description": "Deletes a consumer override.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/consumerOverrides/{consumerOverridesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "consumerOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.limits.consumerOverrides.list": {
        "description": "Lists all consumer overrides on this limit.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/consumerOverrides",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "consumerOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.limits.consumerOverrides.patch": {
        "description": "Updates a consumer override.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}/consumerOverrides/{consumerOverridesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "consumerOverrides",
        "resourceTypePath": "//services/consumerQuotaMetrics/limits",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.limits.get": {
        "description": "Retrieves a summary of quota information for a specific quota limit.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics/{consumerQuotaMetricsId}/limits/{limitsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "limits",
        "resourceTypePath": "//services/consumerQuotaMetrics",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.consumerQuotaMetrics.list": {
        "description": "Retrieves a summary of all quota information visible to the service consumer, organized by service metric. Each metric includes information about all of its defined limits. Each limit includes the limit configuration (quota unit, preciseness, default value), the current effective limit value, and all of the overrides applied to the limit.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}/consumerQuotaMetrics",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "consumerQuotaMetrics",
        "resourceTypePath": "//services",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.disable": {
        "description": "Disables a service so that it can no longer be used with a project. This prevents unintended usage that may cause unexpected billing charges or security leaks. It is not valid to call the disable method on a service that is not currently enabled. Callers will receive a `FAILED_PRECONDITION` status if the target service is not currently enabled. Operation response type: `google.protobuf.Empty`",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}:disable",
        "httpMethod": "POST",
        "method": "disable",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "serviceusage.services.enable": {
        "description": "Enables a service so that it can be used with a project. Operation response type: `google.protobuf.Empty`",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}:enable",
        "httpMethod": "POST",
        "method": "enable",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "serviceusage.services.generateServiceIdentity": {
        "description": "Generates service identity for service.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}:generateServiceIdentity",
        "httpMethod": "POST",
        "method": "generateServiceIdentity",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1"
        ]
      },
      "serviceusage.services.get": {
        "description": "Returns the service configuration and enabled state for a given service.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services/{servicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "serviceusage.services.list": {
        "description": "Lists all services available to the specified project, and the current state of those services with respect to the project. The list includes all public services, all services for which the calling user has the `servicemanagement.services.bind` permission, and all services that have already been enabled on the project. The list can be filtered to only include services in a specific state, for example to only include services enabled on the project.",
        "flatPath": "v1beta1/{v1beta1Id}/{v1beta1Id1}/services",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "services",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Service Usage API"
  },
  "sheets": {
    "description": "Reads and writes Google Sheets.",
    "methods": {
      "sheets.spreadsheets.batchUpdate": {
        "description": "Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "spreadsheets",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.create": {
        "description": "Creates a spreadsheet, returning the newly created spreadsheet.",
        "flatPath": "v4/spreadsheets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "spreadsheets",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.developerMetadata.get": {
        "description": "Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "developerMetadata",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.developerMetadata.search": {
        "description": "Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/developerMetadata:search",
        "httpMethod": "POST",
        "method": "search",
        "resourceType": "developerMetadata",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.get": {
        "description": "Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids will not be returned. You can include grid data one of two ways: * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want. To retrieve only subsets of the spreadsheet, use the ranges URL parameter. Multiple ranges can be specified. Limiting the range will return only the portions of the spreadsheet that intersect the requested ranges. Ranges are specified using A1 notation.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "spreadsheets",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.getByDataFilter": {
        "description": "Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters will return the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids will not be returned. You can include grid data one of two ways: * Specify a field mask listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, it is recommended to retrieve only the specific fields of the spreadsheet that you want.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}:getByDataFilter",
        "httpMethod": "POST",
        "method": "getByDataFilter",
        "resourceType": "spreadsheets",
        "resourceTypePath": "/",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.sheets.copyTo": {
        "description": "Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo",
        "httpMethod": "POST",
        "method": "copyTo",
        "resourceType": "sheets",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.append": {
        "description": "Appends values to a spreadsheet. The input range is used to search for existing data and find a \"table\" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values/{range}:append",
        "httpMethod": "POST",
        "method": "append",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.batchClear": {
        "description": "Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values:batchClear",
        "httpMethod": "POST",
        "method": "batchClear",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.batchClearByDataFilter": {
        "description": "Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter",
        "httpMethod": "POST",
        "method": "batchClearByDataFilter",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.batchGet": {
        "description": "Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.batchGetByDataFilter": {
        "description": "Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter",
        "httpMethod": "POST",
        "method": "batchGetByDataFilter",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.batchUpdate": {
        "description": "Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.batchUpdateByDataFilter": {
        "description": "Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter",
        "httpMethod": "POST",
        "method": "batchUpdateByDataFilter",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.clear": {
        "description": "Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values/{range}:clear",
        "httpMethod": "POST",
        "method": "clear",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.get": {
        "description": "Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values/{range}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      },
      "sheets.spreadsheets.values.update": {
        "description": "Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.",
        "flatPath": "v4/spreadsheets/{spreadsheetId}/values/{range}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "values",
        "resourceTypePath": "//spreadsheets",
        "versions": [
          "v4"
        ]
      }
    },
    "preferredVersion": "v4",
    "title": "Google Sheets API"
  },
  "siteVerification": {
    "description": "The Google Site Verification API lets applications automate the process of managing ownership records for websites and domains.",
    "methods": {
      "siteVerification.webResource.delete": {
        "description": "Relinquish ownership of a website or domain.",
        "flatPath": "webResource/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "webResource",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "siteVerification.webResource.get": {
        "description": "Get the most current data for a website or domain.",
        "flatPath": "webResource/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "webResource",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "siteVerification.webResource.getToken": {
        "description": "Get a verification token for placing on a website or domain.",
        "flatPath": "token",
        "httpMethod": "POST",
        "method": "getToken",
        "resourceType": "webResource",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "siteVerification.webResource.insert": {
        "description": "Attempt verification of a website or domain.",
        "flatPath": "webResource",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "webResource",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "siteVerification.webResource.list": {
        "description": "Get the list of your verified websites and domains.",
        "flatPath": "webResource",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webResource",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "siteVerification.webResource.patch": {
        "description": "Modify the list of owners for your website or domain. This method supports patch semantics.",
        "flatPath": "webResource/{id}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "webResource",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "siteVerification.webResource.update": {
        "description": "Modify the list of owners for your website or domain.",
        "flatPath": "webResource/{id}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "webResource",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Site Verification API"
  },
  "slides": {
    "description": "Reads and writes Google Slides presentations.",
    "methods": {
      "slides.presentations.batchUpdate": {
        "description": "Applies one or more updates to the presentation. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies: the reply to the third request, and another empty reply, in that order. Because other users may be editing the presentation, the presentation might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the presentation should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.",
        "flatPath": "v1/presentations/{presentationId}:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "presentations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "slides.presentations.create": {
        "description": "Creates a blank presentation using the title given in the request. If a `presentationId` is provided, it is used as the ID of the new presentation. Otherwise, a new ID is generated. Other fields in the request, including any provided content, are ignored. Returns the created presentation.",
        "flatPath": "v1/presentations",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "presentations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "slides.presentations.get": {
        "description": "Gets the latest version of the specified presentation.",
        "flatPath": "v1/presentations/{presentationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "presentations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "slides.presentations.pages.get": {
        "description": "Gets the latest version of the specified page in the presentation.",
        "flatPath": "v1/presentations/{presentationId}/pages/{pageObjectId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "pages",
        "resourceTypePath": "//presentations",
        "versions": [
          "v1"
        ]
      },
      "slides.presentations.pages.getThumbnail": {
        "description": "Generates a thumbnail of the latest version of the specified page in the presentation and returns a URL to the thumbnail image. This request counts as an [expensive read request](/slides/limits) for quota purposes.",
        "flatPath": "v1/presentations/{presentationId}/pages/{pageObjectId}/thumbnail",
        "httpMethod": "GET",
        "method": "getThumbnail",
        "resourceType": "pages",
        "resourceTypePath": "//presentations",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Google Slides API"
  },
  "smartdevicemanagement": {
    "description": "Allow select enterprise partners to access, control, and manage Google and Nest devices programmatically.",
    "methods": {
      "smartdevicemanagement.enterprises.devices.executeCommand": {
        "description": "Executes a command to device managed by the enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}:executeCommand",
        "httpMethod": "POST",
        "method": "executeCommand",
        "resourceType": "devices",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "smartdevicemanagement.enterprises.devices.get": {
        "description": "Gets a device managed by the enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices/{devicesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "devices",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "smartdevicemanagement.enterprises.devices.list": {
        "description": "Lists devices managed by the enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/devices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "devices",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "smartdevicemanagement.enterprises.structures.get": {
        "description": "Gets a structure managed by the enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/structures/{structuresId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "structures",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "smartdevicemanagement.enterprises.structures.list": {
        "description": "Lists structures managed by the enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/structures",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "structures",
        "resourceTypePath": "//enterprises",
        "versions": [
          "v1"
        ]
      },
      "smartdevicemanagement.enterprises.structures.rooms.get": {
        "description": "Gets a room managed by the enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/structures/{structuresId}/rooms/{roomsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "rooms",
        "resourceTypePath": "//enterprises/structures",
        "versions": [
          "v1"
        ]
      },
      "smartdevicemanagement.enterprises.structures.rooms.list": {
        "description": "Lists rooms managed by the enterprise.",
        "flatPath": "v1/enterprises/{enterprisesId}/structures/{structuresId}/rooms",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "rooms",
        "resourceTypePath": "//enterprises/structures",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Smart Device Management API"
  },
  "sourcerepo": {
    "description": "Accesses source code repositories hosted by Google.",
    "methods": {
      "sourcerepo.projects.getConfig": {
        "description": "Returns the Cloud Source Repositories configuration of the project.",
        "flatPath": "v1/projects/{projectsId}/config",
        "httpMethod": "GET",
        "method": "getConfig",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.repos.create": {
        "description": "Creates a repo in the given project with the given name. If the named repository already exists, `CreateRepo` returns `ALREADY_EXISTS`.",
        "flatPath": "v1/projects/{projectsId}/repos",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "repos",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.repos.delete": {
        "description": "Deletes a repo.",
        "flatPath": "v1/projects/{projectsId}/repos/{reposId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "repos",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.repos.get": {
        "description": "Returns information about a repo.",
        "flatPath": "v1/projects/{projectsId}/repos/{reposId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "repos",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.repos.getIamPolicy": {
        "description": "Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.",
        "flatPath": "v1/projects/{projectsId}/repos/{reposId}:getIamPolicy",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "repos",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.repos.list": {
        "description": "Returns all repos belonging to a project. The sizes of the repos are not set by ListRepos. To get the size of a repo, use GetRepo.",
        "flatPath": "v1/projects/{projectsId}/repos",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "repos",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.repos.patch": {
        "description": "Updates information about a repo.",
        "flatPath": "v1/projects/{projectsId}/repos/{reposId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "repos",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.repos.setIamPolicy": {
        "description": "Sets the access control policy on the specified resource. Replaces any existing policy.",
        "flatPath": "v1/projects/{projectsId}/repos/{reposId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "repos",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.repos.sync": {
        "description": "Synchronize a connected repo. The response contains SyncRepoMetadata in the metadata field.",
        "flatPath": "v1/projects/{projectsId}/repos/{reposId}:sync",
        "httpMethod": "POST",
        "method": "sync",
        "resourceType": "repos",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.repos.testIamPermissions": {
        "description": "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.",
        "flatPath": "v1/projects/{projectsId}/repos/{reposId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "repos",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "sourcerepo.projects.updateConfig": {
        "description": "Updates the Cloud Source Repositories configuration of the project.",
        "flatPath": "v1/projects/{projectsId}/config",
        "httpMethod": "PATCH",
        "method": "updateConfig",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Source Repositories API"
  },
  "spanner": {
    "description": "Cloud Spanner is a managed, mission-critical, globally consistent and scalable relational database service.",
    "methods": {
      "spanner.projects.instanceConfigs.get": {
        "description": "Gets information about a particular instance configuration.",
        "flatPath": "v1/projects/{projectsId}/instanceConfigs/{instanceConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instanceConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instanceConfigs.list": {
        "description": "Lists the supported instance configurations for a given project.",
        "flatPath": "v1/projects/{projectsId}/instanceConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instanceConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backupOperations.list": {
        "description": "Lists the backup long-running operations in the given instance. A backup operation has a name of the form `projects//instances//backups//operations/`. The long-running operation metadata field type `metadata.type_url` describes the type of the metadata. Operations returned include those that have completed/failed/canceled within the last 7 days, and pending operations. Operations returned are ordered by `operation.metadata.value.progress.start_time` in descending order starting from the most recently started operation.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backupOperations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "backupOperations",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.create": {
        "description": "Starts creating a new Cloud Spanner Backup. The returned backup long-running operation will have a name of the format `projects//instances//backups//operations/` and can be used to track creation of the backup. The metadata field type is CreateBackupMetadata. The response field type is Backup, if successful. Cancelling the returned operation will stop the creation and delete the backup. There can be only one pending backup creation per database. Backup creation of different databases can run concurrently.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.delete": {
        "description": "Deletes a pending or completed Backup.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.get": {
        "description": "Gets metadata on a pending or completed Backup.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.getIamPolicy": {
        "description": "Gets the access control policy for a database or backup resource. Returns an empty policy if a database or backup exists but does not have a policy set. Authorization requires `spanner.databases.getIamPolicy` permission on resource. For backups, authorization requires `spanner.backups.getIamPolicy` permission on resource.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.list": {
        "description": "Lists completed and pending backups. Backups returned are ordered by `create_time` in descending order, starting from the most recent `create_time`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances/backups",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances/backups",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances/backups",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances/backups",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.patch": {
        "description": "Updates a pending or completed Backup.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.setIamPolicy": {
        "description": "Sets the access control policy on a database or backup resource. Replaces any existing policy. Authorization requires `spanner.databases.setIamPolicy` permission on resource. For backups, authorization requires `spanner.backups.setIamPolicy` permission on resource.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.backups.testIamPermissions": {
        "description": "Returns permissions that the caller has on the specified database or backup resource. Attempting this RPC on a non-existent Cloud Spanner database will result in a NOT_FOUND error if the user has `spanner.databases.list` permission on the containing Cloud Spanner instance. Otherwise returns an empty set of permissions. Calling this method on a backup that does not exist will result in a NOT_FOUND error if the user has `spanner.backups.list` permission on the containing instance.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/backups/{backupsId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "backups",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.create": {
        "description": "Creates an instance and begins preparing it to begin serving. The returned long-running operation can be used to track the progress of preparing the new instance. The instance name is assigned by the caller. If the named instance already exists, `CreateInstance` returns `ALREADY_EXISTS`. Immediately upon completion of this request: * The instance is readable via the API, with all requested attributes but no allocated resources. Its state is `CREATING`. Until completion of the returned operation: * Cancelling the operation renders the instance immediately unreadable via the API. * The instance can be deleted. * All other attempts to modify the instance are rejected. Upon completion of the returned operation: * Billing for all successfully-allocated resources begins (some types may have lower than the requested levels). * Databases can be created in the instance. * The instance's allocated resource levels are readable via the API. * The instance's state becomes `READY`. The returned long-running operation will have a name of the format `/operations/` and can be used to track creation of the instance. The metadata field type is CreateInstanceMetadata. The response field type is Instance, if successful.",
        "flatPath": "v1/projects/{projectsId}/instances",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databaseOperations.list": {
        "description": "Lists database longrunning-operations. A database operation has a name of the form `projects//instances//databases//operations/`. The long-running operation metadata field type `metadata.type_url` describes the type of the metadata. Operations returned include those that have completed/failed/canceled within the last 7 days, and pending operations.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databaseOperations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "databaseOperations",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.create": {
        "description": "Creates a new Cloud Spanner database and starts to prepare it for serving. The returned long-running operation will have a name of the format `/operations/` and can be used to track preparation of the database. The metadata field type is CreateDatabaseMetadata. The response field type is Database, if successful.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.dropDatabase": {
        "description": "Drops (aka deletes) a Cloud Spanner database. Completed backups for the database will be retained according to their `expire_time`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}",
        "httpMethod": "DELETE",
        "method": "dropDatabase",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.get": {
        "description": "Gets the state of a Cloud Spanner database.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.getDdl": {
        "description": "Returns the schema of a Cloud Spanner database as a list of formatted DDL statements. This method does not show pending schema updates, those may be queried using the Operations API.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/ddl",
        "httpMethod": "GET",
        "method": "getDdl",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.getIamPolicy": {
        "description": "Gets the access control policy for a database or backup resource. Returns an empty policy if a database or backup exists but does not have a policy set. Authorization requires `spanner.databases.getIamPolicy` permission on resource. For backups, authorization requires `spanner.backups.getIamPolicy` permission on resource.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.getScans": {
        "description": "Request a specific scan with Database-specific data for Cloud Key Visualizer.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/scans",
        "httpMethod": "GET",
        "method": "getScans",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.list": {
        "description": "Lists Cloud Spanner databases.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.restore": {
        "description": "Create a new database by restoring from a completed backup. The new database must be in the same project and in an instance with the same instance configuration as the instance containing the backup. The returned database long-running operation has a name of the format `projects//instances//databases//operations/`, and can be used to track the progress of the operation, and to cancel it. The metadata field type is RestoreDatabaseMetadata. The response type is Database, if successful. Cancelling the returned operation will stop the restore and delete the database. There can be only one database being restored into an instance at a time. Once the restore operation completes, a new restore operation can be initiated, without waiting for the optimize operation associated with the first restore to complete.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases:restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.batchCreate": {
        "description": "Creates multiple new sessions. This API can be used to initialize a session cache on the clients. See https://goo.gl/TgSFN2 for best practices on session cache management.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.beginTransaction": {
        "description": "Begins a new transaction. This step can often be skipped: Read, ExecuteSql and Commit can begin a new transaction as a side-effect.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:beginTransaction",
        "httpMethod": "POST",
        "method": "beginTransaction",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.commit": {
        "description": "Commits a transaction. The request includes the mutations to be applied to rows in the database. `Commit` might return an `ABORTED` error. This can occur at any time; commonly, the cause is conflicts with concurrent transactions. However, it can also happen for a variety of other reasons. If `Commit` returns `ABORTED`, the caller should re-attempt the transaction from the beginning, re-using the same session. On very rare occasions, `Commit` might return `UNKNOWN`. This can happen, for example, if the client job experiences a 1+ hour networking failure. At that point, Cloud Spanner has lost track of the transaction outcome and we recommend that you perform another read from the database to see the state of things as they are now.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:commit",
        "httpMethod": "POST",
        "method": "commit",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.create": {
        "description": "Creates a new session. A session can be used to perform transactions that read and/or modify data in a Cloud Spanner database. Sessions are meant to be reused for many consecutive transactions. Sessions can only execute one transaction at a time. To execute multiple concurrent read-write/write-only transactions, create multiple sessions. Note that standalone reads and queries use a transaction internally, and count toward the one transaction limit. Active sessions use additional server resources, so it is a good idea to delete idle and unneeded sessions. Aside from explicit deletes, Cloud Spanner may delete sessions for which no operations are sent for more than an hour. If a session is deleted, requests to it return `NOT_FOUND`. Idle sessions can be kept alive by sending a trivial SQL query periodically, e.g., `\"SELECT 1\"`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.delete": {
        "description": "Ends a session, releasing server resources associated with it. This will asynchronously trigger cancellation of any operations that are running with this session.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.executeBatchDml": {
        "description": "Executes a batch of SQL DML statements. This method allows many statements to be run with lower latency than submitting them sequentially with ExecuteSql. Statements are executed in sequential order. A request can succeed even if a statement fails. The ExecuteBatchDmlResponse.status field in the response provides information about the statement that failed. Clients must inspect this field to determine whether an error occurred. Execution stops after the first failed statement; the remaining statements are not executed.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:executeBatchDml",
        "httpMethod": "POST",
        "method": "executeBatchDml",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.executeSql": {
        "description": "Executes an SQL statement, returning all results in a single reply. This method cannot be used to return a result set larger than 10 MiB; if the query yields more data than that, the query fails with a `FAILED_PRECONDITION` error. Operations inside read-write transactions might return `ABORTED`. If this occurs, the application should restart the transaction from the beginning. See Transaction for more details. Larger result sets can be fetched in streaming fashion by calling ExecuteStreamingSql instead.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:executeSql",
        "httpMethod": "POST",
        "method": "executeSql",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.executeStreamingSql": {
        "description": "Like ExecuteSql, except returns the result set as a stream. Unlike ExecuteSql, there is no limit on the size of the returned result set. However, no individual row in the result set can exceed 100 MiB, and no column value can exceed 10 MiB.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:executeStreamingSql",
        "httpMethod": "POST",
        "method": "executeStreamingSql",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.get": {
        "description": "Gets a session. Returns `NOT_FOUND` if the session does not exist. This is mainly useful for determining whether a session is still alive.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.list": {
        "description": "Lists all sessions in a given database.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.partitionQuery": {
        "description": "Creates a set of partition tokens that can be used to execute a query operation in parallel. Each of the returned partition tokens can be used by ExecuteStreamingSql to specify a subset of the query result to read. The same session and read-only transaction must be used by the PartitionQueryRequest used to create the partition tokens and the ExecuteSqlRequests that use the partition tokens. Partition tokens become invalid when the session used to create them is deleted, is idle for too long, begins a new transaction, or becomes too old. When any of these happen, it is not possible to resume the query, and the whole operation must be restarted from the beginning.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:partitionQuery",
        "httpMethod": "POST",
        "method": "partitionQuery",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.partitionRead": {
        "description": "Creates a set of partition tokens that can be used to execute a read operation in parallel. Each of the returned partition tokens can be used by StreamingRead to specify a subset of the read result to read. The same session and read-only transaction must be used by the PartitionReadRequest used to create the partition tokens and the ReadRequests that use the partition tokens. There are no ordering guarantees on rows returned among the returned partition tokens, or even within each individual StreamingRead call issued with a partition_token. Partition tokens become invalid when the session used to create them is deleted, is idle for too long, begins a new transaction, or becomes too old. When any of these happen, it is not possible to resume the read, and the whole operation must be restarted from the beginning.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:partitionRead",
        "httpMethod": "POST",
        "method": "partitionRead",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.read": {
        "description": "Reads rows from the database using key lookups and scans, as a simple key/value style alternative to ExecuteSql. This method cannot be used to return a result set larger than 10 MiB; if the read matches more data than that, the read fails with a `FAILED_PRECONDITION` error. Reads inside read-write transactions might return `ABORTED`. If this occurs, the application should restart the transaction from the beginning. See Transaction for more details. Larger result sets can be yielded in streaming fashion by calling StreamingRead instead.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:read",
        "httpMethod": "POST",
        "method": "read",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.rollback": {
        "description": "Rolls back a transaction, releasing any locks it holds. It is a good idea to call this for any transaction that includes one or more Read or ExecuteSql requests and ultimately decides not to commit. `Rollback` returns `OK` if it successfully aborts the transaction, the transaction was already aborted, or the transaction is not found. `Rollback` never returns `ABORTED`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:rollback",
        "httpMethod": "POST",
        "method": "rollback",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.sessions.streamingRead": {
        "description": "Like Read, except returns the result set as a stream. Unlike Read, there is no limit on the size of the returned result set. However, no individual row in the result set can exceed 100 MiB, and no column value can exceed 10 MiB.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/sessions/{sessionsId}:streamingRead",
        "httpMethod": "POST",
        "method": "streamingRead",
        "resourceType": "sessions",
        "resourceTypePath": "//projects/instances/databases",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.setIamPolicy": {
        "description": "Sets the access control policy on a database or backup resource. Replaces any existing policy. Authorization requires `spanner.databases.setIamPolicy` permission on resource. For backups, authorization requires `spanner.backups.setIamPolicy` permission on resource.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.testIamPermissions": {
        "description": "Returns permissions that the caller has on the specified database or backup resource. Attempting this RPC on a non-existent Cloud Spanner database will result in a NOT_FOUND error if the user has `spanner.databases.list` permission on the containing Cloud Spanner instance. Otherwise returns an empty set of permissions. Calling this method on a backup that does not exist will result in a NOT_FOUND error if the user has `spanner.backups.list` permission on the containing instance.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.databases.updateDdl": {
        "description": "Updates the schema of a Cloud Spanner database by creating/altering/dropping tables, columns, indexes, etc. The returned long-running operation will have a name of the format `/operations/` and can be used to track execution of the schema change(s). The metadata field type is UpdateDatabaseDdlMetadata. The operation has no response.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/databases/{databasesId}/ddl",
        "httpMethod": "PATCH",
        "method": "updateDdl",
        "resourceType": "databases",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.delete": {
        "description": "Deletes an instance. Immediately upon completion of the request: * Billing ceases for all of the instance's reserved resources. Soon afterward: * The instance and *all of its databases* immediately and irrevocably disappear from the API. All data in the databases is permanently deleted.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.get": {
        "description": "Gets information about a particular instance.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.getIamPolicy": {
        "description": "Gets the access control policy for an instance resource. Returns an empty policy if an instance exists but does not have a policy set. Authorization requires `spanner.instances.getIamPolicy` on resource.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}:getIamPolicy",
        "httpMethod": "POST",
        "method": "getIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.list": {
        "description": "Lists all instances in the given project.",
        "flatPath": "v1/projects/{projectsId}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/instances",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.patch": {
        "description": "Updates an instance, and begins allocating or releasing resources as requested. The returned long-running operation can be used to track the progress of updating the instance. If the named instance does not exist, returns `NOT_FOUND`. Immediately upon completion of this request: * For resource types for which a decrease in the instance's allocation has been requested, billing is based on the newly-requested level. Until completion of the returned operation: * Cancelling the operation sets its metadata's cancel_time, and begins restoring resources to their pre-request values. The operation is guaranteed to succeed at undoing all resource changes, after which point it terminates with a `CANCELLED` status. * All other attempts to modify the instance are rejected. * Reading the instance via the API continues to give the pre-request resource levels. Upon completion of the returned operation: * Billing begins for all successfully-allocated resources (some types may have lower than the requested levels). * All newly-reserved resources are available for serving the instance's tables. * The instance's new resource levels are readable via the API. The returned long-running operation will have a name of the format `/operations/` and can be used to track the instance modification. The metadata field type is UpdateInstanceMetadata. The response field type is Instance, if successful. Authorization requires `spanner.instances.update` permission on the resource name.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.setIamPolicy": {
        "description": "Sets the access control policy on an instance resource. Replaces any existing policy. Authorization requires `spanner.instances.setIamPolicy` on resource.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}:setIamPolicy",
        "httpMethod": "POST",
        "method": "setIamPolicy",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.projects.instances.testIamPermissions": {
        "description": "Returns permissions that the caller has on the specified instance resource. Attempting this RPC on a non-existent Cloud Spanner instance resource will result in a NOT_FOUND error if the user has `spanner.instances.list` permission on the containing Google Cloud Project. Otherwise returns an empty set of permissions.",
        "flatPath": "v1/projects/{projectsId}/instances/{instancesId}:testIamPermissions",
        "httpMethod": "POST",
        "method": "testIamPermissions",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "spanner.scans.list": {
        "description": "Return available scans given a Database-specific resource name.",
        "flatPath": "v1/scans",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "scans",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Spanner API"
  },
  "speech": {
    "description": "Converts audio to text by applying powerful neural network models.",
    "methods": {
      "speech.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1p1beta1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1p1beta1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.customClasses.create": {
        "description": "Create a custom class.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/customClasses",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "customClasses",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.customClasses.delete": {
        "description": "Delete a custom class.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/customClasses/{customClassesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "customClasses",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.customClasses.get": {
        "description": "Get a custom class.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/customClasses/{customClassesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "customClasses",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.customClasses.list": {
        "description": "List custom classes.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/customClasses",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "customClasses",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.customClasses.patch": {
        "description": "Update a custom class.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/customClasses/{customClassesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "customClasses",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1"
        ]
      },
      "speech.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v2beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2beta1"
        ]
      },
      "speech.projects.locations.phraseSets.create": {
        "description": "Create a set of phrase hints. Each item in the set can be a single word or a multi-word phrase. The items in the PhraseSet are favored by the recognition model when you send a call that includes the PhraseSet.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/phraseSets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "phraseSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.phraseSets.delete": {
        "description": "Delete a phrase set.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/phraseSets/{phraseSetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "phraseSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.phraseSets.get": {
        "description": "Get a phrase set.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/phraseSets/{phraseSetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "phraseSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.phraseSets.list": {
        "description": "List phrase sets.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/phraseSets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "phraseSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.projects.locations.phraseSets.patch": {
        "description": "Update a phrase set.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/phraseSets/{phraseSetsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "phraseSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.speech.longrunningrecognize": {
        "description": "Performs asynchronous speech recognition: receive results via the google.longrunning.Operations interface. Returns either an `Operation.error` or an `Operation.response` which contains a `LongRunningRecognizeResponse` message. For more information on asynchronous speech recognition, see the [how-to](https://cloud.google.com/speech-to-text/docs/async-recognize).",
        "flatPath": "v1p1beta1/speech:longrunningrecognize",
        "httpMethod": "POST",
        "method": "longrunningrecognize",
        "resourceType": "speech",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      },
      "speech.speech.recognize": {
        "description": "Performs synchronous speech recognition: receive results after all audio has been sent and processed.",
        "flatPath": "v1p1beta1/speech:recognize",
        "httpMethod": "POST",
        "method": "recognize",
        "resourceType": "speech",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Speech-to-Text API"
  },
  "sqladmin": {
    "description": "API for Cloud SQL database instance management",
    "methods": {
      "sql.backupRuns.delete": {
        "description": "Deletes the backup taken by a backup run.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "backupRuns",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.backupRuns.get": {
        "description": "Retrieves a resource containing information about a backup run.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "backupRuns",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.backupRuns.insert": {
        "description": "Creates a new backup run on demand.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/backupRuns",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "backupRuns",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.backupRuns.list": {
        "description": "Lists all backup runs associated with the project or a given instance and configuration in the reverse chronological order of the backup initiation time.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/backupRuns",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "backupRuns",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.connect.generateEphemeral": {
        "description": "Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}:generateEphemeralCert",
        "httpMethod": "POST",
        "method": "generateEphemeralCert",
        "resourceType": "connect",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.connect.get": {
        "description": "Retrieves connect settings about a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/connectSettings",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "connect",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.databases.delete": {
        "description": "Deletes a database from a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "databases",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.databases.get": {
        "description": "Retrieves a resource containing information about a database inside a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "databases",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.databases.insert": {
        "description": "Inserts a resource containing information about a database inside a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/databases",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "databases",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.databases.list": {
        "description": "Lists databases in the specified Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/databases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "databases",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.databases.patch": {
        "description": "Partially updates a resource containing information about a database inside a Cloud SQL instance. This method supports patch semantics.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "databases",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.databases.update": {
        "description": "Updates a resource containing information about a database inside a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "databases",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.flags.list": {
        "description": "Lists all available database flags for Cloud SQL instances.",
        "flatPath": "sql/v1beta4/flags",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "flags",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.addServerCa": {
        "description": "Add a new trusted Certificate Authority (CA) version for the specified instance. Required to prepare for a certificate rotation. If a CA version was previously added but never used in a certificate rotation, this operation replaces that version. There cannot be more than one CA version waiting to be rotated in.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/addServerCa",
        "httpMethod": "POST",
        "method": "addServerCa",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.clone": {
        "description": "Creates a Cloud SQL instance as a clone of the source instance. Using this operation might cause your instance to restart.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/clone",
        "httpMethod": "POST",
        "method": "clone",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.delete": {
        "description": "Deletes a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.demoteMaster": {
        "description": "Demotes the stand-alone instance to be a Cloud SQL read replica for an external database server.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster",
        "httpMethod": "POST",
        "method": "demoteMaster",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.export": {
        "description": "Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/export",
        "httpMethod": "POST",
        "method": "export",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.failover": {
        "description": "Initiates a manual failover of a high availability (HA) primary instance to a standby instance, which becomes the primary instance. Users are then rerouted to the new primary. For more information, see the [Overview of high availability](https://cloud.google.com/sql/docs/mysql/high-availability) page in the Cloud SQL documentation. If using Legacy HA (MySQL only), this causes the instance to failover to its failover replica instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/failover",
        "httpMethod": "POST",
        "method": "failover",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.get": {
        "description": "Retrieves a resource containing information about a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.import": {
        "description": "Imports data into a Cloud SQL instance from a SQL dump or CSV file in Cloud Storage.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.insert": {
        "description": "Creates a new Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.list": {
        "description": "Lists instances under a given project.",
        "flatPath": "sql/v1beta4/projects/{project}/instances",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.listServerCas": {
        "description": "Lists all of the trusted Certificate Authorities (CAs) for the specified instance. There can be up to three CAs listed: the CA that was used to sign the certificate that is currently in use, a CA that has been added but not yet used to sign a certificate, and a CA used to sign a certificate that has previously rotated out.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/listServerCas",
        "httpMethod": "GET",
        "method": "listServerCas",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.patch": {
        "description": "Updates settings of a Cloud SQL instance. This method supports patch semantics.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.promoteReplica": {
        "description": "Promotes the read replica instance to be a stand-alone Cloud SQL instance. Using this operation might cause your instance to restart.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica",
        "httpMethod": "POST",
        "method": "promoteReplica",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.resetSslConfig": {
        "description": "Deletes all client certificates and generates a new server SSL certificate for the instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig",
        "httpMethod": "POST",
        "method": "resetSslConfig",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.restart": {
        "description": "Restarts a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/restart",
        "httpMethod": "POST",
        "method": "restart",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.restoreBackup": {
        "description": "Restores a backup of a Cloud SQL instance. Using this operation might cause your instance to restart.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup",
        "httpMethod": "POST",
        "method": "restoreBackup",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.rotateServerCa": {
        "description": "Rotates the server certificate to one signed by the Certificate Authority (CA) version previously added with the addServerCA method.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa",
        "httpMethod": "POST",
        "method": "rotateServerCa",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.startReplica": {
        "description": "Starts the replication in the read replica instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/startReplica",
        "httpMethod": "POST",
        "method": "startReplica",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.stopReplica": {
        "description": "Stops the replication in the read replica instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/stopReplica",
        "httpMethod": "POST",
        "method": "stopReplica",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.truncateLog": {
        "description": "Truncate MySQL general and slow query log tables MySQL only.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/truncateLog",
        "httpMethod": "POST",
        "method": "truncateLog",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.instances.update": {
        "description": "Updates settings of a Cloud SQL instance. Using this operation might cause your instance to restart.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "instances",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.operations.get": {
        "description": "Retrieves an instance operation that has been performed on an instance.",
        "flatPath": "sql/v1beta4/projects/{project}/operations/{operation}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.operations.list": {
        "description": "Lists all instance operations that have been performed on the given Cloud SQL instance in the reverse chronological order of the start time.",
        "flatPath": "sql/v1beta4/projects/{project}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.projects.instances.rescheduleMaintenance": {
        "description": "Reschedules the maintenance on the given instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/rescheduleMaintenance",
        "httpMethod": "POST",
        "method": "rescheduleMaintenance",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.projects.instances.startExternalSync": {
        "description": "Start External primary instance migration.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/startExternalSync",
        "httpMethod": "POST",
        "method": "startExternalSync",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.projects.instances.verifyExternalSyncSettings": {
        "description": "Verify External primary instance external sync settings.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/verifyExternalSyncSettings",
        "httpMethod": "POST",
        "method": "verifyExternalSyncSettings",
        "resourceType": "instances",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.sslCerts.createEphemeral": {
        "description": "Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral",
        "httpMethod": "POST",
        "method": "createEphemeral",
        "resourceType": "sslCerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.sslCerts.delete": {
        "description": "Deletes the SSL certificate. For First Generation instances, the certificate remains valid until the instance is restarted.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sslCerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.sslCerts.get": {
        "description": "Retrieves a particular SSL certificate. Does not include the private key (required for usage). The private key must be saved from the response to initial creation.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sslCerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.sslCerts.insert": {
        "description": "Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/sslCerts",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "sslCerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.sslCerts.list": {
        "description": "Lists all of the current SSL certificates for the instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/sslCerts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sslCerts",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.tiers.list": {
        "description": "Lists all available machine types (tiers) for Cloud SQL, for example, db-custom-1-3840. For related information, see Pricing.",
        "flatPath": "sql/v1beta4/projects/{project}/tiers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tiers",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.users.delete": {
        "description": "Deletes a user from a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/users",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.users.insert": {
        "description": "Creates a new user in a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/users",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.users.list": {
        "description": "Lists users in the specified Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/users",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      },
      "sql.users.update": {
        "description": "Updates an existing user in a Cloud SQL instance.",
        "flatPath": "sql/v1beta4/projects/{project}/instances/{instance}/users",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "users",
        "resourceTypePath": "/",
        "versions": [
          "v1beta4",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud SQL Admin API"
  },
  "storage": {
    "description": "Lets you store and retrieve potentially-large, immutable data objects.",
    "methods": {
      "storage.bucketAccessControls.delete": {
        "description": "Permanently deletes the ACL entry for the specified entity on the specified bucket.",
        "flatPath": "b/{bucket}/acl/{entity}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "bucketAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.bucketAccessControls.get": {
        "description": "Returns the ACL entry for the specified entity on the specified bucket.",
        "flatPath": "b/{bucket}/acl/{entity}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "bucketAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.bucketAccessControls.insert": {
        "description": "Creates a new ACL entry on the specified bucket.",
        "flatPath": "b/{bucket}/acl",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "bucketAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.bucketAccessControls.list": {
        "description": "Retrieves ACL entries on the specified bucket.",
        "flatPath": "b/{bucket}/acl",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "bucketAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.bucketAccessControls.patch": {
        "description": "Patches an ACL entry on the specified bucket.",
        "flatPath": "b/{bucket}/acl/{entity}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "bucketAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.bucketAccessControls.update": {
        "description": "Updates an ACL entry on the specified bucket.",
        "flatPath": "b/{bucket}/acl/{entity}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "bucketAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.delete": {
        "description": "Permanently deletes an empty bucket.",
        "flatPath": "b/{bucket}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.get": {
        "description": "Returns metadata for the specified bucket.",
        "flatPath": "b/{bucket}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.getIamPolicy": {
        "description": "Returns an IAM policy for the specified bucket.",
        "flatPath": "b/{bucket}/iam",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.insert": {
        "description": "Creates a new bucket.",
        "flatPath": "b",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.list": {
        "description": "Retrieves a list of buckets for a given project.",
        "flatPath": "b",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.lockRetentionPolicy": {
        "description": "Locks retention policy on a bucket.",
        "flatPath": "b/{bucket}/lockRetentionPolicy",
        "httpMethod": "POST",
        "method": "lockRetentionPolicy",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.patch": {
        "description": "Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.",
        "flatPath": "b/{bucket}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.setIamPolicy": {
        "description": "Updates an IAM policy for the specified bucket.",
        "flatPath": "b/{bucket}/iam",
        "httpMethod": "PUT",
        "method": "setIamPolicy",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.testIamPermissions": {
        "description": "Tests a set of permissions on the given bucket to see which, if any, are held by the caller.",
        "flatPath": "b/{bucket}/iam/testPermissions",
        "httpMethod": "GET",
        "method": "testIamPermissions",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.buckets.update": {
        "description": "Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.",
        "flatPath": "b/{bucket}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "buckets",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.channels.stop": {
        "description": "Stop watching resources through this channel",
        "flatPath": "channels/stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "channels",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.defaultObjectAccessControls.delete": {
        "description": "Permanently deletes the default object ACL entry for the specified entity on the specified bucket.",
        "flatPath": "b/{bucket}/defaultObjectAcl/{entity}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "defaultObjectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.defaultObjectAccessControls.get": {
        "description": "Returns the default object ACL entry for the specified entity on the specified bucket.",
        "flatPath": "b/{bucket}/defaultObjectAcl/{entity}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "defaultObjectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.defaultObjectAccessControls.insert": {
        "description": "Creates a new default object ACL entry on the specified bucket.",
        "flatPath": "b/{bucket}/defaultObjectAcl",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "defaultObjectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.defaultObjectAccessControls.list": {
        "description": "Retrieves default object ACL entries on the specified bucket.",
        "flatPath": "b/{bucket}/defaultObjectAcl",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "defaultObjectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.defaultObjectAccessControls.patch": {
        "description": "Patches a default object ACL entry on the specified bucket.",
        "flatPath": "b/{bucket}/defaultObjectAcl/{entity}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "defaultObjectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.defaultObjectAccessControls.update": {
        "description": "Updates a default object ACL entry on the specified bucket.",
        "flatPath": "b/{bucket}/defaultObjectAcl/{entity}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "defaultObjectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.notifications.delete": {
        "description": "Permanently deletes a notification subscription.",
        "flatPath": "b/{bucket}/notificationConfigs/{notification}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "notifications",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.notifications.get": {
        "description": "View a notification configuration.",
        "flatPath": "b/{bucket}/notificationConfigs/{notification}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "notifications",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.notifications.insert": {
        "description": "Creates a notification subscription for a given bucket.",
        "flatPath": "b/{bucket}/notificationConfigs",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "notifications",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.notifications.list": {
        "description": "Retrieves a list of notification subscriptions for a given bucket.",
        "flatPath": "b/{bucket}/notificationConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "notifications",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objectAccessControls.delete": {
        "description": "Permanently deletes the ACL entry for the specified entity on the specified object.",
        "flatPath": "b/{bucket}/o/{object}/acl/{entity}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "objectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objectAccessControls.get": {
        "description": "Returns the ACL entry for the specified entity on the specified object.",
        "flatPath": "b/{bucket}/o/{object}/acl/{entity}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "objectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objectAccessControls.insert": {
        "description": "Creates a new ACL entry on the specified object.",
        "flatPath": "b/{bucket}/o/{object}/acl",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "objectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objectAccessControls.list": {
        "description": "Retrieves ACL entries on the specified object.",
        "flatPath": "b/{bucket}/o/{object}/acl",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "objectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objectAccessControls.patch": {
        "description": "Patches an ACL entry on the specified object.",
        "flatPath": "b/{bucket}/o/{object}/acl/{entity}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "objectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objectAccessControls.update": {
        "description": "Updates an ACL entry on the specified object.",
        "flatPath": "b/{bucket}/o/{object}/acl/{entity}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "objectAccessControls",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.compose": {
        "description": "Concatenates a list of existing objects into a new object in the same bucket.",
        "flatPath": "b/{destinationBucket}/o/{destinationObject}/compose",
        "httpMethod": "POST",
        "method": "compose",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.copy": {
        "description": "Copies a source object to a destination object. Optionally overrides metadata.",
        "flatPath": "b/{sourceBucket}/o/{sourceObject}/copyTo/b/{destinationBucket}/o/{destinationObject}",
        "httpMethod": "POST",
        "method": "copy",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.delete": {
        "description": "Deletes an object and its metadata. Deletions are permanent if versioning is not enabled for the bucket, or if the generation parameter is used.",
        "flatPath": "b/{bucket}/o/{object}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.get": {
        "description": "Retrieves an object or its metadata.",
        "flatPath": "b/{bucket}/o/{object}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.getIamPolicy": {
        "description": "Returns an IAM policy for the specified object.",
        "flatPath": "b/{bucket}/o/{object}/iam",
        "httpMethod": "GET",
        "method": "getIamPolicy",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.insert": {
        "description": "Stores a new object and metadata.",
        "flatPath": "b/{bucket}/o",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.list": {
        "description": "Retrieves a list of objects matching the criteria.",
        "flatPath": "b/{bucket}/o",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.patch": {
        "description": "Patches an object's metadata.",
        "flatPath": "b/{bucket}/o/{object}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.rewrite": {
        "description": "Rewrites a source object to a destination object. Optionally overrides metadata.",
        "flatPath": "b/{sourceBucket}/o/{sourceObject}/rewriteTo/b/{destinationBucket}/o/{destinationObject}",
        "httpMethod": "POST",
        "method": "rewrite",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.setIamPolicy": {
        "description": "Updates an IAM policy for the specified object.",
        "flatPath": "b/{bucket}/o/{object}/iam",
        "httpMethod": "PUT",
        "method": "setIamPolicy",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.testIamPermissions": {
        "description": "Tests a set of permissions on the given object to see which, if any, are held by the caller.",
        "flatPath": "b/{bucket}/o/{object}/iam/testPermissions",
        "httpMethod": "GET",
        "method": "testIamPermissions",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.update": {
        "description": "Updates an object's metadata.",
        "flatPath": "b/{bucket}/o/{object}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.objects.watchAll": {
        "description": "Watch for changes on all objects in a bucket.",
        "flatPath": "b/{bucket}/o/watch",
        "httpMethod": "POST",
        "method": "watchAll",
        "resourceType": "objects",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storage.projects.hmacKeys.create": {
        "description": "Creates a new HMAC key for the specified service account.",
        "flatPath": "projects/{projectId}/hmacKeys",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "hmacKeys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storage.projects.hmacKeys.delete": {
        "description": "Deletes an HMAC key.",
        "flatPath": "projects/{projectId}/hmacKeys/{accessId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "hmacKeys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storage.projects.hmacKeys.get": {
        "description": "Retrieves an HMAC key's metadata",
        "flatPath": "projects/{projectId}/hmacKeys/{accessId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "hmacKeys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storage.projects.hmacKeys.list": {
        "description": "Retrieves a list of HMAC keys matching the criteria.",
        "flatPath": "projects/{projectId}/hmacKeys",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "hmacKeys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storage.projects.hmacKeys.update": {
        "description": "Updates the state of an HMAC key. See the HMAC Key resource descriptor for valid states.",
        "flatPath": "projects/{projectId}/hmacKeys/{accessId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "hmacKeys",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storage.projects.serviceAccount.get": {
        "description": "Get the email address of this project's Google Cloud Storage service account.",
        "flatPath": "projects/{projectId}/serviceAccount",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "serviceAccount",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Storage API"
  },
  "storagetransfer": {
    "description": "Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets.",
    "methods": {
      "storagetransfer.googleServiceAccounts.get": {
        "description": "Returns the Google service account that is used by Storage Transfer Service to access buckets in the project where transfers run or in other projects. Each Google service account is associated with one Google Cloud Platform Console project. Users should add this service account to the Google Cloud Storage bucket ACLs to grant access to Storage Transfer Service. This service account is created and owned by Storage Transfer Service and can only be used by Storage Transfer Service.",
        "flatPath": "v1/googleServiceAccounts/{projectId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "googleServiceAccounts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.projects.agentPools.create": {
        "description": "Creates an agent pool resource.",
        "flatPath": "v1/projects/{projectsId}/agentPools",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "agentPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.projects.agentPools.delete": {
        "description": "Deletes an agent pool.",
        "flatPath": "v1/projects/{projectsId}/agentPools/{agentPoolsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "agentPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.projects.agentPools.get": {
        "description": "Gets an agent pool.",
        "flatPath": "v1/projects/{projectsId}/agentPools/{agentPoolsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "agentPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.projects.agentPools.list": {
        "description": "Lists agent pools.",
        "flatPath": "v1/projects/{projectsId}/agentPools",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "agentPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.projects.agentPools.patch": {
        "description": "Updates an existing agent pool resource.",
        "flatPath": "v1/projects/{projectsId}/agentPools/{agentPoolsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "agentPools",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferJobs.create": {
        "description": "Creates a transfer job that runs periodically.",
        "flatPath": "v1/transferJobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "transferJobs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferJobs.get": {
        "description": "Gets a transfer job.",
        "flatPath": "v1/transferJobs/{transferJobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "transferJobs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferJobs.list": {
        "description": "Lists transfer jobs.",
        "flatPath": "v1/transferJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "transferJobs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferJobs.patch": {
        "description": "Updates a transfer job. Updating a job's transfer spec does not affect transfer operations that are running already. **Note:** The job's status field can be modified using this RPC (for example, to set a job's status to DELETED, DISABLED, or ENABLED).",
        "flatPath": "v1/transferJobs/{transferJobsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "transferJobs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferJobs.run": {
        "description": "Attempts to start a new TransferOperation for the current TransferJob. A TransferJob has a maximum of one active TransferOperation. If this method is called while a TransferOperation is active, an error wil be returned.",
        "flatPath": "v1/transferJobs/{transferJobsId}:run",
        "httpMethod": "POST",
        "method": "run",
        "resourceType": "transferJobs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferOperations.cancel": {
        "description": "Cancels a transfer. Use the transferOperations.get method to check if the cancellation succeeded or if the operation completed despite the `cancel` request. When you cancel an operation, the currently running transfer is interrupted. For recurring transfer jobs, the next instance of the transfer job will still run. For example, if your job is configured to run every day at 1pm and you cancel Monday's operation at 1:05pm, Monday's transfer will stop. However, a transfer job will still be attempted on Tuesday. This applies only to currently running operations. If an operation is not currently running, `cancel` does nothing. *Caution:* Canceling a transfer job can leave your data in an unknown state. We recommend that you restore the state at both the destination and the source after the `cancel` request completes so that your data is in a consistent state. When you cancel a job, the next job computes a delta of files and may repair any inconsistent state. For instance, if you run a job every day, and today's job found 10 new files and transferred five files before you canceled the job, tomorrow's transfer operation will compute a new delta with the five files that were not copied today plus any new files discovered tomorrow.",
        "flatPath": "v1/transferOperations/{transferOperationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "transferOperations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferOperations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/transferOperations/{transferOperationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "transferOperations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferOperations.list": {
        "description": "Lists transfer operations. Operations are ordered by their creation time in reverse chronological order.",
        "flatPath": "v1/transferOperations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "transferOperations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferOperations.pause": {
        "description": "Pauses a transfer operation.",
        "flatPath": "v1/transferOperations/{transferOperationsId}:pause",
        "httpMethod": "POST",
        "method": "pause",
        "resourceType": "transferOperations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "storagetransfer.transferOperations.resume": {
        "description": "Resumes a transfer operation that is paused.",
        "flatPath": "v1/transferOperations/{transferOperationsId}:resume",
        "httpMethod": "POST",
        "method": "resume",
        "resourceType": "transferOperations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Storage Transfer API"
  },
  "streetviewpublish": {
    "description": "Publishes 360 photos to Google Maps, along with position, orientation, and connectivity metadata. Apps can offer an interface for positioning, connecting, and uploading user-generated Street View images.",
    "methods": {
      "streetviewpublish.photo.create": {
        "description": "After the client finishes uploading the photo with the returned UploadRef, CreatePhoto publishes the uploaded Photo to Street View on Google Maps. Currently, the only way to set heading, pitch, and roll in CreatePhoto is through the [Photo Sphere XMP metadata](https://developers.google.com/streetview/spherical-metadata) in the photo bytes. CreatePhoto ignores the `pose.heading`, `pose.pitch`, `pose.roll`, `pose.altitude`, and `pose.level` fields in Pose. This method returns the following error codes: * google.rpc.Code.INVALID_ARGUMENT if the request is malformed or if the uploaded photo is not a 360 photo. * google.rpc.Code.NOT_FOUND if the upload reference does not exist. * google.rpc.Code.RESOURCE_EXHAUSTED if the account has reached the storage limit.",
        "flatPath": "v1/photo",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "photo",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "streetviewpublish.photo.delete": {
        "description": "Deletes a Photo and its metadata. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo. * google.rpc.Code.NOT_FOUND if the photo ID does not exist.",
        "flatPath": "v1/photo/{photoId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "photo",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "streetviewpublish.photo.get": {
        "description": "Gets the metadata of the specified Photo. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested Photo. * google.rpc.Code.NOT_FOUND if the requested Photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is still being indexed.",
        "flatPath": "v1/photo/{photoId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "photo",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "streetviewpublish.photo.startUpload": {
        "description": "Creates an upload session to start uploading photo bytes. The method uses the upload URL of the returned UploadRef to upload the bytes for the Photo. In addition to the photo requirements shown in https://support.google.com/maps/answer/7012050?ref_topic=6275604, the photo must meet the following requirements: * Photo Sphere XMP metadata must be included in the photo metadata. See https://developers.google.com/streetview/spherical-metadata for the required fields. * The pixel size of the photo must meet the size requirements listed in https://support.google.com/maps/answer/7012050?ref_topic=6275604, and the photo must be a full 360 horizontally. After the upload completes, the method uses UploadRef with CreatePhoto to create the Photo object entry.",
        "flatPath": "v1/photo:startUpload",
        "httpMethod": "POST",
        "method": "startUpload",
        "resourceType": "photo",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "streetviewpublish.photo.update": {
        "description": "Updates the metadata of a Photo, such as pose, place association, connections, etc. Changing the pixels of a photo is not supported. Only the fields specified in the updateMask field are used. If `updateMask` is not present, the update applies to all fields. This method returns the following error codes: * google.rpc.Code.PERMISSION_DENIED if the requesting user did not create the requested photo. * google.rpc.Code.INVALID_ARGUMENT if the request is malformed. * google.rpc.Code.NOT_FOUND if the requested photo does not exist. * google.rpc.Code.UNAVAILABLE if the requested Photo is still being indexed.",
        "flatPath": "v1/photo/{id}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "photo",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "streetviewpublish.photos.batchDelete": {
        "description": "Deletes a list of Photos and their metadata. Note that if BatchDeletePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchDeletePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchDeletePhotosResponse.results. See DeletePhoto for specific failures that can occur per photo.",
        "flatPath": "v1/photos:batchDelete",
        "httpMethod": "POST",
        "method": "batchDelete",
        "resourceType": "photos",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "streetviewpublish.photos.batchGet": {
        "description": "Gets the metadata of the specified Photo batch. Note that if BatchGetPhotos fails, either critical fields are missing or there is an authentication error. Even if BatchGetPhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchGetPhotosResponse.results. See GetPhoto for specific failures that can occur per photo.",
        "flatPath": "v1/photos:batchGet",
        "httpMethod": "GET",
        "method": "batchGet",
        "resourceType": "photos",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "streetviewpublish.photos.batchUpdate": {
        "description": "Updates the metadata of Photos, such as pose, place association, connections, etc. Changing the pixels of photos is not supported. Note that if BatchUpdatePhotos fails, either critical fields are missing or there is an authentication error. Even if BatchUpdatePhotos succeeds, individual photos in the batch may have failures. These failures are specified in each PhotoResponse.status in BatchUpdatePhotosResponse.results. See UpdatePhoto for specific failures that can occur per photo. Only the fields specified in updateMask field are used. If `updateMask` is not present, the update applies to all fields. The number of UpdatePhotoRequest messages in a BatchUpdatePhotosRequest must not exceed 20. > Note: To update Pose.altitude, Pose.latLngPair has to be filled as well. Otherwise, the request will fail.",
        "flatPath": "v1/photos:batchUpdate",
        "httpMethod": "POST",
        "method": "batchUpdate",
        "resourceType": "photos",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "streetviewpublish.photos.list": {
        "description": "Lists all the Photos that belong to the user. > Note: Recently created photos that are still being indexed are not returned in the response.",
        "flatPath": "v1/photos",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "photos",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Street View Publish API"
  },
  "sts": {
    "description": "The Security Token Service exchanges Google or third-party credentials for a short-lived access token to Google Cloud resources.",
    "methods": {
      "sts.introspect": {
        "description": "Gets information about a Google OAuth 2.0 access token issued by the Google Cloud [Security Token Service API](https://cloud.google.com/iam/docs/reference/sts/rest).",
        "flatPath": "v1/introspect",
        "httpMethod": "POST",
        "method": "introspect",
        "resourceType": "v1",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "sts.token": {
        "description": "Exchanges a credential for a Google OAuth 2.0 access token. The token asserts an external identity within a workload identity pool, or it applies a Credential Access Boundary to a Google access token. When you call this method, do not send the `Authorization` HTTP header in the request. This method does not require the `Authorization` header, and using the header can cause the request to fail.",
        "flatPath": "v1beta/token",
        "httpMethod": "POST",
        "method": "token",
        "resourceType": "v1beta",
        "resourceTypePath": "/",
        "versions": [
          "v1beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Security Token Service API"
  },
  "tagmanager": {
    "description": "This API allows clients to access and modify container and tag configuration.",
    "methods": {
      "tagmanager.accounts.containers.create": {
        "description": "Creates a Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "containers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.delete": {
        "description": "Deletes a Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "containers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.environments.create": {
        "description": "Creates a GTM Environment.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "environments",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.environments.delete": {
        "description": "Deletes a GTM Environment.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "environments",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.environments.get": {
        "description": "Gets a GTM Environment.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "environments",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.environments.list": {
        "description": "Lists all GTM Environments of a GTM Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "environments",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.environments.reauthorize": {
        "description": "Re-generates the authorization code for a GTM Environment.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/environments/{environmentsId}:reauthorize",
        "httpMethod": "POST",
        "method": "reauthorize",
        "resourceType": "environments",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.environments.update": {
        "description": "Updates a GTM Environment.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/environments/{environmentId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "environments",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.folders.create": {
        "description": "Creates a GTM Folder.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.folders.delete": {
        "description": "Deletes a GTM Folder.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.folders.entities.list": {
        "description": "List all entities in a GTM Folder.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}/entities",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "entities",
        "resourceTypePath": "//accounts/containers/folders",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.folders.get": {
        "description": "Gets a GTM Folder.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.folders.list": {
        "description": "Lists all GTM Folders of a Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.folders.update": {
        "description": "Updates a GTM Folder.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/folders/{folderId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.get": {
        "description": "Gets a Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "containers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.list": {
        "description": "Lists all Containers that belongs to a GTM Account.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "containers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.move_folders.update": {
        "description": "Moves entities to a GTM Folder.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/move_folders/{folderId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "move_folders",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.reauthorize_environments.update": {
        "description": "Re-generates the authorization code for a GTM Environment.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/reauthorize_environments/{environmentId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "reauthorize_environments",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.tags.create": {
        "description": "Creates a GTM Tag.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.tags.delete": {
        "description": "Deletes a GTM Tag.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.tags.get": {
        "description": "Gets a GTM Tag.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.tags.list": {
        "description": "Lists all GTM Tags of a Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.tags.update": {
        "description": "Updates a GTM Tag.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/tags/{tagId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.triggers.create": {
        "description": "Creates a GTM Trigger.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.triggers.delete": {
        "description": "Deletes a GTM Trigger.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.triggers.get": {
        "description": "Gets a GTM Trigger.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.triggers.list": {
        "description": "Lists all GTM Triggers of a Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.triggers.update": {
        "description": "Updates a GTM Trigger.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/triggers/{triggerId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.update": {
        "description": "Updates a Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "containers",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.variables.create": {
        "description": "Creates a GTM Variable.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.variables.delete": {
        "description": "Deletes a GTM Variable.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.variables.get": {
        "description": "Gets a GTM Variable.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.variables.list": {
        "description": "Lists all GTM Variables of a Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.variables.update": {
        "description": "Updates a GTM Variable.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/variables/{variableId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.version_headers.latest": {
        "description": "Gets the latest container version header",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/version_headers:latest",
        "httpMethod": "GET",
        "method": "latest",
        "resourceType": "version_headers",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.version_headers.list": {
        "description": "Lists all Container Versions of a GTM Container.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/version_headers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "version_headers",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.versions.create": {
        "description": "Creates a Container Version.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.versions.delete": {
        "description": "Deletes a Container Version.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.versions.get": {
        "description": "Gets a Container Version.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.versions.list": {
        "description": "Lists all Container Versions of a GTM Container.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.versions.live": {
        "description": "Gets the live (i.e. published) container version",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/versions:live",
        "httpMethod": "GET",
        "method": "live",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.versions.publish": {
        "description": "Publishes a Container Version.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/publish",
        "httpMethod": "POST",
        "method": "publish",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.versions.restore": {
        "description": "Restores a Container Version. This will overwrite the container's current configuration (including its variables, triggers and tags). The operation will not have any effect on the version that is being served (i.e. the published version).",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/restore",
        "httpMethod": "POST",
        "method": "restore",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.containers.versions.set_latest": {
        "description": "Sets the latest version used for synchronization of workspaces when detecting conflicts and errors.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/versions/{versionsId}:set_latest",
        "httpMethod": "POST",
        "method": "set_latest",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.versions.undelete": {
        "description": "Undeletes a Container Version.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}/undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.versions.update": {
        "description": "Updates a Container Version.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/containers/{containerId}/versions/{containerVersionId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "versions",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.built_in_variables.create": {
        "description": "Creates one or more GTM Built-In Variables.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/built_in_variables",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "built_in_variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.built_in_variables.delete": {
        "description": "Deletes one or more GTM Built-In Variables.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/built_in_variables",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "built_in_variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.built_in_variables.list": {
        "description": "Lists all the enabled Built-In Variables of a GTM Container.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/built_in_variables",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "built_in_variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.built_in_variables.revert": {
        "description": "Reverts changes to a GTM Built-In Variables in a GTM Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/built_in_variables:revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "built_in_variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.clients.create": {
        "description": "Creates a GTM Client.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/clients",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "clients",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.clients.delete": {
        "description": "Deletes a GTM Client.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/clients/{clientsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "clients",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.clients.get": {
        "description": "Gets a GTM Client.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/clients/{clientsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clients",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.clients.list": {
        "description": "Lists all GTM Clients of a GTM container workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/clients",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clients",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.clients.revert": {
        "description": "Reverts changes to a GTM Client in a GTM Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/clients/{clientsId}:revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "clients",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.clients.update": {
        "description": "Updates a GTM Client.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/clients/{clientsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "clients",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.create": {
        "description": "Creates a Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.create_version": {
        "description": "Creates a Container Version from the entities present in the workspace, deletes the workspace, and sets the base container version to the newly created version.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}:create_version",
        "httpMethod": "POST",
        "method": "create_version",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.delete": {
        "description": "Deletes a Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.folders.create": {
        "description": "Creates a GTM Folder.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/folders",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.folders.delete": {
        "description": "Deletes a GTM Folder.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/folders/{foldersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.folders.entities": {
        "description": "List all entities in a GTM Folder.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/folders/{foldersId}:entities",
        "httpMethod": "POST",
        "method": "entities",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.folders.get": {
        "description": "Gets a GTM Folder.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/folders/{foldersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.folders.list": {
        "description": "Lists all GTM Folders of a Container.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/folders",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.folders.move_entities_to_folder": {
        "description": "Moves entities to a GTM Folder.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/folders/{foldersId}:move_entities_to_folder",
        "httpMethod": "POST",
        "method": "move_entities_to_folder",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.folders.revert": {
        "description": "Reverts changes to a GTM Folder in a GTM Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/folders/{foldersId}:revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.folders.update": {
        "description": "Updates a GTM Folder.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/folders/{foldersId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "folders",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.get": {
        "description": "Gets a Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.getStatus": {
        "description": "Finds conflicting and modified entities in the workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/status",
        "httpMethod": "GET",
        "method": "getStatus",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.list": {
        "description": "Lists all Workspaces that belong to a GTM Container.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.quick_preview": {
        "description": "Quick previews a workspace by creating a fake container version from all entities in the provided workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}:quick_preview",
        "httpMethod": "POST",
        "method": "quick_preview",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.resolve_conflict": {
        "description": "Resolves a merge conflict for a workspace entity by updating it to the resolved entity passed in the request.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}:resolve_conflict",
        "httpMethod": "POST",
        "method": "resolve_conflict",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.sync": {
        "description": "Syncs a workspace to the latest container version by updating all unmodified workspace entities and displaying conflicts for modified entities.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}:sync",
        "httpMethod": "POST",
        "method": "sync",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.tags.create": {
        "description": "Creates a GTM Tag.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/tags",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.tags.delete": {
        "description": "Deletes a GTM Tag.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/tags/{tagsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.tags.get": {
        "description": "Gets a GTM Tag.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/tags/{tagsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.tags.list": {
        "description": "Lists all GTM Tags of a Container.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/tags",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.tags.revert": {
        "description": "Reverts changes to a GTM Tag in a GTM Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/tags/{tagsId}:revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.tags.update": {
        "description": "Updates a GTM Tag.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/tags/{tagsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "tags",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.templates.create": {
        "description": "Creates a GTM Custom Template.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/templates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "templates",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.templates.delete": {
        "description": "Deletes a GTM Template.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/templates/{templatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "templates",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.templates.get": {
        "description": "Gets a GTM Template.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/templates/{templatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "templates",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.templates.list": {
        "description": "Lists all GTM Templates of a GTM container workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/templates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "templates",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.templates.revert": {
        "description": "Reverts changes to a GTM Template in a GTM Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/templates/{templatesId}:revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "templates",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.templates.update": {
        "description": "Updates a GTM Template.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/templates/{templatesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "templates",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.triggers.create": {
        "description": "Creates a GTM Trigger.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/triggers",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.triggers.delete": {
        "description": "Deletes a GTM Trigger.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/triggers/{triggersId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.triggers.get": {
        "description": "Gets a GTM Trigger.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/triggers/{triggersId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.triggers.list": {
        "description": "Lists all GTM Triggers of a Container.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/triggers",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.triggers.revert": {
        "description": "Reverts changes to a GTM Trigger in a GTM Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/triggers/{triggersId}:revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.triggers.update": {
        "description": "Updates a GTM Trigger.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/triggers/{triggersId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "triggers",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.update": {
        "description": "Updates a Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "workspaces",
        "resourceTypePath": "//accounts/containers",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.variables.create": {
        "description": "Creates a GTM Variable.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/variables",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.variables.delete": {
        "description": "Deletes a GTM Variable.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/variables/{variablesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.variables.get": {
        "description": "Gets a GTM Variable.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/variables/{variablesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.variables.list": {
        "description": "Lists all GTM Variables of a Container.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/variables",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.variables.revert": {
        "description": "Reverts changes to a GTM Variable in a GTM Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/variables/{variablesId}:revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.variables.update": {
        "description": "Updates a GTM Variable.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/variables/{variablesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "variables",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.zones.create": {
        "description": "Creates a GTM Zone.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/zones",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "zones",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.zones.delete": {
        "description": "Deletes a GTM Zone.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/zones/{zonesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "zones",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.zones.get": {
        "description": "Gets a GTM Zone.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/zones/{zonesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "zones",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.zones.list": {
        "description": "Lists all GTM Zones of a GTM container workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/zones",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "zones",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.zones.revert": {
        "description": "Reverts changes to a GTM Zone in a GTM Workspace.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/zones/{zonesId}:revert",
        "httpMethod": "POST",
        "method": "revert",
        "resourceType": "zones",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.containers.workspaces.zones.update": {
        "description": "Updates a GTM Zone.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/containers/{containersId}/workspaces/{workspacesId}/zones/{zonesId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "zones",
        "resourceTypePath": "//accounts/containers/workspaces",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.get": {
        "description": "Gets a GTM Account.",
        "flatPath": "tagmanager/v1/accounts/{accountId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.list": {
        "description": "Lists all GTM Accounts that a user has access to.",
        "flatPath": "tagmanager/v1/accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.permissions.create": {
        "description": "Creates a user's Account & Container Permissions.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/permissions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.permissions.delete": {
        "description": "Removes a user from the account, revoking access to it and all of its containers.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/permissions/{permissionId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.permissions.get": {
        "description": "Gets a user's Account & Container Permissions.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/permissions/{permissionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.permissions.list": {
        "description": "List all users that have access to the account along with Account and Container Permissions granted to each of them.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/permissions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.permissions.update": {
        "description": "Updates a user's Account & Container Permissions.",
        "flatPath": "tagmanager/v1/accounts/{accountId}/permissions/{permissionId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v1"
        ]
      },
      "tagmanager.accounts.update": {
        "description": "Updates a GTM Account.",
        "flatPath": "tagmanager/v1/accounts/{accountId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "accounts",
        "resourceTypePath": "/",
        "versions": [
          "v1",
          "v2"
        ]
      },
      "tagmanager.accounts.user_permissions.create": {
        "description": "Creates a user's Account & Container access.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/user_permissions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "user_permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.user_permissions.delete": {
        "description": "Removes a user from the account, revoking access to it and all of its containers.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/user_permissions/{user_permissionsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "user_permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.user_permissions.get": {
        "description": "Gets a user's Account & Container access.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/user_permissions/{user_permissionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "user_permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.user_permissions.list": {
        "description": "List all users that have access to the account along with Account and Container user access granted to each of them.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/user_permissions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "user_permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2"
        ]
      },
      "tagmanager.accounts.user_permissions.update": {
        "description": "Updates a user's Account & Container access.",
        "flatPath": "tagmanager/v2/accounts/{accountsId}/user_permissions/{user_permissionsId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "user_permissions",
        "resourceTypePath": "//accounts",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Tag Manager API"
  },
  "tasks": {
    "description": "The Google Tasks API lets you manage your tasks and task lists.",
    "methods": {
      "tasks.tasklists.delete": {
        "description": "Deletes the authenticated user's specified task list.",
        "flatPath": "tasks/v1/users/@me/lists/{tasklist}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tasklists",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasklists.get": {
        "description": "Returns the authenticated user's specified task list.",
        "flatPath": "tasks/v1/users/@me/lists/{tasklist}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tasklists",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasklists.insert": {
        "description": "Creates a new task list and adds it to the authenticated user's task lists.",
        "flatPath": "tasks/v1/users/@me/lists",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "tasklists",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasklists.list": {
        "description": "Returns all the authenticated user's task lists.",
        "flatPath": "tasks/v1/users/@me/lists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tasklists",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasklists.patch": {
        "description": "Updates the authenticated user's specified task list. This method supports patch semantics.",
        "flatPath": "tasks/v1/users/@me/lists/{tasklist}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tasklists",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasklists.update": {
        "description": "Updates the authenticated user's specified task list.",
        "flatPath": "tasks/v1/users/@me/lists/{tasklist}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "tasklists",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasks.clear": {
        "description": "Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list.",
        "flatPath": "tasks/v1/lists/{tasklist}/clear",
        "httpMethod": "POST",
        "method": "clear",
        "resourceType": "tasks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasks.delete": {
        "description": "Deletes the specified task from the task list.",
        "flatPath": "tasks/v1/lists/{tasklist}/tasks/{task}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "tasks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasks.get": {
        "description": "Returns the specified task.",
        "flatPath": "tasks/v1/lists/{tasklist}/tasks/{task}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tasks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasks.insert": {
        "description": "Creates a new task on the specified task list.",
        "flatPath": "tasks/v1/lists/{tasklist}/tasks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "tasks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasks.list": {
        "description": "Returns all tasks in the specified task list.",
        "flatPath": "tasks/v1/lists/{tasklist}/tasks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tasks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasks.move": {
        "description": "Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.",
        "flatPath": "tasks/v1/lists/{tasklist}/tasks/{task}/move",
        "httpMethod": "POST",
        "method": "move",
        "resourceType": "tasks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasks.patch": {
        "description": "Updates the specified task. This method supports patch semantics.",
        "flatPath": "tasks/v1/lists/{tasklist}/tasks/{task}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "tasks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "tasks.tasks.update": {
        "description": "Updates the specified task.",
        "flatPath": "tasks/v1/lists/{tasklist}/tasks/{task}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "tasks",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Tasks API"
  },
  "testing": {
    "description": "Allows developers to run automated tests for their mobile applications on Google infrastructure.",
    "methods": {
      "testing.applicationDetailService.getApkDetails": {
        "description": "Gets the details of an Android application APK.",
        "flatPath": "v1/applicationDetailService/getApkDetails",
        "httpMethod": "POST",
        "method": "getApkDetails",
        "resourceType": "applicationDetailService",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "testing.projects.testMatrices.cancel": {
        "description": "Cancels unfinished test executions in a test matrix. This call returns immediately and cancellation proceeds asynchronously. If the matrix is already final, this operation will have no effect. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist",
        "flatPath": "v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "testMatrices",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "testing.projects.testMatrices.create": {
        "description": "Creates and runs a matrix of tests according to the given specifications. Unsupported environments will be returned in the state UNSUPPORTED. A test matrix is limited to use at most 2000 devices in parallel. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed or if the matrix tries to use too many simultaneous devices.",
        "flatPath": "v1/projects/{projectId}/testMatrices",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "testMatrices",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "testing.projects.testMatrices.get": {
        "description": "Checks the status of a test matrix. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Test Matrix does not exist",
        "flatPath": "v1/projects/{projectId}/testMatrices/{testMatrixId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "testMatrices",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "testing.testEnvironmentCatalog.get": {
        "description": "Gets the catalog of supported test environments. May return any of the following canonical error codes: - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the environment type does not exist - INTERNAL - if an internal error occurred",
        "flatPath": "v1/testEnvironmentCatalog/{environmentType}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "testEnvironmentCatalog",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Testing API"
  },
  "texttospeech": {
    "description": "Synthesizes natural-sounding speech by applying powerful neural network models.",
    "methods": {
      "texttospeech.projects.locations.datasets.import": {
        "description": "Imports audio+text data for training custom voice.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "datasets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "texttospeech.text.synthesize": {
        "description": "Synthesizes speech synchronously: receive results after all text input has been processed.",
        "flatPath": "v1beta1/text:synthesize",
        "httpMethod": "POST",
        "method": "synthesize",
        "resourceType": "text",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      },
      "texttospeech.voices.list": {
        "description": "Returns a list of Voice supported for synthesis.",
        "flatPath": "v1beta1/voices",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "voices",
        "resourceTypePath": "/",
        "versions": [
          "v1beta1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Text-to-Speech API"
  },
  "toolresults": {
    "description": "API to publish and access results from developer tools.",
    "methods": {
      "toolresults.projects.getSettings": {
        "description": "Gets the Tool Results settings for a project. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read from project",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/settings",
        "httpMethod": "GET",
        "method": "getSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.create": {
        "description": "Creates a History. The returned History will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing project does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "histories",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.clusters.get": {
        "description": "Retrieves a single screenshot cluster by its ID",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters/{clusterId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.clusters.list": {
        "description": "Lists Screenshot Clusters Returns the list of screenshot clusters corresponding to an execution. Screenshot clusters are created after the execution is finished. Clusters are created from a set of screenshots. Between any two screenshots, a matching score is calculated based off their metadata that determines how similar they are. Screenshots are placed in the cluster that has screens which have the highest matching scores.",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/clusters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "clusters",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.create": {
        "description": "Creates an Execution. The returned Execution will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "executions",
        "resourceTypePath": "//projects/histories",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.environments.get": {
        "description": "Gets an Environment. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Environment does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/environments/{environmentId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "environments",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.environments.list": {
        "description": "Lists Environments for a given Execution. The Environments are sorted by display name. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing Execution does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/environments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "environments",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.get": {
        "description": "Gets an Execution. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Execution does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "executions",
        "resourceTypePath": "//projects/histories",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.list": {
        "description": "Lists Executions for a given History. The executions are sorted by creation_time in descending order. The execution_id key will be used to order the executions with the same creation_time. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing History does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "executions",
        "resourceTypePath": "//projects/histories",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.patch": {
        "description": "Updates an existing Execution with the supplied partial entity. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal - NOT_FOUND - if the containing History does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "executions",
        "resourceTypePath": "//projects/histories",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.accessibilityClusters": {
        "description": "Lists accessibility clusters for a given Step May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if an argument in the request happens to be invalid; e.g. if the locale format is incorrect - NOT_FOUND - if the containing Step does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectsId}/histories/{historiesId}/executions/{executionsId}/steps/{stepsId}:accessibilityClusters",
        "httpMethod": "GET",
        "method": "accessibilityClusters",
        "resourceType": "steps",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.create": {
        "description": "Creates a Step. The returned Step will have the id set. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the step is too large (more than 10Mib) - NOT_FOUND - if the containing Execution does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "steps",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.get": {
        "description": "Gets a Step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the Step does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "steps",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.getPerfMetricsSummary": {
        "description": "Retrieves a PerfMetricsSummary. May return any of the following error code(s): - NOT_FOUND - The specified PerfMetricsSummary does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary",
        "httpMethod": "GET",
        "method": "getPerfMetricsSummary",
        "resourceType": "steps",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.list": {
        "description": "Lists Steps for a given Execution. The steps are sorted by creation_time in descending order. The step_id key will be used to order the steps with the same creation_time. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if an argument in the request happens to be invalid; e.g. if an attempt is made to list the children of a nonexistent Step - NOT_FOUND - if the containing Execution does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "steps",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.patch": {
        "description": "Updates an existing Step with the supplied partial entity. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal (e.g try to upload a duplicate xml file), if the updated step is too large (more than 10Mib) - NOT_FOUND - if the containing Execution does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "steps",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.perfMetricsSummary.create": {
        "description": "Creates a PerfMetricsSummary resource. Returns the existing one if it has already been created. May return any of the following error code(s): - NOT_FOUND - The containing Step does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfMetricsSummary",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "perfMetricsSummary",
        "resourceTypePath": "//projects/histories/executions/steps",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.perfSampleSeries.create": {
        "description": "Creates a PerfSampleSeries. May return any of the following error code(s): - ALREADY_EXISTS - PerfMetricSummary already exists for the given Step - NOT_FOUND - The containing Step does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "perfSampleSeries",
        "resourceTypePath": "//projects/histories/executions/steps",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.perfSampleSeries.get": {
        "description": "Gets a PerfSampleSeries. May return any of the following error code(s): - NOT_FOUND - The specified PerfSampleSeries does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "perfSampleSeries",
        "resourceTypePath": "//projects/histories/executions/steps",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.perfSampleSeries.list": {
        "description": "Lists PerfSampleSeries for a given Step. The request provides an optional filter which specifies one or more PerfMetricsType to include in the result; if none returns all. The resulting PerfSampleSeries are sorted by ids. May return any of the following canonical error codes: - NOT_FOUND - The containing Step does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "perfSampleSeries",
        "resourceTypePath": "//projects/histories/executions/steps",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.perfSampleSeries.samples.batchCreate": {
        "description": "Creates a batch of PerfSamples - a client can submit multiple batches of Perf Samples through repeated calls to this method in order to split up a large request payload - duplicates and existing timestamp entries will be ignored. - the batch operation may partially succeed - the set of elements successfully inserted is returned in the response (omits items which already existed in the database). May return any of the following canonical error codes: - NOT_FOUND - The containing PerfSampleSeries does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples:batchCreate",
        "httpMethod": "POST",
        "method": "batchCreate",
        "resourceType": "samples",
        "resourceTypePath": "//projects/histories/executions/steps/perfSampleSeries",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.perfSampleSeries.samples.list": {
        "description": "Lists the Performance Samples of a given Sample Series - The list results are sorted by timestamps ascending - The default page size is 500 samples; and maximum size allowed 5000 - The response token indicates the last returned PerfSample timestamp - When the results size exceeds the page size, submit a subsequent request including the page token to return the rest of the samples up to the page limit May return any of the following canonical error codes: - OUT_OF_RANGE - The specified request page_token is out of valid range - NOT_FOUND - The containing PerfSampleSeries does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/perfSampleSeries/{sampleSeriesId}/samples",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "samples",
        "resourceTypePath": "//projects/histories/executions/steps/perfSampleSeries",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.publishXunitXmlFiles": {
        "description": "Publish xml files to an existing Step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write project - INVALID_ARGUMENT - if the request is malformed - FAILED_PRECONDITION - if the requested state transition is illegal, e.g try to upload a duplicate xml file or a file too large. - NOT_FOUND - if the containing Execution does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}:publishXunitXmlFiles",
        "httpMethod": "POST",
        "method": "publishXunitXmlFiles",
        "resourceType": "steps",
        "resourceTypePath": "//projects/histories/executions",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.testCases.get": {
        "description": "Gets details of a Test Case for a Step. Experimental test cases API. Still in active development. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing Test Case does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/testCases/{testCaseId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/histories/executions/steps",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.testCases.list": {
        "description": "Lists Test Cases attached to a Step. Experimental test cases API. Still in active development. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to write to project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the containing Step does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/testCases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "testCases",
        "resourceTypePath": "//projects/histories/executions/steps",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.executions.steps.thumbnails.list": {
        "description": "Lists thumbnails of images attached to a step. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read from the project, or from any of the images - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the step does not exist, or if any of the images do not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}/executions/{executionId}/steps/{stepId}/thumbnails",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "thumbnails",
        "resourceTypePath": "//projects/histories/executions/steps",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.get": {
        "description": "Gets a History. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories/{historyId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "histories",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.histories.list": {
        "description": "Lists Histories for a given Project. The histories are sorted by modification time in descending order. The history_id key will be used to order the history with the same modification time. May return any of the following canonical error codes: - PERMISSION_DENIED - if the user is not authorized to read project - INVALID_ARGUMENT - if the request is malformed - NOT_FOUND - if the History does not exist",
        "flatPath": "toolresults/v1beta3/projects/{projectId}/histories",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "histories",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta3"
        ]
      },
      "toolresults.projects.initializeSettings": {
        "description": "Creates resources for settings which have not yet been set. Currently, this creates a single resource: a Google Cloud Storage bucket, to be used as the default bucket for this project. The bucket is created in an FTL-own storage project. Except for in rare cases, calling this method in parallel from multiple clients will only create a single bucket. In order to avoid unnecessary storage charges, the bucket is configured to automatically delete objects older than 90 days. The bucket is created with the following permissions: - Owner access for owners of central storage project (FTL-owned) - Writer access for owners/editors of customer project - Reader access for viewers of customer project The default ACL on objects created in the bucket is: - Owner access for owners of central storage project - Reader access for owners/editors/viewers of customer project See Google Cloud Storage documentation for more details. If there is already a default bucket set and the project can access the bucket, this call does nothing. However, if the project doesn't have the permission to access the bucket or the bucket is deleted, a new bucket will be created. May return any canonical error codes, including the following: - PERMISSION_DENIED - if the user is not authorized to write to project - Any error code raised by Google Cloud Storage",
        "flatPath": "toolresults/v1beta3/projects/{projectId}:initializeSettings",
        "httpMethod": "POST",
        "method": "initializeSettings",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v1beta3"
        ]
      }
    },
    "preferredVersion": "v1beta3",
    "title": "Cloud Tool Results API"
  },
  "tpu": {
    "description": "TPU API provides customers with access to Google TPU technology.",
    "methods": {
      "tpu.projects.locations.acceleratorTypes.get": {
        "description": "Gets AcceleratorType.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/acceleratorTypes/{acceleratorTypesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "acceleratorTypes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.acceleratorTypes.list": {
        "description": "Lists accelerator types supported by this API.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/acceleratorTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "acceleratorTypes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.generateServiceIdentity": {
        "description": "Generates the Cloud TPU service identity for the project.",
        "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}:generateServiceIdentity",
        "httpMethod": "POST",
        "method": "generateServiceIdentity",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v2alpha1"
        ]
      },
      "tpu.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.nodes.create": {
        "description": "Creates a node.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/nodes",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "nodes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.nodes.delete": {
        "description": "Deletes a node.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "nodes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.nodes.get": {
        "description": "Gets the details of a node.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "nodes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.nodes.getGuestAttributes": {
        "description": "Retrieves the guest attributes for the node.",
        "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:getGuestAttributes",
        "httpMethod": "POST",
        "method": "getGuestAttributes",
        "resourceType": "nodes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha1"
        ]
      },
      "tpu.projects.locations.nodes.list": {
        "description": "Lists nodes.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/nodes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "nodes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.nodes.patch": {
        "description": "Updates the configurations of a node.",
        "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "nodes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha1"
        ]
      },
      "tpu.projects.locations.nodes.reimage": {
        "description": "Reimages a node's OS.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:reimage",
        "httpMethod": "POST",
        "method": "reimage",
        "resourceType": "nodes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.nodes.start": {
        "description": "Starts a node.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:start",
        "httpMethod": "POST",
        "method": "start",
        "resourceType": "nodes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.nodes.stop": {
        "description": "Stops a node. This operation is only available with single TPU nodes.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "nodes",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v2alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.runtimeVersions.get": {
        "description": "Gets a runtime version.",
        "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/runtimeVersions/{runtimeVersionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "runtimeVersions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha1"
        ]
      },
      "tpu.projects.locations.runtimeVersions.list": {
        "description": "Lists runtime versions supported by this API.",
        "flatPath": "v2alpha1/projects/{projectsId}/locations/{locationsId}/runtimeVersions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "runtimeVersions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v2alpha1"
        ]
      },
      "tpu.projects.locations.tensorflowVersions.get": {
        "description": "Gets TensorFlow Version.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/tensorflowVersions/{tensorflowVersionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "tensorflowVersions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "tpu.projects.locations.tensorflowVersions.list": {
        "description": "Lists TensorFlow versions supported by this API.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/tensorflowVersions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "tensorflowVersions",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud TPU API"
  },
  "trafficdirector": {
    "description": "",
    "methods": {
      "trafficdirector.discovery.client_status": {
        "description": "",
        "flatPath": "v2/discovery:client_status",
        "httpMethod": "POST",
        "method": "client_status",
        "resourceType": "discovery",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "Traffic Director API"
  },
  "transcoder": {
    "description": "This API converts video files into formats suitable for consumer distribution.",
    "methods": {
      "transcoder.projects.locations.jobTemplates.create": {
        "description": "Creates a job template in the specified region.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobTemplates",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "transcoder.projects.locations.jobTemplates.delete": {
        "description": "Deletes a job template.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobTemplates/{jobTemplatesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "transcoder.projects.locations.jobTemplates.get": {
        "description": "Returns the job template data.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobTemplates/{jobTemplatesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "transcoder.projects.locations.jobTemplates.list": {
        "description": "Lists job templates in the specified region.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobTemplates",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobTemplates",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "transcoder.projects.locations.jobs.create": {
        "description": "Creates a job in the specified region.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "transcoder.projects.locations.jobs.delete": {
        "description": "Deletes a job.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "transcoder.projects.locations.jobs.get": {
        "description": "Returns the job data.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      },
      "transcoder.projects.locations.jobs.list": {
        "description": "Lists jobs in the specified region.",
        "flatPath": "v1beta1/projects/{projectsId}/locations/{locationsId}/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta1"
        ]
      }
    },
    "preferredVersion": "v1beta1",
    "title": "Transcoder API"
  },
  "translate": {
    "description": "Integrates text translation into your website or application.",
    "methods": {
      "language.detections.detect": {
        "description": "Detects the language of text within a request.",
        "flatPath": "v2/detect",
        "httpMethod": "POST",
        "method": "detect",
        "resourceType": "detections",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "language.detections.list": {
        "description": "Detects the language of text within a request.",
        "flatPath": "v2/detect",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "detections",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "language.languages.list": {
        "description": "Returns a list of supported languages for translation.",
        "flatPath": "v2/languages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "languages",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "language.translations.list": {
        "description": "Translates input text, returning translated text.",
        "flatPath": "v2",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "translations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "language.translations.translate": {
        "description": "Translates input text, returning translated text.",
        "flatPath": "v2",
        "httpMethod": "POST",
        "method": "translate",
        "resourceType": "translations",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "translate.projects.detectLanguage": {
        "description": "Detects the language of text within a request.",
        "flatPath": "v3beta1/projects/{projectsId}:detectLanguage",
        "httpMethod": "POST",
        "method": "detectLanguage",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.getSupportedLanguages": {
        "description": "Returns a list of supported languages for translation.",
        "flatPath": "v3beta1/projects/{projectsId}/supportedLanguages",
        "httpMethod": "GET",
        "method": "getSupportedLanguages",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.batchTranslateDocument": {
        "description": "Translates a large volume of document in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}:batchTranslateDocument",
        "httpMethod": "POST",
        "method": "batchTranslateDocument",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.batchTranslateText": {
        "description": "Translates a large volume of text in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}:batchTranslateText",
        "httpMethod": "POST",
        "method": "batchTranslateText",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.detectLanguage": {
        "description": "Detects the language of text within a request.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}:detectLanguage",
        "httpMethod": "POST",
        "method": "detectLanguage",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.getSupportedLanguages": {
        "description": "Returns a list of supported languages for translation.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/supportedLanguages",
        "httpMethod": "GET",
        "method": "getSupportedLanguages",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.glossaries.create": {
        "description": "Creates a glossary and returns the long-running operation. Returns NOT_FOUND, if the project doesn't exist.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/glossaries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "glossaries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.glossaries.delete": {
        "description": "Deletes a glossary, or cancels glossary construction if the glossary isn't created yet. Returns NOT_FOUND, if the glossary doesn't exist.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/glossaries/{glossariesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "glossaries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.glossaries.get": {
        "description": "Gets a glossary. Returns NOT_FOUND, if the glossary doesn't exist.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/glossaries/{glossariesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "glossaries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.glossaries.list": {
        "description": "Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't exist.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/glossaries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "glossaries",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v3beta1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.operations.wait": {
        "description": "Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:wait",
        "httpMethod": "POST",
        "method": "wait",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.translateDocument": {
        "description": "Translates documents in synchronous mode.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}:translateDocument",
        "httpMethod": "POST",
        "method": "translateDocument",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.locations.translateText": {
        "description": "Translates input text and returns translated text.",
        "flatPath": "v3beta1/projects/{projectsId}/locations/{locationsId}:translateText",
        "httpMethod": "POST",
        "method": "translateText",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v3beta1",
          "v3"
        ]
      },
      "translate.projects.translateText": {
        "description": "Translates input text and returns translated text.",
        "flatPath": "v3beta1/projects/{projectsId}:translateText",
        "httpMethod": "POST",
        "method": "translateText",
        "resourceType": "projects",
        "resourceTypePath": "/",
        "versions": [
          "v3beta1",
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "Cloud Translation API"
  },
  "vault": {
    "description": "Archiving and eDiscovery for G Suite.",
    "methods": {
      "vault.matters.addPermissions": {
        "description": "Adds an account as a matter collaborator.",
        "flatPath": "v1/matters/{matterId}:addPermissions",
        "httpMethod": "POST",
        "method": "addPermissions",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.close": {
        "description": "Closes the specified matter. Returns the matter with updated state.",
        "flatPath": "v1/matters/{matterId}:close",
        "httpMethod": "POST",
        "method": "close",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.count": {
        "description": "Counts the accounts processed by the specified query.",
        "flatPath": "v1/matters/{matterId}:count",
        "httpMethod": "POST",
        "method": "count",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.create": {
        "description": "Creates a matter with the given name and description. The initial state is open, and the owner is the method caller. Returns the created matter with default view.",
        "flatPath": "v1/matters",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.delete": {
        "description": "Deletes the specified matter. Returns the matter with updated state.",
        "flatPath": "v1/matters/{matterId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.exports.create": {
        "description": "Creates an export.",
        "flatPath": "v1/matters/{matterId}/exports",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "exports",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.exports.delete": {
        "description": "Deletes an export.",
        "flatPath": "v1/matters/{matterId}/exports/{exportId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "exports",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.exports.get": {
        "description": "Gets an export.",
        "flatPath": "v1/matters/{matterId}/exports/{exportId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "exports",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.exports.list": {
        "description": "Lists details about the exports in the specified matter.",
        "flatPath": "v1/matters/{matterId}/exports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "exports",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.get": {
        "description": "Gets the specified matter.",
        "flatPath": "v1/matters/{matterId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.accounts.create": {
        "description": "Adds an account to a hold. Accounts can be added only to a hold that does not have an organizational unit set. If you try to add an account to an organizational unit-based hold, an error is returned.",
        "flatPath": "v1/matters/{matterId}/holds/{holdId}/accounts",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "accounts",
        "resourceTypePath": "//matters/holds",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.accounts.delete": {
        "description": "Removes an account from a hold.",
        "flatPath": "v1/matters/{matterId}/holds/{holdId}/accounts/{accountId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "accounts",
        "resourceTypePath": "//matters/holds",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.accounts.list": {
        "description": "Lists the accounts covered by a hold. This can list only individually-specified accounts covered by the hold. If the hold covers an organizational unit, use the [Admin SDK](https://developers.google.com/admin-sdk/). to list the members of the organizational unit on hold.",
        "flatPath": "v1/matters/{matterId}/holds/{holdId}/accounts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "accounts",
        "resourceTypePath": "//matters/holds",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.addHeldAccounts": {
        "description": "Adds accounts to a hold. Returns a list of accounts that have been successfully added. Accounts can be added only to an existing account-based hold.",
        "flatPath": "v1/matters/{matterId}/holds/{holdId}:addHeldAccounts",
        "httpMethod": "POST",
        "method": "addHeldAccounts",
        "resourceType": "holds",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.create": {
        "description": "Creates a hold in the specified matter.",
        "flatPath": "v1/matters/{matterId}/holds",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "holds",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.delete": {
        "description": "Removes the specified hold and releases the accounts or organizational unit covered by the hold. If the data is not preserved by another hold or retention rule, it might be purged.",
        "flatPath": "v1/matters/{matterId}/holds/{holdId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "holds",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.get": {
        "description": "Gets the specified hold.",
        "flatPath": "v1/matters/{matterId}/holds/{holdId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "holds",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.list": {
        "description": "Lists the holds in a matter.",
        "flatPath": "v1/matters/{matterId}/holds",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "holds",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.removeHeldAccounts": {
        "description": "Removes the specified accounts from a hold. Returns a list of statuses in the same order as the request.",
        "flatPath": "v1/matters/{matterId}/holds/{holdId}:removeHeldAccounts",
        "httpMethod": "POST",
        "method": "removeHeldAccounts",
        "resourceType": "holds",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.holds.update": {
        "description": "Updates the scope (organizational unit or accounts) and query parameters of a hold. You cannot add accounts to a hold that covers an organizational unit, nor can you add organizational units to a hold that covers individual accounts. If you try, the unsupported values are ignored.",
        "flatPath": "v1/matters/{matterId}/holds/{holdId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "holds",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.list": {
        "description": "Lists matters the requestor has access to.",
        "flatPath": "v1/matters",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.removePermissions": {
        "description": "Removes an account as a matter collaborator.",
        "flatPath": "v1/matters/{matterId}:removePermissions",
        "httpMethod": "POST",
        "method": "removePermissions",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.reopen": {
        "description": "Reopens the specified matter. Returns the matter with updated state.",
        "flatPath": "v1/matters/{matterId}:reopen",
        "httpMethod": "POST",
        "method": "reopen",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.savedQueries.create": {
        "description": "Creates a saved query.",
        "flatPath": "v1/matters/{matterId}/savedQueries",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "savedQueries",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.savedQueries.delete": {
        "description": "Deletes the specified saved query.",
        "flatPath": "v1/matters/{matterId}/savedQueries/{savedQueryId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "savedQueries",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.savedQueries.get": {
        "description": "Retrieves the specified saved query.",
        "flatPath": "v1/matters/{matterId}/savedQueries/{savedQueryId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "savedQueries",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.savedQueries.list": {
        "description": "Lists the saved queries in a matter.",
        "flatPath": "v1/matters/{matterId}/savedQueries",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "savedQueries",
        "resourceTypePath": "//matters",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.undelete": {
        "description": "Undeletes the specified matter. Returns the matter with updated state.",
        "flatPath": "v1/matters/{matterId}:undelete",
        "httpMethod": "POST",
        "method": "undelete",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.matters.update": {
        "description": "Updates the specified matter. This updates only the name and description of the matter, identified by matter ID. Changes to any other fields are ignored. Returns the default view of the matter.",
        "flatPath": "v1/matters/{matterId}",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "matters",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vault.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "G Suite Vault API"
  },
  "verifiedaccess": {
    "description": "API for Verified Access chrome extension to provide credential verification for chrome devices connecting to an enterprise network",
    "methods": {
      "verifiedaccess.challenge.create": {
        "description": "CreateChallenge API",
        "flatPath": "v1/challenge",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "challenge",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "verifiedaccess.challenge.verify": {
        "description": "VerifyChallengeResponse API",
        "flatPath": "v1/challenge:verify",
        "httpMethod": "POST",
        "method": "verify",
        "resourceType": "challenge",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Chrome Verified Access API"
  },
  "versionhistory": {
    "description": "Version History API - Prod",
    "methods": {
      "versionhistory.platforms.channels.list": {
        "description": "Returns list of channels that are available for a given platform.",
        "flatPath": "v1/{v1Id}/platforms/{platformsId}/channels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "channels",
        "resourceTypePath": "//platforms",
        "versions": [
          "v1"
        ]
      },
      "versionhistory.platforms.channels.versions.list": {
        "description": "Returns list of version for the given platform/channel.",
        "flatPath": "v1/{v1Id}/platforms/{platformsId}/channels/{channelsId}/versions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "versions",
        "resourceTypePath": "//platforms/channels",
        "versions": [
          "v1"
        ]
      },
      "versionhistory.platforms.channels.versions.releases.list": {
        "description": "Returns list of releases of the given version.",
        "flatPath": "v1/{v1Id}/platforms/{platformsId}/channels/{channelsId}/versions/{versionsId}/releases",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "releases",
        "resourceTypePath": "//platforms/channels/versions",
        "versions": [
          "v1"
        ]
      },
      "versionhistory.platforms.list": {
        "description": "Returns list of platforms that are available for a given product. The resource \"product\" has no resource name in its name.",
        "flatPath": "v1/{v1Id}/platforms",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "platforms",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Version History API"
  },
  "videointelligence": {
    "description": "Detects objects, explicit content, and scene changes in videos. It also specifies the region for annotation and transcribes speech to text. Supports both asynchronous API and streaming API.",
    "methods": {
      "videointelligence.operations.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//operations/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "videointelligence.operations.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//operations/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "videointelligence.operations.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//operations/projects/locations",
        "versions": [
          "v1"
        ]
      },
      "videointelligence.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "videointelligence.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "videointelligence.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "videointelligence.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "videointelligence.videos.annotate": {
        "description": "Performs asynchronous video annotation. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `AnnotateVideoProgress` (progress). `Operation.response` contains `AnnotateVideoResponse` (results).",
        "flatPath": "v1p1beta1/videos:annotate",
        "httpMethod": "POST",
        "method": "annotate",
        "resourceType": "videos",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1p3beta1",
          "v1beta2",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Video Intelligence API"
  },
  "vision": {
    "description": "Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.",
    "methods": {
      "vision.files.annotate": {
        "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.",
        "flatPath": "v1p1beta1/files:annotate",
        "httpMethod": "POST",
        "method": "annotate",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.files.asyncBatchAnnotate": {
        "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).",
        "flatPath": "v1p1beta1/files:asyncBatchAnnotate",
        "httpMethod": "POST",
        "method": "asyncBatchAnnotate",
        "resourceType": "files",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.images.annotate": {
        "description": "Run image detection and annotation for a batch of images.",
        "flatPath": "v1p1beta1/images:annotate",
        "httpMethod": "POST",
        "method": "annotate",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.images.asyncBatchAnnotate": {
        "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.",
        "flatPath": "v1p1beta1/images:asyncBatchAnnotate",
        "httpMethod": "POST",
        "method": "asyncBatchAnnotate",
        "resourceType": "images",
        "resourceTypePath": "/",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//locations",
        "versions": [
          "v1"
        ]
      },
      "vision.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vision.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vision.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vision.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.files.annotate": {
        "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.",
        "flatPath": "v1p1beta1/projects/{projectsId}/files:annotate",
        "httpMethod": "POST",
        "method": "annotate",
        "resourceType": "files",
        "resourceTypePath": "//projects",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.projects.files.asyncBatchAnnotate": {
        "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).",
        "flatPath": "v1p1beta1/projects/{projectsId}/files:asyncBatchAnnotate",
        "httpMethod": "POST",
        "method": "asyncBatchAnnotate",
        "resourceType": "files",
        "resourceTypePath": "//projects",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.projects.images.annotate": {
        "description": "Run image detection and annotation for a batch of images.",
        "flatPath": "v1p1beta1/projects/{projectsId}/images:annotate",
        "httpMethod": "POST",
        "method": "annotate",
        "resourceType": "images",
        "resourceTypePath": "//projects",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.projects.images.asyncBatchAnnotate": {
        "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.",
        "flatPath": "v1p1beta1/projects/{projectsId}/images:asyncBatchAnnotate",
        "httpMethod": "POST",
        "method": "asyncBatchAnnotate",
        "resourceType": "images",
        "resourceTypePath": "//projects",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.projects.locations.files.annotate": {
        "description": "Service that performs image detection and annotation for a batch of files. Now only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/files:annotate",
        "httpMethod": "POST",
        "method": "annotate",
        "resourceType": "files",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.projects.locations.files.asyncBatchAnnotate": {
        "description": "Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateFilesResponse` (results).",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/files:asyncBatchAnnotate",
        "httpMethod": "POST",
        "method": "asyncBatchAnnotate",
        "resourceType": "files",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.projects.locations.images.annotate": {
        "description": "Run image detection and annotation for a batch of images.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/images:annotate",
        "httpMethod": "POST",
        "method": "annotate",
        "resourceType": "images",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.projects.locations.images.asyncBatchAnnotate": {
        "description": "Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the `google.longrunning.Operations` interface. `Operation.metadata` contains `OperationMetadata` (metadata). `Operation.response` contains `AsyncBatchAnnotateImagesResponse` (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.",
        "flatPath": "v1p1beta1/projects/{projectsId}/locations/{locationsId}/images:asyncBatchAnnotate",
        "httpMethod": "POST",
        "method": "asyncBatchAnnotate",
        "resourceType": "images",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1p1beta1",
          "v1p2beta1",
          "v1"
        ]
      },
      "vision.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.productSets.addProduct": {
        "description": "Adds a Product to the specified ProductSet. If the Product is already present, no change is made. One Product can be added to at most 100 ProductSets. Possible errors: * Returns NOT_FOUND if the Product or the ProductSet doesn't exist.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}:addProduct",
        "httpMethod": "POST",
        "method": "addProduct",
        "resourceType": "productSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.productSets.create": {
        "description": "Creates and returns a new ProductSet resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing, or is longer than 4096 characters.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "productSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.productSets.delete": {
        "description": "Permanently deletes a ProductSet. Products and ReferenceImages in the ProductSet are not deleted. The actual image files are not deleted from Google Cloud Storage.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "productSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.productSets.get": {
        "description": "Gets information associated with a ProductSet. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "productSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.productSets.import": {
        "description": "Asynchronous API that imports a list of reference images to specified product sets based on a list of image information. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress) `Operation.response` contains `ImportProductSetsResponse`. (results) The input source of this method is a csv file on Google Cloud Storage. For the format of the csv file please see ImportProductSetsGcsSource.csv_file_uri.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets:import",
        "httpMethod": "POST",
        "method": "import",
        "resourceType": "productSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.productSets.list": {
        "description": "Lists ProductSets in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100, or less than 1.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "productSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.productSets.patch": {
        "description": "Makes changes to a ProductSet resource. Only display_name can be updated currently. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but missing from the request or longer than 4096 characters.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "productSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.productSets.products.list": {
        "description": "Lists the Products in a ProductSet, in an unspecified order. If the ProductSet does not exist, the products field of the response will be empty. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}/products",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations/productSets",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.productSets.removeProduct": {
        "description": "Removes a Product from the specified ProductSet.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/productSets/{productSetsId}:removeProduct",
        "httpMethod": "POST",
        "method": "removeProduct",
        "resourceType": "productSets",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.create": {
        "description": "Creates and returns a new product resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is missing or invalid.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.delete": {
        "description": "Permanently deletes a product and its reference images. Metadata of the product and all its images will be deleted right away, but search queries against ProductSets containing the product may still work until all related caches are refreshed.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.get": {
        "description": "Gets information associated with a Product. Possible errors: * Returns NOT_FOUND if the Product does not exist.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.list": {
        "description": "Lists products in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.patch": {
        "description": "Makes changes to a Product resource. Only the `display_name`, `description`, and `labels` fields can be updated right now. If labels are updated, the change will not be reflected in queries until the next index time. Possible errors: * Returns NOT_FOUND if the Product does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but is missing from the request or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is present in update_mask but is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is present in update_mask.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.purge": {
        "description": "Asynchronous API to delete all Products in a ProductSet or all Products that are in no ProductSet. If a Product is a member of the specified ProductSet in addition to other ProductSets, the Product will still be deleted. It is recommended to not delete the specified ProductSet until after this operation has completed. It is also recommended to not add any of the Products involved in the batch delete to a new ProductSet while this operation is running because those Products may still end up deleted. It's not possible to undo the PurgeProducts operation. Therefore, it is recommended to keep the csv files used in ImportProductSets (if that was how you originally built the Product Set) before starting PurgeProducts, in case you need to re-import the data after deletion. If the plan is to purge all of the Products from a ProductSet and then re-use the empty ProductSet to re-import new Products into the empty ProductSet, you must wait until the PurgeProducts operation has finished for that ProductSet. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. `Operation.metadata` contains `BatchOperationMetadata`. (progress)",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products:purge",
        "httpMethod": "POST",
        "method": "purge",
        "resourceType": "products",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.referenceImages.create": {
        "description": "Creates and returns a new ReferenceImage resource. The `bounding_poly` field is optional. If `bounding_poly` is not specified, the system will try to detect regions of interest in the image that are compatible with the product_category on the parent product. If it is specified, detection is ALWAYS skipped. The system converts polygons into non-rotated rectangles. Note that the pipeline will resize the image if the image resolution is too large to process (above 50MP). Possible errors: * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if the product does not exist. * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing compatible with the parent product's product_category is detected. * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "referenceImages",
        "resourceTypePath": "//projects/locations/products",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.referenceImages.delete": {
        "description": "Permanently deletes a reference image. The image metadata will be deleted right away, but search queries against ProductSets containing the image may still work until all related caches are refreshed. The actual image files are not deleted from Google Cloud Storage.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages/{referenceImagesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "referenceImages",
        "resourceTypePath": "//projects/locations/products",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.referenceImages.get": {
        "description": "Gets information associated with a ReferenceImage. Possible errors: * Returns NOT_FOUND if the specified image does not exist.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages/{referenceImagesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "referenceImages",
        "resourceTypePath": "//projects/locations/products",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.locations.products.referenceImages.list": {
        "description": "Lists reference images. Possible errors: * Returns NOT_FOUND if the parent product does not exist. * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less than 1.",
        "flatPath": "v1/projects/{projectsId}/locations/{locationsId}/products/{productsId}/referenceImages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "referenceImages",
        "resourceTypePath": "//projects/locations/products",
        "versions": [
          "v1"
        ]
      },
      "vision.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Cloud Vision API"
  },
  "vmmigration": {
    "description": "Use the Migrate for Compute Engine API to programmatically migrate workloads.",
    "methods": {
      "vmmigration.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.groups.addGroupMigration": {
        "description": "Adds a MigratingVm to a Group.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/groups/{groupsId}:addGroupMigration",
        "httpMethod": "POST",
        "method": "addGroupMigration",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.groups.create": {
        "description": "Creates a new Group in a given project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/groups",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.groups.delete": {
        "description": "Deletes a single Group.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/groups/{groupsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.groups.get": {
        "description": "Gets details of a single Group.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/groups/{groupsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.groups.list": {
        "description": "Lists Groups in a given project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/groups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.groups.patch": {
        "description": "Updates the parameters of a single Group.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/groups/{groupsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.groups.removeGroupMigration": {
        "description": "Removes a MigratingVm from a Group.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/groups/{groupsId}:removeGroupMigration",
        "httpMethod": "POST",
        "method": "removeGroupMigration",
        "resourceType": "groups",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.create": {
        "description": "Creates a new Source in a given project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "sources",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.datacenterConnectors.create": {
        "description": "Creates a new DatacenterConnector in a given Source.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/datacenterConnectors",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "datacenterConnectors",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.datacenterConnectors.delete": {
        "description": "Deletes a single DatacenterConnector.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/datacenterConnectors/{datacenterConnectorsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "datacenterConnectors",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.datacenterConnectors.get": {
        "description": "Gets details of a single DatacenterConnector.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/datacenterConnectors/{datacenterConnectorsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "datacenterConnectors",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.datacenterConnectors.list": {
        "description": "Lists DatacenterConnectors in a given Source.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/datacenterConnectors",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "datacenterConnectors",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.delete": {
        "description": "Deletes a single Source.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "sources",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.fetchInventory": {
        "description": "List remote source's inventory of VMs. The remote source is the onprem vCenter (remote in the sense it's not in Compute Engine). The inventory describes the list of existing VMs in that source. Note that this operation lists the VMs on the remote source, as opposed to listing the MigratingVms resources in the vmmigration service.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}:fetchInventory",
        "httpMethod": "GET",
        "method": "fetchInventory",
        "resourceType": "sources",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.get": {
        "description": "Gets details of a single Source.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "sources",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.list": {
        "description": "Lists Sources in a given project and location.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "sources",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.cloneJobs.cancel": {
        "description": "Initiates the cancellation of a running clone job.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}/cloneJobs/{cloneJobsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "cloneJobs",
        "resourceTypePath": "//projects/locations/sources/migratingVms",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.cloneJobs.create": {
        "description": "Initiates a Clone of a specific migrating VM.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}/cloneJobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "cloneJobs",
        "resourceTypePath": "//projects/locations/sources/migratingVms",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.cloneJobs.get": {
        "description": "Gets details of a single CloneJob.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}/cloneJobs/{cloneJobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "cloneJobs",
        "resourceTypePath": "//projects/locations/sources/migratingVms",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.cloneJobs.list": {
        "description": "Lists CloneJobs of a given migrating VM.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}/cloneJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "cloneJobs",
        "resourceTypePath": "//projects/locations/sources/migratingVms",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.create": {
        "description": "Creates a new MigratingVm in a given Source.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "migratingVms",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.cutoverJobs.cancel": {
        "description": "Initiates the cancellation of a running cutover job.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}/cutoverJobs/{cutoverJobsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "cutoverJobs",
        "resourceTypePath": "//projects/locations/sources/migratingVms",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.cutoverJobs.create": {
        "description": "Initiates a Cutover of a specific migrating VM. The returned LRO is completed when the cutover job resource is created and the job is initiated.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}/cutoverJobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "cutoverJobs",
        "resourceTypePath": "//projects/locations/sources/migratingVms",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.cutoverJobs.get": {
        "description": "Gets details of a single CutoverJob.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}/cutoverJobs/{cutoverJobsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "cutoverJobs",
        "resourceTypePath": "//projects/locations/sources/migratingVms",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.cutoverJobs.list": {
        "description": "Lists CutoverJobs of a given migrating VM.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}/cutoverJobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "cutoverJobs",
        "resourceTypePath": "//projects/locations/sources/migratingVms",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.delete": {
        "description": "Deletes a single MigratingVm.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "migratingVms",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.finalizeMigration": {
        "description": "Marks a migration as completed, deleting migration resources that are no longer being used. Only applicable after cutover is done.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}:finalizeMigration",
        "httpMethod": "POST",
        "method": "finalizeMigration",
        "resourceType": "migratingVms",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.get": {
        "description": "Gets details of a single MigratingVm.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "migratingVms",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.list": {
        "description": "Lists MigratingVms in a given Source.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "migratingVms",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.patch": {
        "description": "Updates the parameters of a single MigratingVm.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "migratingVms",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.pauseMigration": {
        "description": "Pauses a migration for a VM. If cycle tasks are running they will be cancelled, preserving source task data. Further replication cycles will not be triggered while the VM is paused.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}:pauseMigration",
        "httpMethod": "POST",
        "method": "pauseMigration",
        "resourceType": "migratingVms",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.resumeMigration": {
        "description": "Resumes a migration for a VM. When called on a paused migration, will start the process of uploading data and creating snapshots; when called on a completed cut-over migration, will update the migration to active state and start the process of uploading data and creating snapshots.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}:resumeMigration",
        "httpMethod": "POST",
        "method": "resumeMigration",
        "resourceType": "migratingVms",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.migratingVms.startMigration": {
        "description": "Starts migration for a VM. Starts the process of uploading data and creating snapshots, in replication cycles scheduled by the policy.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/migratingVms/{migratingVmsId}:startMigration",
        "httpMethod": "POST",
        "method": "startMigration",
        "resourceType": "migratingVms",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.patch": {
        "description": "Updates the parameters of a single Source.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "sources",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.utilizationReports.create": {
        "description": "Creates a new UtilizationReport.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/utilizationReports",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "utilizationReports",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.utilizationReports.delete": {
        "description": "Deletes a single Utilization Report.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/utilizationReports/{utilizationReportsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "utilizationReports",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.utilizationReports.get": {
        "description": "Gets a single Utilization Report.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/utilizationReports/{utilizationReportsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "utilizationReports",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.sources.utilizationReports.list": {
        "description": "Lists Utilization Reports of the given Source.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/sources/{sourcesId}/utilizationReports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "utilizationReports",
        "resourceTypePath": "//projects/locations/sources",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.targetProjects.create": {
        "description": "Creates a new TargetProject in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/targetProjects",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "targetProjects",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.targetProjects.delete": {
        "description": "Deletes a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/targetProjects/{targetProjectsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "targetProjects",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.targetProjects.get": {
        "description": "Gets details of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/targetProjects/{targetProjectsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "targetProjects",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.targetProjects.list": {
        "description": "Lists TargetProjects in a given project. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/targetProjects",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "targetProjects",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      },
      "vmmigration.projects.locations.targetProjects.patch": {
        "description": "Updates the parameters of a single TargetProject. NOTE: TargetProject is a global resource; hence the only supported value for location is `global`.",
        "flatPath": "v1alpha1/projects/{projectsId}/locations/{locationsId}/targetProjects/{targetProjectsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "targetProjects",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1alpha1",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "VM Migration API"
  },
  "webfonts": {
    "description": "The Google Web Fonts Developer API lets you retrieve information about web fonts served by Google.",
    "methods": {
      "webfonts.webfonts.list": {
        "description": "Retrieves the list of fonts currently served by the Google Fonts Developer API.",
        "flatPath": "v1/webfonts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "webfonts",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Web Fonts Developer API"
  },
  "webrisk": {
    "description": "",
    "methods": {
      "webrisk.hashes.search": {
        "description": "Gets the full hashes that match the requested hash prefix. This is used after a hash prefix is looked up in a threatList and there is a match. The client side threatList only holds partial hashes so the client must query this method to determine if there is a full hash match of a threat.",
        "flatPath": "v1/hashes:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "hashes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webrisk.projects.operations.cancel": {
        "description": "Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.",
        "flatPath": "v1/projects/{projectsId}/operations/{operationsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "webrisk.projects.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "webrisk.projects.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1/projects/{projectsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "webrisk.projects.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1/projects/{projectsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "webrisk.projects.submissions.create": {
        "description": "Creates a Submission of a URI suspected of containing phishing content to be reviewed. If the result verifies the existence of malicious phishing content, the site will be added to the [Google's Social Engineering lists](https://support.google.com/webmasters/answer/6350487/) in order to protect users that could get exposed to this threat in the future. Only allowlisted projects can use this method during Early Access. Please reach out to Sales or your customer engineer to obtain access.",
        "flatPath": "v1/projects/{projectsId}/submissions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "submissions",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "webrisk.projects.uris.submit": {
        "description": "Submits a URI suspected of containing malicious content to be reviewed. Returns a google.longrunning.Operation which, once the review is complete, is updated with its result. You can use the [Pub/Sub API] (https://cloud.google.com/pubsub) to receive notifications for the returned Operation. If the result verifies the existence of malicious content, the site will be added to the [Google's Social Engineering lists] (https://support.google.com/webmasters/answer/6350487/) in order to protect users that could get exposed to this threat in the future. Only allowlisted projects can use this method during Early Access. Please reach out to Sales or your customer engineer to obtain access.",
        "flatPath": "v1/projects/{projectsId}/uris:submit",
        "httpMethod": "POST",
        "method": "submit",
        "resourceType": "uris",
        "resourceTypePath": "//projects",
        "versions": [
          "v1"
        ]
      },
      "webrisk.threatLists.computeDiff": {
        "description": "Gets the most recent threat list diffs. These diffs should be applied to a local database of hashes to keep it up-to-date. If the local database is empty or excessively out-of-date, a complete snapshot of the database will be returned. This Method only updates a single ThreatList at a time. To update multiple ThreatList databases, this method needs to be called once for each list.",
        "flatPath": "v1/threatLists:computeDiff",
        "httpMethod": "GET",
        "method": "computeDiff",
        "resourceType": "threatLists",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "webrisk.uris.search": {
        "description": "This method is used to check whether a URI is on a given threatList. Multiple threatLists may be searched in a single query. The response will list all requested threatLists the URI was found to match. If the URI is not found on any of the requested ThreatList an empty response will be returned.",
        "flatPath": "v1/uris:search",
        "httpMethod": "GET",
        "method": "search",
        "resourceType": "uris",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Web Risk API"
  },
  "websecurityscanner": {
    "description": "Scans your Compute and App Engine apps for common web vulnerabilities.",
    "methods": {
      "websecurityscanner.projects.scanConfigs.create": {
        "description": "Creates a new ScanConfig.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.delete": {
        "description": "Deletes an existing ScanConfig and its child resources.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.get": {
        "description": "Gets a ScanConfig.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.list": {
        "description": "Lists ScanConfigs under a given project.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.patch": {
        "description": "Updates a ScanConfig. This method support partial update of a ScanConfig.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.scanRuns.crawledUrls.list": {
        "description": "List CrawledUrls under a given ScanRun.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}/scanRuns/{scanRunsId}/crawledUrls",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "crawledUrls",
        "resourceTypePath": "//projects/scanConfigs/scanRuns",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.scanRuns.findingTypeStats.list": {
        "description": "List all FindingTypeStats under a given ScanRun.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}/scanRuns/{scanRunsId}/findingTypeStats",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "findingTypeStats",
        "resourceTypePath": "//projects/scanConfigs/scanRuns",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.scanRuns.findings.get": {
        "description": "Gets a Finding.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}/scanRuns/{scanRunsId}/findings/{findingsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "findings",
        "resourceTypePath": "//projects/scanConfigs/scanRuns",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.scanRuns.findings.list": {
        "description": "List Findings under a given ScanRun.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}/scanRuns/{scanRunsId}/findings",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "findings",
        "resourceTypePath": "//projects/scanConfigs/scanRuns",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.scanRuns.get": {
        "description": "Gets a ScanRun.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}/scanRuns/{scanRunsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "scanRuns",
        "resourceTypePath": "//projects/scanConfigs",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.scanRuns.list": {
        "description": "Lists ScanRuns under a given ScanConfig, in descending order of ScanRun stop time.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}/scanRuns",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "scanRuns",
        "resourceTypePath": "//projects/scanConfigs",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.scanRuns.stop": {
        "description": "Stops a ScanRun. The stopped ScanRun is returned.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}/scanRuns/{scanRunsId}:stop",
        "httpMethod": "POST",
        "method": "stop",
        "resourceType": "scanRuns",
        "resourceTypePath": "//projects/scanConfigs",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      },
      "websecurityscanner.projects.scanConfigs.start": {
        "description": "Start a ScanRun according to the given ScanConfig.",
        "flatPath": "v1alpha/projects/{projectsId}/scanConfigs/{scanConfigsId}:start",
        "httpMethod": "POST",
        "method": "start",
        "resourceType": "scanConfigs",
        "resourceTypePath": "//projects",
        "versions": [
          "v1alpha",
          "v1beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Web Security Scanner API"
  },
  "workflowexecutions": {
    "description": "Execute workflows created with Workflows API.",
    "methods": {
      "workflowexecutions.projects.locations.workflows.executions.cancel": {
        "description": "Cancels an execution of the given name.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}/executions/{executionsId}:cancel",
        "httpMethod": "POST",
        "method": "cancel",
        "resourceType": "executions",
        "resourceTypePath": "//projects/locations/workflows",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflowexecutions.projects.locations.workflows.executions.create": {
        "description": "Creates a new execution using the latest revision of the given workflow.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}/executions",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "executions",
        "resourceTypePath": "//projects/locations/workflows",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflowexecutions.projects.locations.workflows.executions.get": {
        "description": "Returns an execution of the given name.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}/executions/{executionsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "executions",
        "resourceTypePath": "//projects/locations/workflows",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflowexecutions.projects.locations.workflows.executions.list": {
        "description": "Returns a list of executions which belong to the workflow with the given name. The method returns executions of all workflow revisions. Returned executions are ordered by their start time (newest first).",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}/executions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "executions",
        "resourceTypePath": "//projects/locations/workflows",
        "versions": [
          "v1beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Workflow Executions API"
  },
  "workflows": {
    "description": "Manage workflow definitions. To execute workflows and manage executions, see the Workflows Executions API.",
    "methods": {
      "workflows.projects.locations.get": {
        "description": "Gets information about a location.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflows.projects.locations.list": {
        "description": "Lists information about the supported locations for this service.",
        "flatPath": "v1beta/projects/{projectsId}/locations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "locations",
        "resourceTypePath": "//projects",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflows.projects.locations.operations.delete": {
        "description": "Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflows.projects.locations.operations.get": {
        "description": "Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflows.projects.locations.operations.list": {
        "description": "Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `\"/v1/{name=users/*}/operations\"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/operations",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "operations",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflows.projects.locations.workflows.create": {
        "description": "Creates a new workflow. If a workflow with the specified name already exists in the specified project and location, the long running operation will return ALREADY_EXISTS error.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/workflows",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "workflows",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflows.projects.locations.workflows.delete": {
        "description": "Deletes a workflow with the specified name. This method also cancels and deletes all running executions of the workflow.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "workflows",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflows.projects.locations.workflows.get": {
        "description": "Gets details of a single Workflow.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "workflows",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflows.projects.locations.workflows.list": {
        "description": "Lists Workflows in a given project and location. The default order is not specified.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/workflows",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "workflows",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      },
      "workflows.projects.locations.workflows.patch": {
        "description": "Updates an existing workflow. Running this method has no impact on already running executions of the workflow. A new revision of the workflow may be created as a result of a successful update operation. In that case, such revision will be used in new workflow executions.",
        "flatPath": "v1beta/projects/{projectsId}/locations/{locationsId}/workflows/{workflowsId}",
        "httpMethod": "PATCH",
        "method": "patch",
        "resourceType": "workflows",
        "resourceTypePath": "//projects/locations",
        "versions": [
          "v1beta",
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "Workflows API"
  },
  "youtube": {
    "description": "The YouTube Data API v3 is an API that provides access to YouTube data, such as videos, playlists, and channels.",
    "methods": {
      "youtube.abuseReports.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/abuseReports",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "abuseReports",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.activities.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/activities",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "activities",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.captions.delete": {
        "description": "Deletes a resource.",
        "flatPath": "youtube/v3/captions",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "captions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.captions.download": {
        "description": "Downloads a caption track.",
        "flatPath": "youtube/v3/captions/{id}",
        "httpMethod": "GET",
        "method": "download",
        "resourceType": "captions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.captions.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/captions",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "captions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.captions.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/captions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "captions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.captions.update": {
        "description": "Updates an existing resource.",
        "flatPath": "youtube/v3/captions",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "captions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.channelBanners.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/channelBanners/insert",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "channelBanners",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.channelSections.delete": {
        "description": "Deletes a resource.",
        "flatPath": "youtube/v3/channelSections",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "channelSections",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.channelSections.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/channelSections",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "channelSections",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.channelSections.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/channelSections",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "channelSections",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.channelSections.update": {
        "description": "Updates an existing resource.",
        "flatPath": "youtube/v3/channelSections",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "channelSections",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.channels.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/channels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "channels",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.channels.update": {
        "description": "Updates an existing resource.",
        "flatPath": "youtube/v3/channels",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "channels",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.commentThreads.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/commentThreads",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "commentThreads",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.commentThreads.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/commentThreads",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "commentThreads",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.comments.delete": {
        "description": "Deletes a resource.",
        "flatPath": "youtube/v3/comments",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.comments.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/comments",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.comments.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/comments",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.comments.markAsSpam": {
        "description": "Expresses the caller's opinion that one or more comments should be flagged as spam.",
        "flatPath": "youtube/v3/comments/markAsSpam",
        "httpMethod": "POST",
        "method": "markAsSpam",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.comments.setModerationStatus": {
        "description": "Sets the moderation status of one or more comments.",
        "flatPath": "youtube/v3/comments/setModerationStatus",
        "httpMethod": "POST",
        "method": "setModerationStatus",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.comments.update": {
        "description": "Updates an existing resource.",
        "flatPath": "youtube/v3/comments",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "comments",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.i18nLanguages.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/i18nLanguages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "i18nLanguages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.i18nRegions.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/i18nRegions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "i18nRegions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveBroadcasts.bind": {
        "description": "Bind a broadcast to a stream.",
        "flatPath": "youtube/v3/liveBroadcasts/bind",
        "httpMethod": "POST",
        "method": "bind",
        "resourceType": "liveBroadcasts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveBroadcasts.delete": {
        "description": "Delete a given broadcast.",
        "flatPath": "youtube/v3/liveBroadcasts",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "liveBroadcasts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveBroadcasts.insert": {
        "description": "Inserts a new stream for the authenticated user.",
        "flatPath": "youtube/v3/liveBroadcasts",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "liveBroadcasts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveBroadcasts.list": {
        "description": "Retrieve the list of broadcasts associated with the given channel.",
        "flatPath": "youtube/v3/liveBroadcasts",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "liveBroadcasts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveBroadcasts.transition": {
        "description": "Transition a broadcast to a given status.",
        "flatPath": "youtube/v3/liveBroadcasts/transition",
        "httpMethod": "POST",
        "method": "transition",
        "resourceType": "liveBroadcasts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveBroadcasts.update": {
        "description": "Updates an existing broadcast for the authenticated user.",
        "flatPath": "youtube/v3/liveBroadcasts",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "liveBroadcasts",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveChatBans.delete": {
        "description": "Deletes a chat ban.",
        "flatPath": "youtube/v3/liveChat/bans",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "liveChatBans",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveChatBans.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/liveChat/bans",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "liveChatBans",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveChatMessages.delete": {
        "description": "Deletes a chat message.",
        "flatPath": "youtube/v3/liveChat/messages",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "liveChatMessages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveChatMessages.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/liveChat/messages",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "liveChatMessages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveChatMessages.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/liveChat/messages",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "liveChatMessages",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveChatModerators.delete": {
        "description": "Deletes a chat moderator.",
        "flatPath": "youtube/v3/liveChat/moderators",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "liveChatModerators",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveChatModerators.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/liveChat/moderators",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "liveChatModerators",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveChatModerators.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/liveChat/moderators",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "liveChatModerators",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveStreams.delete": {
        "description": "Deletes an existing stream for the authenticated user.",
        "flatPath": "youtube/v3/liveStreams",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "liveStreams",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveStreams.insert": {
        "description": "Inserts a new stream for the authenticated user.",
        "flatPath": "youtube/v3/liveStreams",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "liveStreams",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveStreams.list": {
        "description": "Retrieve the list of streams associated with the given channel. --",
        "flatPath": "youtube/v3/liveStreams",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "liveStreams",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.liveStreams.update": {
        "description": "Updates an existing stream for the authenticated user.",
        "flatPath": "youtube/v3/liveStreams",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "liveStreams",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.members.list": {
        "description": "Retrieves a list of members that match the request criteria for a channel.",
        "flatPath": "youtube/v3/members",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "members",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.membershipsLevels.list": {
        "description": "Retrieves a list of all pricing levels offered by a creator to the fans.",
        "flatPath": "youtube/v3/membershipsLevels",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "membershipsLevels",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.playlistItems.delete": {
        "description": "Deletes a resource.",
        "flatPath": "youtube/v3/playlistItems",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "playlistItems",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.playlistItems.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/playlistItems",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "playlistItems",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.playlistItems.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/playlistItems",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "playlistItems",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.playlistItems.update": {
        "description": "Updates an existing resource.",
        "flatPath": "youtube/v3/playlistItems",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "playlistItems",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.playlists.delete": {
        "description": "Deletes a resource.",
        "flatPath": "youtube/v3/playlists",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "playlists",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.playlists.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/playlists",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "playlists",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.playlists.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/playlists",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "playlists",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.playlists.update": {
        "description": "Updates an existing resource.",
        "flatPath": "youtube/v3/playlists",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "playlists",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.search.list": {
        "description": "Retrieves a list of search resources",
        "flatPath": "youtube/v3/search",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "search",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.subscriptions.delete": {
        "description": "Deletes a resource.",
        "flatPath": "youtube/v3/subscriptions",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.subscriptions.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/subscriptions",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.subscriptions.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/subscriptions",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "subscriptions",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.superChatEvents.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/superChatEvents",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "superChatEvents",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.tests.insert": {
        "description": "POST method.",
        "flatPath": "youtube/v3/tests",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "tests",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.thirdPartyLinks.delete": {
        "description": "Deletes a resource.",
        "flatPath": "youtube/v3/thirdPartyLinks",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "thirdPartyLinks",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.thirdPartyLinks.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/thirdPartyLinks",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "thirdPartyLinks",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.thirdPartyLinks.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/thirdPartyLinks",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "thirdPartyLinks",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.thirdPartyLinks.update": {
        "description": "Updates an existing resource.",
        "flatPath": "youtube/v3/thirdPartyLinks",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "thirdPartyLinks",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.thumbnails.set": {
        "description": "As this is not an insert in a strict sense (it supports uploading/setting of a thumbnail for multiple videos, which doesn't result in creation of a single resource), I use a custom verb here.",
        "flatPath": "youtube/v3/thumbnails/set",
        "httpMethod": "POST",
        "method": "set",
        "resourceType": "thumbnails",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.videoAbuseReportReasons.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/videoAbuseReportReasons",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "videoAbuseReportReasons",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.videoCategories.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/videoCategories",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "videoCategories",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.videos.delete": {
        "description": "Deletes a resource.",
        "flatPath": "youtube/v3/videos",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "videos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.videos.getRating": {
        "description": "Retrieves the ratings that the authorized user gave to a list of specified videos.",
        "flatPath": "youtube/v3/videos/getRating",
        "httpMethod": "GET",
        "method": "getRating",
        "resourceType": "videos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.videos.insert": {
        "description": "Inserts a new resource into this collection.",
        "flatPath": "youtube/v3/videos",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "videos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.videos.list": {
        "description": "Retrieves a list of resources, possibly filtered.",
        "flatPath": "youtube/v3/videos",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "videos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.videos.rate": {
        "description": "Adds a like or dislike rating to a video or removes a rating from a video.",
        "flatPath": "youtube/v3/videos/rate",
        "httpMethod": "POST",
        "method": "rate",
        "resourceType": "videos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.videos.reportAbuse": {
        "description": "Report abuse for a video.",
        "flatPath": "youtube/v3/videos/reportAbuse",
        "httpMethod": "POST",
        "method": "reportAbuse",
        "resourceType": "videos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.videos.update": {
        "description": "Updates an existing resource.",
        "flatPath": "youtube/v3/videos",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "videos",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.watermarks.set": {
        "description": "Allows upload of watermark image and setting it for a channel.",
        "flatPath": "youtube/v3/watermarks/set",
        "httpMethod": "POST",
        "method": "set",
        "resourceType": "watermarks",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.watermarks.unset": {
        "description": "Allows removal of channel watermark.",
        "flatPath": "youtube/v3/watermarks/unset",
        "httpMethod": "POST",
        "method": "unset",
        "resourceType": "watermarks",
        "resourceTypePath": "/",
        "versions": [
          "v3"
        ]
      },
      "youtube.youtube.v3.updateCommentThreads": {
        "description": "Updates an existing resource.",
        "flatPath": "youtube/v3/commentThreads",
        "httpMethod": "PUT",
        "method": "updateCommentThreads",
        "resourceType": "v3",
        "resourceTypePath": "//youtube",
        "versions": [
          "v3"
        ]
      }
    },
    "preferredVersion": "v3",
    "title": "YouTube Data API v3"
  },
  "youtubeAnalytics": {
    "description": "Retrieves your YouTube Analytics data.",
    "methods": {
      "youtubeAnalytics.groupItems.delete": {
        "description": "Removes an item from a group.",
        "flatPath": "v2/groupItems",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "groupItems",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "youtubeAnalytics.groupItems.insert": {
        "description": "Creates a group item.",
        "flatPath": "v2/groupItems",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "groupItems",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "youtubeAnalytics.groupItems.list": {
        "description": "Returns a collection of group items that match the API request parameters.",
        "flatPath": "v2/groupItems",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "groupItems",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "youtubeAnalytics.groups.delete": {
        "description": "Deletes a group.",
        "flatPath": "v2/groups",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "youtubeAnalytics.groups.insert": {
        "description": "Creates a group.",
        "flatPath": "v2/groups",
        "httpMethod": "POST",
        "method": "insert",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "youtubeAnalytics.groups.list": {
        "description": "Returns a collection of groups that match the API request parameters. For example, you can retrieve all groups that the authenticated user owns, or you can retrieve one or more groups by their unique IDs.",
        "flatPath": "v2/groups",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "youtubeAnalytics.groups.update": {
        "description": "Modifies a group. For example, you could change a group's title.",
        "flatPath": "v2/groups",
        "httpMethod": "PUT",
        "method": "update",
        "resourceType": "groups",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      },
      "youtubeAnalytics.reports.query": {
        "description": "Retrieve your YouTube Analytics reports.",
        "flatPath": "v2/reports",
        "httpMethod": "GET",
        "method": "query",
        "resourceType": "reports",
        "resourceTypePath": "/",
        "versions": [
          "v2"
        ]
      }
    },
    "preferredVersion": "v2",
    "title": "YouTube Analytics API"
  },
  "youtubereporting": {
    "description": "Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.",
    "methods": {
      "youtubereporting.jobs.create": {
        "description": "Creates a job and returns it.",
        "flatPath": "v1/jobs",
        "httpMethod": "POST",
        "method": "create",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "youtubereporting.jobs.delete": {
        "description": "Deletes a job.",
        "flatPath": "v1/jobs/{jobId}",
        "httpMethod": "DELETE",
        "method": "delete",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "youtubereporting.jobs.get": {
        "description": "Gets a job.",
        "flatPath": "v1/jobs/{jobId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "youtubereporting.jobs.list": {
        "description": "Lists jobs.",
        "flatPath": "v1/jobs",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "jobs",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "youtubereporting.jobs.reports.get": {
        "description": "Gets the metadata of a specific report.",
        "flatPath": "v1/jobs/{jobId}/reports/{reportId}",
        "httpMethod": "GET",
        "method": "get",
        "resourceType": "reports",
        "resourceTypePath": "//jobs",
        "versions": [
          "v1"
        ]
      },
      "youtubereporting.jobs.reports.list": {
        "description": "Lists reports created by a specific job. Returns NOT_FOUND if the job does not exist.",
        "flatPath": "v1/jobs/{jobId}/reports",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reports",
        "resourceTypePath": "//jobs",
        "versions": [
          "v1"
        ]
      },
      "youtubereporting.media.download": {
        "description": "Method for media download. Download is supported on the URI `/v1/media/{+name}?alt=media`.",
        "flatPath": "v1/media/{mediaId}",
        "httpMethod": "GET",
        "method": "download",
        "resourceType": "media",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      },
      "youtubereporting.reportTypes.list": {
        "description": "Lists report types.",
        "flatPath": "v1/reportTypes",
        "httpMethod": "GET",
        "method": "list",
        "resourceType": "reportTypes",
        "resourceTypePath": "/",
        "versions": [
          "v1"
        ]
      }
    },
    "preferredVersion": "v1",
    "title": "YouTube Reporting API"
  }
}