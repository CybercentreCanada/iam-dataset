{
  "access_levels": [],
  "arn": "arn:aws:iam::aws:policy/AmazonDataZoneSageMakerEnvironmentRolePermissionsBoundary",
  "createdate": "2024-05-08T02:03:49+00:00",
  "credentials_exposure": false,
  "data_access": false,
  "deprecated": false,
  "document": {
    "Statement": [
      {
        "Action": [
          "sagemaker:*",
          "sagemaker-geospatial:*"
        ],
        "Effect": "Allow",
        "NotResource": [
          "arn:aws:sagemaker:*:*:domain/*",
          "arn:aws:sagemaker:*:*:user-profile/*",
          "arn:aws:sagemaker:*:*:app/*",
          "arn:aws:sagemaker:*:*:space/*",
          "arn:aws:sagemaker:*:*:flow-definition/*"
        ],
        "Sid": "AllowAllNonAdminSageMakerActions"
      },
      {
        "Action": [
          "sagemaker:CreateUserProfile",
          "sagemaker:DescribeUserProfile",
          "sagemaker:UpdateUserProfile",
          "sagemaker:CreatePresignedDomainUrl"
        ],
        "Effect": "Allow",
        "Resource": "arn:aws:sagemaker:*:*:*/*",
        "Sid": "AllowSageMakerProfileManagement"
      },
      {
        "Action": [
          "lakeformation:GetDataAccess"
        ],
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "AllowLakeFormation"
      },
      {
        "Action": [
          "sagemaker:AddTags"
        ],
        "Condition": {
          "StringEquals": {
            "sagemaker:TaggingAction": [
              "CreateApp",
              "CreateSpace"
            ]
          }
        },
        "Effect": "Allow",
        "Resource": [
          "arn:aws:sagemaker:*:*:app/*",
          "arn:aws:sagemaker:*:*:space/*"
        ],
        "Sid": "AllowAddTagsForAppAndSpace"
      },
      {
        "Action": [
          "sagemaker:CreatePresignedDomainUrl",
          "sagemaker:DescribeApp",
          "sagemaker:DescribeDomain",
          "sagemaker:DescribeSpace",
          "sagemaker:DescribeUserProfile",
          "sagemaker:ListApps",
          "sagemaker:ListDomains",
          "sagemaker:ListSpaces",
          "sagemaker:ListUserProfiles"
        ],
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "AllowStudioActions"
      },
      {
        "Action": [
          "sagemaker:CreateApp",
          "sagemaker:DeleteApp"
        ],
        "Condition": {
          "Null": {
            "sagemaker:OwnerUserProfileArn": "true"
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:sagemaker:*:*:app/*/*/*/*",
        "Sid": "AllowAppActionsForUserProfile"
      },
      {
        "Action": [
          "sagemaker:CreateApp",
          "sagemaker:DeleteApp"
        ],
        "Condition": {
          "StringEquals": {
            "sagemaker:SpaceSharingType": [
              "Shared"
            ]
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:sagemaker:*:*:app/${sagemaker:DomainId}/*/*/*",
        "Sid": "AllowAppActionsForSharedSpaces"
      },
      {
        "Action": [
          "sagemaker:CreateSpace",
          "sagemaker:DeleteSpace",
          "sagemaker:UpdateSpace"
        ],
        "Condition": {
          "Null": {
            "sagemaker:OwnerUserProfileArn": "true"
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:sagemaker:*:*:space/${sagemaker:DomainId}/*",
        "Sid": "AllowMutatingActionsOnSharedSpacesWithoutOwner"
      },
      {
        "Action": [
          "sagemaker:CreateSpace",
          "sagemaker:DeleteSpace",
          "sagemaker:UpdateSpace"
        ],
        "Condition": {
          "ArnLike": {
            "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
          },
          "StringEquals": {
            "sagemaker:SpaceSharingType": [
              "Private",
              "Shared"
            ]
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:sagemaker:*:*:space/${sagemaker:DomainId}/*",
        "Sid": "RestrictMutatingActionsOnSpacesToOwnerUserProfile"
      },
      {
        "Action": [
          "sagemaker:CreateApp",
          "sagemaker:DeleteApp"
        ],
        "Condition": {
          "ArnLike": {
            "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
          },
          "StringEquals": {
            "sagemaker:SpaceSharingType": [
              "Private"
            ]
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:sagemaker:*:*:app/${sagemaker:DomainId}/*/*/*",
        "Sid": "RestrictMutatingActionsOnPrivateSpaceAppsToOwnerUserProfile"
      },
      {
        "Action": [
          "sagemaker:*"
        ],
        "Condition": {
          "StringEqualsIfExists": {
            "sagemaker:WorkteamType": [
              "private-crowd",
              "vendor-crowd"
            ]
          }
        },
        "Effect": "Allow",
        "Resource": [
          "arn:aws:sagemaker:*:*:flow-definition/*"
        ],
        "Sid": "AllowFlowDefinitionActions"
      },
      {
        "Action": [
          "sqlworkbench:*",
          "datazone:*",
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeleteScheduledAction",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:DescribeScheduledActions",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:PutScheduledAction",
          "application-autoscaling:RegisterScalableTarget",
          "aws-marketplace:ViewSubscriptions",
          "cloudformation:GetTemplateSummary",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:PutMetricData",
          "codecommit:BatchGetRepositories",
          "codecommit:CreateRepository",
          "codecommit:GetRepository",
          "codecommit:List*",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcEndpointServices",
          "ec2:DescribeVpcs",
          "ecr:BatchCheckLayerAvailability",
          "ecr:BatchGetImage",
          "ecr:Describe*",
          "ecr:GetAuthorizationToken",
          "ecr:GetDownloadUrlForLayer",
          "ecr:StartImageScan",
          "elastic-inference:Connect",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeMountTargets",
          "fsx:DescribeFileSystems",
          "groundtruthlabeling:*",
          "iam:GetRole",
          "iam:ListRoles",
          "kms:DescribeKey",
          "kms:ListAliases",
          "lambda:ListFunctions",
          "logs:CreateLogDelivery",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DeleteLogDelivery",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:GetLogDelivery",
          "logs:GetLogEvents",
          "logs:ListLogDeliveries",
          "logs:PutLogEvents",
          "logs:UpdateLogDelivery",
          "redshift-data:BatchExecuteStatement",
          "redshift-data:CancelStatement",
          "redshift-data:DescribeStatement",
          "redshift-data:DescribeTable",
          "redshift-data:ExecuteStatement",
          "redshift-data:GetStatementResult",
          "redshift-data:ListSchemas",
          "redshift-data:ListTables",
          "redshift-serverless:GetCredentials",
          "redshift-serverless:GetNamespace",
          "redshift-serverless:GetWorkgroup",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListWorkgroups",
          "secretsmanager:ListSecrets",
          "servicecatalog:Describe*",
          "servicecatalog:List*",
          "servicecatalog:ScanProvisionedProducts",
          "servicecatalog:SearchProducts",
          "servicecatalog:SearchProvisionedProducts",
          "sns:ListTopics",
          "tag:GetResources"
        ],
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "AllowAWSServiceActions"
      },
      {
        "Action": [
          "ram:AcceptResourceShareInvitation"
        ],
        "Condition": {
          "StringLike": {
            "ram:ResourceShareName": "dzd_*"
          }
        },
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "AllowRAMInvitation"
      },
      {
        "Action": [
          "ecr:SetRepositoryPolicy",
          "ecr:CompleteLayerUpload",
          "ecr:CreateRepository",
          "ecr:BatchDeleteImage",
          "ecr:UploadLayerPart",
          "ecr:DeleteRepositoryPolicy",
          "ecr:InitiateLayerUpload",
          "ecr:DeleteRepository",
          "ecr:PutImage",
          "ecr:TagResource",
          "ecr:UntagResource"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:ecr:*:*:repository/sagemaker*",
          "arn:aws:ecr:*:*:repository/datazone*"
        ],
        "Sid": "AllowECRActions"
      },
      {
        "Action": [
          "codecommit:GitPull",
          "codecommit:GitPush"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:codecommit:*:*:*sagemaker*",
          "arn:aws:codecommit:*:*:*SageMaker*",
          "arn:aws:codecommit:*:*:*Sagemaker*"
        ],
        "Sid": "AllowCodeCommitActions"
      },
      {
        "Action": [
          "codebuild:BatchGetBuilds",
          "codebuild:StartBuild"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:codebuild:*:*:project/sagemaker*",
          "arn:aws:codebuild:*:*:build/*"
        ],
        "Sid": "AllowCodeBuildActions"
      },
      {
        "Action": [
          "states:DescribeExecution",
          "states:GetExecutionHistory",
          "states:StartExecution",
          "states:StopExecution",
          "states:UpdateStateMachine"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:states:*:*:statemachine:*sagemaker*",
          "arn:aws:states:*:*:execution:*sagemaker*:*"
        ],
        "Sid": "AllowStepFunctionsActions"
      },
      {
        "Action": [
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:CreateSecret",
          "secretsmanager:PutResourcePolicy"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:secretsmanager:*:*:secret:AmazonSageMaker-*"
        ],
        "Sid": "AllowSecretManagerActions"
      },
      {
        "Action": [
          "servicecatalog:ProvisionProduct"
        ],
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "AllowServiceCatalogProvisionProduct"
      },
      {
        "Action": [
          "servicecatalog:TerminateProvisionedProduct",
          "servicecatalog:UpdateProvisionedProduct"
        ],
        "Condition": {
          "StringEquals": {
            "servicecatalog:userLevel": "self"
          }
        },
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "AllowServiceCatalogTerminateUpdateProvisionProduct"
      },
      {
        "Action": [
          "s3:AbortMultipartUpload",
          "s3:DeleteObject",
          "s3:DeleteObjectVersion",
          "s3:GetObject",
          "s3:PutObject",
          "s3:PutObjectRetention",
          "s3:ReplicateObject",
          "s3:RestoreObject",
          "s3:GetBucketAcl",
          "s3:PutObjectAcl"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::SageMaker-DataZone*",
          "arn:aws:s3:::DataZone-SageMaker*",
          "arn:aws:s3:::Sagemaker-DataZone*",
          "arn:aws:s3:::DataZone-Sagemaker*",
          "arn:aws:s3:::sagemaker-datazone*",
          "arn:aws:s3:::datazone-sagemaker*",
          "arn:aws:s3:::amazon-datazone*"
        ],
        "Sid": "AllowS3ObjectActions"
      },
      {
        "Action": [
          "s3:GetObject"
        ],
        "Condition": {
          "StringEqualsIgnoreCase": {
            "s3:ExistingObjectTag/SageMaker": "true"
          }
        },
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::*"
        ],
        "Sid": "AllowS3GetObjectWithSageMakerExistingObjectTag"
      },
      {
        "Action": [
          "s3:GetObject"
        ],
        "Condition": {
          "StringEquals": {
            "s3:ExistingObjectTag/servicecatalog:provisioning": "true"
          }
        },
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::*"
        ],
        "Sid": "AllowS3GetObjectWithServiceCatalogProvisioningExistingObjectTag"
      },
      {
        "Action": [
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketCors",
          "s3:PutBucketCors"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::SageMaker-DataZone*",
          "arn:aws:s3:::DataZone-SageMaker*",
          "arn:aws:s3:::Sagemaker-DataZone*",
          "arn:aws:s3:::DataZone-Sagemaker*",
          "arn:aws:s3:::sagemaker-datazone*",
          "arn:aws:s3:::datazone-sagemaker*",
          "arn:aws:s3:::amazon-datazone*"
        ],
        "Sid": "AllowS3BucketActions"
      },
      {
        "Action": [
          "s3:GetObject"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:s3:::jumpstart-cache-prod-us-west-2/*",
          "arn:aws:s3:::jumpstart-cache-prod-us-east-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-us-east-2/*",
          "arn:aws:s3:::jumpstart-cache-prod-eu-west-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-eu-central-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-south-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-2/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-northeast-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-1/*",
          "arn:aws:s3:::jumpstart-cache-prod-ap-southeast-2/*"
        ],
        "Sid": "ReadSageMakerJumpstartArtifacts"
      },
      {
        "Action": [
          "lambda:InvokeFunction"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:lambda:*:*:function:*SageMaker*",
          "arn:aws:lambda:*:*:function:*sagemaker*",
          "arn:aws:lambda:*:*:function:*Sagemaker*",
          "arn:aws:lambda:*:*:function:*LabelingFunction*"
        ],
        "Sid": "AllowLambdaInvokeFunction"
      },
      {
        "Action": [
          "iam:CreateServiceLinkedRole"
        ],
        "Condition": {
          "StringLike": {
            "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:iam::*:role/aws-service-role/sagemaker.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_SageMakerEndpoint",
        "Sid": "AllowCreateServiceLinkedRoleForSageMakerApplicationAutoscaling"
      },
      {
        "Action": [
          "sns:Subscribe",
          "sns:CreateTopic",
          "sns:Publish"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:sns:*:*:*SageMaker*",
          "arn:aws:sns:*:*:*Sagemaker*",
          "arn:aws:sns:*:*:*sagemaker*"
        ],
        "Sid": "AllowSNSActions"
      },
      {
        "Action": [
          "iam:PassRole"
        ],
        "Condition": {
          "StringEquals": {
            "iam:PassedToService": [
              "glue.amazonaws.com",
              "bedrock.amazonaws.com",
              "states.amazonaws.com",
              "lakeformation.amazonaws.com",
              "events.amazonaws.com",
              "sagemaker.amazonaws.com",
              "forecast.amazonaws.com"
            ]
          }
        },
        "Effect": "Allow",
        "Resource": [
          "arn:aws:iam::*:role/sm-provisioning/datazone_usr_sagemaker_execution_role_*"
        ],
        "Sid": "AllowPassRoleForSageMakerRoles"
      },
      {
        "Action": [
          "kms:DescribeKey",
          "kms:Decrypt",
          "kms:ListKeys"
        ],
        "Condition": {
          "StringNotEquals": {
            "aws:ResourceAccount": "${aws:PrincipalAccount}"
          }
        },
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "CrossAccountKmsOperations"
      },
      {
        "Action": [
          "kms:DescribeKey",
          "kms:Decrypt",
          "kms:ListKeys",
          "kms:Encrypt",
          "kms:GenerateDataKey",
          "kms:RetireGrant"
        ],
        "Condition": {
          "Null": {
            "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
          }
        },
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "KmsOperationsWithResourceTag"
      },
      {
        "Action": [
          "athena:BatchGetNamedQuery",
          "athena:BatchGetPreparedStatement",
          "athena:BatchGetQueryExecution",
          "athena:CreateNamedQuery",
          "athena:CreateNotebook",
          "athena:CreatePreparedStatement",
          "athena:CreatePresignedNotebookUrl",
          "athena:DeleteNamedQuery",
          "athena:DeleteNotebook",
          "athena:DeletePreparedStatement",
          "athena:ExportNotebook",
          "athena:GetDatabase",
          "athena:GetDataCatalog",
          "athena:GetNamedQuery",
          "athena:GetPreparedStatement",
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:GetQueryResultsStream",
          "athena:GetQueryRuntimeStatistics",
          "athena:GetTableMetadata",
          "athena:GetWorkGroup",
          "athena:ImportNotebook",
          "athena:ListDatabases",
          "athena:ListDataCatalogs",
          "athena:ListEngineVersions",
          "athena:ListNamedQueries",
          "athena:ListPreparedStatements",
          "athena:ListQueryExecutions",
          "athena:ListTableMetadata",
          "athena:ListTagsForResource",
          "athena:ListWorkGroups",
          "athena:StartCalculationExecution",
          "athena:StartQueryExecution",
          "athena:StartSession",
          "athena:StopCalculationExecution",
          "athena:StopQueryExecution",
          "athena:TerminateSession",
          "athena:UpdateNamedQuery",
          "athena:UpdateNotebook",
          "athena:UpdateNotebookMetadata",
          "athena:UpdatePreparedStatement"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Sid": "AllowAthenaActions"
      },
      {
        "Action": [
          "glue:CreateDatabase"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/default"
        ],
        "Sid": "AllowGlueCreateDatabase"
      },
      {
        "Action": [
          "redshift:GetClusterCredentials"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:redshift:*:*:dbuser:*/sagemaker_access*",
          "arn:aws:redshift:*:*:dbname:*"
        ],
        "Sid": "AllowRedshiftGetClusterCredentials"
      },
      {
        "Action": [
          "sagemaker:ListTags"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:sagemaker:*:*:user-profile/*",
          "arn:aws:sagemaker:*:*:domain/*"
        ],
        "Sid": "AllowListTags"
      },
      {
        "Action": [
          "cloudformation:ListStackResources"
        ],
        "Effect": "Allow",
        "Resource": "arn:aws:cloudformation:*:*:stack/SC-*",
        "Sid": "AllowCloudformationListStackResources"
      },
      {
        "Action": [
          "glue:GetColumnStatisticsForPartition",
          "glue:GetColumnStatisticsForTable",
          "glue:ListJobs",
          "glue:CreateSession",
          "glue:RunStatement",
          "glue:BatchCreatePartition",
          "glue:CreatePartitionIndex",
          "glue:CreateTable",
          "glue:BatchGetWorkflows",
          "glue:BatchUpdatePartition",
          "glue:BatchDeletePartition",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:UpdateTable",
          "glue:DeleteTableVersion",
          "glue:DeleteTable",
          "glue:DeleteColumnStatisticsForPartition",
          "glue:DeleteColumnStatisticsForTable",
          "glue:DeletePartitionIndex",
          "glue:UpdateColumnStatisticsForPartition",
          "glue:UpdateColumnStatisticsForTable",
          "glue:BatchDeleteTableVersion",
          "glue:BatchDeleteTable",
          "glue:CreatePartition",
          "glue:DeletePartition",
          "glue:UpdatePartition",
          "glue:CreateBlueprint",
          "glue:CreateJob",
          "glue:CreateConnection",
          "glue:CreateCrawler",
          "glue:CreateDataQualityRuleset",
          "glue:CreateWorkflow",
          "glue:GetDatabases",
          "glue:GetTables",
          "glue:GetTable",
          "glue:SearchTables",
          "glue:NotifyEvent",
          "glue:ListSchemas",
          "glue:BatchGetJobs",
          "glue:GetConnection",
          "glue:GetDatabase"
        ],
        "Effect": "Allow",
        "Resource": [
          "*"
        ],
        "Sid": "AllowGlueActions"
      },
      {
        "Action": [
          "glue:SearchTables",
          "glue:NotifyEvent",
          "glue:StartBlueprintRun",
          "glue:PutWorkflowRunProperties",
          "glue:StopCrawler",
          "glue:DeleteJob",
          "glue:DeleteWorkflow",
          "glue:UpdateCrawler",
          "glue:DeleteBlueprint",
          "glue:UpdateWorkflow",
          "glue:StartCrawler",
          "glue:ResetJobBookmark",
          "glue:UpdateJob",
          "glue:StartWorkflowRun",
          "glue:StopCrawlerSchedule",
          "glue:ResumeWorkflowRun",
          "glue:ListSchemas",
          "glue:DeleteCrawler",
          "glue:UpdateBlueprint",
          "glue:BatchStopJobRun",
          "glue:StopWorkflowRun",
          "glue:BatchGetJobs",
          "glue:BatchGetWorkflows",
          "glue:UpdateCrawlerSchedule",
          "glue:DeleteConnection",
          "glue:UpdateConnection",
          "glue:GetConnection",
          "glue:GetDatabase",
          "glue:GetTable",
          "glue:GetPartition",
          "glue:GetPartitions",
          "glue:BatchDeleteConnection",
          "glue:StartCrawlerSchedule",
          "glue:StartJobRun",
          "glue:CreateWorkflow",
          "glue:*DataQuality*"
        ],
        "Condition": {
          "Null": {
            "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
          }
        },
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "AllowGlueActionsWithEnvironmentTag"
      },
      {
        "Action": [
          "glue:BatchGet*",
          "glue:Get*",
          "glue:SearchTables",
          "glue:List*",
          "glue:RunStatement"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:glue:*:*:catalog",
          "arn:aws:glue:*:*:database/default",
          "arn:aws:glue:*:*:connection/dz-sm-*",
          "arn:aws:glue:*:*:session/*"
        ],
        "Sid": "AllowGlueDefaultAccess"
      },
      {
        "Action": [
          "redshift:GetClusterCredentialsWithIAM",
          "redshift:DescribeClusters"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:redshift:*:*:cluster:*",
          "arn:aws:redshift:*:*:dbname:*"
        ],
        "Sid": "AllowRedshiftClusterActions"
      },
      {
        "Action": [
          "redshift:CreateClusterUser"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:redshift:*:*:dbuser:*"
        ],
        "Sid": "AllowCreateClusterUser"
      },
      {
        "Action": [
          "secretsmanager:CreateSecret",
          "secretsmanager:TagResource"
        ],
        "Condition": {
          "ForAllValues:StringEquals": {
            "aws:TagKeys": [
              "AmazonDataZoneDomain",
              "AmazonDataZoneProject"
            ]
          },
          "Null": {
            "aws:RequestTag/AmazonDataZoneDomain": "false",
            "aws:RequestTag/AmazonDataZoneProject": "false",
            "aws:ResourceTag/AmazonDataZoneDomain": "false",
            "aws:ResourceTag/AmazonDataZoneProject": "false",
            "aws:TagKeys": "false"
          },
          "StringLike": {
            "aws:RequestTag/AmazonDataZoneDomain": "dzd_*",
            "aws:ResourceTag/AmazonDataZoneDomain": "dzd_*"
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:secretsmanager:*:*:secret:AmazonDataZone-*",
        "Sid": "AllowCreateSecretActions"
      },
      {
        "Action": [
          "forecast:CreateExplainabilityExport",
          "forecast:CreateExplainability",
          "forecast:CreateForecastEndpoint",
          "forecast:CreateAutoPredictor",
          "forecast:CreateDatasetImportJob",
          "forecast:CreateDatasetGroup",
          "forecast:CreateDataset",
          "forecast:CreateForecast",
          "forecast:CreateForecastExportJob",
          "forecast:CreatePredictorBacktestExportJob",
          "forecast:CreatePredictor",
          "forecast:DescribeExplainabilityExport",
          "forecast:DescribeExplainability",
          "forecast:DescribeAutoPredictor",
          "forecast:DescribeForecastEndpoint",
          "forecast:DescribeDatasetImportJob",
          "forecast:DescribeDataset",
          "forecast:DescribeForecast",
          "forecast:DescribeForecastExportJob",
          "forecast:DescribePredictorBacktestExportJob",
          "forecast:GetAccuracyMetrics",
          "forecast:InvokeForecastEndpoint",
          "forecast:GetRecentForecastContext",
          "forecast:DescribePredictor",
          "forecast:TagResource",
          "forecast:DeleteResourceTree"
        ],
        "Effect": "Allow",
        "Resource": [
          "arn:aws:forecast:*:*:*Canvas*"
        ],
        "Sid": "ForecastOperations"
      },
      {
        "Action": [
          "rds:DescribeDBInstances"
        ],
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "RDSOperation"
      },
      {
        "Action": [
          "events:PutRule"
        ],
        "Condition": {
          "StringEquals": {
            "aws:RequestTag/sagemaker:is-canvas-data-prep-job": "true"
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:events:*:*:rule/*",
        "Sid": "AllowEventBridgeRule"
      },
      {
        "Action": [
          "events:DescribeRule",
          "events:PutTargets"
        ],
        "Condition": {
          "StringEquals": {
            "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:events:*:*:rule/*",
        "Sid": "EventBridgeOperations"
      },
      {
        "Action": [
          "events:TagResource"
        ],
        "Condition": {
          "StringEquals": {
            "aws:RequestTag/sagemaker:is-canvas-data-prep-job": "true",
            "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
          }
        },
        "Effect": "Allow",
        "Resource": "arn:aws:events:*:*:rule/*",
        "Sid": "EventBridgeTagBasedOperations"
      },
      {
        "Action": [
          "events:ListTagsForResource"
        ],
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "EventBridgeListTagOperation"
      },
      {
        "Action": [
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ListClusters"
        ],
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "AllowEMR"
      },
      {
        "Action": [
          "sso:CreateApplicationAssignment",
          "sso:AssociateProfile"
        ],
        "Effect": "Allow",
        "Resource": "*",
        "Sid": "AllowSSOAction"
      },
      {
        "Effect": "Deny",
        "NotAction": [
          "sagemaker:*",
          "sagemaker-geospatial:*",
          "sqlworkbench:*",
          "datazone:*",
          "forecast:*",
          "application-autoscaling:DeleteScalingPolicy",
          "application-autoscaling:DeleteScheduledAction",
          "application-autoscaling:DeregisterScalableTarget",
          "application-autoscaling:DescribeScalableTargets",
          "application-autoscaling:DescribeScalingActivities",
          "application-autoscaling:DescribeScalingPolicies",
          "application-autoscaling:DescribeScheduledActions",
          "application-autoscaling:PutScalingPolicy",
          "application-autoscaling:PutScheduledAction",
          "application-autoscaling:RegisterScalableTarget",
          "athena:BatchGetNamedQuery",
          "athena:BatchGetPreparedStatement",
          "athena:BatchGetQueryExecution",
          "athena:CreateNamedQuery",
          "athena:CreateNotebook",
          "athena:CreatePreparedStatement",
          "athena:CreatePresignedNotebookUrl",
          "athena:DeleteNamedQuery",
          "athena:DeleteNotebook",
          "athena:DeletePreparedStatement",
          "athena:ExportNotebook",
          "athena:GetDatabase",
          "athena:GetDataCatalog",
          "athena:GetNamedQuery",
          "athena:GetPreparedStatement",
          "athena:GetQueryExecution",
          "athena:GetQueryResults",
          "athena:GetQueryResultsStream",
          "athena:GetQueryRuntimeStatistics",
          "athena:GetTableMetadata",
          "athena:GetWorkGroup",
          "athena:ImportNotebook",
          "athena:ListDatabases",
          "athena:ListDataCatalogs",
          "athena:ListEngineVersions",
          "athena:ListNamedQueries",
          "athena:ListPreparedStatements",
          "athena:ListQueryExecutions",
          "athena:ListTableMetadata",
          "athena:ListTagsForResource",
          "athena:ListWorkGroups",
          "athena:StartCalculationExecution",
          "athena:StartQueryExecution",
          "athena:StartSession",
          "athena:StopCalculationExecution",
          "athena:StopQueryExecution",
          "athena:TerminateSession",
          "athena:UpdateNamedQuery",
          "athena:UpdateNotebook",
          "athena:UpdateNotebookMetadata",
          "athena:UpdatePreparedStatement",
          "aws-marketplace:ViewSubscriptions",
          "cloudformation:GetTemplateSummary",
          "cloudformation:ListStackResources",
          "cloudwatch:DeleteAlarms",
          "cloudwatch:DescribeAlarms",
          "cloudwatch:GetMetricData",
          "cloudwatch:GetMetricStatistics",
          "cloudwatch:ListMetrics",
          "cloudwatch:PutMetricAlarm",
          "cloudwatch:PutMetricData",
          "codebuild:BatchGetBuilds",
          "codebuild:StartBuild",
          "codecommit:BatchGetRepositories",
          "codecommit:CreateRepository",
          "codecommit:GetRepository",
          "codecommit:List*",
          "codecommit:GitPull",
          "codecommit:GitPush",
          "ec2:CreateNetworkInterface",
          "ec2:CreateNetworkInterfacePermission",
          "ec2:DeleteNetworkInterface",
          "ec2:DeleteNetworkInterfacePermission",
          "ec2:DescribeDhcpOptions",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSecurityGroups",
          "ec2:DescribeSubnets",
          "ec2:DescribeVpcEndpoints",
          "ec2:DescribeVpcEndpointServices",
          "ec2:DescribeVpcs",
          "ecr:BatchCheckLayerAvailability",
          "ecr:BatchGetImage",
          "ecr:CreateRepository",
          "ecr:Describe*",
          "ecr:GetAuthorizationToken",
          "ecr:GetDownloadUrlForLayer",
          "ecr:SetRepositoryPolicy",
          "ecr:CompleteLayerUpload",
          "ecr:BatchDeleteImage",
          "ecr:UploadLayerPart",
          "ecr:DeleteRepositoryPolicy",
          "ecr:InitiateLayerUpload",
          "ecr:DeleteRepository",
          "ecr:PutImage",
          "ecr:StartImageScan",
          "ecr:TagResource",
          "ecr:UntagResource",
          "elastic-inference:Connect",
          "elasticfilesystem:DescribeFileSystems",
          "elasticfilesystem:DescribeMountTargets",
          "elasticmapreduce:DescribeCluster",
          "elasticmapreduce:ListInstanceGroups",
          "elasticmapreduce:ListClusters",
          "events:PutRule",
          "events:DescribeRule",
          "events:PutTargets",
          "events:TagResource",
          "events:ListTagsForResource",
          "fsx:DescribeFileSystems",
          "glue:SearchTables",
          "glue:NotifyEvent",
          "glue:StartBlueprintRun",
          "glue:PutWorkflowRunProperties",
          "glue:StopCrawler",
          "glue:DeleteJob",
          "glue:DeleteWorkflow",
          "glue:UpdateCrawler",
          "glue:DeleteBlueprint",
          "glue:UpdateWorkflow",
          "glue:StartCrawler",
          "glue:ResetJobBookmark",
          "glue:UpdateJob",
          "glue:StartWorkflowRun",
          "glue:StopCrawlerSchedule",
          "glue:ResumeWorkflowRun",
          "glue:DeleteCrawler",
          "glue:UpdateBlueprint",
          "glue:BatchStopJobRun",
          "glue:StopWorkflowRun",
          "glue:BatchGet*",
          "glue:UpdateCrawlerSchedule",
          "glue:DeleteConnection",
          "glue:UpdateConnection",
          "glue:Get*",
          "glue:BatchDeleteConnection",
          "glue:StartCrawlerSchedule",
          "glue:StartJobRun",
          "glue:CreateWorkflow",
          "glue:*DataQuality*",
          "glue:List*",
          "glue:CreateSession",
          "glue:RunStatement",
          "glue:BatchCreatePartition",
          "glue:CreateDatabase",
          "glue:CreatePartitionIndex",
          "glue:CreateTable",
          "glue:BatchUpdatePartition",
          "glue:BatchDeletePartition",
          "glue:UpdateTable",
          "glue:DeleteTableVersion",
          "glue:DeleteTable",
          "glue:DeleteColumnStatisticsForPartition",
          "glue:DeleteColumnStatisticsForTable",
          "glue:DeletePartitionIndex",
          "glue:UpdateColumnStatisticsForPartition",
          "glue:UpdateColumnStatisticsForTable",
          "glue:BatchDeleteTableVersion",
          "glue:BatchDeleteTable",
          "glue:CreatePartition",
          "glue:DeletePartition",
          "glue:UpdatePartition",
          "glue:CreateBlueprint",
          "glue:CreateJob",
          "glue:CreateConnection",
          "glue:CreateCrawler",
          "groundtruthlabeling:*",
          "iam:CreateServiceLinkedRole",
          "iam:GetRole",
          "iam:ListRoles",
          "iam:PassRole",
          "kms:DescribeKey",
          "kms:ListAliases",
          "kms:Decrypt",
          "kms:ListKeys",
          "kms:Encrypt",
          "kms:GenerateDataKey",
          "kms:RetireGrant",
          "lakeformation:GetDataAccess",
          "lambda:ListFunctions",
          "lambda:InvokeFunction",
          "logs:CreateLogDelivery",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:DeleteLogDelivery",
          "logs:Describe*",
          "logs:GetLogDelivery",
          "logs:GetLogEvents",
          "logs:ListLogDeliveries",
          "logs:PutLogEvents",
          "logs:UpdateLogDelivery",
          "ram:AcceptResourceShareInvitation",
          "rds:DescribeDBInstances",
          "redshift:CreateClusterUser",
          "redshift:GetClusterCredentials",
          "redshift:GetClusterCredentialsWithIAM",
          "redshift:DescribeClusters",
          "redshift-data:BatchExecuteStatement",
          "redshift-data:CancelStatement",
          "redshift-data:DescribeStatement",
          "redshift-data:DescribeTable",
          "redshift-data:ExecuteStatement",
          "redshift-data:GetStatementResult",
          "redshift-data:ListSchemas",
          "redshift-data:ListTables",
          "redshift-serverless:ListNamespaces",
          "redshift-serverless:ListWorkgroups",
          "redshift-serverless:GetNamespace",
          "redshift-serverless:GetWorkgroup",
          "redshift-serverless:GetCredentials",
          "s3:GetBucketAcl",
          "s3:PutObjectAcl",
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject",
          "s3:AbortMultipartUpload",
          "s3:CreateBucket",
          "s3:GetBucketLocation",
          "s3:ListBucket",
          "s3:ListAllMyBuckets",
          "s3:GetBucketCors",
          "s3:PutBucketCors",
          "s3:DeleteObjectVersion",
          "s3:PutObjectRetention",
          "s3:ReplicateObject",
          "s3:RestoreObject",
          "secretsmanager:ListSecrets",
          "secretsmanager:DescribeSecret",
          "secretsmanager:GetSecretValue",
          "secretsmanager:CreateSecret",
          "secretsmanager:PutResourcePolicy",
          "secretsmanager:TagResource",
          "servicecatalog:Describe*",
          "servicecatalog:List*",
          "servicecatalog:ScanProvisionedProducts",
          "servicecatalog:SearchProducts",
          "servicecatalog:SearchProvisionedProducts",
          "servicecatalog:ProvisionProduct",
          "servicecatalog:TerminateProvisionedProduct",
          "servicecatalog:UpdateProvisionedProduct",
          "sns:ListTopics",
          "sns:Subscribe",
          "sns:CreateTopic",
          "sns:Publish",
          "states:DescribeExecution",
          "states:GetExecutionHistory",
          "states:StartExecution",
          "states:StopExecution",
          "states:UpdateStateMachine",
          "tag:GetResources",
          "sso:CreateApplicationAssignment",
          "sso:AssociateProfile"
        ],
        "Resource": "*",
        "Sid": "DenyNotAction"
      }
    ],
    "Version": "2012-10-17"
  },
  "effective_actions": [],
  "malformed": true,
  "name": "AmazonDataZoneSageMakerEnvironmentRolePermissionsBoundary",
  "privesc": false,
  "resource_exposure": false,
  "undocumented_actions": false,
  "unknown_actions": [
    {
      "action": "sagemaker:*",
      "condition": null
    },
    {
      "action": "sagemaker-geospatial:*",
      "condition": null
    },
    {
      "action": "sagemaker:CreateUserProfile",
      "condition": null
    },
    {
      "action": "sagemaker:DescribeUserProfile",
      "condition": null
    },
    {
      "action": "sagemaker:UpdateUserProfile",
      "condition": null
    },
    {
      "action": "sagemaker:CreatePresignedDomainUrl",
      "condition": null
    },
    {
      "action": "lakeformation:GetDataAccess",
      "condition": null
    },
    {
      "action": "sagemaker:AddTags",
      "condition": {
        "StringEquals": {
          "sagemaker:TaggingAction": [
            "CreateApp",
            "CreateSpace"
          ]
        }
      }
    },
    {
      "action": "sagemaker:CreatePresignedDomainUrl",
      "condition": null
    },
    {
      "action": "sagemaker:DescribeApp",
      "condition": null
    },
    {
      "action": "sagemaker:DescribeDomain",
      "condition": null
    },
    {
      "action": "sagemaker:DescribeSpace",
      "condition": null
    },
    {
      "action": "sagemaker:DescribeUserProfile",
      "condition": null
    },
    {
      "action": "sagemaker:ListApps",
      "condition": null
    },
    {
      "action": "sagemaker:ListDomains",
      "condition": null
    },
    {
      "action": "sagemaker:ListSpaces",
      "condition": null
    },
    {
      "action": "sagemaker:ListUserProfiles",
      "condition": null
    },
    {
      "action": "sagemaker:CreateApp",
      "condition": {
        "Null": {
          "sagemaker:OwnerUserProfileArn": "true"
        }
      }
    },
    {
      "action": "sagemaker:DeleteApp",
      "condition": {
        "Null": {
          "sagemaker:OwnerUserProfileArn": "true"
        }
      }
    },
    {
      "action": "sagemaker:CreateApp",
      "condition": {
        "StringEquals": {
          "sagemaker:SpaceSharingType": [
            "Shared"
          ]
        }
      }
    },
    {
      "action": "sagemaker:DeleteApp",
      "condition": {
        "StringEquals": {
          "sagemaker:SpaceSharingType": [
            "Shared"
          ]
        }
      }
    },
    {
      "action": "sagemaker:CreateSpace",
      "condition": {
        "Null": {
          "sagemaker:OwnerUserProfileArn": "true"
        }
      }
    },
    {
      "action": "sagemaker:DeleteSpace",
      "condition": {
        "Null": {
          "sagemaker:OwnerUserProfileArn": "true"
        }
      }
    },
    {
      "action": "sagemaker:UpdateSpace",
      "condition": {
        "Null": {
          "sagemaker:OwnerUserProfileArn": "true"
        }
      }
    },
    {
      "action": "sagemaker:CreateSpace",
      "condition": {
        "ArnLike": {
          "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
        },
        "StringEquals": {
          "sagemaker:SpaceSharingType": [
            "Private",
            "Shared"
          ]
        }
      }
    },
    {
      "action": "sagemaker:DeleteSpace",
      "condition": {
        "ArnLike": {
          "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
        },
        "StringEquals": {
          "sagemaker:SpaceSharingType": [
            "Private",
            "Shared"
          ]
        }
      }
    },
    {
      "action": "sagemaker:UpdateSpace",
      "condition": {
        "ArnLike": {
          "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
        },
        "StringEquals": {
          "sagemaker:SpaceSharingType": [
            "Private",
            "Shared"
          ]
        }
      }
    },
    {
      "action": "sagemaker:CreateApp",
      "condition": {
        "ArnLike": {
          "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
        },
        "StringEquals": {
          "sagemaker:SpaceSharingType": [
            "Private"
          ]
        }
      }
    },
    {
      "action": "sagemaker:DeleteApp",
      "condition": {
        "ArnLike": {
          "sagemaker:OwnerUserProfileArn": "arn:aws:sagemaker:*:*:user-profile/${sagemaker:DomainId}/${sagemaker:UserProfileName}"
        },
        "StringEquals": {
          "sagemaker:SpaceSharingType": [
            "Private"
          ]
        }
      }
    },
    {
      "action": "sagemaker:*",
      "condition": {
        "StringEqualsIfExists": {
          "sagemaker:WorkteamType": [
            "private-crowd",
            "vendor-crowd"
          ]
        }
      }
    },
    {
      "action": "sqlworkbench:*",
      "condition": null
    },
    {
      "action": "datazone:*",
      "condition": null
    },
    {
      "action": "application-autoscaling:DeleteScalingPolicy",
      "condition": null
    },
    {
      "action": "application-autoscaling:DeleteScheduledAction",
      "condition": null
    },
    {
      "action": "application-autoscaling:DeregisterScalableTarget",
      "condition": null
    },
    {
      "action": "application-autoscaling:DescribeScalableTargets",
      "condition": null
    },
    {
      "action": "application-autoscaling:DescribeScalingActivities",
      "condition": null
    },
    {
      "action": "application-autoscaling:DescribeScalingPolicies",
      "condition": null
    },
    {
      "action": "application-autoscaling:DescribeScheduledActions",
      "condition": null
    },
    {
      "action": "application-autoscaling:PutScalingPolicy",
      "condition": null
    },
    {
      "action": "application-autoscaling:PutScheduledAction",
      "condition": null
    },
    {
      "action": "application-autoscaling:RegisterScalableTarget",
      "condition": null
    },
    {
      "action": "aws-marketplace:ViewSubscriptions",
      "condition": null
    },
    {
      "action": "cloudformation:GetTemplateSummary",
      "condition": null
    },
    {
      "action": "cloudwatch:DeleteAlarms",
      "condition": null
    },
    {
      "action": "cloudwatch:DescribeAlarms",
      "condition": null
    },
    {
      "action": "cloudwatch:GetMetricData",
      "condition": null
    },
    {
      "action": "cloudwatch:GetMetricStatistics",
      "condition": null
    },
    {
      "action": "cloudwatch:ListMetrics",
      "condition": null
    },
    {
      "action": "cloudwatch:PutMetricAlarm",
      "condition": null
    },
    {
      "action": "cloudwatch:PutMetricData",
      "condition": null
    },
    {
      "action": "codecommit:BatchGetRepositories",
      "condition": null
    },
    {
      "action": "codecommit:CreateRepository",
      "condition": null
    },
    {
      "action": "codecommit:GetRepository",
      "condition": null
    },
    {
      "action": "codecommit:List*",
      "condition": null
    },
    {
      "action": "ec2:CreateNetworkInterface",
      "condition": null
    },
    {
      "action": "ec2:CreateNetworkInterfacePermission",
      "condition": null
    },
    {
      "action": "ec2:DeleteNetworkInterface",
      "condition": null
    },
    {
      "action": "ec2:DeleteNetworkInterfacePermission",
      "condition": null
    },
    {
      "action": "ec2:DescribeDhcpOptions",
      "condition": null
    },
    {
      "action": "ec2:DescribeNetworkInterfaces",
      "condition": null
    },
    {
      "action": "ec2:DescribeRouteTables",
      "condition": null
    },
    {
      "action": "ec2:DescribeSecurityGroups",
      "condition": null
    },
    {
      "action": "ec2:DescribeSubnets",
      "condition": null
    },
    {
      "action": "ec2:DescribeVpcEndpoints",
      "condition": null
    },
    {
      "action": "ec2:DescribeVpcEndpointServices",
      "condition": null
    },
    {
      "action": "ec2:DescribeVpcs",
      "condition": null
    },
    {
      "action": "ecr:BatchCheckLayerAvailability",
      "condition": null
    },
    {
      "action": "ecr:BatchGetImage",
      "condition": null
    },
    {
      "action": "ecr:Describe*",
      "condition": null
    },
    {
      "action": "ecr:GetAuthorizationToken",
      "condition": null
    },
    {
      "action": "ecr:GetDownloadUrlForLayer",
      "condition": null
    },
    {
      "action": "ecr:StartImageScan",
      "condition": null
    },
    {
      "action": "elastic-inference:Connect",
      "condition": null
    },
    {
      "action": "elasticfilesystem:DescribeFileSystems",
      "condition": null
    },
    {
      "action": "elasticfilesystem:DescribeMountTargets",
      "condition": null
    },
    {
      "action": "fsx:DescribeFileSystems",
      "condition": null
    },
    {
      "action": "groundtruthlabeling:*",
      "condition": null
    },
    {
      "action": "iam:GetRole",
      "condition": null
    },
    {
      "action": "iam:ListRoles",
      "condition": null
    },
    {
      "action": "kms:DescribeKey",
      "condition": null
    },
    {
      "action": "kms:ListAliases",
      "condition": null
    },
    {
      "action": "lambda:ListFunctions",
      "condition": null
    },
    {
      "action": "logs:CreateLogDelivery",
      "condition": null
    },
    {
      "action": "logs:CreateLogGroup",
      "condition": null
    },
    {
      "action": "logs:CreateLogStream",
      "condition": null
    },
    {
      "action": "logs:DeleteLogDelivery",
      "condition": null
    },
    {
      "action": "logs:DescribeLogGroups",
      "condition": null
    },
    {
      "action": "logs:DescribeLogStreams",
      "condition": null
    },
    {
      "action": "logs:GetLogDelivery",
      "condition": null
    },
    {
      "action": "logs:GetLogEvents",
      "condition": null
    },
    {
      "action": "logs:ListLogDeliveries",
      "condition": null
    },
    {
      "action": "logs:PutLogEvents",
      "condition": null
    },
    {
      "action": "logs:UpdateLogDelivery",
      "condition": null
    },
    {
      "action": "redshift-data:BatchExecuteStatement",
      "condition": null
    },
    {
      "action": "redshift-data:CancelStatement",
      "condition": null
    },
    {
      "action": "redshift-data:DescribeStatement",
      "condition": null
    },
    {
      "action": "redshift-data:DescribeTable",
      "condition": null
    },
    {
      "action": "redshift-data:ExecuteStatement",
      "condition": null
    },
    {
      "action": "redshift-data:GetStatementResult",
      "condition": null
    },
    {
      "action": "redshift-data:ListSchemas",
      "condition": null
    },
    {
      "action": "redshift-data:ListTables",
      "condition": null
    },
    {
      "action": "redshift-serverless:GetCredentials",
      "condition": null
    },
    {
      "action": "redshift-serverless:GetNamespace",
      "condition": null
    },
    {
      "action": "redshift-serverless:GetWorkgroup",
      "condition": null
    },
    {
      "action": "redshift-serverless:ListNamespaces",
      "condition": null
    },
    {
      "action": "redshift-serverless:ListWorkgroups",
      "condition": null
    },
    {
      "action": "secretsmanager:ListSecrets",
      "condition": null
    },
    {
      "action": "servicecatalog:Describe*",
      "condition": null
    },
    {
      "action": "servicecatalog:List*",
      "condition": null
    },
    {
      "action": "servicecatalog:ScanProvisionedProducts",
      "condition": null
    },
    {
      "action": "servicecatalog:SearchProducts",
      "condition": null
    },
    {
      "action": "servicecatalog:SearchProvisionedProducts",
      "condition": null
    },
    {
      "action": "sns:ListTopics",
      "condition": null
    },
    {
      "action": "tag:GetResources",
      "condition": null
    },
    {
      "action": "ram:AcceptResourceShareInvitation",
      "condition": {
        "StringLike": {
          "ram:ResourceShareName": "dzd_*"
        }
      }
    },
    {
      "action": "ecr:SetRepositoryPolicy",
      "condition": null
    },
    {
      "action": "ecr:CompleteLayerUpload",
      "condition": null
    },
    {
      "action": "ecr:CreateRepository",
      "condition": null
    },
    {
      "action": "ecr:BatchDeleteImage",
      "condition": null
    },
    {
      "action": "ecr:UploadLayerPart",
      "condition": null
    },
    {
      "action": "ecr:DeleteRepositoryPolicy",
      "condition": null
    },
    {
      "action": "ecr:InitiateLayerUpload",
      "condition": null
    },
    {
      "action": "ecr:DeleteRepository",
      "condition": null
    },
    {
      "action": "ecr:PutImage",
      "condition": null
    },
    {
      "action": "ecr:TagResource",
      "condition": null
    },
    {
      "action": "ecr:UntagResource",
      "condition": null
    },
    {
      "action": "codecommit:GitPull",
      "condition": null
    },
    {
      "action": "codecommit:GitPush",
      "condition": null
    },
    {
      "action": "codebuild:BatchGetBuilds",
      "condition": null
    },
    {
      "action": "codebuild:StartBuild",
      "condition": null
    },
    {
      "action": "states:DescribeExecution",
      "condition": null
    },
    {
      "action": "states:GetExecutionHistory",
      "condition": null
    },
    {
      "action": "states:StartExecution",
      "condition": null
    },
    {
      "action": "states:StopExecution",
      "condition": null
    },
    {
      "action": "states:UpdateStateMachine",
      "condition": null
    },
    {
      "action": "secretsmanager:DescribeSecret",
      "condition": null
    },
    {
      "action": "secretsmanager:GetSecretValue",
      "condition": null
    },
    {
      "action": "secretsmanager:CreateSecret",
      "condition": null
    },
    {
      "action": "secretsmanager:PutResourcePolicy",
      "condition": null
    },
    {
      "action": "servicecatalog:ProvisionProduct",
      "condition": null
    },
    {
      "action": "servicecatalog:TerminateProvisionedProduct",
      "condition": {
        "StringEquals": {
          "servicecatalog:userLevel": "self"
        }
      }
    },
    {
      "action": "servicecatalog:UpdateProvisionedProduct",
      "condition": {
        "StringEquals": {
          "servicecatalog:userLevel": "self"
        }
      }
    },
    {
      "action": "s3:AbortMultipartUpload",
      "condition": null
    },
    {
      "action": "s3:DeleteObject",
      "condition": null
    },
    {
      "action": "s3:DeleteObjectVersion",
      "condition": null
    },
    {
      "action": "s3:GetObject",
      "condition": null
    },
    {
      "action": "s3:PutObject",
      "condition": null
    },
    {
      "action": "s3:PutObjectRetention",
      "condition": null
    },
    {
      "action": "s3:ReplicateObject",
      "condition": null
    },
    {
      "action": "s3:RestoreObject",
      "condition": null
    },
    {
      "action": "s3:GetBucketAcl",
      "condition": null
    },
    {
      "action": "s3:PutObjectAcl",
      "condition": null
    },
    {
      "action": "s3:GetObject",
      "condition": {
        "StringEqualsIgnoreCase": {
          "s3:ExistingObjectTag/SageMaker": "true"
        }
      }
    },
    {
      "action": "s3:GetObject",
      "condition": {
        "StringEquals": {
          "s3:ExistingObjectTag/servicecatalog:provisioning": "true"
        }
      }
    },
    {
      "action": "s3:GetBucketLocation",
      "condition": null
    },
    {
      "action": "s3:ListBucket",
      "condition": null
    },
    {
      "action": "s3:ListAllMyBuckets",
      "condition": null
    },
    {
      "action": "s3:GetBucketCors",
      "condition": null
    },
    {
      "action": "s3:PutBucketCors",
      "condition": null
    },
    {
      "action": "s3:GetObject",
      "condition": null
    },
    {
      "action": "lambda:InvokeFunction",
      "condition": null
    },
    {
      "action": "iam:CreateServiceLinkedRole",
      "condition": {
        "StringLike": {
          "iam:AWSServiceName": "sagemaker.application-autoscaling.amazonaws.com"
        }
      }
    },
    {
      "action": "sns:Subscribe",
      "condition": null
    },
    {
      "action": "sns:CreateTopic",
      "condition": null
    },
    {
      "action": "sns:Publish",
      "condition": null
    },
    {
      "action": "iam:PassRole",
      "condition": {
        "StringEquals": {
          "iam:PassedToService": [
            "glue.amazonaws.com",
            "bedrock.amazonaws.com",
            "states.amazonaws.com",
            "lakeformation.amazonaws.com",
            "events.amazonaws.com",
            "sagemaker.amazonaws.com",
            "forecast.amazonaws.com"
          ]
        }
      }
    },
    {
      "action": "kms:DescribeKey",
      "condition": {
        "StringNotEquals": {
          "aws:ResourceAccount": "${aws:PrincipalAccount}"
        }
      }
    },
    {
      "action": "kms:Decrypt",
      "condition": {
        "StringNotEquals": {
          "aws:ResourceAccount": "${aws:PrincipalAccount}"
        }
      }
    },
    {
      "action": "kms:ListKeys",
      "condition": {
        "StringNotEquals": {
          "aws:ResourceAccount": "${aws:PrincipalAccount}"
        }
      }
    },
    {
      "action": "kms:DescribeKey",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "kms:Decrypt",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "kms:ListKeys",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "kms:Encrypt",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "kms:GenerateDataKey",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "kms:RetireGrant",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "athena:BatchGetNamedQuery",
      "condition": null
    },
    {
      "action": "athena:BatchGetPreparedStatement",
      "condition": null
    },
    {
      "action": "athena:BatchGetQueryExecution",
      "condition": null
    },
    {
      "action": "athena:CreateNamedQuery",
      "condition": null
    },
    {
      "action": "athena:CreateNotebook",
      "condition": null
    },
    {
      "action": "athena:CreatePreparedStatement",
      "condition": null
    },
    {
      "action": "athena:CreatePresignedNotebookUrl",
      "condition": null
    },
    {
      "action": "athena:DeleteNamedQuery",
      "condition": null
    },
    {
      "action": "athena:DeleteNotebook",
      "condition": null
    },
    {
      "action": "athena:DeletePreparedStatement",
      "condition": null
    },
    {
      "action": "athena:ExportNotebook",
      "condition": null
    },
    {
      "action": "athena:GetDatabase",
      "condition": null
    },
    {
      "action": "athena:GetDataCatalog",
      "condition": null
    },
    {
      "action": "athena:GetNamedQuery",
      "condition": null
    },
    {
      "action": "athena:GetPreparedStatement",
      "condition": null
    },
    {
      "action": "athena:GetQueryExecution",
      "condition": null
    },
    {
      "action": "athena:GetQueryResults",
      "condition": null
    },
    {
      "action": "athena:GetQueryResultsStream",
      "condition": null
    },
    {
      "action": "athena:GetQueryRuntimeStatistics",
      "condition": null
    },
    {
      "action": "athena:GetTableMetadata",
      "condition": null
    },
    {
      "action": "athena:GetWorkGroup",
      "condition": null
    },
    {
      "action": "athena:ImportNotebook",
      "condition": null
    },
    {
      "action": "athena:ListDatabases",
      "condition": null
    },
    {
      "action": "athena:ListDataCatalogs",
      "condition": null
    },
    {
      "action": "athena:ListEngineVersions",
      "condition": null
    },
    {
      "action": "athena:ListNamedQueries",
      "condition": null
    },
    {
      "action": "athena:ListPreparedStatements",
      "condition": null
    },
    {
      "action": "athena:ListQueryExecutions",
      "condition": null
    },
    {
      "action": "athena:ListTableMetadata",
      "condition": null
    },
    {
      "action": "athena:ListTagsForResource",
      "condition": null
    },
    {
      "action": "athena:ListWorkGroups",
      "condition": null
    },
    {
      "action": "athena:StartCalculationExecution",
      "condition": null
    },
    {
      "action": "athena:StartQueryExecution",
      "condition": null
    },
    {
      "action": "athena:StartSession",
      "condition": null
    },
    {
      "action": "athena:StopCalculationExecution",
      "condition": null
    },
    {
      "action": "athena:StopQueryExecution",
      "condition": null
    },
    {
      "action": "athena:TerminateSession",
      "condition": null
    },
    {
      "action": "athena:UpdateNamedQuery",
      "condition": null
    },
    {
      "action": "athena:UpdateNotebook",
      "condition": null
    },
    {
      "action": "athena:UpdateNotebookMetadata",
      "condition": null
    },
    {
      "action": "athena:UpdatePreparedStatement",
      "condition": null
    },
    {
      "action": "glue:CreateDatabase",
      "condition": null
    },
    {
      "action": "redshift:GetClusterCredentials",
      "condition": null
    },
    {
      "action": "sagemaker:ListTags",
      "condition": null
    },
    {
      "action": "cloudformation:ListStackResources",
      "condition": null
    },
    {
      "action": "glue:GetColumnStatisticsForPartition",
      "condition": null
    },
    {
      "action": "glue:GetColumnStatisticsForTable",
      "condition": null
    },
    {
      "action": "glue:ListJobs",
      "condition": null
    },
    {
      "action": "glue:CreateSession",
      "condition": null
    },
    {
      "action": "glue:RunStatement",
      "condition": null
    },
    {
      "action": "glue:BatchCreatePartition",
      "condition": null
    },
    {
      "action": "glue:CreatePartitionIndex",
      "condition": null
    },
    {
      "action": "glue:CreateTable",
      "condition": null
    },
    {
      "action": "glue:BatchGetWorkflows",
      "condition": null
    },
    {
      "action": "glue:BatchUpdatePartition",
      "condition": null
    },
    {
      "action": "glue:BatchDeletePartition",
      "condition": null
    },
    {
      "action": "glue:GetPartition",
      "condition": null
    },
    {
      "action": "glue:GetPartitions",
      "condition": null
    },
    {
      "action": "glue:UpdateTable",
      "condition": null
    },
    {
      "action": "glue:DeleteTableVersion",
      "condition": null
    },
    {
      "action": "glue:DeleteTable",
      "condition": null
    },
    {
      "action": "glue:DeleteColumnStatisticsForPartition",
      "condition": null
    },
    {
      "action": "glue:DeleteColumnStatisticsForTable",
      "condition": null
    },
    {
      "action": "glue:DeletePartitionIndex",
      "condition": null
    },
    {
      "action": "glue:UpdateColumnStatisticsForPartition",
      "condition": null
    },
    {
      "action": "glue:UpdateColumnStatisticsForTable",
      "condition": null
    },
    {
      "action": "glue:BatchDeleteTableVersion",
      "condition": null
    },
    {
      "action": "glue:BatchDeleteTable",
      "condition": null
    },
    {
      "action": "glue:CreatePartition",
      "condition": null
    },
    {
      "action": "glue:DeletePartition",
      "condition": null
    },
    {
      "action": "glue:UpdatePartition",
      "condition": null
    },
    {
      "action": "glue:CreateBlueprint",
      "condition": null
    },
    {
      "action": "glue:CreateJob",
      "condition": null
    },
    {
      "action": "glue:CreateConnection",
      "condition": null
    },
    {
      "action": "glue:CreateCrawler",
      "condition": null
    },
    {
      "action": "glue:CreateDataQualityRuleset",
      "condition": null
    },
    {
      "action": "glue:CreateWorkflow",
      "condition": null
    },
    {
      "action": "glue:GetDatabases",
      "condition": null
    },
    {
      "action": "glue:GetTables",
      "condition": null
    },
    {
      "action": "glue:GetTable",
      "condition": null
    },
    {
      "action": "glue:SearchTables",
      "condition": null
    },
    {
      "action": "glue:NotifyEvent",
      "condition": null
    },
    {
      "action": "glue:ListSchemas",
      "condition": null
    },
    {
      "action": "glue:BatchGetJobs",
      "condition": null
    },
    {
      "action": "glue:GetConnection",
      "condition": null
    },
    {
      "action": "glue:GetDatabase",
      "condition": null
    },
    {
      "action": "glue:SearchTables",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:NotifyEvent",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:StartBlueprintRun",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:PutWorkflowRunProperties",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:StopCrawler",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:DeleteJob",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:DeleteWorkflow",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:UpdateCrawler",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:DeleteBlueprint",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:UpdateWorkflow",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:StartCrawler",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:ResetJobBookmark",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:UpdateJob",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:StartWorkflowRun",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:StopCrawlerSchedule",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:ResumeWorkflowRun",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:ListSchemas",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:DeleteCrawler",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:UpdateBlueprint",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:BatchStopJobRun",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:StopWorkflowRun",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:BatchGetJobs",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:BatchGetWorkflows",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:UpdateCrawlerSchedule",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:DeleteConnection",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:UpdateConnection",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:GetConnection",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:GetDatabase",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:GetTable",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:GetPartition",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:GetPartitions",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:BatchDeleteConnection",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:StartCrawlerSchedule",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:StartJobRun",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:CreateWorkflow",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:*DataQuality*",
      "condition": {
        "Null": {
          "aws:ResourceTag/AmazonDataZoneEnvironment": "false"
        }
      }
    },
    {
      "action": "glue:BatchGet*",
      "condition": null
    },
    {
      "action": "glue:Get*",
      "condition": null
    },
    {
      "action": "glue:SearchTables",
      "condition": null
    },
    {
      "action": "glue:List*",
      "condition": null
    },
    {
      "action": "glue:RunStatement",
      "condition": null
    },
    {
      "action": "redshift:GetClusterCredentialsWithIAM",
      "condition": null
    },
    {
      "action": "redshift:DescribeClusters",
      "condition": null
    },
    {
      "action": "redshift:CreateClusterUser",
      "condition": null
    },
    {
      "action": "secretsmanager:CreateSecret",
      "condition": {
        "ForAllValues:StringEquals": {
          "aws:TagKeys": [
            "AmazonDataZoneDomain",
            "AmazonDataZoneProject"
          ]
        },
        "Null": {
          "aws:RequestTag/AmazonDataZoneDomain": "false",
          "aws:RequestTag/AmazonDataZoneProject": "false",
          "aws:ResourceTag/AmazonDataZoneDomain": "false",
          "aws:ResourceTag/AmazonDataZoneProject": "false",
          "aws:TagKeys": "false"
        },
        "StringLike": {
          "aws:RequestTag/AmazonDataZoneDomain": "dzd_*",
          "aws:ResourceTag/AmazonDataZoneDomain": "dzd_*"
        }
      }
    },
    {
      "action": "secretsmanager:TagResource",
      "condition": {
        "ForAllValues:StringEquals": {
          "aws:TagKeys": [
            "AmazonDataZoneDomain",
            "AmazonDataZoneProject"
          ]
        },
        "Null": {
          "aws:RequestTag/AmazonDataZoneDomain": "false",
          "aws:RequestTag/AmazonDataZoneProject": "false",
          "aws:ResourceTag/AmazonDataZoneDomain": "false",
          "aws:ResourceTag/AmazonDataZoneProject": "false",
          "aws:TagKeys": "false"
        },
        "StringLike": {
          "aws:RequestTag/AmazonDataZoneDomain": "dzd_*",
          "aws:ResourceTag/AmazonDataZoneDomain": "dzd_*"
        }
      }
    },
    {
      "action": "forecast:CreateExplainabilityExport",
      "condition": null
    },
    {
      "action": "forecast:CreateExplainability",
      "condition": null
    },
    {
      "action": "forecast:CreateForecastEndpoint",
      "condition": null
    },
    {
      "action": "forecast:CreateAutoPredictor",
      "condition": null
    },
    {
      "action": "forecast:CreateDatasetImportJob",
      "condition": null
    },
    {
      "action": "forecast:CreateDatasetGroup",
      "condition": null
    },
    {
      "action": "forecast:CreateDataset",
      "condition": null
    },
    {
      "action": "forecast:CreateForecast",
      "condition": null
    },
    {
      "action": "forecast:CreateForecastExportJob",
      "condition": null
    },
    {
      "action": "forecast:CreatePredictorBacktestExportJob",
      "condition": null
    },
    {
      "action": "forecast:CreatePredictor",
      "condition": null
    },
    {
      "action": "forecast:DescribeExplainabilityExport",
      "condition": null
    },
    {
      "action": "forecast:DescribeExplainability",
      "condition": null
    },
    {
      "action": "forecast:DescribeAutoPredictor",
      "condition": null
    },
    {
      "action": "forecast:DescribeForecastEndpoint",
      "condition": null
    },
    {
      "action": "forecast:DescribeDatasetImportJob",
      "condition": null
    },
    {
      "action": "forecast:DescribeDataset",
      "condition": null
    },
    {
      "action": "forecast:DescribeForecast",
      "condition": null
    },
    {
      "action": "forecast:DescribeForecastExportJob",
      "condition": null
    },
    {
      "action": "forecast:DescribePredictorBacktestExportJob",
      "condition": null
    },
    {
      "action": "forecast:GetAccuracyMetrics",
      "condition": null
    },
    {
      "action": "forecast:InvokeForecastEndpoint",
      "condition": null
    },
    {
      "action": "forecast:GetRecentForecastContext",
      "condition": null
    },
    {
      "action": "forecast:DescribePredictor",
      "condition": null
    },
    {
      "action": "forecast:TagResource",
      "condition": null
    },
    {
      "action": "forecast:DeleteResourceTree",
      "condition": null
    },
    {
      "action": "rds:DescribeDBInstances",
      "condition": null
    },
    {
      "action": "events:PutRule",
      "condition": {
        "StringEquals": {
          "aws:RequestTag/sagemaker:is-canvas-data-prep-job": "true"
        }
      }
    },
    {
      "action": "events:DescribeRule",
      "condition": {
        "StringEquals": {
          "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
        }
      }
    },
    {
      "action": "events:PutTargets",
      "condition": {
        "StringEquals": {
          "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
        }
      }
    },
    {
      "action": "events:TagResource",
      "condition": {
        "StringEquals": {
          "aws:RequestTag/sagemaker:is-canvas-data-prep-job": "true",
          "aws:ResourceTag/sagemaker:is-canvas-data-prep-job": "true"
        }
      }
    },
    {
      "action": "events:ListTagsForResource",
      "condition": null
    },
    {
      "action": "elasticmapreduce:DescribeCluster",
      "condition": null
    },
    {
      "action": "elasticmapreduce:ListInstanceGroups",
      "condition": null
    },
    {
      "action": "elasticmapreduce:ListClusters",
      "condition": null
    },
    {
      "action": "sso:CreateApplicationAssignment",
      "condition": null
    },
    {
      "action": "sso:AssociateProfile",
      "condition": null
    }
  ],
  "updatedate": "2024-05-08T02:03:49+00:00",
  "version": "v4"
}